{"version":3,"file":"418.e0996f561b040186.js","mappings":"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","sources":["webpack:///./src/app/Context/GraphContext.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/CharSelectButton.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/FormulaModal.tsx","webpack:///./src/app/Components/ExpandButton.tsx","webpack:///./src/app/Components/StatInput.tsx","webpack:///./src/app/Components/EnemyEditor.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/StatModal.tsx","webpack:///./src/app/Context/OptimizationTargetContext.tsx","webpack:///./src/app/Solver/common.ts","webpack:///../../libs/util/src/lib/queue.ts","webpack:///./src/app/Solver/coordinator.ts","webpack:///./src/app/Solver/GOSolver/GOSolver.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/useBuildSetting.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/AllowChar.tsx","webpack:///./src/app/Components/Artifact/SetEffectDisplay.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ArtifactSetConfig.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/AssumeFullLevelToggle.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BonusStatsCard.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BuildAlert.tsx","webpack:///./src/app/Components/Character/LocationIcon.tsx","webpack:///./src/app/Components/StatDisplay.tsx","webpack:///./src/app/Components/Artifact/ArtifactCardNano.tsx","webpack:///./src/app/Components/Character/StatDisplayComponent.tsx","webpack:///./src/app/Components/Weapon/WeaponCardNano.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ArtifactSetBadges.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BuildDisplayItem.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/useBuildResult.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/CustomDot.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/CustomTooltip.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/EnhancedPoint.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/index.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ExcludeArt.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/MainStatSelectionCard.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/OptimizationTargetEditorList.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/StatFilterCard.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/foreground.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/index.tsx","webpack:///./src/app/ReactHooks/useGlobalError.tsx","webpack:///../../libs/char-cards/src/index.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/CompareBuildButton.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/ArtifactSwapModal.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/WeaponSwapModal.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/EquipmentSection.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/index.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTalent.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTeambuffs.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTheorycraft/index.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTheorycraft/useCharTC.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/TravelerElementSelect.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/TravelerGenderSelect.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/index.tsx"],"sourcesContent":["import { createContext } from 'react'\nimport type { NumNode } from '../Formula/type'\nimport type { Build } from '../Solver/common'\n\nexport type ChartData = {\n  valueNode: NumNode\n  plotNode: NumNode\n  data: Build[]\n}\nexport type GraphContextObj = {\n  chartData?: ChartData\n  setChartData: (data: ChartData | undefined) => void\n  graphBuilds: string[][] | undefined\n  setGraphBuilds: (builds: string[][] | undefined) => void\n}\nexport const GraphContext = createContext({} as GraphContextObj)\n","import { Button } from '@mui/material'\nimport React, { Suspense, useContext, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport CharIconSide from '../../Components/Image/CharIconSide'\nimport { CharacterContext } from '../../Context/CharacterContext'\nimport useCharSelectionCallback from '../../ReactHooks/useCharSelectionCallback'\n\nconst CharacterSelectionModal = React.lazy(\n  () => import('../CharacterSelectionModal')\n)\n\nexport default function CharSelectButton() {\n  const { t } = useTranslation('page_character')\n  const {\n    characterSheet,\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const [showModal, setshowModal] = useState(false)\n  const setCharacter = useCharSelectionCallback()\n  return (\n    <>\n      <Suspense fallback={false}>\n        <CharacterSelectionModal\n          show={showModal}\n          onHide={() => setshowModal(false)}\n          onSelect={setCharacter}\n        />\n      </Suspense>\n      <Button\n        color=\"info\"\n        onClick={() => setshowModal(true)}\n        startIcon={<CharIconSide characterKey={characterKey} />}\n      >\n        {characterSheet?.name ?? t('selectCharacter')}\n      </Button>\n    </>\n  )\n}\n","import { ExpandMore } from '@mui/icons-material'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  CardContent,\n  CardHeader,\n  Divider,\n  Skeleton,\n  Typography,\n} from '@mui/material'\nimport type { MutableRefObject } from 'react'\nimport {\n  Suspense,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport AmpReactionModeText from '../../Components/AmpReactionModeText'\nimport CardDark from '../../Components/Card/CardDark'\nimport CardHeaderCustom from '../../Components/Card/CardHeaderCustom'\nimport CardLight from '../../Components/Card/CardLight'\nimport CloseButton from '../../Components/CloseButton'\nimport ColorText from '../../Components/ColoredText'\nimport ImgIcon from '../../Components/Image/ImgIcon'\nimport ModalWrapper from '../../Components/ModalWrapper'\nimport SqBadge from '../../Components/SqBadge'\nimport { DataContext } from '../../Context/DataContext'\nimport { FormulaDataContext } from '../../Context/FormulaDataContext'\nimport { DatabaseContext } from '../../Database/Database'\nimport { getDisplayHeader, getDisplaySections } from '../../Formula/DisplayUtil'\nimport type { DisplaySub } from '../../Formula/type'\nimport type { NodeDisplay } from '../../Formula/uiData'\nimport { nodeVStr } from '../../Formula/uiData'\nimport type { AmpReactionKey } from '../../Types/consts'\nimport { allAmpReactions } from '../../Types/consts'\n\nexport default function FormulaModal() {\n  const { modalOpen } = useContext(FormulaDataContext)\n  const { setFormulaData } = useContext(FormulaDataContext)\n  const onCloseHandler = useCallback(\n    () => setFormulaData?.(undefined, undefined),\n    [setFormulaData]\n  )\n  return (\n    <ModalWrapper open={!!modalOpen} onClose={onCloseHandler}>\n      <CardDark>\n        <CardHeader\n          title=\"Formulas & Calculations\"\n          action={<CloseButton onClick={onCloseHandler} />}\n        />\n        <CardContent sx={{ pt: 0 }}>\n          <CalculationDisplay />\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  )\n}\n\nfunction CalculationDisplay() {\n  const { data } = useContext(DataContext)\n  const { data: contextData } = useContext(FormulaDataContext)\n  const sections = getDisplaySections(contextData ?? data)\n  return (\n    <Suspense\n      fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}\n    >\n      <Box sx={{ mr: -1, mb: -1 }}>\n        {sections.map(([key, Nodes]) => (\n          <FormulaCalc key={key} displayNs={Nodes} sectionKey={key} />\n        ))}\n      </Box>\n    </Suspense>\n  )\n}\nfunction FormulaCalc({\n  sectionKey,\n  displayNs,\n}: {\n  displayNs: DisplaySub<NodeDisplay>\n  sectionKey: string\n}) {\n  const { data } = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const { data: contextData } = useContext(FormulaDataContext)\n  const header = useMemo(\n    () => getDisplayHeader(contextData ?? data, sectionKey, database),\n    [database, contextData, data, sectionKey]\n  )\n  if (!header) return null\n  if (Object.entries(displayNs).every(([_, node]) => node.isEmpty)) return null\n  const { title, icon, action } = header\n  return (\n    <CardLight sx={{ mb: 1 }}>\n      <CardHeaderCustom\n        avatar={icon && <ImgIcon size={2} src={icon} />}\n        title={title}\n        action={action && <SqBadge>{action}</SqBadge>}\n      />\n      <Divider />\n      <CardContent>\n        {Object.entries(displayNs).map(\n          ([key, node]) =>\n            !node.isEmpty && <FormulaAccordian key={key} node={node} />\n        )}\n      </CardContent>\n    </CardLight>\n  )\n}\nfunction FormulaAccordian({ node }: { node: NodeDisplay }) {\n  const { node: contextNode } = useContext(FormulaDataContext)\n  const [expanded, setExpanded] = useState(false)\n  const handleChange = useCallback(\n    (e: React.SyntheticEvent, isExpanded: boolean) => setExpanded(isExpanded),\n    []\n  )\n  const scrollRef =\n    useRef<HTMLDivElement>() as MutableRefObject<HTMLDivElement | null>\n\n  useEffect(() => {\n    if (node === contextNode)\n      setTimeout(\n        () => scrollRef?.current?.scrollIntoView?.({ behavior: 'smooth' }),\n        300\n      )\n  }, [scrollRef, node, contextNode])\n\n  return (\n    <Accordion\n      sx={{ bgcolor: 'contentDark.main' }}\n      expanded={node === contextNode || expanded}\n      onChange={handleChange}\n      ref={scrollRef}\n    >\n      <AccordionSummary expandIcon={<ExpandMore />}>\n        <Typography>\n          <ColorText color={node.info.variant}>{node.info.name}</ColorText>{' '}\n          <strong>{nodeVStr(node)}</strong>\n        </Typography>\n        {allAmpReactions.includes(node.info.variant as 'vaporize' | 'melt') && (\n          <Box sx={{ display: 'inline-block', ml: 'auto', mr: 2 }}>\n            <AmpReactionModeText\n              reaction={node.info.variant as AmpReactionKey}\n              trigger={\n                node.info.subVariant as 'cryo' | 'pyro' | 'hydro' | undefined\n              }\n            />\n          </Box>\n        )}\n      </AccordionSummary>\n      <AccordionDetails>\n        {node.formulas.map((subform, i) => (\n          <Typography key={i} component=\"div\">\n            {subform}\n          </Typography>\n        ))}\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import type { IconButtonProps } from '@mui/material'\nimport { IconButton, styled } from '@mui/material'\n\ninterface ExpandMoreProps extends IconButtonProps {\n  expand: boolean\n}\nconst ExpandButton = styled((props: ExpandMoreProps) => {\n  const { expand, ...other } = props\n  return <IconButton {...other} />\n})(({ theme, expand }) => ({\n  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n  marginLeft: 'auto',\n  transition: (theme as any).transitions.create('transform', {\n    duration: (theme as any).transitions.duration.shortest,\n  }),\n}))\n\nexport default ExpandButton\n","import { Replay } from '@mui/icons-material'\nimport type { ButtonGroupProps } from '@mui/material'\nimport { Button, ButtonGroup, styled } from '@mui/material'\nimport type { ReactNode } from 'react'\nimport CustomNumberInput, {\n  CustomNumberInputButtonGroupWrapper,\n} from './CustomNumberInput'\nimport TextButton from './TextButton'\n\ntype StatInputInput = ButtonGroupProps & {\n  name: Displayable\n  children?: ReactNode\n  value: number\n  placeholder?: string\n  defaultValue?: number\n  onValueChange: (newValue: number | undefined) => void\n  percent?: boolean\n  disabled?: boolean\n  onReset?: () => void\n}\nconst FlexButtonGroup = styled(ButtonGroup)({\n  display: 'flex',\n})\n\nexport default function StatInput({\n  name,\n  children,\n  value,\n  placeholder,\n  defaultValue = 0,\n  onValueChange,\n  percent = false,\n  disabled = false,\n  onReset,\n  ...restProps\n}: StatInputInput) {\n  return (\n    <FlexButtonGroup {...restProps}>\n      {children}\n      <TextButton sx={{ px: 1 }}>{name}</TextButton>\n      <CustomNumberInputButtonGroupWrapper\n        sx={{ flexBasis: '10em', flexGrow: 1 }}\n      >\n        <CustomNumberInput\n          sx={{ px: 1 }}\n          inputProps={{\n            sx: { textAlign: 'right' },\n          }}\n          float={percent}\n          placeholder={placeholder}\n          value={value}\n          onChange={onValueChange}\n          disabled={disabled}\n          endAdornment={percent ? '%' : undefined}\n        />\n      </CustomNumberInputButtonGroupWrapper>\n      <Button\n        sx={{ flexShrink: 2 }}\n        size=\"small\"\n        color=\"error\"\n        onClick={() => (onReset ? onReset() : onValueChange(defaultValue))}\n        disabled={disabled || value === defaultValue}\n      >\n        <Replay />\n      </Button>\n    </FlexButtonGroup>\n  )\n}\n","import type { ElementWithPhyKey } from '@genshin-optimizer/consts'\nimport { allElementWithPhyKeys } from '@genshin-optimizer/consts'\nimport {\n  CheckBox,\n  CheckBoxOutlineBlank,\n  ExpandMore,\n  Replay,\n} from '@mui/icons-material'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Chip,\n  Collapse,\n  Grid,\n  Typography,\n} from '@mui/material'\nimport { useCallback, useContext, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { CharacterContext } from '../Context/CharacterContext'\nimport { DataContext } from '../Context/DataContext'\nimport { uiInput as input } from '../Formula'\nimport { nodeVStr } from '../Formula/uiData'\nimport KeyMap from '../KeyMap'\nimport { ElementIcon } from '../KeyMap/StatIcon'\nimport { iconInlineProps } from '../SVGIcons'\nimport CardLight from './Card/CardLight'\nimport ColorText from './ColoredText'\nimport ExpandButton from './ExpandButton'\nimport StatInput from './StatInput'\n\nexport function EnemyExpandCard() {\n  const { t } = useTranslation('ui')\n  const { characterDispatch } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const [expanded, setexpanded] = useState(false)\n  const toggle = useCallback(\n    () => setexpanded(!expanded),\n    [setexpanded, expanded]\n  )\n  const eLvlNode = data.get(input.enemy.level)\n  const eDefRed = data.get(input.enemy.defRed)\n  const eDefIgn = data.get(input.enemy.defIgn)\n  const onReset = useCallback(\n    () => characterDispatch({ enemyOverride: {} }),\n    [characterDispatch]\n  )\n\n  return (\n    <CardLight>\n      <CardContent\n        sx={{ display: 'flex', gap: 1, alignItems: 'center', flexWrap: 'wrap' }}\n      >\n        <Chip\n          size=\"small\"\n          color=\"success\"\n          label={\n            <span>\n              {eLvlNode.info.name} <strong>{eLvlNode.value}</strong>\n            </span>\n          }\n        />\n        {allElementWithPhyKeys.map((element) => (\n          <Typography key={element}>\n            <EnemyResText element={element} />\n          </Typography>\n        ))}\n        <Typography>DEF Red. {nodeVStr(eDefRed)}</Typography>\n        <Typography>DEF Ignore {nodeVStr(eDefIgn)}</Typography>\n        <Box flexGrow={1} display=\"flex\" justifyContent=\"flex-end\" gap={1}>\n          <Button\n            size=\"small\"\n            color=\"error\"\n            onClick={onReset}\n            startIcon={<Replay />}\n          >{t`reset`}</Button>\n          <ExpandButton\n            expand={expanded}\n            onClick={toggle}\n            aria-expanded={expanded}\n            aria-label=\"show more\"\n            size=\"small\"\n            sx={{ marginLeft: 0 }}\n          >\n            <ExpandMore />\n          </ExpandButton>\n        </Box>\n      </CardContent>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent sx={{ pt: 0 }}>\n          <EnemyEditor />\n        </CardContent>\n      </Collapse>\n    </CardLight>\n  )\n}\n\nexport function EnemyResText({ element }: { element: ElementWithPhyKey }) {\n  const { data } = useContext(DataContext)\n  const node = data.get(input.enemy[`${element}_res_`])\n  const immune = !isFinite(node.value)\n  const icon = <ElementIcon ele={element} iconProps={iconInlineProps} />\n  const content = immune ? (\n    <span>{icon} &#8734;</span>\n  ) : (\n    <span>\n      {icon} <strong>{nodeVStr(node)}</strong>\n    </span>\n  )\n  return <ColorText color={element}>{content}</ColorText>\n}\n\nexport function EnemyEditor({\n  bsProps = { xs: 12, md: 6 },\n}: {\n  bsProps?: object\n}) {\n  const {\n    character: { enemyOverride },\n    characterDispatch,\n  } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const defaultVal = 10\n\n  const eLvl = enemyOverride.enemyLevel ?? data.get(input.lvl).value\n  const eDefRed = enemyOverride.enemyDefIgn_ ?? 0\n  const eDefIgn = enemyOverride.enemyDefRed_ ?? 0\n  return (\n    <Grid container spacing={1}>\n      <Grid item {...bsProps}>\n        <Button\n          fullWidth\n          sx={{ height: '100%' }}\n          size=\"small\"\n          component=\"a\"\n          color=\"warning\"\n          href=\"https://genshin-impact.fandom.com/wiki/Resistance#Base_Enemy_Resistances\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          To get the specific resistance values of enemies, please visit the\n          wiki.\n        </Button>\n      </Grid>\n      <Grid item {...bsProps}>\n        <StatInput\n          sx={{ bgcolor: (t) => t.palette.contentLight.main, width: '100%' }}\n          name={<b>{KeyMap.get('enemyLevel')}</b>}\n          value={eLvl}\n          placeholder={KeyMap.getStr('enemyLevel')}\n          defaultValue={data.get(input.lvl).value}\n          onValueChange={(value) =>\n            characterDispatch({\n              type: 'enemyOverride',\n              statKey: 'enemyLevel',\n              value,\n            })\n          }\n          onReset={() =>\n            characterDispatch({\n              type: 'enemyOverride',\n              statKey: 'enemyLevel',\n              value: undefined,\n            })\n          }\n        />\n      </Grid>\n      {allElementWithPhyKeys.map((eleKey) => {\n        const statKey = `${eleKey}_enemyRes_`\n        const val = enemyOverride[statKey]\n        const elementImmunity = val === Number.MAX_VALUE\n        return (\n          <Grid item key={eleKey} {...bsProps}>\n            <StatInput\n              sx={{\n                bgcolor: (t) => t.palette.contentLight.main,\n                width: '100%',\n              }}\n              name={\n                <ColorText color={eleKey}>\n                  <b>{KeyMap.get(statKey)}</b>\n                </ColorText>\n              }\n              value={\n                val !== undefined ? (elementImmunity ? Infinity : val) : 10\n              }\n              placeholder={elementImmunity ? '∞ ' : KeyMap.getStr(statKey)}\n              defaultValue={defaultVal}\n              onValueChange={(value) =>\n                characterDispatch({ type: 'enemyOverride', statKey, value })\n              }\n              disabled={elementImmunity}\n              percent\n            >\n              <Button\n                color={eleKey}\n                onClick={() =>\n                  characterDispatch({\n                    type: 'enemyOverride',\n                    statKey,\n                    value: elementImmunity ? defaultVal : Number.MAX_VALUE,\n                  })\n                }\n                startIcon={\n                  elementImmunity ? <CheckBox /> : <CheckBoxOutlineBlank />\n                }\n              >\n                Immunity\n              </Button>\n            </StatInput>\n          </Grid>\n        )\n      })}\n      <Grid item {...bsProps}>\n        <StatInput\n          sx={{ bgcolor: (t) => t.palette.contentLight.main, width: '100%' }}\n          name={<b>{KeyMap.get('enemyDefIgn_')}</b>}\n          value={eDefRed}\n          placeholder={KeyMap.getStr('enemyDefIgn_')}\n          defaultValue={0}\n          onValueChange={(value) =>\n            characterDispatch({\n              type: 'enemyOverride',\n              statKey: 'enemyDefIgn_',\n              value,\n            })\n          }\n          percent\n        />\n      </Grid>\n      <Grid item {...bsProps}>\n        <StatInput\n          sx={{ bgcolor: (t) => t.palette.contentLight.main, width: '100%' }}\n          name={<b>{KeyMap.get('enemyDefRed_')}</b>}\n          value={eDefIgn}\n          placeholder={KeyMap.getStr('enemyDefRed_')}\n          defaultValue={0}\n          onValueChange={(value) =>\n            characterDispatch({\n              type: 'enemyOverride',\n              statKey: 'enemyDefRed_',\n              value,\n            })\n          }\n          percent\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <small>\n          Note: Genshin Impact halves resistance shred values below 0%. For the\n          sake of calculations enter the RAW value and GO will do the rest.\n          (e.g. 10% - 20% = -10%)\n        </small>\n      </Grid>\n    </Grid>\n  )\n}\n","import {\n  CardContent,\n  CardHeader,\n  Grid,\n  ListItem,\n  Stack,\n  Typography,\n  Box,\n  Alert,\n} from '@mui/material'\nimport { useCallback, useContext, useMemo } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport CardDark from '../../Components/Card/CardDark'\nimport CardLight from '../../Components/Card/CardLight'\nimport CloseButton from '../../Components/CloseButton'\nimport ColorText from '../../Components/ColoredText'\nimport { EnemyExpandCard } from '../../Components/EnemyEditor'\nimport {\n  FieldDisplayList,\n  NodeFieldDisplay,\n} from '../../Components/FieldDisplay'\nimport ModalWrapper from '../../Components/ModalWrapper'\nimport StatEditorList from '../../Components/StatEditorList'\nimport { CharacterContext } from '../../Context/CharacterContext'\nimport { DataContext } from '../../Context/DataContext'\nimport { allInputPremodKeys, uiInput as input } from '../../Formula'\nimport type { ReadNode } from '../../Formula/type'\nimport { nodeVStr } from '../../Formula/uiData'\nimport { allEleDmgKeys, allEleResKeys } from '../../KeyMap'\n\nconst cols = {\n  xs: 1,\n  md: 2,\n  lg: 3,\n}\n\nexport default function StatModal({ open, onClose }) {\n  const { t } = useTranslation('page_character')\n  return (\n    <ModalWrapper open={open} onClose={onClose}>\n      <CardDark>\n        <CardHeader\n          title={t`addStats.title`}\n          action={<CloseButton onClick={onClose} />}\n        />\n        <CardContent sx={{ pt: 0 }}>\n          <Stack spacing={1}>\n            <BonusStatsEditor />\n            <EnemyExpandCard />\n            <MainStatsCards />\n          </Stack>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  )\n}\nconst keys = [...allInputPremodKeys]\nconst wrapperFunc = (e: JSX.Element, key?: string) => (\n  <Grid item key={key} xs={1}>\n    {e}\n  </Grid>\n)\nfunction BonusStatsEditor() {\n  const { t } = useTranslation('page_character')\n  const {\n    character: { bonusStats },\n    characterDispatch,\n  } = useContext(CharacterContext)\n  const setFilter = useCallback(\n    (bonusStats) => characterDispatch({ bonusStats }),\n    [characterDispatch]\n  )\n  return (\n    <CardLight>\n      <CardContent sx={{ display: 'flex' }}>\n        <Grid container columns={cols} sx={{ pt: 1 }} spacing={1}>\n          <Grid item xs={12}>\n            <Alert severity=\"info\" variant=\"filled\">\n              <Trans i18nKey={'addStats.info'} t={t}>\n                You can use these fields to add buffs/debuffs not directly\n                supported in GO, such as food buffs, abyss cards, or\n                Superconduct. Please refer to the{' '}\n                <a href=\"https://genshin-impact.fandom.com/wiki/Genshin_Impact_Wiki\">\n                  Genshin Impact wiki\n                </a>{' '}\n                for specific values.\n              </Trans>\n            </Alert>\n          </Grid>\n          <StatEditorList\n            statKeys={keys}\n            statFilters={bonusStats}\n            setStatFilters={setFilter}\n            wrapperFunc={wrapperFunc}\n          />\n        </Grid>\n      </CardContent>\n    </CardLight>\n  )\n}\n\nconst mainBaseKeys = ['hp', 'atk', 'def'] as const\nconst mainSubKeys = [\n  'eleMas',\n  'critRate_',\n  'critDMG_',\n  'enerRech_',\n  'heal_',\n] as const\nconst mainReadNodes = [...mainBaseKeys, ...mainSubKeys].map(\n  (k) => input.total[k]\n)\nconst mainEditKeys = [\n  'atk_',\n  'atk',\n  'hp_',\n  'hp',\n  'def_',\n  'def',\n  ...mainSubKeys,\n] as const\n\nconst otherStatKeys = [\n  ...allEleDmgKeys,\n  ...allEleResKeys,\n  'stamina',\n  'incHeal_',\n  'shield_',\n  'cdRed_',\n] as const\n\nconst miscStatkeys = allInputPremodKeys.filter(\n  (k) =>\n    !(mainEditKeys as readonly string[]).includes(k) &&\n    !(otherStatKeys as readonly string[]).includes(k)\n)\n\nfunction StatDisplayContent({\n  nodes,\n  extra,\n}: {\n  nodes: ReadNode<number>[]\n  extra?: Displayable\n}) {\n  const { data, oldData } = useContext(DataContext)\n  return (\n    <FieldDisplayList>\n      {nodes.map((rn) => (\n        <NodeFieldDisplay\n          component={ListItem}\n          key={JSON.stringify(rn.info)}\n          node={data.get(rn)}\n          oldValue={oldData?.get(rn)?.value}\n        />\n      ))}\n      {extra}\n    </FieldDisplayList>\n  )\n}\n\nfunction MainStatsCards() {\n  const { characterSheet } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const specialNode = data.get(input.special)\n  const charEle = characterSheet.elementKey\n  const isMelee = characterSheet.isMelee()\n\n  const otherStatReadNodes = useMemo(() => {\n    const nodes = otherStatKeys\n      .filter((k) => {\n        if (k.includes(charEle)) return false\n        if (isMelee && k.includes('physical')) return true\n        return true\n      })\n      .map((k) => input.total[k])\n\n    return nodes.filter((n) => !!data.get(n).value)\n  }, [data, charEle, isMelee])\n\n  const miscStatReadNodes = useMemo(\n    () =>\n      miscStatkeys.map((k) => input.total[k]).filter((n) => data.get(n).value),\n    [data]\n  )\n\n  return (\n    <CardLight>\n      <CardContent>\n        <Grid container columns={cols} spacing={1}>\n          <Grid item xs={1}>\n            <StatDisplayCard title=\"Main Stats\">\n              <StatDisplayContent\n                nodes={mainReadNodes}\n                extra={\n                  specialNode && (\n                    <ListItem\n                      sx={{ display: 'flex', justifyContent: 'space-between' }}\n                    >\n                      <span>\n                        <b>Special:</b>{' '}\n                        <ColorText color={specialNode.info.variant}>\n                          {specialNode.info.icon} {specialNode.info.name}\n                        </ColorText>\n                      </span>\n                      <span>{nodeVStr(specialNode)}</span>\n                    </ListItem>\n                  )\n                }\n              />\n            </StatDisplayCard>\n          </Grid>\n          <Grid item xs={1}>\n            <StatDisplayCard title=\"Other Stats\">\n              <StatDisplayContent nodes={otherStatReadNodes} />\n            </StatDisplayCard>\n          </Grid>\n          {!!miscStatReadNodes.length && (\n            <Grid item xs={1}>\n              <StatDisplayCard title=\"Misc Stats\">\n                <StatDisplayContent nodes={miscStatReadNodes} />\n              </StatDisplayCard>\n            </Grid>\n          )}\n        </Grid>\n      </CardContent>\n    </CardLight>\n  )\n}\nfunction StatDisplayCard({ title, children }) {\n  return (\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          <Typography variant=\"subtitle1\">{title}</Typography>\n        </Box>\n      </CardContent>\n      {children}\n    </CardDark>\n  )\n}\n","import { createContext } from 'react'\n\nexport const OptimizationTargetContext = createContext(\n  undefined as string[] | undefined\n)\n","import {\n  type ArtifactSetKey,\n  type ArtifactSlotKey,\n  allArtifactSlotKeys,\n} from '@genshin-optimizer/consts'\nimport type { ArtSetExclusion } from '../Database/DataManagers/BuildSettingData'\nimport { forEachNodes, mapFormulas } from '../Formula/internal'\nimport type { OptNode } from '../Formula/optimization'\nimport { allOperations, constantFold } from '../Formula/optimization'\nimport type { ConstantNode } from '../Formula/type'\nimport { constant, dynRead, max, min, sum, threshold } from '../Formula/utils'\nimport { assertUnreachable, objectKeyMap, objectMap, range } from '../Util/Util'\n\ntype MicropassOperation =\n  | 'reaffine'\n  | 'pruneArtRange'\n  | 'pruneNodeRange'\n  | 'pruneOrder'\nexport function pruneAll(\n  nodes: OptNode[],\n  minimum: number[],\n  arts: ArtifactsBySlot,\n  numTop: number,\n  exclusion: ArtSetExclusion,\n  forced: Dict<MicropassOperation, boolean>\n): { nodes: OptNode[]; arts: ArtifactsBySlot } {\n  let should = forced\n  /** If `key` makes progress, all operations in `value` should be performed */\n  const deps: StrictDict<MicropassOperation, Dict<MicropassOperation, true>> = {\n    pruneOrder: { pruneNodeRange: true },\n    pruneArtRange: { pruneNodeRange: true },\n    pruneNodeRange: { reaffine: true },\n    reaffine: { pruneOrder: true, pruneArtRange: true, pruneNodeRange: true },\n  }\n  let count = 0\n  while (Object.values(should).some((x) => x) && count++ < 20) {\n    if (should.pruneOrder) {\n      delete should.pruneOrder\n      const newArts = pruneOrder(arts, numTop, exclusion)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneOrder }\n      }\n    }\n    if (should.pruneArtRange) {\n      delete should.pruneArtRange\n      const newArts = pruneArtRange(nodes, arts, minimum)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneArtRange }\n      }\n    }\n    if (should.pruneNodeRange) {\n      delete should.pruneNodeRange\n      const newNodes = pruneNodeRange(nodes, arts)\n      if (nodes !== newNodes) {\n        nodes = newNodes\n        should = { ...should, ...deps.pruneNodeRange }\n      }\n    }\n    if (should.reaffine) {\n      delete should.reaffine\n      const { nodes: newNodes, arts: newArts } = reaffine(nodes, arts)\n      if (nodes !== newNodes || arts !== newArts) {\n        nodes = newNodes\n        arts = newArts\n        should = { ...should, ...deps.reaffine }\n      }\n    }\n  }\n  return { nodes, arts }\n}\n\nexport function pruneExclusion(\n  nodes: OptNode[],\n  exclusion: ArtSetExclusion\n): OptNode[] {\n  const maxValues: Dict<keyof typeof exclusion, number> = {}\n  for (const [key, e] of Object.entries(exclusion)) {\n    if (!e.includes(4)) continue\n    maxValues[key] = e.includes(2) ? 1 : 3\n  }\n  return mapFormulas(\n    nodes,\n    (f) => f,\n    (f) => {\n      if (f.operation !== 'threshold') return f\n\n      const [v, t, pass, fail] = f.operands\n      if (v.operation === 'read' && t.operation === 'const') {\n        const key = v.path[v.path.length - 1],\n          thres = t.value\n        if (key in maxValues) {\n          const max: number = maxValues[key]\n          if (max < thres) return fail\n          if (thres === 2 && exclusion[key]!.includes(2))\n            return threshold(v, 4, pass, fail)\n        }\n      }\n      return f\n    }\n  )\n}\n\nfunction reaffine(\n  nodes: OptNode[],\n  arts: ArtifactsBySlot,\n  forceRename = false\n): { nodes: OptNode[]; arts: ArtifactsBySlot } {\n  const affineNodes = new Set<OptNode>(),\n    topLevelAffine = new Set<OptNode>()\n\n  function visit(node: OptNode, isAffine: boolean): OptNode {\n    if (isAffine) affineNodes.add(node)\n    else\n      node.operands.forEach(\n        (op) => affineNodes.has(op) && topLevelAffine.add(op)\n      )\n    return node\n  }\n\n  const dynKeys = new Set<string>()\n\n  nodes = mapFormulas(\n    nodes,\n    (_) => _,\n    (f) => {\n      const { operation } = f\n      switch (operation) {\n        case 'read':\n          dynKeys.add(f.path[1])\n          return visit(f, true)\n        case 'add': {\n          const affineOps = f.operands.filter((op) => affineNodes.has(op))\n          const nonAffineOps = f.operands.filter((op) => !affineNodes.has(op))\n          if (nonAffineOps.length === 0) return visit(f, true)\n          if (affineOps.length <= 1) return visit(f, false)\n          const affine = visit(sum(...affineOps), true)\n          return visit(sum(affine, ...nonAffineOps), false)\n        }\n        case 'mul': {\n          const nonConst = f.operands.filter((op) => op.operation !== 'const')\n          return visit(\n            f,\n            nonConst.length === 0 ||\n              (nonConst.length === 1 && affineNodes.has(nonConst[0]))\n          )\n        }\n        case 'const':\n          return visit(f, true)\n        case 'res':\n        case 'threshold':\n        case 'sum_frac':\n        case 'max':\n        case 'min':\n          return visit(f, false)\n        default:\n          assertUnreachable(operation)\n      }\n    }\n  )\n\n  nodes\n    .filter((node) => affineNodes.has(node))\n    .forEach((node) => topLevelAffine.add(node))\n  if (\n    [...topLevelAffine].every(\n      ({ operation }) => operation === 'read' || operation === 'const'\n    ) &&\n    Object.keys(arts.base).length === dynKeys.size\n  )\n    return { nodes, arts }\n\n  let current = -1\n  function nextDynKey(): string {\n    while (dynKeys.has(`${++current}`));\n    return `${current}`\n  }\n\n  const affine = [...topLevelAffine].filter((f) => f.operation !== 'const')\n  const affineMap = new Map(\n    affine.map((node) => [\n      node,\n      !forceRename && node.operation === 'read' && node.path[0] === 'dyn'\n        ? node\n        : dynRead(nextDynKey()),\n    ])\n  )\n  nodes = mapFormulas(\n    nodes,\n    (f) => affineMap.get(f) ?? f,\n    (f) => f\n  )\n\n  function reaffineArt(stat: DynStat): DynStat {\n    const values = constantFold(\n      [...affineMap.keys()],\n      {\n        dyn: objectMap(stat, (value) => constant(value)),\n      } as any,\n      (_) => true\n    )\n    return Object.fromEntries(\n      [...affineMap.values()].map((v, i) => [\n        v.path[1],\n        (values[i] as ConstantNode<number>).value,\n      ])\n    )\n  }\n  const result = {\n    nodes,\n    arts: {\n      base: reaffineArt(arts.base),\n      values: objectKeyMap(allArtifactSlotKeys, (slot) =>\n        arts.values[slot].map(({ id, set, values }) => ({\n          id,\n          set,\n          values: reaffineArt(values),\n        }))\n      ),\n    },\n  }\n  const offsets = Object.entries(reaffineArt({}))\n  for (const arts of Object.values(result.arts.values))\n    for (const { values } of arts)\n      for (const [key, baseValue] of offsets) values[key] -= baseValue\n  return result\n}\n/** Remove artifacts that cannot be in top `numTop` builds */\nfunction pruneOrder(\n  arts: ArtifactsBySlot,\n  numTop: number,\n  exclusion: ArtSetExclusion\n): ArtifactsBySlot {\n  let progress = false\n  /**\n   * Note:\n   * This function assumes that every base (reaffined) stats are monotonically increasing. That is, artifacts\n   * with higher stats are better. This remains true as long as the main and substats are in increasing. Set\n   * effects that decrease enemy resistance (which is monotonically decreasing) does not violate this assumption\n   * as set effects are not handled here.\n   */\n  const allowRainbow = !exclusion.rainbow?.length,\n    keys = Object.keys(arts.base)\n  const noSwitchIn = new Set(\n    Object.entries(exclusion)\n      .filter(([_, v]) => v.length)\n      .map(([k]) => k) as ArtifactSetKey[]\n  )\n  const noSwitchOut = new Set(\n    Object.entries(exclusion)\n      .filter(([_, v]) => v.includes(2) && !v.includes(4))\n      .map(([k]) => k) as ArtifactSetKey[]\n  )\n  const values = objectKeyMap(allArtifactSlotKeys, (slot) => {\n    const list = arts.values[slot]\n    const newList = list.filter((art) => {\n      let count = 0\n      return list.every((other) => {\n        const otherBetterEqual = keys.every(\n          (k) => (other.values[k] ?? 0) >= (art.values[k] ?? 0)\n        )\n        const otherMaybeBetter = keys.some(\n          (k) => (other.values[k] ?? 0) > (art.values[k] ?? 0)\n        )\n        const otherBetter =\n          otherBetterEqual && (otherMaybeBetter || other.id > art.id)\n        const canSwitch =\n          (allowRainbow &&\n            !noSwitchIn.has(other.set!) &&\n            !noSwitchOut.has(art.set!)) ||\n          art.set === other.set\n        if (otherBetter && canSwitch) count++\n        return count < numTop\n      })\n    })\n    if (newList.length !== list.length) progress = true\n    return newList\n  })\n  return progress ? { base: arts.base, values } : arts\n}\n/** Remove artifacts that cannot reach `minimum` in any build */\nfunction pruneArtRange(\n  nodes: OptNode[],\n  arts: ArtifactsBySlot,\n  minimum: number[]\n): ArtifactsBySlot {\n  const baseRange = Object.fromEntries(\n    Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }])\n  )\n  const wrap = { arts }\n  while (true) {\n    const artRanges = objectKeyMap(allArtifactSlotKeys, (slot) =>\n      computeArtRange(wrap.arts.values[slot])\n    )\n    const otherArtRanges = objectKeyMap(allArtifactSlotKeys, (key) =>\n      addArtRange(\n        Object.entries(artRanges)\n          .map((a) => (a[0] === key ? baseRange : a[1]))\n          .filter((x) => x)\n      )\n    )\n\n    let progress = false\n    const values = objectKeyMap(allArtifactSlotKeys, (slot) => {\n      const result = wrap.arts.values[slot].filter((art) => {\n        const read = addArtRange([computeArtRange([art]), otherArtRanges[slot]])\n        const newRange = computeNodeRange(nodes, read)\n        return nodes.every(\n          (node, i) => newRange.get(node)!.max >= (minimum[i] ?? -Infinity)\n        )\n      })\n      if (result.length !== wrap.arts.values[slot].length) progress = true\n      return result\n    })\n    if (!progress) break\n    wrap.arts = { base: wrap.arts.base, values }\n  }\n  return wrap.arts\n}\nfunction pruneNodeRange(nodes: OptNode[], arts: ArtifactsBySlot): OptNode[] {\n  const baseRange = Object.fromEntries(\n    Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }])\n  )\n  const reads = addArtRange([\n    baseRange,\n    ...Object.values(arts.values).map((values) => computeArtRange(values)),\n  ])\n  const nodeRange = computeNodeRange(nodes, reads)\n\n  return mapFormulas(\n    nodes,\n    (f) => {\n      {\n        const { min, max } = nodeRange.get(f)!\n        if (min === max) return constant(min)\n      }\n      const { operation } = f\n      const operandRanges = f.operands.map((x) => nodeRange.get(x)!)\n      switch (operation) {\n        case 'threshold': {\n          const [value, threshold, pass, fail] = operandRanges\n          if (value.min >= threshold.max) return f.operands[2]\n          else if (value.max < threshold.min) return f.operands[3]\n          if (\n            pass.max === pass.min &&\n            fail.max === fail.min &&\n            pass.min === fail.min &&\n            isFinite(pass.min)\n          )\n            return constant(pass.max)\n          break\n        }\n        case 'min': {\n          const newOperands = f.operands.filter((_, i) => {\n            const op1 = operandRanges[i]\n            return operandRanges.every((op2) => op1.min <= op2.max)\n          })\n          if (newOperands.length < operandRanges.length)\n            return min(...newOperands)\n          break\n        }\n        case 'max': {\n          const newOperands = f.operands.filter((_, i) => {\n            const op1 = operandRanges[i]\n            return operandRanges.every((op2) => op1.max >= op2.min)\n          })\n          if (newOperands.length < operandRanges.length)\n            return max(...newOperands)\n          break\n        }\n      }\n      return f\n    },\n    (f) => f\n  )\n}\nfunction addArtRange(ranges: DynMinMax[]): DynMinMax {\n  const result: DynMinMax = {}\n  ranges.forEach((range) => {\n    Object.entries(range).forEach(([key, value]) => {\n      if (result[key]) {\n        result[key].min += value.min\n        result[key].max += value.max\n      } else result[key] = { ...value }\n    })\n  })\n  return result\n}\nfunction computeArtRange(arts: ArtifactBuildData[]): DynMinMax {\n  const result: DynMinMax = {}\n  if (arts.length) {\n    Object.keys(arts[0].values)\n      .filter((key) => arts.every((art) => art.values[key]))\n      .forEach(\n        (key) =>\n          (result[key] = { min: arts[0].values[key], max: arts[0].values[key] })\n      )\n    arts.forEach(({ values }) => {\n      for (const [key, value] of Object.entries(values)) {\n        if (!result[key]) result[key] = { min: 0, max: value }\n        else {\n          if (result[key].max < value) result[key].max = value\n          if (result[key].min > value) result[key].min = value\n        }\n      }\n    })\n  }\n  return result\n}\nexport function computeFullArtRange(arts: ArtifactsBySlot): DynMinMax {\n  const baseRange = Object.fromEntries(\n    Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }])\n  )\n  return addArtRange([\n    baseRange,\n    ...Object.values(arts.values).map((values) => computeArtRange(values)),\n  ])\n}\nexport function computeNodeRange(\n  nodes: OptNode[],\n  reads: DynMinMax\n): Map<OptNode, MinMax> {\n  const range = new Map<OptNode, MinMax>()\n\n  forEachNodes(\n    nodes,\n    (_) => {},\n    (f) => {\n      const { operation } = f\n      const operands = f.operands.map((op) => range.get(op)!)\n      let current: MinMax\n      switch (operation) {\n        case 'read':\n          if (f.path[0] !== 'dyn')\n            throw new Error(\n              `Found non-dyn path ${f.path} while computing range`\n            )\n          current = reads[f.path[1]] ?? { min: 0, max: 0 }\n          break\n        case 'const':\n          current = computeMinMax([f.value])\n          break\n        case 'add':\n        case 'min':\n        case 'max':\n          current = {\n            min: allOperations[operation](operands.map((x) => x.min)),\n            max: allOperations[operation](operands.map((x) => x.max)),\n          }\n          break\n        case 'res':\n          current = {\n            min: allOperations[operation]([operands[0].max]),\n            max: allOperations[operation]([operands[0].min]),\n          }\n          break\n        case 'mul':\n          current = operands.reduce((accu, current) =>\n            computeMinMax([\n              accu.min * current.min,\n              accu.min * current.max,\n              accu.max * current.min,\n              accu.max * current.max,\n            ])\n          )\n          break\n        case 'threshold':\n          if (operands[0].min >= operands[1].max) current = operands[2]\n          else if (operands[0].max < operands[1].min) current = operands[3]\n          else current = computeMinMax([], [operands[2], operands[3]])\n          break\n        case 'sum_frac': {\n          const [x, c] = operands,\n            sum = { min: x.min + c.min, max: x.max + c.max }\n          if (sum.min <= 0 && sum.max >= 0)\n            current =\n              x.min <= 0 && x.max >= 0\n                ? { min: NaN, max: NaN }\n                : { min: -Infinity, max: Infinity }\n          // TODO: Check this\n          else\n            current = computeMinMax([\n              x.min / sum.min,\n              x.min / sum.max,\n              x.max / sum.min,\n              x.max / sum.max,\n            ])\n          break\n        }\n        default:\n          assertUnreachable(operation)\n      }\n      range.set(f, current)\n    }\n  )\n  return range\n}\nfunction computeMinMax(\n  values: readonly number[],\n  minMaxes: readonly MinMax[] = []\n): MinMax {\n  const max = Math.max(...values, ...minMaxes.map((x) => x.max))\n  const min = Math.min(...values, ...minMaxes.map((x) => x.min))\n  return { min, max }\n}\n\nexport function filterArts(\n  arts: ArtifactsBySlot,\n  filters: RequestFilter\n): ArtifactsBySlot {\n  return {\n    base: arts.base,\n    values: objectKeyMap(allArtifactSlotKeys, (slot) => {\n      const filter = filters[slot]\n      switch (filter.kind) {\n        case 'id':\n          return arts.values[slot].filter((art) => filter.ids.has(art.id))\n        case 'exclude':\n          return arts.values[slot].filter((art) => !filter.sets.has(art.set!))\n        case 'required':\n          return arts.values[slot].filter((art) => filter.sets.has(art.set!))\n      }\n    }),\n  }\n}\n\nexport function mergeBuilds(builds: Build[][], maxNum: number): Build[] {\n  return builds\n    .flatMap((x) => x)\n    .sort((a, b) => b.value - a.value)\n    .slice(0, maxNum)\n}\nexport function mergePlot(plots: PlotData[]): PlotData {\n  let scale = 0.01\n  const reductionScaling = 2,\n    maxCount = 1500\n  let keys = new Set(\n    plots.flatMap((x) =>\n      Object.values(x).map((v) => Math.round(v.plot! / scale))\n    )\n  )\n  while (keys.size > maxCount) {\n    scale *= reductionScaling\n    keys = new Set([...keys].map((key) => Math.round(key / reductionScaling)))\n  }\n  const result: PlotData = {}\n  for (const plot of plots)\n    for (const build of Object.values(plot)) {\n      const x = Math.round(build.plot! / scale) * scale\n      if (!result[x] || result[x]!.value < build.value) result[x] = build\n    }\n  return result\n}\n\nexport function countBuilds(arts: ArtifactsBySlot): number {\n  return allArtifactSlotKeys.reduce(\n    (_count, slot) => _count * arts.values[slot].length,\n    1\n  )\n}\n\nexport function* filterFeasiblePerm(\n  filters: Iterable<RequestFilter>,\n  _artSets: ArtifactsBySlot\n): Iterable<RequestFilter> {\n  const artSets = objectMap(\n    _artSets.values,\n    (values) => new Set(values.map((v) => v.set))\n  )\n  filter_loop: for (const filter of filters) {\n    for (const [slot, f] of Object.entries(filter)) {\n      const available = artSets[slot]!\n      switch (f.kind) {\n        case 'required':\n          if ([...f.sets].every((s) => !available.has(s))) continue filter_loop\n          break\n        case 'exclude':\n          if ([...available].every((s) => f.sets.has(s!))) continue filter_loop\n          break\n        case 'id':\n          break\n      }\n    }\n    yield filter\n  }\n}\nexport function exclusionToAllowed(\n  exclusion: number[] | undefined\n): Set<number> {\n  return new Set(\n    exclusion?.includes(2)\n      ? exclusion.includes(4)\n        ? [0, 1]\n        : [0, 1, 4, 5]\n      : exclusion?.includes(4)\n      ? [0, 1, 2, 3]\n      : [0, 1, 2, 3, 4, 5]\n  )\n}\n/** A *disjoint* set of `RequestFilter` satisfying the exclusion rules */\nexport function* artSetPerm(\n  exclusion: ArtSetExclusion,\n  _artSets: ArtifactSetKey[]\n): Iterable<RequestFilter> {\n  /**\n   * This generation algorithm is separated into two parts:\n   * - \"Shape\" generation\n   *   - It first generates all build \"shapes\", e.g., AABBC, ABBCD\n   *   - It then filters the generated shapes according to the rainbow exclusion, e.g., removes ABBCD if excluding 3 rainbows\n   *   - It then merges the remaining shapes into wildcards, e.g. AABAA + AABAB + AABAC => AABA*\n   * - Shape filling\n   *   - From the given shapes, it tries to fill in all non-rainbow slots, e.g., slots A and B of AABBC, with actual artifacts\n   *   - It then fills the rainbow slots, e.g., slot C of AABBC while ensuring the exclusion rule of each sets\n   */\n  const artSets = [...new Set(_artSets)],\n    allowedRainbows = exclusionToAllowed(exclusion.rainbow)\n  let shapes: number[][] = []\n  function populateShapes(\n    current: number[],\n    list: Set<number>,\n    rainbows: number[]\n  ) {\n    if (current.length === 5) {\n      if (allowedRainbows.has(rainbows.length)) shapes.push(current)\n      return\n    }\n    for (const i of list)\n      populateShapes(\n        [...current, i],\n        list,\n        rainbows.filter((j) => j !== i)\n      )\n    populateShapes(\n      [...current, current.length],\n      new Set([...list, current.length]),\n      [...rainbows, current.length]\n    )\n  }\n  populateShapes([0], new Set([0]), [0])\n  function indexOfShape(shape: number[], replacing: number) {\n    if (range(replacing + 1, 4).some((i) => shape[i] !== 5)) return undefined\n    shape = [...shape]\n    shape[replacing] = 5\n    return shape.reduce((a, b) => a * 6 + b, 0)\n  }\n  for (let replacing = 4; replacing >= 0; replacing--) {\n    const required: Map<number, number> = new Map()\n    for (const shape of shapes) {\n      const id = indexOfShape(shape, replacing)\n      if (id === undefined) continue\n      required.set(\n        id,\n        (required.get(id) ?? new Set(shape.slice(0, replacing)).size + 1) - 1\n      )\n    }\n    for (const [id, remaining] of required.entries()) {\n      if (remaining === 0) {\n        const shape = [\n          ...shapes.find((shape) => indexOfShape(shape, replacing) === id)!,\n        ]\n        shape[replacing] = 5\n        shapes = shapes.filter((shape) => indexOfShape(shape, replacing) !== id)\n        shapes.push(shape)\n      }\n    }\n  }\n\n  // Shapes are now calculated and merged, proceed to fill in the sets\n\n  const noFilter = { kind: 'exclude' as const, sets: new Set<ArtifactSetKey>() }\n  const result: RequestFilter = objectKeyMap(\n    allArtifactSlotKeys,\n    (_) => noFilter\n  )\n\n  const counts = {\n    ...objectMap(exclusion, (_) => 0),\n    ...objectKeyMap(artSets, (_) => 0),\n  }\n  const allowedCounts = objectMap(exclusion, exclusionToAllowed)\n\n  function* check(shape: number[]) {\n    const used: Set<ArtifactSetKey> = new Set(),\n      rainbows: number[] = []\n    let groupped: number[][] = []\n    for (const i of shape) {\n      groupped.push([])\n      if (i === 5) rainbows.push(groupped.length - 1)\n      else groupped[i].push(groupped.length - 1)\n    }\n    groupped = groupped\n      .filter((v) => v.length)\n      .sort((a, b) => b.length - a.length)\n    let usableRainbows = rainbows.length\n\n    // Inception.. because js doesn't like functions inside a for-loop\n    function* check(i: number) {\n      if (i === groupped.length) return yield* check_free(0)\n\n      for (const set of artSets) {\n        if (used.has(set)) continue\n        const length = groupped[i].length,\n          allowedSet = allowedCounts[set]\n        let requiredRainbows = 0\n\n        if (allowedSet && !allowedSet.has(length)) {\n          // Look ahead and see if we have enough rainbows to fill to the next `allowedSet` if we use the current set\n          requiredRainbows =\n            (range(length + 1, 5).find((l) => allowedSet.has(l)) ?? 6) - length\n          if (requiredRainbows > usableRainbows) continue // Not enough rainbows. Next..\n        }\n\n        used.add(set)\n        counts[set] = groupped[i].length\n        groupped[i].forEach(\n          (j) =>\n            (result[allArtifactSlotKeys[j]] = {\n              kind: 'required',\n              sets: new Set([set]),\n            })\n        )\n        usableRainbows -= requiredRainbows\n\n        yield* check(i + 1)\n\n        usableRainbows += requiredRainbows\n        counts[set] = 0\n        used.delete(set)\n      }\n    }\n    // We separate filling rainbow slots from groupped slots because it has an entirely\n    // different set of rules regarding what can be filled and what states to be kept.\n    function* check_free(i: number) {\n      const remaining = rainbows.length - i,\n        isolated: ArtifactSetKey[] = [],\n        missing: ArtifactSetKey[] = [],\n        rejected: ArtifactSetKey[] = []\n      let required = 0\n      for (const set of artSets) {\n        const allowedSet = allowedCounts[set],\n          count = counts[set]\n        if (!allowedSet) continue\n        if (range(1, remaining).every((j) => !allowedSet.has(count + j)))\n          rejected.push(set)\n        else if (!allowedSet.has(count)) {\n          required += [...allowedSet].find((x) => x > count)! - count\n          missing.push(set)\n        } else if (range(0, remaining).some((j) => !allowedSet.has(count + j)))\n          isolated.push(set)\n      }\n      if (required > remaining) return\n      if (i === rainbows.length) {\n        yield { ...result }\n        return\n      }\n      if (required === remaining) {\n        for (const set of missing) {\n          counts[set]++\n          result[allArtifactSlotKeys[rainbows[i]]] = {\n            kind: 'required',\n            sets: new Set([set]),\n          }\n          yield* check_free(i + 1)\n          counts[set]--\n        }\n        return\n      }\n      for (const set of [...isolated, ...missing]) {\n        counts[set]++\n        result[allArtifactSlotKeys[rainbows[i]]] = {\n          kind: 'required',\n          sets: new Set([set]),\n        }\n        yield* check_free(i + 1)\n        counts[set]--\n      }\n      result[allArtifactSlotKeys[rainbows[i]]] = {\n        kind: 'exclude',\n        sets: new Set([...missing, ...rejected, ...isolated]),\n      }\n      yield* check_free(i + 1)\n    }\n    yield* check(0)\n  }\n  for (const shape of shapes) yield* check(shape)\n}\n\nexport type RequestFilter = StrictDict<\n  ArtifactSlotKey,\n  | { kind: 'required'; sets: Set<ArtifactSetKey> }\n  | { kind: 'exclude'; sets: Set<ArtifactSetKey> }\n  | { kind: 'id'; ids: Set<string> }\n>\n\nexport type DynStat = { [key in string]: number }\nexport type ArtifactBuildData = {\n  id: string\n  set?: ArtifactSetKey\n  values: DynStat\n}\nexport type ArtifactsBySlot = {\n  base: DynStat\n  values: StrictDict<ArtifactSlotKey, ArtifactBuildData[]>\n}\n\nexport type PlotData = Dict<number, Build>\nexport interface Build {\n  value: number\n  plot?: number\n  artifactIds: string[]\n}\n\nexport type DynMinMax = { [key in string]: MinMax }\nexport type MinMax = { min: number; max: number }\n","export class MaxPrio<V> {\n  // Fibonacci Heap\n  list: (PrioNode<V> | undefined)[] = []\n  maxNode: PrioNode<V> | undefined\n\n  insert(key: number, value: V): void {\n    let node: PrioNode<V> | undefined = { key, value, children: [] }\n    if (!this.maxNode || this.maxNode.key < key)\n      [this.maxNode, node] = [node, this.maxNode]\n    if (node) this.addNode(node, node.children.length)\n  }\n  pop(): V | undefined {\n    if (!this.maxNode) return\n    const { value, children } = this.maxNode\n    children.forEach((child, i) => this.addNode(child, i))\n\n    const [_, maxDegree] = this.list.reduce(\n      (max, cur, iCur) =>\n        !cur || (max[0] && max[0].key > cur.key) ? max : [cur, iCur],\n      [undefined as PrioNode<V> | undefined, -1]\n    )\n    if (maxDegree === this.list.length - 1) this.maxNode = this.list.pop()\n    else this.maxNode = this.popNode(maxDegree)\n    return value\n  }\n\n  private addNode(node: PrioNode<V>, degree: number): void {\n    let other: PrioNode<V> | undefined\n    while ((other = this.popNode(degree))) {\n      if (other.key > node.key) {\n        other.children.push(node)\n        node = other\n      } else node.children.push(other)\n      degree += 1\n    }\n    this.list[degree] = node\n  }\n  private popNode(degree: number): PrioNode<V> | undefined {\n    const result = this.list[degree]\n    this.list[degree] = undefined\n    return result\n  }\n}\n\ninterface PrioNode<V> {\n  key: number\n  value: V\n  children: PrioNode<V>[]\n}\n\nexport class FIFO<T> {\n  // Simple two-stack implementation\n  head: T[] = []\n  tail: T[] = []\n\n  get length(): number {\n    return this.head.length + this.tail.length\n  }\n  push(t: T): void {\n    this.tail.push(t)\n  }\n  pop(): T | undefined {\n    if (!this.head.length && this.tail.length)\n      [this.head, this.tail] = [this.tail.reverse(), this.head]\n    return this.head.pop()\n  }\n}\n","import { FIFO } from '@genshin-optimizer/util'\n\nexport class WorkerCoordinator<\n  Command extends { command: string; resultType?: never },\n  Response extends { command?: never; resultType: string }\n> {\n  prio: Map<Command['command'], number>\n  commands: FIFO<Command>[]\n  workers: Promise<Worker>[]\n  workDone: Map<Worker, () => void> = new Map()\n  _workers: Worker[]\n\n  cancel: (e?: Error) => void\n  cancelled: Promise<never>\n  callback: (_: Response, w: Worker) => void\n  notifyNonEmpty: (() => void) | undefined\n\n  constructor(\n    workers: Worker[],\n    prio: Command['command'][],\n    callback: (_: Response, w: Worker) => void\n  ) {\n    this.commands = prio.map((_) => new FIFO())\n    this.prio = new Map(prio.map((p, i) => [p, i]))\n    this.callback = callback\n\n    workers.forEach((worker) => {\n      worker.onmessage = (x) => this.onMessage(x.data, worker)\n      worker.onerror = (e) => this.onError(e)\n    })\n    this._workers = workers\n    this.workers = workers.map((w) => Promise.resolve(w))\n    this.cancel = () => {}\n    this.cancelled = new Promise<never>((_, rej) => (this.cancel = rej))\n    this.cancelled.catch((_) => workers.forEach((w) => w.terminate()))\n  }\n\n  /**\n   * Send `commands` to available workers. If a worker sends back a `Command`,\n   * that command is further sent to an available worker (may be the same worker).\n   * If a worker sends back a `Response`, `this.callback` is invoked.\n   *\n   * Note that `{ resultType: 'done' }` is a special type that the worker is\n   * expected to send back when completing its `command`.\n   */\n  async execute(commands: Iterable<Command> | AsyncIterable<Command>) {\n    const processingInput = (async () => {\n      for await (const command of commands) this.add(command)\n    })()\n\n    while (true) {\n      const command = this.commands.find((x) => x.length)?.pop()\n      if (command === undefined) {\n        const hasCommand = await Promise.race([\n          new Promise<boolean>(\n            (res) => (this.notifyNonEmpty = () => res(true))\n          ),\n          Promise.all([...this.workers, processingInput]).then((_) => false),\n          this.cancelled,\n        ])\n\n        this.notifyNonEmpty = undefined\n        if (hasCommand) continue\n        break\n      }\n\n      const { i, w } = await Promise.race([\n        ...this.workers.map((w, i) => w.then((w) => ({ i, w }))),\n        this.cancelled,\n      ])\n      this.workers[i] = new Promise((res) => this.workDone.set(w, () => res(w)))\n      w.postMessage(command)\n    }\n  }\n\n  onError(e: { message: string }) {\n    this.cancel(new Error(`Worker Error: ${e.message}`))\n  }\n  onMessage(msg: Command | Response, worker: Worker) {\n    if (msg.command !== undefined) this.add(msg)\n    else if (msg.resultType === 'done') this.workDone.get(worker)!()\n    else this.callback(msg, worker)\n  }\n  /** May be ignored after `execute` ends */\n  add(command: Command) {\n    const prio = this.prio.get(command.command)!\n    this.commands[prio].push(command)\n    this.notifyNonEmpty?.()\n  }\n  /** May be ignored after `execute` ends */\n  broadcast(command: Command) {\n    this._workers.forEach((w) => w.postMessage(command))\n  }\n  /** MUST be followed by `execute` and cannot be called while `execute` is running */\n  notifiedBroadcast(command: Command) {\n    this.workers = this.workers.map((worker) =>\n      worker.then(\n        (w) =>\n          new Promise((res) => {\n            this.workDone.set(w, () => res(w))\n          })\n      )\n    )\n    this._workers.forEach((w) => w.postMessage(command))\n  }\n}\n","import type {\n  Count,\n  FinalizeResult,\n  Interim,\n  OptProblemInput,\n  Setup,\n  WorkerCommand,\n  WorkerResult,\n} from '..'\nimport { optimize } from '../../Formula/optimization'\nimport { pruneAll, pruneExclusion } from '../common'\nimport { WorkerCoordinator } from '../coordinator'\n\nexport class GOSolver extends WorkerCoordinator<WorkerCommand, WorkerResult> {\n  private maxIterateSize = 4_000_000\n  private status: Record<'tested' | 'failed' | 'skipped' | 'total', number>\n  private exclusion: Count['exclusion']\n  private topN: number\n  private buildValues: { w: Worker; val: number }[]\n  private finalizedResults: FinalizeResult[] = []\n\n  constructor(\n    problem: OptProblemInput,\n    status: GOSolver['status'],\n    numWorker: number\n  ) {\n    const workers = Array(numWorker)\n      .fill(NaN)\n      .map((_) => new Worker(new URL('./BackgroundWorker.ts', import.meta.url)))\n    super(workers, ['iterate', 'split', 'count'], (r, w) => {\n      switch (r.resultType) {\n        case 'interim':\n          this.interim(r, w)\n          break\n        case 'finalize':\n          this.finalizedResults.push(r)\n          break\n        case 'count':\n          this.status.total = r.count\n          break\n        case 'err':\n          this.onError(r)\n          break\n      }\n    })\n    const { exclusion, topN } = problem\n    this.status = status\n    this.exclusion = exclusion\n    this.topN = topN\n    this.status.total = NaN\n    this.buildValues = Array(topN).fill({ w: undefined as any, val: -Infinity })\n\n    this.notifiedBroadcast(this.preprocess(problem))\n  }\n\n  async solve() {\n    const { exclusion, maxIterateSize } = this\n    this.finalizedResults = []\n    await this.execute([{ command: 'count', exclusion, maxIterateSize }])\n    this.notifiedBroadcast({ command: 'finalize' })\n    await this.execute([])\n    return this.finalizedResults\n  }\n\n  preprocess({\n    plotBase,\n    optimizationTarget,\n    arts,\n    topN,\n    exclusion,\n    constraints,\n  }: OptProblemInput): Setup {\n    constraints = constraints.filter((x) => x.min > -Infinity)\n\n    let nodes = [...constraints.map((x) => x.value), optimizationTarget]\n    const minimums = [...constraints.map((x) => x.min), -Infinity]\n    if (plotBase) {\n      nodes.push(plotBase)\n      minimums.push(-Infinity)\n    }\n\n    nodes = pruneExclusion(nodes, exclusion)\n    nodes = optimize(nodes, {}, (_) => false)\n    ;({ nodes, arts } = pruneAll(nodes, minimums, arts, topN, exclusion, {\n      reaffine: true,\n      pruneArtRange: true,\n      pruneNodeRange: true,\n      pruneOrder: true,\n    }))\n    nodes = optimize(nodes, {}, (_) => false)\n\n    if (plotBase) plotBase = nodes.pop()\n    const optTarget = nodes.pop()!\n\n    return {\n      command: 'setup',\n      arts,\n      optTarget,\n      plotBase,\n      topN,\n      constraints: nodes.map((value, i) => ({ value, min: minimums[i] })),\n    }\n  }\n\n  /** Returns a new `threshold` if altered */\n  private interim(r: Interim, worker: Worker) {\n    this.status.tested += r.tested\n    this.status.failed += r.failed\n    this.status.skipped += r.skipped\n\n    if (r.buildValues) {\n      const { topN } = this,\n        oldThreshold = this.buildValues[topN - 1].val ?? -Infinity\n\n      this.buildValues.filter(({ w }) => w !== worker)\n      this.buildValues.push(\n        ...r.buildValues.map((val) => ({ w: worker!, val }))\n      )\n      this.buildValues.sort((a, b) => b.val - a.val).splice(topN)\n\n      const threshold = this.buildValues[topN - 1].val ?? -Infinity\n      if (oldThreshold !== threshold)\n        this.broadcast({ command: 'threshold', threshold })\n    }\n  }\n}\n","import type { CharacterKey } from '@genshin-optimizer/consts'\nimport { useCallback, useContext, useEffect, useState } from 'react'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport type { BuildSetting } from '../../../../Database/DataManagers/BuildSettingData'\n\nexport default function useBuildSetting(characterKey: CharacterKey) {\n  const { database } = useContext(DatabaseContext)\n  const [buildSetting, setBuildSetting] = useState(() =>\n    database.buildSettings.get(characterKey)\n  )\n  useEffect(\n    () => setBuildSetting(database.buildSettings.get(characterKey)),\n    [database, characterKey]\n  )\n  useEffect(\n    () =>\n      database.buildSettings.follow(\n        characterKey,\n        (k, r, v) => r === 'update' && setBuildSetting(v)\n      ),\n    [characterKey, setBuildSetting, database]\n  )\n  const buildSettingDispatch = useCallback(\n    (action: Partial<BuildSetting>) =>\n      characterKey && database.buildSettings.set(characterKey, action),\n    [characterKey, database]\n  )\n\n  return { buildSetting: buildSetting as BuildSetting, buildSettingDispatch }\n}\n","import type {\n  CharacterKey,\n  LocationCharacterKey,\n} from '@genshin-optimizer/consts'\nimport {\n  allArtifactSlotKeys,\n  allElementKeys,\n  allWeaponTypeKeys,\n  charKeyToLocCharKey,\n} from '@genshin-optimizer/consts'\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport ShowChartIcon from '@mui/icons-material/ShowChart'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Divider,\n  Grid,\n  Stack,\n  TextField,\n  ToggleButton,\n  Typography,\n} from '@mui/material'\nimport type { ChangeEvent, MouseEvent } from 'react'\nimport {\n  useCallback,\n  useContext,\n  useDeferredValue,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { useTranslation } from 'react-i18next'\nimport SlotIcon from '../../../../../Components/Artifact/SlotIcon'\nimport CardDark from '../../../../../Components/Card/CardDark'\nimport CardLight from '../../../../../Components/Card/CardLight'\nimport CharacterCardPico from '../../../../../Components/Character/CharacterCardPico'\nimport CloseButton from '../../../../../Components/CloseButton'\nimport InfoTooltip from '../../../../../Components/InfoTooltip'\nimport ModalWrapper from '../../../../../Components/ModalWrapper'\nimport SolidToggleButtonGroup from '../../../../../Components/SolidToggleButtonGroup'\nimport SqBadge from '../../../../../Components/SqBadge'\nimport ElementToggle from '../../../../../Components/ToggleButton/ElementToggle'\nimport WeaponToggle from '../../../../../Components/ToggleButton/WeaponToggle'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport { SillyContext } from '../../../../../Context/SillyContext'\nimport { getCharSheet } from '../../../../../Data/Characters'\nimport { DatabaseContext } from '../../../../../Database/Database'\nimport type { AllowLocationsState } from '../../../../../Database/DataManagers/BuildSettingData'\nimport { allAllowLocationsState } from '../../../../../Database/DataManagers/BuildSettingData'\nimport useBoolState from '../../../../../ReactHooks/useBoolState'\nimport useForceUpdate from '../../../../../ReactHooks/useForceUpdate'\nimport { iconInlineProps } from '../../../../../SVGIcons'\nimport type { ICachedCharacter } from '../../../../../Types/character'\nimport { characterFilterConfigs } from '../../../../../Util/CharacterSort'\nimport { filterFunction } from '../../../../../Util/SortByFilters'\nimport { bulkCatTotal } from '../../../../../Util/totalUtils'\nimport useBuildSetting from '../useBuildSetting'\n\nenum CharListMode {\n  ToggleToAllow,\n  ToggleToExclude,\n}\n\nexport default function AllowChar({\n  disabled = false,\n  allowListTotal,\n}: {\n  disabled?: boolean\n  allowListTotal: string\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  const { t: t_pc } = useTranslation('page_character')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { silly } = useContext(SillyContext)\n  const {\n    buildSetting: { excludedLocations, allowLocationsState },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState(false)\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  const deferredDbDirty = useDeferredValue(dbDirty)\n\n  const [searchTerm, setSearchTerm] = useState('')\n  const deferredSearchTerm = useDeferredValue(searchTerm)\n  const [elementKeys, setElementKeys] = useState([...allElementKeys])\n  const deferredElementKeys = useDeferredValue(elementKeys)\n  const [weaponTypeKeys, setWeaponTypeKeys] = useState([...allWeaponTypeKeys])\n  const deferredWeaponTypeKeys = useDeferredValue(weaponTypeKeys)\n\n  const charKeyMap: Dict<CharacterKey, ICachedCharacter> = useMemo(\n    () =>\n      deferredDbDirty &&\n      Object.fromEntries(\n        Array.from(\n          new Set(\n            Object.entries(database.chars.data)\n              .filter(([ck]) => ck !== characterKey)\n              .filter(([ck]) =>\n                filterFunction(\n                  {\n                    element: deferredElementKeys,\n                    weaponType: deferredWeaponTypeKeys,\n                    name: deferredSearchTerm,\n                  },\n                  characterFilterConfigs(database, silly)\n                )(ck)\n              )\n          )\n        )\n      ),\n    [\n      deferredDbDirty,\n      database,\n      characterKey,\n      deferredElementKeys,\n      deferredWeaponTypeKeys,\n      deferredSearchTerm,\n      silly,\n    ]\n  )\n\n  const locList = Object.entries(charKeyMap)\n    .sort(([ck1, c1], [ck2, c2]) => {\n      // sort characters by: star => more artifacts equipped\n      const [choosec1, choosec2] = [-1, 1]\n      const c1f = database.charMeta.get(ck1).favorite\n      const c2f = database.charMeta.get(ck2).favorite\n      if (c1f && !c2f) return choosec1\n      else if (c2f && !c1f) return choosec2\n\n      const art1 = Object.values(c1.equippedArtifacts).filter((id) => id).length\n      const art2 = Object.values(c2.equippedArtifacts).filter((id) => id).length\n      if (art1 > art2) return choosec1\n      else if (art2 > art1) return choosec2\n      return ck1.localeCompare(ck2)\n    })\n    .map(([ck]) => charKeyToLocCharKey(ck))\n\n  const { elementTotals, weaponTypeTotals, locListTotals } = useMemo(() => {\n    const catKeys = {\n      elementTotals: [...allElementKeys],\n      weaponTypeTotals: [...allWeaponTypeKeys],\n      locListTotals: ['allowed', 'excluded'],\n    } as const\n    return bulkCatTotal(catKeys, (ctMap) =>\n      Object.entries(database.chars.data)\n        .filter(([ck]) => ck !== characterKey)\n        .forEach(([ck]) => {\n          const sheet = getCharSheet(ck, database.gender)\n          const eleKey = sheet.elementKey\n          ctMap.elementTotals[eleKey].total++\n          if (charKeyMap[ck]) ctMap.elementTotals[eleKey].current++\n\n          const weaponTypeKey = sheet.weaponTypeKey\n          ctMap.weaponTypeTotals[weaponTypeKey].total++\n          if (charKeyMap[ck]) ctMap.weaponTypeTotals[weaponTypeKey].current++\n\n          const locKey = charKeyToLocCharKey(ck)\n          if (locList.includes(locKey)) {\n            ctMap.locListTotals.allowed.total++\n            ctMap.locListTotals.excluded.total++\n            if (!excludedLocations.includes(locKey))\n              ctMap.locListTotals.allowed.current++\n            else ctMap.locListTotals.excluded.current++\n          }\n        })\n    )\n  }, [\n    charKeyMap,\n    characterKey,\n    database.chars.data,\n    database.gender,\n    excludedLocations,\n    locList,\n  ])\n\n  useEffect(\n    () => database.charMeta.followAny((_) => forceUpdate()),\n    [forceUpdate, database]\n  )\n  useEffect(\n    () => database.chars.followAny((_) => forceUpdate()),\n    [forceUpdate, database]\n  )\n\n  const [mouseUpDetected, setMouseUpDetected] = useState(false)\n\n  const allowAll = useCallback(\n    () =>\n      buildSettingDispatch({\n        excludedLocations: excludedLocations.filter(\n          (key) => !locList.includes(key)\n        ),\n        allowLocationsState: 'customList',\n      }),\n    [buildSettingDispatch, excludedLocations, locList]\n  )\n  const disallowAll = useCallback(\n    () =>\n      buildSettingDispatch({\n        excludedLocations: Array.from(\n          new Set(excludedLocations.concat(locList))\n        ),\n        allowLocationsState: 'customList',\n      }),\n    [buildSettingDispatch, excludedLocations, locList]\n  )\n\n  const setState = useCallback(\n    (_e: MouseEvent, state: AllowLocationsState) =>\n      buildSettingDispatch({ allowLocationsState: state }),\n    [buildSettingDispatch]\n  )\n\n  const toggleList = useCallback(\n    (lkList: Set<LocationCharacterKey>) => {\n      const lkArray = [...lkList]\n      const newExcludedLocations = lkArray\n        .filter((lk) => !excludedLocations.includes(lk))\n        .concat(excludedLocations.filter((lk) => !lkArray.includes(lk)))\n      buildSettingDispatch({\n        excludedLocations: newExcludedLocations,\n        allowLocationsState: 'customList',\n      })\n    },\n    [excludedLocations, buildSettingDispatch]\n  )\n\n  const onMouseUp = useCallback(() => setMouseUpDetected(true), [])\n\n  const total = database.chars.keys.length - 1\n  const useTot = total - excludedLocations.length\n  const totalStr = useTot === total ? useTot : `${useTot}/${total}`\n  const charactersAllowed =\n    allowLocationsState === 'all'\n      ? total\n      : allowLocationsState === 'customList'\n      ? totalStr\n      : 0 // unequippedOnly\n  const stateBadgeColor =\n    allowLocationsState === 'all'\n      ? 'success'\n      : allowLocationsState === 'customList'\n      ? 'info'\n      : 'secondary' // unequippedOnly\n\n  return (\n    <Box display=\"flex\" gap={1}>\n      {/* Begin modal */}\n      <ModalWrapper\n        open={show}\n        onClose={onClose}\n        containerProps={{ maxWidth: 'xl' }}\n        draggable={false}\n        onMouseUp={onMouseUp}\n      >\n        <CardDark>\n          {/* Header */}\n          <CardContent>\n            <Box display=\"flex\" gap={1} alignItems=\"center\">\n              <Typography variant=\"h6\">{t`excludeChar.title`}</Typography>\n              <InfoTooltip\n                title={<Typography>{t`excludeChar.tooltip`}</Typography>}\n              />\n              <Box flexGrow={1} />\n              <CloseButton onClick={onClose} size=\"small\" />\n            </Box>\n          </CardContent>\n          <Divider />\n          {/* Content */}\n          <CardContent sx={{ pb: 0 }}>\n            <Stack gap={1}>\n              {/* State + Search box */}\n              <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n                <SolidToggleButtonGroup\n                  exclusive\n                  baseColor=\"secondary\"\n                  size=\"small\"\n                  value={allowLocationsState}\n                  onChange={setState}\n                >\n                  {allAllowLocationsState.map((s) => (\n                    <ToggleButton\n                      key={s}\n                      value={s}\n                      disabled={allowLocationsState === s || disabled}\n                    >\n                      {t(`excludeChar.states.${s}`)}\n                    </ToggleButton>\n                  ))}\n                </SolidToggleButtonGroup>\n                <TextField\n                  autoFocus\n                  value={searchTerm}\n                  onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>\n                    setSearchTerm(e.target.value)\n                  }\n                  label={t_pc('characterName')}\n                  size=\"small\"\n                  sx={{ height: '100%' }}\n                  InputProps={{\n                    sx: { height: '100%' },\n                  }}\n                />\n              </Box>\n              {/* Filter toggles */}\n              <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n                <WeaponToggle\n                  sx={{ height: '100%' }}\n                  onChange={setWeaponTypeKeys}\n                  value={deferredWeaponTypeKeys}\n                  totals={weaponTypeTotals}\n                  size=\"small\"\n                />\n                <ElementToggle\n                  sx={{ height: '100%' }}\n                  onChange={setElementKeys}\n                  value={deferredElementKeys}\n                  totals={elementTotals}\n                  size=\"small\"\n                />\n              </Box>\n            </Stack>\n          </CardContent>\n          {/* Allow/Disallow + grid */}\n          <CardContent\n            sx={{ opacity: allowLocationsState === 'customList' ? 1 : 0.6 }}\n          >\n            <Grid container pb={1} gap={1} flexWrap=\"nowrap\">\n              <Grid item xs={6}>\n                <Button color=\"success\" fullWidth onClick={allowAll}>\n                  {t`excludeChar.modal.allow_all`}\n                  <SqBadge sx={{ ml: 1 }}>\n                    <strong>{locListTotals.allowed}</strong>\n                  </SqBadge>\n                </Button>\n              </Grid>\n              <Grid item xs={6}>\n                <Button fullWidth color=\"error\" onClick={disallowAll}>\n                  {t`excludeChar.modal.disallow_All`}\n                  <SqBadge sx={{ ml: 1 }}>\n                    <strong>{locListTotals.excluded}</strong>\n                  </SqBadge>\n                </Button>\n              </Grid>\n            </Grid>\n            <SelectItemGrid\n              locList={locList}\n              excludedLocations={excludedLocations}\n              mouseUpDetected={mouseUpDetected}\n              setMouseUpDetected={setMouseUpDetected}\n              toggleList={toggleList}\n            />\n          </CardContent>\n        </CardDark>\n      </ModalWrapper>\n\n      {/* Button to open modal */}\n      <CardLight sx={{ display: 'flex', width: '100%' }}>\n        <CardContent sx={{ flexGrow: 1 }}>\n          <Stack spacing={1}>\n            <Typography>\n              <strong>{t('excludeChar.title')}</strong>\n            </Typography>\n            <Typography>\n              {t('excludeChar.usingState')}{' '}\n              <SqBadge color={stateBadgeColor}>\n                {t(`excludeChar.states.${allowLocationsState}`)}\n              </SqBadge>\n            </Typography>\n            <Typography>\n              {t('excludeChar.chars')}{' '}\n              <SqBadge color=\"success\">\n                {charactersAllowed} <ShowChartIcon {...iconInlineProps} />\n                {t('artSetConfig.allowed')}\n              </SqBadge>\n            </Typography>\n            <Typography>\n              {t('excludeChar.artis')}{' '}\n              <SqBadge color=\"success\">\n                {allowListTotal} <ShowChartIcon {...iconInlineProps} />\n                {t('artSetConfig.allowed')}\n              </SqBadge>\n            </Typography>\n          </Stack>\n        </CardContent>\n        <Button\n          sx={{ borderRadius: 0, flexShrink: 1, minWidth: 40 }}\n          onClick={onOpen}\n          disabled={disabled}\n          color=\"info\"\n        >\n          <SettingsIcon />\n        </Button>\n      </CardLight>\n    </Box>\n  )\n}\n\nfunction SelectItemGrid({\n  locList,\n  excludedLocations,\n  mouseUpDetected,\n  setMouseUpDetected,\n  toggleList,\n}: {\n  locList: LocationCharacterKey[]\n  excludedLocations: LocationCharacterKey[]\n  mouseUpDetected: boolean\n  setMouseUpDetected: (v: boolean) => void\n  toggleList: (charList: Set<LocationCharacterKey>) => void\n}) {\n  const [charList, setCharList] = useState(new Set<LocationCharacterKey>())\n  const [charListMode, setCharListMode] = useState<CharListMode>()\n  useEffect(() => {\n    if (mouseUpDetected) {\n      setMouseUpDetected(false)\n      if (charList.size > 0) {\n        toggleList(charList)\n        setCharList(new Set<LocationCharacterKey>())\n        setCharListMode(undefined)\n      }\n    }\n  }, [charList, setCharList, setMouseUpDetected, mouseUpDetected, toggleList])\n  return (\n    <Grid\n      container\n      spacing={1}\n      columns={{ xs: 6, sm: 7, md: 10, lg: 12, xl: 16 }}\n    >\n      {locList.map((lk) => (\n        <Grid item key={lk} xs={1}>\n          <SelectItem\n            locKey={lk}\n            charList={charList}\n            charListMode={charListMode}\n            setCharList={setCharList}\n            setCharListMode={setCharListMode}\n            selected={!excludedLocations.includes(lk)}\n          />\n        </Grid>\n      ))}\n    </Grid>\n  )\n}\n\nfunction SelectItem({\n  locKey,\n  selected,\n  charList,\n  charListMode,\n  setCharList,\n  setCharListMode,\n}: {\n  locKey: LocationCharacterKey\n  selected: boolean\n  charList: Set<LocationCharacterKey>\n  charListMode?: CharListMode\n  setCharList: (list: Set<LocationCharacterKey>) => void\n  setCharListMode: (mode?: CharListMode) => void\n}) {\n  const { database } = useContext(DatabaseContext)\n  const char = database.chars.get(database.chars.LocationToCharacterKey(locKey))\n  const onMouseEnter = useCallback(\n    (e: MouseEvent) =>\n      // Mouse 1 being held down\n      e.buttons === 1 &&\n      // Only select characters with the same exclusion state as the rest of the list\n      ((charListMode === CharListMode.ToggleToAllow && !selected) ||\n        (charListMode === CharListMode.ToggleToExclude && selected)) &&\n      setCharList(new Set([...charList]).add(locKey)),\n    [charListMode, selected, setCharList, charList, locKey]\n  )\n  const onMouseDown = useCallback(() => {\n    const mode = selected\n      ? CharListMode.ToggleToExclude\n      : CharListMode.ToggleToAllow\n    setCharListMode(mode)\n    setCharList(new Set([...charList]).add(locKey))\n  }, [selected, setCharListMode, setCharList, charList, locKey])\n  const disableTooltip = useMemo(() => charList.size !== 0, [charList.size])\n  const allowed =\n    // Character is already allowed, and not selected to be excluded\n    (selected &&\n      !(\n        charListMode === CharListMode.ToggleToExclude && charList.has(locKey)\n      )) ||\n    // Or character is selected to be allowed\n    (charListMode === CharListMode.ToggleToAllow && charList.has(locKey))\n  const sx = {\n    opacity: allowed ? undefined : 0.6,\n    borderColor: allowed ? 'rgb(100,200,100)' : 'rgb(200,100,100)',\n    borderWidth: '3px',\n    borderStyle: 'solid',\n    borderRadius: '8px',\n  }\n  const content = useMemo(\n    () => (\n      <Box\n        fontSize=\"0.85em\"\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        p={0.3}\n      >\n        {allArtifactSlotKeys.map((s) => (\n          <SlotIcon\n            key={s}\n            slotKey={s}\n            iconProps={{\n              fontSize: 'inherit',\n              sx: { opacity: char?.equippedArtifacts[s] ? undefined : 0.5 },\n            }}\n          />\n        ))}\n      </Box>\n    ),\n    [char?.equippedArtifacts]\n  )\n  return (\n    <CardLight sx={sx}>\n      <CharacterCardPico\n        characterKey={database.chars.LocationToCharacterKey(locKey)}\n        onMouseDown={onMouseDown}\n        onMouseEnter={onMouseEnter}\n        disableTooltip={disableTooltip}\n      />\n      {content}\n    </CardLight>\n  )\n}\n","import { Box } from '@mui/material'\nimport { getArtSheet } from '../../Data/Artifacts'\nimport type { ArtifactSetKey, SetNum } from '../../Types/consts'\nimport DocumentDisplay from '../DocumentDisplay'\n\ntype Data = {\n  setKey: ArtifactSetKey\n  setNumKey: SetNum\n  hideHeader?: boolean\n  conditionalsOnly?: boolean\n}\n\nexport default function SetEffectDisplay({\n  setKey,\n  setNumKey,\n  hideHeader = false,\n  conditionalsOnly = false,\n}: Data) {\n  const sheet = getArtSheet(setKey)\n\n  const document = conditionalsOnly\n    ? sheet\n        .setEffectDocument(setNumKey)\n        ?.filter((section) => 'states' in section)\n    : sheet.setEffectDocument(setNumKey)\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      {document ? (\n        <DocumentDisplay sections={document} hideHeader={hideHeader} />\n      ) : null}\n    </Box>\n  )\n}\n","import type { ArtifactSetKey, ArtifactSlotKey } from '@genshin-optimizer/consts'\nimport {\n  allArtifactSetKeys,\n  allArtifactSlotKeys,\n} from '@genshin-optimizer/consts'\nimport { CheckBox, CheckBoxOutlineBlank, Replay } from '@mui/icons-material'\nimport BlockIcon from '@mui/icons-material/Block'\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport ShowChartIcon from '@mui/icons-material/ShowChart'\nimport StarRoundedIcon from '@mui/icons-material/StarRounded'\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  CardContent,\n  Divider,\n  Grid,\n  Stack,\n  Typography,\n} from '@mui/material'\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport SetEffectDisplay from '../../../../../Components/Artifact/SetEffectDisplay'\nimport SlotIcon from '../../../../../Components/Artifact/SlotIcon'\nimport CardDark from '../../../../../Components/Card/CardDark'\nimport CardLight from '../../../../../Components/Card/CardLight'\nimport CloseButton from '../../../../../Components/CloseButton'\nimport ColorText from '../../../../../Components/ColoredText'\nimport { InfoTooltipInline } from '../../../../../Components/InfoTooltip'\nimport ModalWrapper from '../../../../../Components/ModalWrapper'\nimport SqBadge from '../../../../../Components/SqBadge'\nimport { Translate } from '../../../../../Components/Translate'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport type { dataContextObj } from '../../../../../Context/DataContext'\nimport { DataContext } from '../../../../../Context/DataContext'\nimport { getArtSheet, setKeysByRarities } from '../../../../../Data/Artifacts'\nimport { artifactDefIcon } from '../../../../../Data/Artifacts/ArtifactSheet'\nimport { DatabaseContext } from '../../../../../Database/Database'\nimport { handleArtSetExclusion } from '../../../../../Database/DataManagers/BuildSettingData'\nimport { UIData } from '../../../../../Formula/uiData'\nimport { constant } from '../../../../../Formula/utils'\nimport useForceUpdate from '../../../../../ReactHooks/useForceUpdate'\nimport { iconInlineProps } from '../../../../../SVGIcons'\nimport type { SetNum } from '../../../../../Types/consts'\nimport { bulkCatTotal } from '../../../../../Util/totalUtils'\nimport { deepClone, objectKeyMap } from '../../../../../Util/Util'\nimport useBuildSetting from '../useBuildSetting'\n\nexport default function ArtifactSetConfig({\n  disabled,\n}: {\n  disabled?: boolean\n}) {\n  const { t } = useTranslation(['page_character_optimize', 'sheet'])\n  const dataContext = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const {\n    character: { key: characterKey, conditional },\n    characterDispatch,\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { artSetExclusion },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const [open, setOpen] = useState(false)\n  const onOpen = useCallback(() => setOpen(true), [setOpen])\n  const onClose = useCallback(() => setOpen(false), [setOpen])\n\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  useEffect(() => database.arts.followAny(forceUpdate), [database, forceUpdate])\n\n  const artKeysByRarity = useMemo(\n    () =>\n      Object.entries(setKeysByRarities)\n        .reverse()\n        .flatMap(([, sets]) => sets)\n        .filter((key) => !key.includes('Prayers')),\n    []\n  )\n  const { artKeys, artSlotCount } = useMemo(() => {\n    const artSlotCount = objectKeyMap(artKeysByRarity, (_) =>\n      objectKeyMap(allArtifactSlotKeys, (_) => 0)\n    )\n    database.arts.values.forEach(\n      (art) =>\n        artSlotCount[art.setKey] && artSlotCount[art.setKey][art.slotKey]++\n    )\n    const artKeys = [...artKeysByRarity].sort(\n      (a, b) =>\n        +(getNumSlots(artSlotCount[a]) < 2) -\n        +(getNumSlots(artSlotCount[b]) < 2)\n    )\n    return dbDirty && { artKeys, artSlotCount }\n  }, [dbDirty, database, artKeysByRarity])\n\n  const allowRainbow2 = !artSetExclusion.rainbow?.includes(2)\n  const allowRainbow4 = !artSetExclusion.rainbow?.includes(4)\n\n  const { allowTotals } = useMemo(() => {\n    const catKeys = { allowTotals: ['2', '4'] }\n    return bulkCatTotal(catKeys, (ctMap) =>\n      artKeysByRarity.forEach((setKey) => {\n        ctMap.allowTotals['2'].total++\n        if (!artSetExclusion[setKey]?.includes(2)) {\n          ctMap.allowTotals['2'].current++\n        }\n        ctMap.allowTotals['4'].total++\n        if (!artSetExclusion[setKey]?.includes(4)) {\n          ctMap.allowTotals['4'].current++\n        }\n      })\n    )\n  }, [artKeysByRarity, artSetExclusion])\n  const artifactCondCount = useMemo(\n    () =>\n      Object.keys(conditional).filter(\n        (k) =>\n          allArtifactSetKeys.includes(k as ArtifactSetKey) &&\n          !!Object.keys(conditional[k] ?? {}).length\n      ).length,\n    [conditional]\n  )\n  const fakeDataContextObj = useMemo(\n    () => ({\n      ...dataContext,\n      data: new UIData(\n        {\n          ...dataContext.data.data[0],\n          artSet: objectKeyMap(allArtifactSetKeys, (_) => constant(4)),\n        },\n        undefined\n      ),\n    }),\n    [dataContext]\n  )\n  const resetArtConds = useCallback(() => {\n    const tconditional = Object.fromEntries(\n      Object.entries(conditional).filter(\n        ([k]) => !allArtifactSetKeys.includes(k as any)\n      )\n    )\n    characterDispatch({ conditional: tconditional })\n  }, [conditional, characterDispatch])\n  const setAllExclusion = useCallback(\n    (setnum: number, exclude = true) => {\n      const artSetExclusion_ = deepClone(artSetExclusion)\n      artKeysByRarity.forEach((k) => {\n        if (exclude)\n          artSetExclusion_[k] = [...(artSetExclusion_[k] ?? []), setnum]\n        else if (artSetExclusion_[k])\n          artSetExclusion_[k] = artSetExclusion_[k].filter((n) => n !== setnum)\n      })\n      buildSettingDispatch({ artSetExclusion: artSetExclusion_ })\n    },\n    [artKeysByRarity, artSetExclusion, buildSettingDispatch]\n  )\n\n  return (\n    <>\n      {/* Button to open modal */}\n      <CardLight sx={{ display: 'flex', width: '100%' }}>\n        <CardContent sx={{ flexGrow: 1 }}>\n          <Typography>\n            <strong>{t`artSetConfig.title`}</strong>\n          </Typography>\n          <Stack spacing={1}>\n            <Typography>\n              {t`artSetConfig.setEffCond`}{' '}\n              <SqBadge color={artifactCondCount ? 'success' : 'warning'}>\n                {artifactCondCount} {t('artSetConfig.enabled')}\n              </SqBadge>\n            </Typography>\n            <Typography>\n              {t`sheet:2set`}{' '}\n              <SqBadge color=\"success\">\n                {allowTotals['2']} <ShowChartIcon {...iconInlineProps} />{' '}\n                {t('artSetConfig.allowed')}\n              </SqBadge>\n            </Typography>\n            <Typography>\n              {t`sheet:4set`}{' '}\n              <SqBadge color=\"success\">\n                {allowTotals['4']} <ShowChartIcon {...iconInlineProps} />{' '}\n                {t('artSetConfig.allowed')}\n              </SqBadge>\n            </Typography>\n            <Typography>\n              {t`artSetConfig.2rainbow`}{' '}\n              <SqBadge color={allowRainbow2 ? 'success' : 'secondary'}>\n                {allowRainbow2 ? (\n                  <ShowChartIcon {...iconInlineProps} />\n                ) : (\n                  <BlockIcon {...iconInlineProps} />\n                )}{' '}\n                {allowRainbow2 ? t('artSetConfig.allowed') : 'Excluded'}\n              </SqBadge>\n            </Typography>\n            <Typography>\n              {t`artSetConfig.4rainbow`}{' '}\n              <SqBadge color={allowRainbow4 ? 'success' : 'secondary'}>\n                {allowRainbow4 ? (\n                  <ShowChartIcon {...iconInlineProps} />\n                ) : (\n                  <BlockIcon {...iconInlineProps} />\n                )}{' '}\n                {allowRainbow4 ? t('artSetConfig.allowed') : 'Excluded'}\n              </SqBadge>\n            </Typography>\n          </Stack>\n        </CardContent>\n        <Button\n          onClick={onOpen}\n          disabled={disabled}\n          color=\"info\"\n          sx={{ borderRadius: 0, flexShrink: 1, minWidth: 40 }}\n        >\n          <SettingsIcon />\n        </Button>\n      </CardLight>\n\n      {/* Begin modal */}\n      <ModalWrapper open={open} onClose={onClose}>\n        <CardDark>\n          <CardContent\n            sx={{ display: 'flex', gap: 1, justifyContent: 'space-between' }}\n          >\n            <Typography variant=\"h6\">{t`artSetConfig.title`}</Typography>\n            <CloseButton onClick={onClose} />\n          </CardContent>\n          <Divider />\n          <CardContent>\n            <CardLight sx={{ mb: 1 }}>\n              <CardContent>\n                <Box display=\"flex\" gap={1}>\n                  <Typography>\n                    <strong>{t`artSetConfig.modal.setCond.title`}</strong>\n                  </Typography>\n                  <Typography sx={{ flexGrow: 1 }}>\n                    <SqBadge color={artifactCondCount ? 'success' : 'warning'}>\n                      {artifactCondCount} {t('artSetConfig.selected')}\n                    </SqBadge>\n                  </Typography>\n                  <Button\n                    size=\"small\"\n                    onClick={resetArtConds}\n                    color=\"error\"\n                    startIcon={<Replay />}\n                  >{t`artSetConfig.modal.setCond.reset`}</Button>\n                </Box>\n                <Typography>{t`artSetConfig.modal.setCond.text`}</Typography>\n              </CardContent>\n            </CardLight>\n            <CardLight sx={{ mb: 1 }}>\n              <CardContent>\n                <Typography sx={{ flexGrow: 1 }}>\n                  <strong>\n                    <Trans\n                      t={t}\n                      i18nKey=\"artSetConfig.modal.ArtSetFilter.title\"\n                    >\n                      Artifact Sets{' '}\n                      <ColorText color=\"success\">\n                        Allowed\n                        <ShowChartIcon {...iconInlineProps} />\n                      </ColorText>{' '}\n                      /{' '}\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        Excluded\n                        <BlockIcon {...iconInlineProps} />\n                      </ColorText>\n                    </Trans>\n                  </strong>\n                </Typography>\n                <Typography>\n                  <Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.intro\">\n                    You can allow/exclude which sets you want the builder to\n                    consider. In the following examples, <strong>A</strong> is\n                    on-set, and <strong>R</strong> is rainbow(off-set)\n                  </Trans>\n                </Typography>\n                <Typography>\n                  <Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.2set\">\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        Excluding\n                        <BlockIcon {...iconInlineProps} /> 2-Set\n                      </ColorText>\n                    </strong>{' '}\n                    would exclude 2-Set builds:{' '}\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        AA\n                      </ColorText>\n                      RRR\n                    </strong>{' '}\n                    and{' '}\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        AAA\n                      </ColorText>\n                      RR\n                    </strong>\n                    .\n                  </Trans>\n                </Typography>\n                <Typography>\n                  <Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.4set\">\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        Excluding\n                        <BlockIcon {...iconInlineProps} /> 4-Set\n                      </ColorText>\n                    </strong>{' '}\n                    would exclude 4-Set builds:{' '}\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        AAAA\n                      </ColorText>\n                      R\n                    </strong>{' '}\n                    and{' '}\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        AAAAA\n                      </ColorText>\n                    </strong>\n                    .\n                  </Trans>\n                </Typography>\n                <Typography>\n                  <Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.2rain\">\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        Excluding\n                        <BlockIcon {...iconInlineProps} /> 3-Rainbow\n                      </ColorText>\n                    </strong>{' '}\n                    would exclude 2-Set + 3-Rainbow builds:{' '}\n                    <strong>\n                      AA\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        RRR\n                      </ColorText>\n                    </strong>{' '}\n                    and{' '}\n                    <strong>\n                      AAA\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        RR\n                      </ColorText>\n                    </strong>\n                    .\n                  </Trans>\n                </Typography>\n                <Typography>\n                  <Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.4rain\">\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        Excluding\n                        <BlockIcon {...iconInlineProps} /> 5-Rainbow\n                      </ColorText>\n                    </strong>{' '}\n                    would exclude full 5-Rainbow builds:{' '}\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        RRRRR\n                      </ColorText>\n                    </strong>\n                    .\n                  </Trans>\n                </Typography>\n              </CardContent>\n            </CardLight>\n            <Grid\n              container\n              columns={{ xs: 2, lg: 3 }}\n              sx={{ mb: 1 }}\n              spacing={1}\n            >\n              <Grid item xs={1}>\n                <AllSetAllowExcludeCard\n                  allowTotal={allowTotals['2']}\n                  setNum={2}\n                  setAllExclusion={setAllExclusion}\n                />\n              </Grid>\n              <Grid item xs={1}>\n                <AllSetAllowExcludeCard\n                  allowTotal={allowTotals['4']}\n                  setNum={4}\n                  setAllExclusion={setAllExclusion}\n                />\n              </Grid>\n              <Grid item xs={1}>\n                <CardLight>\n                  <CardContent>\n                    <Typography gutterBottom>\n                      <strong>\n                        <Trans t={t} i18nKey=\"artSetConfig.alExRainbow\">\n                          <ColorText color=\"success\">\n                            Allow <ShowChartIcon {...iconInlineProps} />\n                          </ColorText>{' '}\n                          /{' '}\n                          <ColorText color=\"secondary\" variant=\"light\">\n                            Exclude <BlockIcon {...iconInlineProps} />\n                          </ColorText>{' '}\n                          Rainbow Builds\n                        </Trans>\n                      </strong>\n                    </Typography>\n                    <Box\n                      sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n                    >\n                      <Button\n                        fullWidth\n                        onClick={() =>\n                          buildSettingDispatch({\n                            artSetExclusion: handleArtSetExclusion(\n                              artSetExclusion,\n                              'rainbow',\n                              2\n                            ),\n                          })\n                        }\n                        color={allowRainbow2 ? 'success' : 'secondary'}\n                        startIcon={\n                          !allowRainbow2 ? (\n                            <CheckBoxOutlineBlank />\n                          ) : (\n                            <CheckBox />\n                          )\n                        }\n                        endIcon={\n                          allowRainbow2 ? <ShowChartIcon /> : <BlockIcon />\n                        }\n                      >{t`artSetConfig.2rainbow`}</Button>\n                      <Button\n                        fullWidth\n                        onClick={() =>\n                          buildSettingDispatch({\n                            artSetExclusion: handleArtSetExclusion(\n                              artSetExclusion,\n                              'rainbow',\n                              4\n                            ),\n                          })\n                        }\n                        color={allowRainbow4 ? 'success' : 'secondary'}\n                        startIcon={\n                          !allowRainbow4 ? (\n                            <CheckBoxOutlineBlank />\n                          ) : (\n                            <CheckBox />\n                          )\n                        }\n                        endIcon={\n                          allowRainbow4 ? <ShowChartIcon /> : <BlockIcon />\n                        }\n                      >{t`artSetConfig.4rainbow`}</Button>\n                    </Box>\n                  </CardContent>\n                </CardLight>\n              </Grid>\n            </Grid>\n            <Grid container spacing={1} columns={{ xs: 2, lg: 3 }}>\n              {artKeys.map((setKey) => (\n                <ArtifactSetCard\n                  key={setKey}\n                  setKey={setKey}\n                  fakeDataContextObj={fakeDataContextObj}\n                  slotCount={artSlotCount[setKey]}\n                />\n              ))}\n            </Grid>\n          </CardContent>\n          <Divider />\n          <CardContent sx={{ py: 1 }}>\n            <CloseButton large onClick={onClose} />\n          </CardContent>\n        </CardDark>\n      </ModalWrapper>\n    </>\n  )\n}\nfunction AllSetAllowExcludeCard({\n  allowTotal,\n  setNum,\n  setAllExclusion,\n}: {\n  allowTotal: string\n  setNum: 2 | 4\n  setAllExclusion: (setNum: 2 | 4, exclude?: boolean) => void\n}) {\n  const { t } = useTranslation(['page_character_optimize', 'sheet'])\n  return (\n    <CardLight>\n      <CardContent>\n        <Typography gutterBottom>\n          <strong>{t(`sheet:${setNum}set`)}</strong>{' '}\n          <SqBadge color=\"success\">\n            {allowTotal} <ShowChartIcon {...iconInlineProps} />{' '}\n            {t('artSetConfig.allowed')}\n          </SqBadge>\n        </Typography>\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n          <Button\n            fullWidth\n            disabled={\n              allowTotal.charAt(0) !== '0' && allowTotal.indexOf('/') === -1\n            }\n            onClick={() => setAllExclusion(setNum, false)}\n            color=\"success\"\n            startIcon={<ShowChartIcon />}\n          >\n            {t(`artSetConfig.allowAll${setNum}set`)}\n          </Button>\n          <Button\n            fullWidth\n            disabled={allowTotal.charAt(0) === '0'}\n            onClick={() => setAllExclusion(setNum, true)}\n            color=\"secondary\"\n            startIcon={<BlockIcon />}\n          >\n            {t(`artSetConfig.excludeAll${setNum}set`)}\n          </Button>\n        </Box>\n      </CardContent>\n    </CardLight>\n  )\n}\nfunction ArtifactSetCard({\n  setKey,\n  fakeDataContextObj,\n  slotCount,\n}: {\n  setKey: ArtifactSetKey\n  fakeDataContextObj: dataContextObj\n  slotCount: Record<ArtifactSlotKey, number>\n}) {\n  const { t } = useTranslation('sheet')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { buildSetting, buildSettingDispatch } = useBuildSetting(characterKey)\n  const { artSetExclusion } = buildSetting\n  const setExclusionSet = artSetExclusion?.[setKey] ?? []\n  const allow4 = !setExclusionSet.includes(4)\n  const slots = getNumSlots(slotCount)\n  const sheet = getArtSheet(setKey)\n  /* Assumes that all conditionals are from 4-Set. needs to change if there are 2-Set conditionals */\n  const set4CondNums = useMemo(() => {\n    if (!allow4) return []\n    return Object.keys(sheet.setEffects).filter((setNumKey) =>\n      sheet.setEffects[setNumKey]?.document.some((doc) => 'states' in doc)\n    )\n  }, [sheet.setEffects, allow4])\n  const exclude2 = setExclusionSet.includes(2)\n  const exclude4 = setExclusionSet.includes(4)\n  return (\n    <Grid item key={setKey} xs={1}>\n      <CardLight\n        sx={{ height: '100%', opacity: slots < 2 ? '50%' : undefined }}\n      >\n        <Box\n          className={`grad-${sheet.rarity[0]}star`}\n          width=\"100%\"\n          sx={{ display: 'flex' }}\n        >\n          <Box\n            component=\"img\"\n            src={artifactDefIcon(setKey)}\n            sx={{ height: 100, width: 'auto', mx: -1 }}\n          />\n          <Box\n            sx={{\n              flexGrow: 1,\n              px: 1,\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n            }}\n          >\n            <Typography variant=\"h6\">{sheet.name ?? ''}</Typography>\n            <Box>\n              {/* If there is ever a 2-Set conditional, we will need to change this */}\n              <Typography variant=\"subtitle1\">\n                {sheet.rarity.map((ns, i) => (\n                  <Box\n                    component=\"span\"\n                    sx={{ display: 'inline-flex', alignItems: 'center' }}\n                    key={ns}\n                  >\n                    {ns} <StarRoundedIcon fontSize=\"inherit\" />{' '}\n                    {i < sheet.rarity.length - 1 ? '/ ' : null}\n                  </Box>\n                ))}{' '}\n                <InfoTooltipInline\n                  title={\n                    <Box>\n                      <Typography>\n                        <SqBadge color=\"success\">{t`2set`}</SqBadge>\n                      </Typography>\n                      <Typography>\n                        <Translate\n                          ns={`artifact_${setKey}_gen`}\n                          key18={'setEffects.2'}\n                        />\n                      </Typography>\n                      <Box\n                        paddingTop={2}\n                        sx={{ opacity: setExclusionSet.includes(4) ? 0.6 : 1 }}\n                      >\n                        <Typography>\n                          <SqBadge color=\"success\">{t`4set`}</SqBadge>\n                        </Typography>\n                        <Typography>\n                          <Translate\n                            ns={`artifact_${setKey}_gen`}\n                            key18={'setEffects.4'}\n                          />\n                        </Typography>\n                      </Box>\n                    </Box>\n                  }\n                />\n              </Typography>\n            </Box>\n            <Box sx={{ display: 'flex', gap: 1 }}>\n              {Object.entries(slotCount).map(([slotKey, count]) => (\n                <Typography\n                  key={slotKey}\n                  sx={{ flexGrow: 1 }}\n                  variant=\"subtitle2\"\n                >\n                  <SqBadge\n                    sx={{ width: '100%' }}\n                    color={count ? 'primary' : 'secondary'}\n                  >\n                    <SlotIcon slotKey={slotKey} iconProps={iconInlineProps} />{' '}\n                    {count}\n                  </SqBadge>\n                </Typography>\n              ))}\n            </Box>\n          </Box>\n        </Box>\n        <ButtonGroup sx={{ '.MuiButton-root': { borderRadius: 0 } }} fullWidth>\n          <Button\n            startIcon={exclude2 ? <CheckBoxOutlineBlank /> : <CheckBox />}\n            onClick={() =>\n              buildSettingDispatch({\n                artSetExclusion: handleArtSetExclusion(\n                  artSetExclusion,\n                  setKey,\n                  2\n                ),\n              })\n            }\n            color={exclude2 ? 'secondary' : 'success'}\n            endIcon={exclude2 ? <BlockIcon /> : <ShowChartIcon />}\n          >{t`2set`}</Button>\n          <Button\n            startIcon={exclude4 ? <CheckBoxOutlineBlank /> : <CheckBox />}\n            onClick={() =>\n              buildSettingDispatch({\n                artSetExclusion: handleArtSetExclusion(\n                  artSetExclusion,\n                  setKey,\n                  4\n                ),\n              })\n            }\n            color={exclude4 ? 'secondary' : 'success'}\n            endIcon={exclude4 ? <BlockIcon /> : <ShowChartIcon />}\n          >{t`4set`}</Button>\n        </ButtonGroup>\n\n        {!!set4CondNums.length && (\n          <DataContext.Provider value={fakeDataContextObj}>\n            <CardContent\n              sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}\n            >\n              {set4CondNums.map((setNumKey) => (\n                <SetEffectDisplay\n                  key={setNumKey}\n                  setKey={setKey}\n                  setNumKey={parseInt(setNumKey) as SetNum}\n                  hideHeader\n                  conditionalsOnly\n                />\n              ))}\n            </CardContent>\n          </DataContext.Provider>\n        )}\n      </CardLight>\n    </Grid>\n  )\n}\n\nfunction getNumSlots(slotCount: Record<string, number>): number {\n  return Object.values(slotCount).reduce((tot, v) => tot + (v ? 1 : 0), 0)\n}\n","import { MenuItem } from '@mui/material'\nimport { useTranslation } from 'react-i18next'\nimport DropdownButton from '../../../../../Components/DropdownMenu/DropdownButton'\n\nconst levels = [0, 4, 8, 12, 16, 20] as const\nexport default function AssumeFullLevelToggle({\n  mainStatAssumptionLevel = 0,\n  setmainStatAssumptionLevel,\n  disabled,\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  return (\n    <DropdownButton\n      fullWidth\n      color={mainStatAssumptionLevel ? 'success' : 'primary'}\n      disabled={disabled}\n      title={\n        mainStatAssumptionLevel\n          ? t('mainStat.assumptionLvl.lvl', { lvl: mainStatAssumptionLevel })\n          : t('mainStat.assumptionLvl.no')\n      }\n    >\n      {levels.map((lvl) => (\n        <MenuItem key={lvl} onClick={() => setmainStatAssumptionLevel(lvl)}>\n          {lvl\n            ? t('mainStat.assumptionLvl.lvl', { lvl })\n            : t('mainStat.assumptionLvl.no')}\n        </MenuItem>\n      ))}\n    </DropdownButton>\n  )\n}\n","import { CardContent, Divider, Typography } from '@mui/material'\nimport { useContext } from 'react'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport CardLight from '../../../../../Components/Card/CardLight'\nimport { NodeFieldDisplay } from '../../../../../Components/FieldDisplay'\nimport { DataContext } from '../../../../../Context/DataContext'\nimport { uiInput as input } from '../../../../../Formula'\nimport type { NumNode } from '../../../../../Formula/type'\nimport { useTranslation } from 'react-i18next'\n\nexport default function BonusStatsCard() {\n  const { t } = useTranslation('page_character_optimize')\n  const {\n    character: { bonusStats },\n  } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const bonusStatsKeys = Object.keys(bonusStats)\n  if (!bonusStatsKeys.length) return null\n  const nodes = bonusStatsKeys.map((k) =>\n    data.get(input.customBonus[k] as NumNode)\n  )\n  return (\n    <CardLight>\n      <CardContent>\n        <Typography\n          sx={{ fontWeight: 'bold' }}\n        >{t`bonusStats.title`}</Typography>\n      </CardContent>\n      <Divider />\n      <CardContent>\n        {nodes.map((n) => (\n          <NodeFieldDisplay key={JSON.stringify(n.info)} node={n} />\n        ))}\n      </CardContent>\n    </CardLight>\n  )\n}\n","import { Alert, Grid, LinearProgress, styled, Typography } from '@mui/material'\nimport type { ReactNode } from 'react'\nimport { timeStringMs } from '../../../../../Util/TimeUtil'\n\nexport const warningBuildNumber = 10000000\nexport type BuildStatus = {\n  type: 'active' | 'inactive'\n  tested: number // tested, including `failed`\n  failed: number // tested but fail the filter criteria, e.g., not enough EM\n  skipped: number\n  total: number\n  startTime?: number\n  finishTime?: number\n}\n\nconst Monospace = styled('strong')({\n  fontFamily: 'monospace',\n})\n\nconst BorderLinearProgress = styled(LinearProgress)(() => ({\n  height: 10,\n  borderRadius: 5,\n}))\nexport default function BuildAlert({\n  status: { type, tested, failed: _, skipped, total, startTime, finishTime },\n  characterName,\n}: {\n  status: BuildStatus\n  characterName: Displayable\n}) {\n  const hasTotal = isFinite(total)\n\n  const generatingBuilds = type !== 'inactive'\n  const unskipped = total - skipped\n\n  const testedString = <Monospace>{tested.toLocaleString()}</Monospace>\n  const unskippedString = <Monospace>{unskipped.toLocaleString()}</Monospace>\n  const skippedText = !!skipped && (\n    <span>\n      (<b>{<Monospace>{skipped.toLocaleString()}</Monospace>}</b> skipped)\n    </span>\n  )\n\n  const durationString = (\n    <Monospace>\n      {timeStringMs(\n        Math.round((finishTime ?? performance.now()) - (startTime ?? NaN))\n      )}\n    </Monospace>\n  )\n\n  const color = 'success' as 'success' | 'warning' | 'error'\n  let title = '' as ReactNode\n  let subtitle = '' as ReactNode\n  let progress = undefined as undefined | number\n\n  if (generatingBuilds) {\n    progress = (tested * 100) / unskipped\n    title = (\n      <Typography>\n        Generating and testing {testedString}\n        {hasTotal ? <>/{unskippedString}</> : undefined} build configurations\n        against the criteria for <b>{characterName}</b>. {skippedText}\n      </Typography>\n    )\n    subtitle = <Typography>Time elapsed: {durationString}</Typography>\n  } else if (tested + skipped) {\n    progress = 100\n    title = (\n      <Typography>\n        Generated and tested {testedString} Build configurations against the\n        criteria for <b>{characterName}</b>. {skippedText}\n      </Typography>\n    )\n    subtitle = <Typography>Total duration: {durationString}</Typography>\n  } else {\n    return null\n  }\n\n  return (\n    <Alert\n      severity={color}\n      variant=\"filled\"\n      sx={{\n        '& .MuiAlert-message': {\n          flexGrow: 1,\n        },\n      }}\n    >\n      {title}\n      {subtitle}\n      {progress !== undefined && (\n        <Grid container spacing={1} alignItems=\"center\">\n          {hasTotal && (\n            <Grid item>\n              <Typography>{`${progress.toFixed(1)}%`}</Typography>\n            </Grid>\n          )}\n          <Grid item flexGrow={1}>\n            <BorderLinearProgress\n              variant={hasTotal ? 'determinate' : 'indeterminate'}\n              value={progress}\n              color=\"primary\"\n            />\n          </Grid>\n        </Grid>\n      )}\n    </Alert>\n  )\n}\n","import type { CharacterKey } from '@genshin-optimizer/consts'\nimport { Typography } from '@mui/material'\nimport { getCharSheet } from '../../Data/Characters'\nimport useDBMeta from '../../ReactHooks/useDBMeta'\nimport BootstrapTooltip from '../BootstrapTooltip'\nimport CharIconSide from '../Image/CharIconSide'\n\nexport default function LocationIcon({\n  characterKey,\n}: {\n  characterKey: CharacterKey\n}) {\n  const { gender } = useDBMeta()\n  const characterSheet = getCharSheet(characterKey, gender)\n  if (!characterSheet) return null\n  return (\n    <BootstrapTooltip\n      placement=\"right-end\"\n      title={<Typography>{characterSheet.name}</Typography>}\n    >\n      <CharIconSide characterKey={characterKey} sideMargin />\n    </BootstrapTooltip>\n  )\n}\n","import { Box } from '@mui/material'\nimport type { StatKey } from '../KeyMap'\nimport KeyMap from '../KeyMap'\nimport StatIcon from '../KeyMap/StatIcon'\nimport { iconInlineProps } from '../SVGIcons'\nimport ColorText from './ColoredText'\n\nexport function StatWithUnit({\n  statKey,\n  disableIcon = false,\n}: {\n  statKey: StatKey\n  disableIcon?: boolean\n}) {\n  return (\n    <Box component=\"span\" display=\"flex\" alignItems=\"center\" gap={1}>\n      {!disableIcon && (\n        <StatIcon statKey={statKey} iconProps={iconInlineProps} />\n      )}\n      <span>\n        {KeyMap.get(statKey)}\n        {KeyMap.unit(statKey)}\n      </span>\n    </Box>\n  )\n}\nexport function StatColoredWithUnit({\n  statKey,\n  disableIcon = false,\n}: {\n  statKey: StatKey\n  disableIcon?: boolean\n}) {\n  return (\n    <ColorText color={KeyMap.getVariant(statKey)}>\n      <StatWithUnit statKey={statKey} disableIcon={disableIcon} />\n    </ColorText>\n  )\n}\n","import { artifactAsset } from '@genshin-optimizer/g-assets'\nimport { BusinessCenter } from '@mui/icons-material'\nimport {\n  alpha,\n  Box,\n  CardActionArea,\n  Chip,\n  Typography,\n  useTheme,\n} from '@mui/material'\nimport { useCallback, useContext } from 'react'\nimport Assets from '../../Assets/Assets'\nimport Artifact from '../../Data/Artifacts/Artifact'\nimport { DatabaseContext } from '../../Database/Database'\nimport KeyMap, { cacheValueString } from '../../KeyMap'\nimport StatIcon from '../../KeyMap/StatIcon'\nimport useArtifact from '../../ReactHooks/useArtifact'\nimport type { ICachedSubstat } from '../../Types/artifact'\nimport type { ArtifactSlotKey } from '@genshin-optimizer/consts'\nimport { allElementWithPhyKeys } from '@genshin-optimizer/consts'\nimport { clamp } from '../../Util/Util'\nimport BootstrapTooltip from '../BootstrapTooltip'\nimport CardDark from '../Card/CardDark'\nimport LocationIcon from '../Character/LocationIcon'\nimport ColorText from '../ColoredText'\nimport ConditionalWrapper from '../ConditionalWrapper'\nimport { StatColoredWithUnit } from '../StatDisplay'\nimport ArtifactTooltip from './ArtifactTooltip'\n\ntype Data = {\n  artifactId?: string\n  slotKey: ArtifactSlotKey\n  mainStatAssumptionLevel?: number\n  onClick?: () => void\n  showLocation?: boolean\n  BGComponent?: React.ElementType\n}\n\nexport default function ArtifactCardNano({\n  artifactId,\n  slotKey: pSlotKey,\n  mainStatAssumptionLevel = 0,\n  showLocation = false,\n  onClick,\n  BGComponent = CardDark,\n}: Data) {\n  const art = useArtifact(artifactId)\n  const { database } = useContext(DatabaseContext)\n  const actionWrapperFunc = useCallback(\n    (children) => (\n      <CardActionArea onClick={onClick} sx={{ height: '100%' }}>\n        {children}\n      </CardActionArea>\n    ),\n    [onClick]\n  )\n  const theme = useTheme()\n  if (!art)\n    return (\n      <BGComponent\n        sx={{\n          display: 'flex',\n          height: '100%',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <Box\n          component=\"img\"\n          src={Assets.slot[pSlotKey]}\n          sx={{ width: '25%', height: 'auto', opacity: 0.7 }}\n        />\n      </BGComponent>\n    )\n\n  const { slotKey, rarity, level, mainStatKey, substats, location } = art\n  const mainStatLevel = Math.max(\n    Math.min(mainStatAssumptionLevel, rarity * 4),\n    level\n  )\n  const mainStatUnit = KeyMap.unit(mainStatKey)\n  const element = allElementWithPhyKeys.find((ele) =>\n    art.mainStatKey.includes(ele)\n  )\n  const color = element\n    ? alpha(theme.palette[element].main, 0.6)\n    : alpha(theme.palette.secondary.main, 0.6)\n  return (\n    <BGComponent sx={{ height: '100%' }}>\n      <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\n        <Box display=\"flex\" height=\"100%\">\n          <Box\n            className={`grad-${rarity}star`}\n            sx={{\n              position: 'relative',\n              flexGrow: 1,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <ArtifactTooltip art={art}>\n              <Box\n                component=\"img\"\n                src={artifactAsset(art.setKey, slotKey)}\n                sx={{ m: -1, maxHeight: '110%', maxWidth: '110%' }}\n              />\n            </ArtifactTooltip>\n            <Box\n              sx={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                p: 0.5,\n                opacity: 0.85,\n                display: 'flex',\n                justifyContent: 'space-between',\n                pointerEvents: 'none',\n              }}\n            >\n              <Chip\n                size=\"small\"\n                label={<strong>{` +${level}`}</strong>}\n                color={Artifact.levelVariant(level)}\n              />\n              {showLocation && (\n                <Chip\n                  size=\"small\"\n                  label={\n                    location ? (\n                      <LocationIcon\n                        characterKey={\n                          location &&\n                          database.chars.LocationToCharacterKey(location)\n                        }\n                      />\n                    ) : (\n                      <BusinessCenter />\n                    )\n                  }\n                  color={'secondary'}\n                  sx={{\n                    overflow: 'visible',\n                    '.MuiChip-label': {\n                      overflow: 'visible',\n                    },\n                  }}\n                />\n              )}\n            </Box>\n            {/* mainstats */}\n            <Chip\n              size=\"small\"\n              sx={{\n                position: 'absolute',\n                bottom: 0,\n                mb: 1,\n                backgroundColor: color,\n                p: 1,\n              }}\n              icon={\n                <BootstrapTooltip\n                  placement=\"top\"\n                  title={\n                    <Typography>\n                      <StatColoredWithUnit statKey={mainStatKey} />\n                    </Typography>\n                  }\n                  disableInteractive\n                >\n                  <Box lineHeight={0}>\n                    <StatIcon\n                      statKey={mainStatKey}\n                      iconProps={{ style: { padding: '4px' } }}\n                    />\n                  </Box>\n                </BootstrapTooltip>\n              }\n              label={\n                <Typography sx={{ mx: -0.7 }}>\n                  <ColorText\n                    color={mainStatLevel !== level ? 'warning' : undefined}\n                  >\n                    {cacheValueString(\n                      Artifact.mainStatValue(\n                        mainStatKey,\n                        rarity,\n                        mainStatLevel\n                      ) ?? 0,\n                      KeyMap.unit(mainStatKey)\n                    )}\n                    {mainStatUnit}\n                  </ColorText>\n                </Typography>\n              }\n            />\n          </Box>\n          {/* substats */}\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"space-between\"\n            sx={{ p: 1 }}\n          >\n            {substats.map((stat: ICachedSubstat, i: number) => (\n              <SubstatDisplay key={i + stat.key} stat={stat} />\n            ))}\n          </Box>\n        </Box>\n      </ConditionalWrapper>\n    </BGComponent>\n  )\n}\nfunction SubstatDisplay({ stat }: { stat: ICachedSubstat }) {\n  if (!stat.value) return null\n  const numRolls = stat.rolls?.length ?? 0\n  const rollColor = `roll${clamp(numRolls, 1, 6)}`\n  const unit = KeyMap.unit(stat.key)\n  return (\n    <Box display=\"flex\" gap={1} alignContent=\"center\">\n      <Typography\n        sx={{ flexGrow: 1, display: 'flex', gap: 0.5, alignItems: 'center' }}\n        color={(numRolls ? `${rollColor}.main` : 'error.main') as any}\n        component=\"span\"\n      >\n        <BootstrapTooltip\n          placement=\"top\"\n          title={\n            <Typography>\n              {stat.key && <StatColoredWithUnit statKey={stat.key} />}\n            </Typography>\n          }\n          disableInteractive\n        >\n          <Box lineHeight={0}>\n            <StatIcon statKey={stat.key} iconProps={{ fontSize: 'inherit' }} />\n          </Box>\n        </BootstrapTooltip>\n        <span>{`${cacheValueString(\n          stat.value,\n          KeyMap.unit(stat.key)\n        )}${unit}`}</span>\n      </Typography>\n    </Box>\n  )\n}\n","import { Masonry } from '@mui/lab'\nimport { Box, Divider, ListItem } from '@mui/material'\nimport { useContext, useMemo } from 'react'\nimport { DataContext } from '../../Context/DataContext'\nimport { OptimizationTargetContext } from '../../Context/OptimizationTargetContext'\nimport { DatabaseContext } from '../../Database/Database'\nimport { getDisplayHeader, getDisplaySections } from '../../Formula/DisplayUtil'\nimport type { DisplaySub } from '../../Formula/type'\nimport type { NodeDisplay } from '../../Formula/uiData'\nimport { customRead } from '../../Formula/utils'\nimport { objectMap } from '../../Util/Util'\nimport CardDark from '../Card/CardDark'\nimport CardHeaderCustom from '../Card/CardHeaderCustom'\nimport { FieldDisplayList, NodeFieldDisplay } from '../FieldDisplay'\nimport ImgIcon from '../Image/ImgIcon'\nimport SqBadge from '../SqBadge'\n\nexport default function StatDisplayComponent() {\n  const { data } = useContext(DataContext)\n  const sections = useMemo(\n    () =>\n      getDisplaySections(data).filter(([, ns]) =>\n        Object.values(ns).some((n) => !n.isEmpty)\n      ),\n    [data]\n  )\n  return (\n    <Box sx={{ mr: -1, mb: -1 }}>\n      <Masonry columns={{ xs: 1, sm: 2, md: 3, xl: 4 }} spacing={1}>\n        {sections.map(([key, Nodes]) => (\n          <Section key={key} displayNs={Nodes} sectionKey={key} />\n        ))}\n      </Masonry>\n    </Box>\n  )\n}\n\nfunction Section({\n  displayNs,\n  sectionKey,\n}: {\n  displayNs: DisplaySub<NodeDisplay>\n  sectionKey: string\n}) {\n  const optimizationTarget = useContext(OptimizationTargetContext)\n  const { data, oldData } = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const header = useMemo(\n    () => getDisplayHeader(data, sectionKey, database),\n    [database, data, sectionKey]\n  )\n  const displayNsReads = useMemo(\n    () =>\n      objectMap(displayNs, (n, nodeKey) =>\n        customRead(['display', sectionKey, nodeKey])\n      ),\n    [displayNs, sectionKey]\n  )\n  if (!header) return <CardDark></CardDark>\n\n  const { title, icon, action } = header\n  return (\n    <CardDark>\n      <CardHeaderCustom\n        avatar={icon && <ImgIcon size={2} src={icon} />}\n        title={title}\n        action={action && <SqBadge>{action}</SqBadge>}\n      />\n      <Divider />\n      <FieldDisplayList sx={{ m: 0 }}>\n        {Object.entries(displayNs).map(([nodeKey, n]) => (\n          <NodeFieldDisplay\n            key={nodeKey}\n            node={n}\n            oldValue={\n              oldData ? oldData.get(displayNsReads[nodeKey]!).value : undefined\n            }\n            component={ListItem}\n            emphasize={\n              JSON.stringify(optimizationTarget) ===\n              JSON.stringify([sectionKey, nodeKey])\n            }\n          />\n        ))}\n      </FieldDisplayList>\n    </CardDark>\n  )\n}\n","import { weaponAsset } from '@genshin-optimizer/g-assets'\nimport { BusinessCenter } from '@mui/icons-material'\nimport { Box, CardActionArea, Chip, Skeleton, Typography } from '@mui/material'\nimport { useCallback, useContext, useMemo } from 'react'\nimport { getWeaponSheet } from '../../Data/Weapons'\nimport WeaponSheet from '../../Data/Weapons/WeaponSheet'\nimport { DatabaseContext } from '../../Database/Database'\nimport { input } from '../../Formula'\nimport { computeUIData, dataObjForWeapon } from '../../Formula/api'\nimport type { NodeDisplay } from '../../Formula/uiData'\nimport { nodeVStr } from '../../Formula/uiData'\nimport useWeapon from '../../ReactHooks/useWeapon'\nimport BootstrapTooltip from '../BootstrapTooltip'\nimport CardDark from '../Card/CardDark'\nimport LocationIcon from '../Character/LocationIcon'\nimport ConditionalWrapper from '../ConditionalWrapper'\nimport WeaponNameTooltip from './WeaponNameTooltip'\n\ntype Data = {\n  weaponId?: string\n  onClick?: () => void\n  showLocation?: boolean\n  BGComponent?: React.ElementType\n}\n\nexport default function WeaponCardNano({\n  weaponId,\n  showLocation = false,\n  onClick,\n  BGComponent = CardDark,\n}: Data) {\n  const { database } = useContext(DatabaseContext)\n  const weapon = useWeapon(weaponId)\n  const weaponSheet = weapon?.key && getWeaponSheet(weapon.key)\n  const actionWrapperFunc = useCallback(\n    (children) => (\n      <CardActionArea sx={{ height: '100%' }} onClick={onClick}>\n        {children}\n      </CardActionArea>\n    ),\n    [onClick]\n  )\n  const UIData = useMemo(\n    () =>\n      weaponSheet &&\n      weapon &&\n      computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]),\n    [weaponSheet, weapon]\n  )\n  if (!weapon || !weaponSheet || !UIData)\n    return (\n      <BGComponent sx={{ height: '100%' }}>\n        <Skeleton\n          variant=\"rectangular\"\n          sx={{ width: '100%', height: '100%' }}\n        />\n      </BGComponent>\n    )\n  const { refinement, location } = weapon\n  return (\n    <BGComponent sx={{ height: '100%' }}>\n      <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\n        <Box display=\"flex\" height=\"100%\" alignItems=\"stretch\">\n          <Box\n            className={`grad-${weaponSheet.rarity}star`}\n            sx={{\n              height: '100%',\n              position: 'relative',\n              flexGrow: 1,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'flex-end',\n            }}\n          >\n            <WeaponNameTooltip sheet={weaponSheet}>\n              <Box\n                component=\"img\"\n                src={weaponAsset(weapon.key, weapon.ascension >= 2)}\n                sx={{ mx: -1, maxHeight: '100%', maxWidth: '100%' }}\n              />\n            </WeaponNameTooltip>\n            <Box\n              sx={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                p: 0.5,\n                opacity: 0.85,\n                display: 'flex',\n                justifyContent: 'space-between',\n                pointerEvents: 'none',\n              }}\n            >\n              <Chip\n                size=\"small\"\n                label={<strong>{WeaponSheet.getLevelString(weapon)}</strong>}\n                color=\"primary\"\n              />\n              {showLocation && (\n                <Chip\n                  size=\"small\"\n                  label={\n                    location ? (\n                      <LocationIcon\n                        characterKey={database.chars.LocationToCharacterKey(\n                          location\n                        )}\n                      />\n                    ) : (\n                      <BusinessCenter />\n                    )\n                  }\n                  color={'secondary'}\n                  sx={{\n                    overflow: 'visible',\n                    '.MuiChip-label': {\n                      overflow: 'visible',\n                    },\n                  }}\n                />\n              )}\n            </Box>\n            <Box\n              sx={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                p: 0.5,\n                opacity: 0.85,\n                display: 'flex',\n                justifyContent: 'flex-end',\n                alignItems: 'flex-end',\n              }}\n            >\n              {weaponSheet.hasRefinement && (\n                <Chip\n                  size=\"small\"\n                  color=\"info\"\n                  label={<strong>R{refinement}</strong>}\n                />\n              )}\n            </Box>\n          </Box>\n          <Box display=\"flex\" flexDirection=\"column\" sx={{ p: 1 }}>\n            <WeaponStat node={UIData.get(input.weapon.main)} />\n            <WeaponStat node={UIData.get(input.weapon.sub)} />\n          </Box>\n        </Box>\n      </ConditionalWrapper>\n    </BGComponent>\n  )\n}\nfunction WeaponStat({ node }: { node: NodeDisplay }) {\n  if (!node.info.name) return null\n  return (\n    <Box display=\"flex\" gap={1} alignContent=\"center\">\n      <Typography\n        sx={{ flexGrow: 1, display: 'flex', gap: 1 }}\n        component=\"span\"\n      >\n        <BootstrapTooltip\n          placement=\"top\"\n          title={<Typography>{node.info.name}</Typography>}\n          disableInteractive\n        >\n          <span>{node.info.icon}</span>\n        </BootstrapTooltip>\n        <span>{nodeVStr(node)}</span>\n      </Typography>\n    </Box>\n  )\n}\n","import type { ArtifactSetKey, ArtifactSlotKey } from '@genshin-optimizer/consts'\nimport { Box, Typography } from '@mui/material'\nimport { useMemo } from 'react'\nimport ArtifactSetTooltip from '../../../../../Components/Artifact/ArtifactSetTooltip'\nimport SlotIcon from '../../../../../Components/Artifact/SlotIcon'\nimport SqBadge from '../../../../../Components/SqBadge'\nimport { getArtSheet } from '../../../../../Data/Artifacts'\nimport { iconInlineProps } from '../../../../../SVGIcons'\nimport type { ICachedArtifact } from '../../../../../Types/artifact'\n\ntype ArtifactSetBadgesProps = {\n  artifacts: ICachedArtifact[]\n  currentlyEquipped?: boolean\n}\nexport function ArtifactSetBadges({\n  artifacts,\n  currentlyEquipped = false,\n}: ArtifactSetBadgesProps) {\n  const setToSlots: Partial<Record<ArtifactSetKey, ArtifactSlotKey[]>> =\n    useMemo(\n      () =>\n        artifacts\n          .filter((arti) => arti)\n          .reduce((acc, curr) => {\n            acc[curr.setKey]\n              ? acc[curr.setKey].push(curr.slotKey)\n              : (acc[curr.setKey] = [curr.slotKey])\n            return acc\n          }, {}),\n      [artifacts]\n    )\n  return (\n    <>\n      {Object.entries(setToSlots)\n        .sort(\n          ([_k1, slotarr1], [_k2, slotarr2]) =>\n            slotarr2.length - slotarr1.length\n        )\n        .map(([key, slotarr]) => (\n          <ArtifactSetBadge\n            key={key}\n            setKey={key}\n            currentlyEquipped={currentlyEquipped}\n            slotarr={slotarr}\n          />\n        ))}\n    </>\n  )\n}\nfunction ArtifactSetBadge({\n  setKey,\n  currentlyEquipped = false,\n  slotarr,\n}: {\n  setKey: ArtifactSetKey\n  currentlyEquipped: boolean\n  slotarr: ArtifactSlotKey[]\n}) {\n  const artifactSheet = getArtSheet(setKey)\n  const numInSet = slotarr.length\n  const setActive = Object.keys(artifactSheet.setEffects)\n    .map((setKey) => parseInt(setKey))\n    .filter((setNum) => setNum <= numInSet)\n  return (\n    <Box>\n      <ArtifactSetTooltip artifactSheet={artifactSheet} numInSet={numInSet}>\n        <SqBadge\n          sx={{ height: '100%' }}\n          color={currentlyEquipped ? 'success' : 'primary'}\n        >\n          <Typography>\n            {slotarr.map((slotKey) => (\n              <SlotIcon\n                key={slotKey}\n                slotKey={slotKey}\n                iconProps={iconInlineProps}\n              />\n            ))}{' '}\n            {artifactSheet.name ?? ''}\n            {setActive.map((n, i) => (\n              <SqBadge sx={{ ml: 0.5 }} key={'' + n + i} color=\"success\">\n                {n}\n              </SqBadge>\n            ))}\n          </Typography>\n        </SqBadge>\n      </ArtifactSetTooltip>\n    </Box>\n  )\n}\n","import type { LocationCharacterKey } from '@genshin-optimizer/consts'\nimport {\n  allArtifactSlotKeys,\n  charKeyToLocCharKey,\n} from '@genshin-optimizer/consts'\nimport { Checkroom, ChevronRight } from '@mui/icons-material'\nimport BlockIcon from '@mui/icons-material/Block'\nimport CheckBoxIcon from '@mui/icons-material/CheckBox'\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank'\nimport ShowChartIcon from '@mui/icons-material/ShowChart'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Grid,\n  Skeleton,\n  Typography,\n} from '@mui/material'\nimport { Suspense, useCallback, useContext, useMemo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport ArtifactCardNano from '../../../../../Components/Artifact/ArtifactCardNano'\nimport BootstrapTooltip from '../../../../../Components/BootstrapTooltip'\nimport CardDark from '../../../../../Components/Card/CardDark'\nimport CardLight from '../../../../../Components/Card/CardLight'\nimport StatDisplayComponent from '../../../../../Components/Character/StatDisplayComponent'\nimport ColorText from '../../../../../Components/ColoredText'\nimport ModalWrapper from '../../../../../Components/ModalWrapper'\nimport SqBadge from '../../../../../Components/SqBadge'\nimport WeaponCardNano from '../../../../../Components/Weapon/WeaponCardNano'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport { DataContext } from '../../../../../Context/DataContext'\nimport { getCharSheet } from '../../../../../Data/Characters'\nimport { DatabaseContext } from '../../../../../Database/Database'\nimport type { AllowLocationsState } from '../../../../../Database/DataManagers/BuildSettingData'\nimport { uiInput as input } from '../../../../../Formula'\nimport ArtifactCard from '../../../../../PageArtifact/ArtifactCard'\nimport type { ICachedArtifact } from '../../../../../Types/artifact'\nimport { toggleArr } from '../../../../../Util/Util'\nimport useBuildSetting from '../useBuildSetting'\nimport { ArtifactSetBadges } from './ArtifactSetBadges'\n\ntype NewOld = {\n  newId: string\n  oldId?: string\n}\n\ntype BuildDisplayItemProps = {\n  label?: Displayable\n  compareBuild: boolean\n  disabled?: boolean\n  extraButtonsRight?: JSX.Element\n  extraButtonsLeft?: JSX.Element\n}\n//for displaying each artifact build\nexport default function BuildDisplayItem({\n  label,\n  compareBuild,\n  extraButtonsRight,\n  extraButtonsLeft,\n  disabled,\n}: BuildDisplayItemProps) {\n  const {\n    character: { key: characterKey, equippedArtifacts },\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { mainStatAssumptionLevel, allowLocationsState },\n  } = useBuildSetting(characterKey)\n  const { database } = useContext(DatabaseContext)\n  const dataContext = useContext(DataContext)\n\n  const { data, oldData } = dataContext\n  const [newOld, setNewOld] = useState(undefined as NewOld | undefined)\n  const close = useCallback(() => setNewOld(undefined), [setNewOld])\n\n  const equipBuild = useCallback(() => {\n    if (!window.confirm('Do you want to equip this build to this character?'))\n      return\n    const char = database.chars.get(characterKey)\n    if (!char) return\n    allArtifactSlotKeys.forEach((s) => {\n      const aid = data.get(input.art[s].id).value\n      if (aid)\n        database.arts.set(aid, { location: charKeyToLocCharKey(characterKey) })\n      else {\n        const oldAid = char.equippedArtifacts[s]\n        if (oldAid && database.arts.get(oldAid))\n          database.arts.set(oldAid, { location: '' })\n      }\n    })\n    const weapon = data.get(input.weapon.id).value\n    if (weapon)\n      database.weapons.set(weapon, {\n        location: charKeyToLocCharKey(characterKey),\n      })\n  }, [characterKey, data, database])\n\n  const statProviderContext = useMemo(() => {\n    const dataContext_ = { ...dataContext }\n    if (!compareBuild) dataContext_.oldData = undefined\n    return dataContext_\n  }, [dataContext, compareBuild])\n\n  const artifactIdsBySlot = useMemo(\n    () =>\n      Object.fromEntries(\n        allArtifactSlotKeys.map((slotKey) => [\n          slotKey,\n          data.get(input.art[slotKey].id).value,\n        ])\n      ),\n    [data]\n  )\n  const artifacts = useMemo(\n    () =>\n      artifactIdsBySlot &&\n      (Object.values(artifactIdsBySlot)\n        .map((artiId: string) => database.arts.get(artiId))\n        .filter((arti) => arti) as ICachedArtifact[]),\n    [artifactIdsBySlot, database.arts]\n  )\n\n  // Memoize Arts because of its dynamic onClick\n  const artNanos = useMemo(\n    () =>\n      allArtifactSlotKeys.map((slotKey) => (\n        <Grid item xs={1} key={slotKey}>\n          <ArtifactCardNano\n            showLocation\n            slotKey={slotKey}\n            artifactId={artifactIdsBySlot[slotKey]}\n            mainStatAssumptionLevel={mainStatAssumptionLevel}\n            onClick={() => {\n              const oldId = equippedArtifacts[slotKey]\n              const newId = artifactIdsBySlot[slotKey]!\n              setNewOld({ oldId: oldId !== newId ? oldId : undefined, newId })\n            }}\n          />\n        </Grid>\n      )),\n    [setNewOld, equippedArtifacts, mainStatAssumptionLevel, artifactIdsBySlot]\n  )\n\n  if (!oldData) return null\n  const currentlyEquipped =\n    allArtifactSlotKeys.every(\n      (slotKey) =>\n        artifactIdsBySlot[slotKey] === oldData.get(input.art[slotKey].id).value\n    ) && data.get(input.weapon.id).value === oldData.get(input.weapon.id).value\n\n  return (\n    <CardLight>\n      <Suspense\n        fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}\n      >\n        {newOld && (\n          <CompareArtifactModal\n            newOld={newOld}\n            mainStatAssumptionLevel={mainStatAssumptionLevel}\n            onClose={close}\n            allowLocationsState={allowLocationsState}\n          />\n        )}\n        <CardContent>\n          <Box display=\"flex\" gap={1} sx={{ pb: 1 }} flexWrap=\"wrap\">\n            {label !== undefined && (\n              <SqBadge color=\"info\">\n                <Typography>\n                  <strong>\n                    {label}\n                    {currentlyEquipped ? ' (Equipped)' : ''}\n                  </strong>\n                </Typography>\n              </SqBadge>\n            )}\n            <ArtifactSetBadges\n              artifacts={artifacts}\n              currentlyEquipped={currentlyEquipped}\n            />\n            <Box\n              sx={{ flexGrow: 1, display: 'flex', justifyContent: 'flex-end' }}\n            />\n            {extraButtonsLeft}\n            <Button\n              size=\"small\"\n              color=\"success\"\n              onClick={equipBuild}\n              disabled={disabled || currentlyEquipped}\n              startIcon={<Checkroom />}\n            >\n              Equip Build\n            </Button>\n            {extraButtonsRight}\n          </Box>\n          <Grid\n            container\n            spacing={1}\n            sx={{ pb: 1 }}\n            columns={{ xs: 2, sm: 3, md: 4, lg: 6 }}\n          >\n            <Grid item xs={1}>\n              <WeaponCardNano\n                showLocation\n                weaponId={data.get(input.weapon.id).value}\n              />\n            </Grid>\n            {artNanos}\n          </Grid>\n          <DataContext.Provider value={statProviderContext}>\n            <StatDisplayComponent />\n          </DataContext.Provider>\n        </CardContent>\n      </Suspense>\n    </CardLight>\n  )\n}\n\nfunction CompareArtifactModal({\n  newOld: { newId, oldId },\n  mainStatAssumptionLevel,\n  onClose,\n  allowLocationsState,\n}: {\n  newOld: NewOld\n  mainStatAssumptionLevel: number\n  onClose: () => void\n  allowLocationsState: AllowLocationsState\n}) {\n  const { database } = useContext(DatabaseContext)\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const onEquip = useCallback(() => {\n    if (\n      !window.confirm('Do you want to equip this artifact to this character?')\n    )\n      return\n    database.arts.set(newId, { location: charKeyToLocCharKey(characterKey) })\n    onClose()\n  }, [newId, database, characterKey, onClose])\n  const newLoc = database.arts.get(newId)?.location ?? ''\n  return (\n    <ModalWrapper\n      open={!!newId}\n      onClose={onClose}\n      containerProps={{ maxWidth: oldId ? 'md' : 'xs' }}\n    >\n      <CardDark>\n        <CardContent\n          sx={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'stretch',\n            gap: 2,\n          }}\n        >\n          {oldId && (\n            <Box minWidth={320}>\n              <ArtifactCard\n                artifactId={oldId}\n                mainStatAssumptionLevel={mainStatAssumptionLevel}\n                canEquip\n                editorProps={{ disableSet: true, disableSlot: true }}\n                extraButtons={<ExcludeButton id={oldId} />}\n              />\n            </Box>\n          )}\n          {oldId && <Box display=\"flex\" flexGrow={1} />}\n          {oldId && (\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n              <Button onClick={onEquip} sx={{ display: 'flex' }}>\n                <ChevronRight sx={{ fontSize: 40 }} />\n              </Button>\n            </Box>\n          )}\n          {oldId && <Box display=\"flex\" flexGrow={1} />}\n          <Box minWidth={320} display=\"flex\" flexDirection=\"column\" gap={1}>\n            <ArtifactCard\n              artifactId={newId}\n              mainStatAssumptionLevel={mainStatAssumptionLevel}\n              canEquip\n              editorProps={{ disableSet: true, disableSlot: true }}\n              extraButtons={<ExcludeButton id={newId} />}\n            />\n            {newLoc &&\n              newLoc !== charKeyToLocCharKey(characterKey) &&\n              allowLocationsState !== 'all' && (\n                <ExcludeEquipButton locationKey={newLoc} />\n              )}\n          </Box>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  )\n}\nfunction ExcludeButton({ id }: { id: string }) {\n  const { t } = useTranslation('page_character_optimize')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { artExclusion },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const excluded = artExclusion.includes(id)\n  const toggle = useCallback(\n    () => buildSettingDispatch({ artExclusion: toggleArr(artExclusion, id) }),\n    [id, artExclusion, buildSettingDispatch]\n  )\n\n  return (\n    <BootstrapTooltip\n      title={\n        <Box>\n          <Typography>{t`excludeArt.excludeArtifactTip`}</Typography>\n          <Typography>\n            <ColorText color={excluded ? 'error' : 'success'}>\n              {t(excluded ? 'excludeArt.excluded' : 'excludeArt.included')}\n            </ColorText>\n          </Typography>\n        </Box>\n      }\n      placement=\"top\"\n      arrow\n    >\n      <Button\n        onClick={toggle}\n        color={excluded ? 'error' : 'success'}\n        size=\"small\"\n      >\n        {excluded ? <BlockIcon /> : <ShowChartIcon />}\n      </Button>\n    </BootstrapTooltip>\n  )\n}\nfunction ExcludeEquipButton({\n  locationKey,\n}: {\n  locationKey: LocationCharacterKey\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const characterSheet = getCharSheet(\n    database.chars.LocationToCharacterKey(locationKey)\n  )\n  const {\n    buildSetting: { excludedLocations },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const excluded = excludedLocations.includes(locationKey)\n  const toggle = useCallback(\n    () =>\n      buildSettingDispatch({\n        excludedLocations: toggleArr(excludedLocations, locationKey),\n      }),\n    [locationKey, excludedLocations, buildSettingDispatch]\n  )\n\n  return (\n    <Button\n      onClick={toggle}\n      color={excluded ? 'secondary' : 'success'}\n      size=\"small\"\n      startIcon={excluded ? <CheckBoxOutlineBlankIcon /> : <CheckBoxIcon />}\n    >\n      <span>\n        {t`excludeChar.allowEquip`} <strong>{characterSheet.name}</strong>\n      </span>\n    </Button>\n  )\n}\n","import { useCallback, useContext, useEffect, useState } from 'react'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport type { IBuildResult } from '../../../../Database/DataManagers/BuildResult'\nimport type { CharacterKey } from '../../../../Types/consts'\n\nexport default function useBuildResult(characterKey: CharacterKey) {\n  const { database } = useContext(DatabaseContext)\n  const [buildResult, setBuildResult] = useState(() =>\n    database.buildResult.get(characterKey)\n  )\n  useEffect(\n    () => setBuildResult(database.buildResult.get(characterKey)),\n    [database, characterKey]\n  )\n  useEffect(\n    () =>\n      database.buildResult.follow(\n        characterKey,\n        (k, r, v) => r === 'update' && setBuildResult(v)\n      ),\n    [characterKey, setBuildResult, database]\n  )\n  const buildResultDispatch = useCallback(\n    (action: Partial<IBuildResult>) =>\n      characterKey && database.buildResult.set(characterKey, action),\n    [characterKey, database]\n  )\n\n  return { buildResult, buildResultDispatch }\n}\n","import type { DotProps } from 'recharts'\nimport type EnhancedPoint from './EnhancedPoint'\n\ntype CustomShapeType = 'circle' | 'diamond' | 'square'\ntype CustomDotProps = DotProps & {\n  selectedPoint: EnhancedPoint | undefined\n  payload?: EnhancedPoint\n  radiusSelected?: number\n  radiusUnselected?: number\n  colorSelected?: string\n  colorUnselected: string\n  shape?: CustomShapeType\n}\nexport default function CustomDot({\n  cx,\n  cy,\n  payload,\n  selectedPoint,\n  radiusSelected = 6,\n  radiusUnselected = 3,\n  colorSelected = 'red',\n  colorUnselected,\n  shape = 'circle',\n}: CustomDotProps) {\n  if (!cx || !cy || !payload) {\n    return null\n  }\n\n  const isSelected =\n    selectedPoint &&\n    selectedPoint.x === payload.x &&\n    selectedPoint.y === payload.y\n\n  return (\n    <g\n      className=\"custom-dot\"\n      data-chart-x={cx}\n      data-chart-y={cy}\n      data-x-value={payload.x}\n      data-y-value={payload.y}\n      data-radius={isSelected ? radiusUnselected : radiusSelected}\n    >\n      {!isSelected ? (\n        <CustomShape\n          id=\"customShapeUnselected\"\n          shape={shape}\n          cx={cx}\n          cy={cy}\n          r={radiusUnselected}\n          fill={colorUnselected}\n        />\n      ) : (\n        <>\n          <CustomShape\n            id=\"customShapeSelected\"\n            shape={shape}\n            cx={cx}\n            cy={cy}\n            r={radiusSelected / 2}\n            fill={colorSelected}\n          />\n          <CustomShape\n            id=\"customShapeBorder\"\n            shape={shape}\n            cx={cx}\n            cy={cy}\n            r={radiusSelected}\n            fill=\"none\"\n            stroke={colorSelected}\n          />\n        </>\n      )}\n    </g>\n  )\n}\nfunction CustomShape({\n  shape,\n  id,\n  cx,\n  cy,\n  r,\n  fill,\n  stroke,\n}: {\n  shape: CustomShapeType\n  id?: string\n  cx: number\n  cy: number\n  r: number\n  fill?: string\n  stroke?: string\n}) {\n  switch (shape) {\n    case 'circle':\n      return (\n        <circle id={id} cx={cx} cy={cy} r={r} fill={fill} stroke={stroke} />\n      )\n    case 'square':\n      return (\n        <rect\n          id={id}\n          x={cx - r}\n          y={cy - r}\n          width={r * 2}\n          height={r * 2}\n          fill={fill}\n          stroke={stroke}\n        />\n      )\n    case 'diamond':\n      return (\n        <polygon\n          id={id}\n          points={`${cx},${cy + r * 2.5} ${cx + r * 1.5},${cy} ${cx},${\n            cy - r * 2.5\n          } ${cx - r * 1.5},${cy}`}\n          fill={fill}\n          stroke={stroke}\n        />\n      )\n  }\n}\n","import { allArtifactSlotKeys } from '@genshin-optimizer/consts'\nimport {\n  Button,\n  CardContent,\n  ClickAwayListener,\n  Grid,\n  Skeleton,\n  Stack,\n  Typography,\n} from '@mui/material'\nimport { Suspense, useCallback, useContext, useMemo } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport type { TooltipProps } from 'recharts'\nimport ArtifactCardPico from '../../../../../../Components/Artifact/ArtifactCardPico'\nimport BootstrapTooltip from '../../../../../../Components/BootstrapTooltip'\nimport CardDark from '../../../../../../Components/Card/CardDark'\nimport CloseButton from '../../../../../../Components/CloseButton'\nimport SqBadge from '../../../../../../Components/SqBadge'\nimport { DataContext } from '../../../../../../Context/DataContext'\nimport { DatabaseContext } from '../../../../../../Database/Database'\nimport { input } from '../../../../../../Formula'\nimport type { Unit } from '../../../../../../KeyMap'\nimport { valueString } from '../../../../../../KeyMap'\nimport type { ICachedArtifact } from '../../../../../../Types/artifact'\nimport { ArtifactSetBadges } from '../ArtifactSetBadges'\nimport type EnhancedPoint from './EnhancedPoint'\n\ntype CustomTooltipProps = TooltipProps<number, string> & {\n  xLabel: Displayable\n  xUnit: Unit | undefined\n  yLabel: Displayable\n  yUnit: Unit | undefined\n  selectedPoint: EnhancedPoint | undefined\n  setSelectedPoint: (pt: EnhancedPoint | undefined) => void\n  addBuildToList: (build: string[]) => void\n}\nexport default function CustomTooltip({\n  xLabel,\n  xUnit,\n  yLabel,\n  yUnit,\n  selectedPoint,\n  setSelectedPoint,\n  addBuildToList,\n  ...tooltipProps\n}: CustomTooltipProps) {\n  const { database } = useContext(DatabaseContext)\n  const { data } = useContext(DataContext)\n  const { t } = useTranslation('page_character_optimize')\n\n  const artifactsBySlot: { [slot: string]: ICachedArtifact } = useMemo(\n    () =>\n      selectedPoint &&\n      selectedPoint.artifactIds &&\n      Object.fromEntries(\n        selectedPoint.artifactIds\n          .map((id) => {\n            const artiObj = database.arts.get(id)\n            return [artiObj?.slotKey, artiObj]\n          })\n          .filter((arti) => arti)\n      ),\n    [database.arts, selectedPoint]\n  )\n  const clickAwayHandler = useCallback(\n    (e) => {\n      if (\n        !(\n          e.target.id.includes('customShape') ||\n          e.target.id.includes('chartContainer')\n        )\n      ) {\n        setSelectedPoint(undefined)\n      }\n    },\n    [setSelectedPoint]\n  )\n\n  const currentlyEquipped =\n    artifactsBySlot &&\n    allArtifactSlotKeys.every(\n      (slotKey) =>\n        artifactsBySlot[slotKey]?.id === data.get(input.art[slotKey].id).value\n    )\n\n  const generLabel = useMemo(\n    () =>\n      selectedPoint?.generBuildNumber !== undefined &&\n      `#${selectedPoint?.generBuildNumber}`,\n    [selectedPoint]\n  )\n  const graphLabel = useMemo(\n    () =>\n      selectedPoint?.graphBuildNumber !== undefined && (\n        <Trans\n          t={t}\n          i18nKey=\"graphBuildLabel\"\n          count={selectedPoint?.graphBuildNumber}\n        >\n          Graph #{{ count: selectedPoint?.graphBuildNumber + 1 }}\n        </Trans>\n      ),\n    [selectedPoint, t]\n  )\n\n  if (tooltipProps.active && selectedPoint) {\n    return (\n      <ClickAwayListener onClickAway={clickAwayHandler}>\n        <CardDark\n          sx={{ minWidth: '400px', maxWidth: '400px' }}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <CardContent>\n            <Stack gap={1}>\n              <Stack direction=\"row\" alignItems=\"start\" gap={1}>\n                <Stack spacing={0.5} flexGrow={99}>\n                  {currentlyEquipped && (\n                    <SqBadge color=\"info\">\n                      <strong>{t('currentlyEquippedBuild')}</strong>\n                    </SqBadge>\n                  )}\n                  {generLabel && <SqBadge color=\"info\">{generLabel}</SqBadge>}\n                  {graphLabel && <SqBadge color=\"info\">{graphLabel}</SqBadge>}\n                  <Suspense fallback={<Skeleton width={300} height={50} />}>\n                    <ArtifactSetBadges\n                      artifacts={Object.values(artifactsBySlot)}\n                      currentlyEquipped={currentlyEquipped}\n                    />\n                  </Suspense>\n                </Stack>\n                <Grid item flexGrow={1} />\n                <CloseButton onClick={() => setSelectedPoint(undefined)} />\n              </Stack>\n              <Grid container direction=\"row\" spacing={0.75} columns={5}>\n                {allArtifactSlotKeys.map((key) => (\n                  <Grid item key={key} xs={1}>\n                    <Suspense fallback={<Skeleton width={75} height={75} />}>\n                      <ArtifactCardPico\n                        artifactObj={artifactsBySlot[key]}\n                        slotKey={key}\n                      />\n                    </Suspense>\n                  </Grid>\n                ))}\n              </Grid>\n              <Typography>\n                <strong>{xLabel}</strong>:{' '}\n                {valueString(\n                  xUnit === '%' ? selectedPoint.x / 100 : selectedPoint.x,\n                  xUnit\n                )}\n              </Typography>\n              <Typography>\n                <strong>{yLabel}</strong>:{' '}\n                {valueString(\n                  yUnit === '%' ? selectedPoint.y / 100 : selectedPoint.y,\n                  yUnit\n                )}\n              </Typography>\n              <BootstrapTooltip\n                title={\n                  selectedPoint.highlighted\n                    ? t('tcGraph.buildAlreadyInList')\n                    : ''\n                }\n                placement=\"top\"\n              >\n                <span>\n                  <Button\n                    sx={{ width: '100%' }}\n                    disabled={selectedPoint?.graphBuildNumber !== undefined}\n                    color=\"info\"\n                    onClick={() => addBuildToList(selectedPoint.artifactIds)}\n                  >\n                    {t('addBuildToList')}\n                  </Button>\n                </span>\n              </BootstrapTooltip>\n            </Stack>\n          </CardContent>\n        </CardDark>\n      </ClickAwayListener>\n    )\n  }\n\n  return null\n}\n","export default class EnhancedPoint {\n  public x: number\n  public trueY?: number\n  public artifactIds: string[]\n  public min?: number\n  public current?: number\n  public highlighted?: number\n  public generBuildNumber?: number\n  public graphBuildNumber?: number\n\n  public constructor(x: number, y: number, artifactIds: string[]) {\n    this.x = x\n    this.trueY = y\n    this.artifactIds = artifactIds\n  }\n\n  public get y(): number {\n    return (this.trueY || this.current || this.highlighted) as number\n  }\n  public set y(y: number | undefined) {\n    this.trueY = y\n  }\n}\n","import { allArtifactSlotKeys } from '@genshin-optimizer/consts'\nimport {\n  CheckBox,\n  CheckBoxOutlineBlank,\n  Download,\n  Replay,\n} from '@mui/icons-material'\nimport {\n  Button,\n  CardContent,\n  Collapse,\n  Divider,\n  Grid,\n  Slider,\n  Typography,\n} from '@mui/material'\nimport type { TFunction } from 'i18next'\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport type { LegendType } from 'recharts'\nimport {\n  CartesianGrid,\n  ComposedChart,\n  Label,\n  Legend,\n  Line,\n  ResponsiveContainer,\n  Scatter,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts'\nimport BootstrapTooltip from '../../../../../../Components/BootstrapTooltip'\nimport CardDark from '../../../../../../Components/Card/CardDark'\nimport CardLight from '../../../../../../Components/Card/CardLight'\nimport InfoTooltip from '../../../../../../Components/InfoTooltip'\nimport ReadOnlyTextArea from '../../../../../../Components/ReadOnlyTextArea'\nimport { CharacterContext } from '../../../../../../Context/CharacterContext'\nimport { DataContext } from '../../../../../../Context/DataContext'\nimport { GraphContext } from '../../../../../../Context/GraphContext'\nimport { input } from '../../../../../../Formula'\nimport type { NumNode } from '../../../../../../Formula/type'\nimport { valueString } from '../../../../../../KeyMap'\nimport { objectKeyMap, objPathValue } from '../../../../../../Util/Util'\nimport useBuildResult from '../../useBuildResult'\nimport OptimizationTargetSelector from '../OptimizationTargetSelector'\nimport CustomDot from './CustomDot'\nimport CustomTooltip from './CustomTooltip'\nimport EnhancedPoint from './EnhancedPoint'\n\nexport type Point = {\n  x: number\n  y: number\n  artifactIds: string[]\n  min?: number\n}\ntype ChartCardProps = {\n  plotBase?: string[]\n  setPlotBase: (path: string[] | undefined) => void\n  disabled?: boolean\n  showTooltip?: boolean\n}\nexport default function ChartCard({\n  plotBase,\n  setPlotBase,\n  disabled = false,\n  showTooltip = false,\n}: ChartCardProps) {\n  const { t } = useTranslation(['page_character_optimize', 'ui'])\n  const { data } = useContext(DataContext)\n  const { chartData } = useContext(GraphContext)\n  const [showDownload, setshowDownload] = useState(false)\n  const [showMin, setshowMin] = useState(true)\n  const { graphBuilds } = useContext(GraphContext)\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const {\n    buildResult: { builds: generatedBuilds },\n  } = useBuildResult(characterKey)\n\n  const [sliderLow, setSliderLow] = useState(-Infinity)\n  const [sliderHigh, setSliderHigh] = useState(Infinity)\n  const setSlider = useCallback(\n    (_e: unknown, value: number | number[]) => {\n      if (typeof value === 'number') throw new TypeError()\n      const [l, h] = value\n      setSliderLow(l)\n      setSliderHigh(h)\n    },\n    [setSliderLow, setSliderHigh]\n  )\n  useEffect(() => {\n    setSliderLow(-Infinity)\n    setSliderHigh(Infinity)\n  }, [chartData])\n\n  const { displayData, downloadData, sliderMin, sliderMax } = useMemo(() => {\n    if (!chartData) return { displayData: null, downloadData: null }\n    let sliderMin = Infinity\n    let sliderMax = -Infinity\n    const currentBuild = allArtifactSlotKeys.map(\n      (slotKey) => data?.get(input.art[slotKey].id).value ?? ''\n    )\n    // Shape the data so we know the current and highlighted builds\n    const points = chartData.data\n      .map(({ value: y, plot: x, artifactIds }) => {\n        if (x === undefined) return null\n        if (x < sliderMin) sliderMin = x\n        if (x > sliderMax) sliderMax = x\n        const enhancedDatum: EnhancedPoint = new EnhancedPoint(\n          x,\n          y,\n          artifactIds\n        )\n        const datumBuildMap = objectKeyMap(artifactIds, (_) => true)\n\n        const isCurrentBuild = currentBuild.every((aId) => datumBuildMap[aId])\n        if (isCurrentBuild) {\n          enhancedDatum.current = y\n          // Remove the Y-value so there are not 2 dots displayed for these builds\n          enhancedDatum.y = undefined\n          // Don't return yet, still need to check if build is highlighted\n          console.log(enhancedDatum)\n        }\n\n        const graphBuildIndex = graphBuilds?.findIndex((build) =>\n          build.every((aId) => datumBuildMap[aId])\n        )\n        if (graphBuildIndex !== undefined && graphBuildIndex !== -1) {\n          // Skip setting y-value if it has already been set.\n          if (isCurrentBuild) console.log(enhancedDatum)\n          if (enhancedDatum.trueY !== undefined) {\n            enhancedDatum.highlighted = y\n            // Remove the Y-value so there are not 2 dots displayed for these builds\n            enhancedDatum.y = undefined\n          }\n          enhancedDatum.graphBuildNumber = graphBuildIndex + 1\n          if (isCurrentBuild) console.log(enhancedDatum)\n        }\n\n        const generBuildIndex = generatedBuilds.findIndex((build) =>\n          build.every((aId) => datumBuildMap[aId])\n        )\n        if (generBuildIndex !== -1) {\n          // Skip setting y-value if it has already been set.\n          if (isCurrentBuild) console.log(enhancedDatum)\n          if (enhancedDatum.trueY !== undefined) {\n            enhancedDatum.highlighted = y\n            // Remove the Y-value so there are not 2 dots displayed for these builds\n            enhancedDatum.y = undefined\n          }\n          enhancedDatum.generBuildNumber = generBuildIndex + 1\n          if (isCurrentBuild) console.log(enhancedDatum)\n        }\n\n        return enhancedDatum\n      })\n      .filter((pt): pt is NonNullable<EnhancedPoint> => pt !== null)\n      .sort((a, b) => a.x - b.x)\n\n    const minimumData: EnhancedPoint[] = []\n    for (const point of points) {\n      let last: EnhancedPoint | undefined\n      while ((last = minimumData.pop())) {\n        if (last.y > point.y) {\n          minimumData.push(last)\n          break\n        }\n      }\n      minimumData.push(point)\n    }\n\n    // Note:\n    // We can also just use `minimumData` if the plotter supports multiple data sources.\n    // It could be faster too since there're no empty entries in `minimumData`.\n    // From my limited testing, using multiple data sources makes the graph behave strangely though.\n    if (minimumData[0]?.x !== points[0]?.x) points[0].min = minimumData[0].y\n    minimumData.forEach((pt) => {\n      pt.min = pt.y\n    })\n\n    const downloadData = {\n      minimum: minimumData.map((point) => [point.x, point.y]),\n      allData: points.map((point) => [point.x, point.y]),\n    }\n    return {\n      displayData: points.filter(\n        (pt) => pt && pt.x >= sliderLow && pt.x <= sliderHigh\n      ),\n      downloadData,\n      sliderMin,\n      sliderMax,\n    }\n  }, [chartData, generatedBuilds, data, graphBuilds, sliderLow, sliderHigh])\n\n  const plotBaseNode = plotBase && objPathValue(data?.getDisplay(), plotBase)\n  const invalidTarget = plotBase && (!plotBaseNode || plotBaseNode.isEmpty)\n\n  const buttonText = invalidTarget\n    ? t('page_character_optimize:targetSelector.invalidTarget')\n    : t('page_character_optimize:targetSelector.selectGraphTarget')\n\n  return (\n    <CardLight>\n      <CardContent>\n        <Grid container spacing={1} alignItems=\"center\">\n          <Grid item>\n            <Typography>{t`tcGraph.vs`}</Typography>\n          </Grid>\n          <Grid item>\n            <BootstrapTooltip\n              placement=\"top\"\n              title={\n                showTooltip\n                  ? t('page_character_optimize:selectTargetFirst')\n                  : ''\n              }\n            >\n              <span>\n                <OptimizationTargetSelector\n                  optimizationTarget={plotBase}\n                  setTarget={(target) => setPlotBase(target)}\n                  defaultText={buttonText}\n                  disabled={disabled}\n                />\n              </span>\n            </BootstrapTooltip>\n          </Grid>\n          <Grid item>\n            <BootstrapTooltip\n              title={!plotBase ? '' : t('ui:reset')}\n              placement=\"top\"\n            >\n              <span>\n                <Button\n                  color=\"error\"\n                  onClick={() => setPlotBase(undefined)}\n                  disabled={!plotBase || disabled}\n                >\n                  <Replay />\n                </Button>\n              </span>\n            </BootstrapTooltip>\n          </Grid>\n          <Grid item flexGrow={1}>\n            <InfoTooltip\n              placement=\"top\"\n              title={t('page_character_optimize:tcGraph.desc')}\n            />\n          </Grid>\n          {!!downloadData && (\n            <Grid item>\n              <Button\n                size=\"small\"\n                startIcon={showMin ? <CheckBox /> : <CheckBoxOutlineBlank />}\n                color={showMin ? 'success' : 'secondary'}\n                onClick={() => setshowMin(!showMin)}\n              >{t`tcGraph.showStatThr`}</Button>\n            </Grid>\n          )}\n          {!!downloadData && (\n            <Grid item>\n              <Button\n                size=\"small\"\n                color=\"info\"\n                startIcon={<Download />}\n                onClick={() => setshowDownload(!showDownload)}\n              >{t`tcGraph.downloadData`}</Button>\n            </Grid>\n          )}\n        </Grid>\n      </CardContent>\n      {displayData && displayData.length && <Divider />}\n      {chartData && displayData && displayData.length && (\n        <CardContent>\n          <Collapse in={!!downloadData && showDownload}>\n            <CardDark sx={{ mb: 2 }}>\n              <CardContent>\n                <Typography>Min Data</Typography>\n                <ReadOnlyTextArea\n                  value={JSON.stringify(downloadData?.minimum)}\n                />\n                <Typography>All Data</Typography>\n                <ReadOnlyTextArea\n                  value={JSON.stringify(downloadData?.allData)}\n                />\n              </CardContent>\n            </CardDark>\n          </Collapse>\n          <Chart\n            displayData={displayData}\n            plotNode={chartData.plotNode}\n            valueNode={chartData.valueNode}\n            showMin={showMin}\n          />\n          {displayData.length > 1 && (\n            <Slider\n              marks\n              value={[sliderLow, sliderHigh]}\n              onChange={setSlider}\n              onChangeCommitted={setSlider}\n              min={sliderMin}\n              max={sliderMax}\n              step={(sliderMax - sliderMin) / 20}\n              valueLabelDisplay=\"auto\"\n              valueLabelFormat={(n) =>\n                valueString(\n                  chartData.plotNode.info?.unit === '%' ? n / 100 : n,\n                  chartData.plotNode.info?.unit\n                )\n              }\n              sx={{ ml: '6%', width: '93%' }}\n            />\n          )}\n        </CardContent>\n      )}\n    </CardLight>\n  )\n}\n\nconst optTargetColor = '#8884d8'\nconst highlightedColor = 'cyan'\nconst currentColor = '#46a046'\nconst lineColor = '#ff7300'\nfunction Chart({\n  displayData,\n  plotNode,\n  valueNode,\n  showMin,\n}: {\n  displayData: EnhancedPoint[]\n  plotNode: NumNode\n  valueNode: NumNode\n  showMin: boolean\n}) {\n  const { graphBuilds, setGraphBuilds } = useContext(GraphContext)\n  const { t } = useTranslation('page_character_optimize')\n  const [selectedPoint, setSelectedPoint] = useState<EnhancedPoint>()\n  const addBuildToList = useCallback(\n    (build: string[]) => {\n      setGraphBuilds([...(graphBuilds ?? []), build])\n      setSelectedPoint(undefined)\n    },\n    [setGraphBuilds, graphBuilds]\n  )\n  const chartOnClick = useCallback(\n    (props) => {\n      if (props && props.chartX && props.chartY)\n        setSelectedPoint(\n          getNearestPoint(props.chartX, props.chartY, 20, displayData)\n        )\n    },\n    [setSelectedPoint, displayData]\n  )\n\n  // Below works because character translation should already be loaded\n  const xLabelValue = getLabelFromNode(plotNode, t)\n  const yLabelValue = getLabelFromNode(valueNode, t)\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={600}>\n      <ComposedChart\n        id=\"chartContainer\"\n        data={displayData}\n        onClick={chartOnClick}\n        style={{ cursor: 'pointer' }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey=\"x\"\n          scale=\"linear\"\n          unit={plotNode.info?.unit}\n          domain={['auto', 'auto']}\n          tick={{ fill: 'white' }}\n          type=\"number\"\n          tickFormatter={(n) => (n > 10000 ? n.toFixed() : n.toFixed(1))}\n          label={\n            <Label fill=\"white\" dy={10}>\n              {xLabelValue}\n            </Label>\n          }\n          height={50}\n        />\n        <YAxis\n          name=\"DMG\"\n          domain={['auto', 'auto']}\n          unit={valueNode.info?.unit}\n          allowDecimals={false}\n          tick={{ fill: 'white' }}\n          type=\"number\"\n          label={\n            <Label fill=\"white\" angle={-90} dx={-40}>\n              {yLabelValue}\n            </Label>\n          }\n          width={100}\n        />\n        <Tooltip\n          content={\n            <CustomTooltip\n              xLabel={xLabelValue}\n              xUnit={plotNode.info?.unit}\n              yLabel={yLabelValue}\n              yUnit={valueNode.info?.unit}\n              selectedPoint={selectedPoint}\n              setSelectedPoint={setSelectedPoint}\n              addBuildToList={addBuildToList}\n            />\n          }\n          trigger=\"click\"\n          wrapperStyle={{ pointerEvents: 'auto', cursor: 'auto' }}\n          cursor={false}\n        />\n        <Legend\n          payload={[\n            ...(showMin\n              ? [\n                  {\n                    id: 'min',\n                    value: t`tcGraph.statReqThr`,\n                    type: 'line' as LegendType,\n                    color: lineColor,\n                  },\n                ]\n              : []),\n            {\n              id: 'trueY',\n              value: t`tcGraph.generatedBuilds`,\n              type: 'circle',\n              color: optTargetColor,\n            },\n            {\n              id: 'highlighted',\n              value: t`tcGraph.highlightedBuilds`,\n              type: 'square',\n              color: highlightedColor,\n            },\n            {\n              id: 'current',\n              value: t`tcGraph.currentBuild`,\n              type: 'diamond',\n              color: currentColor,\n            },\n          ]}\n        />\n        {showMin && (\n          <Line\n            dataKey=\"min\"\n            stroke={lineColor}\n            type=\"stepBefore\"\n            connectNulls\n            strokeWidth={2}\n            isAnimationActive={false}\n            dot={false}\n            activeDot={false}\n          />\n        )}\n        <Scatter\n          dataKey=\"trueY\"\n          isAnimationActive={false}\n          shape={\n            <CustomDot\n              selectedPoint={selectedPoint}\n              colorUnselected={optTargetColor}\n            />\n          }\n        />\n        <Scatter\n          dataKey=\"highlighted\"\n          isAnimationActive={false}\n          shape={\n            <CustomDot\n              shape=\"square\"\n              selectedPoint={selectedPoint}\n              colorUnselected={highlightedColor}\n            />\n          }\n        />\n        <Scatter\n          dataKey=\"current\"\n          isAnimationActive={false}\n          shape={\n            <CustomDot\n              shape=\"diamond\"\n              selectedPoint={selectedPoint}\n              colorUnselected={currentColor}\n            />\n          }\n        />\n      </ComposedChart>\n    </ResponsiveContainer>\n  )\n}\n\ninterface DomPt extends Element {\n  dataset: {\n    chartX: number\n    chartY: number\n    xValue: string\n    yValue: string\n  }\n}\nfunction getNearestPoint(\n  clickedX: number,\n  clickedY: number,\n  threshold: number,\n  data: EnhancedPoint[]\n) {\n  const nearestDomPtData = Array.from(\n    document.querySelectorAll<DomPt>('.custom-dot')\n  ).reduce((domPtA, domPtB) => {\n    const { chartX: aChartX, chartY: aChartY } = domPtA.dataset\n    const aDistance = Math.sqrt(\n      (clickedX - aChartX) ** 2 + (clickedY - aChartY) ** 2\n    )\n    const { chartX: bChartX, chartY: bChartY } = domPtB.dataset\n    const bDistance = Math.sqrt(\n      (clickedX - bChartX) ** 2 + (clickedY - bChartY) ** 2\n    )\n    return aDistance <= bDistance ? domPtA : domPtB\n  })['dataset']\n\n  // Don't select a point too far away\n  const distance = Math.sqrt(\n    (clickedX - nearestDomPtData.chartX) ** 2 +\n      (clickedY - nearestDomPtData.chartY) ** 2\n  )\n  return distance < threshold\n    ? data.find(\n        (d) =>\n          d.x === +nearestDomPtData.xValue && d.y === +nearestDomPtData.yValue\n      )\n    : undefined\n}\n\nfunction getLabelFromNode(node: NumNode, t: TFunction) {\n  return typeof node.info?.name === 'string'\n    ? node.info.name\n    : `${t(`${node.info?.name?.props.ns}:${node.info?.name?.props.key18}`)}${\n        node.info?.textSuffix ? ` ${node.info?.textSuffix}` : ''\n      }`\n}\n","import AddIcon from '@mui/icons-material/Add'\nimport CheckBoxIcon from '@mui/icons-material/CheckBox'\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank'\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  CardContent,\n  Divider,\n  Grid,\n  Skeleton,\n  Typography,\n} from '@mui/material'\nimport {\n  Suspense,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n} from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport ArtifactCardNano from '../../../../../Components/Artifact/ArtifactCardNano'\nimport ArtifactFilterDisplay from '../../../../../Components/Artifact/ArtifactFilterDisplay'\nimport CardDark from '../../../../../Components/Card/CardDark'\nimport CardLight from '../../../../../Components/Card/CardLight'\nimport CloseButton from '../../../../../Components/CloseButton'\nimport InfoTooltip from '../../../../../Components/InfoTooltip'\nimport ModalWrapper from '../../../../../Components/ModalWrapper'\nimport SqBadge from '../../../../../Components/SqBadge'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport { DatabaseContext } from '../../../../../Database/Database'\nimport ArtifactCard from '../../../../../PageArtifact/ArtifactCard'\nimport {\n  artifactFilterConfigs,\n  initialFilterOption,\n} from '../../../../../PageArtifact/ArtifactSort'\nimport useBoolState from '../../../../../ReactHooks/useBoolState'\nimport useForceUpdate from '../../../../../ReactHooks/useForceUpdate'\nimport useMediaQueryUp from '../../../../../ReactHooks/useMediaQueryUp'\nimport { filterFunction } from '../../../../../Util/SortByFilters'\nimport useBuildSetting from '../useBuildSetting'\n\nexport default function ExcludeArt({\n  disabled = false,\n  excludedTotal,\n}: {\n  disabled?: boolean\n  excludedTotal: string\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { artExclusion, useExcludedArts },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const [show, onOpen, onClose] = useBoolState(false)\n  const numExcludedArt = artExclusion.length\n  const [showSel, onOpenSel, onCloseSel] = useBoolState(false)\n  const onSelect = useCallback(\n    (id: string) => {\n      buildSettingDispatch({\n        artExclusion: [...artExclusion, id],\n        useExcludedArts: true,\n      })\n    },\n    [buildSettingDispatch, artExclusion]\n  )\n  const onDelSelect = useCallback(\n    (id: string) => {\n      buildSettingDispatch({\n        artExclusion: artExclusion.filter((i) => i !== id),\n        useExcludedArts: true,\n      })\n    },\n    [buildSettingDispatch, artExclusion]\n  )\n  const toggleArtExclusion = useCallback(\n    () => buildSettingDispatch({ useExcludedArts: !useExcludedArts }),\n    [buildSettingDispatch, useExcludedArts]\n  )\n  return (\n    <>\n      {/* Begin modal */}\n      <ModalWrapper\n        open={show}\n        onClose={onClose}\n        containerProps={{ maxWidth: 'xl' }}\n      >\n        <CardDark>\n          <CardContent>\n            <Box display=\"flex\" gap={1} alignItems=\"center\">\n              <Typography variant=\"h6\">{t`excludeArt.title_exclude`}</Typography>\n              <InfoTooltip\n                title={<Typography>{t`excludeArt.title_tooltip`}</Typography>}\n              />\n              <Box flexGrow={1} />\n              <CloseButton onClick={onClose} size=\"small\" />\n            </Box>\n          </CardContent>\n          <Divider />\n          <CardContent>\n            <ArtifactSelectModal\n              show={showSel}\n              onClose={onCloseSel}\n              onSelect={onSelect}\n              artExclusion={artExclusion}\n            />\n            <Button\n              fullWidth\n              onClick={onOpenSel}\n              color=\"info\"\n              sx={{ mb: 1 }}\n              startIcon={<AddIcon />}\n            >{t`excludeArt.addExc`}</Button>\n            {!!numExcludedArt && (\n              <CardLight sx={{ mb: 1 }}>\n                <Typography textAlign=\"center\">{t`excludeArt.deSelectExc`}</Typography>\n              </CardLight>\n            )}\n            <Grid\n              container\n              columns={{ xs: 3, md: 5, lg: 6, xl: 8 }}\n              spacing={1}\n            >\n              {artExclusion.map((id) => (\n                <Grid item key={id} xs={1}>\n                  <ArtifactCardNano\n                    artifactId={id}\n                    slotKey=\"flower\"\n                    BGComponent={CardLight}\n                    onClick={() => onDelSelect(id)}\n                    showLocation\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </CardContent>\n        </CardDark>\n      </ModalWrapper>\n\n      {/* Button to open modal */}\n      <ButtonGroup sx={{ display: 'flex', width: '100%' }}>\n        <Button\n          onClick={toggleArtExclusion}\n          disabled={disabled}\n          startIcon={\n            useExcludedArts ? <CheckBoxIcon /> : <CheckBoxOutlineBlankIcon />\n          }\n          color={useExcludedArts ? 'success' : 'secondary'}\n          sx={{ flexGrow: 1 }}\n        >\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Box>{t('excludeArt.button_text')}</Box>\n            <SqBadge sx={{ whiteSpace: 'normal' }}>\n              {useExcludedArts ? (\n                <Trans t={t} i18nKey=\"excludeArt.usingNum\">\n                  Using {{ totalStr: excludedTotal } as TransObject} excluded\n                  artifacts\n                </Trans>\n              ) : (\n                <Trans t={t} i18nKey=\"excludeArt.excNum\" count={numExcludedArt}>\n                  {{ count: numExcludedArt } as TransObject} artifacts are\n                  excluded\n                </Trans>\n              )}\n            </SqBadge>\n          </Box>\n        </Button>\n        <Button\n          color=\"info\"\n          onClick={onOpen}\n          disabled={disabled}\n          sx={{ flexShrink: 1 }}\n        >\n          <SettingsIcon />\n        </Button>\n      </ButtonGroup>\n    </>\n  )\n}\n\nconst numToShowMap = { xs: 2 * 3, sm: 2 * 3, md: 3 * 3, lg: 4 * 3, xl: 4 * 3 }\nconst filterOptionReducer = (state, action) => ({ ...state, ...action })\nfunction ArtifactSelectModal({\n  onSelect,\n  show,\n  onClose,\n  artExclusion,\n}: {\n  onSelect: (id: string) => void\n  show: boolean\n  onClose: () => void\n  artExclusion: string[]\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  const { database } = useContext(DatabaseContext)\n  const clickHandler = useCallback(\n    (id: string) => {\n      onSelect(id)\n      onClose()\n    },\n    [onSelect, onClose]\n  )\n\n  const [filterOption, filterOptionDispatch] = useReducer(\n    filterOptionReducer,\n    initialFilterOption()\n  )\n\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  useEffect(() => {\n    return database.arts.followAny(forceUpdate)\n  }, [database, forceUpdate])\n\n  const brPt = useMediaQueryUp()\n\n  const filterConfigs = useMemo(() => artifactFilterConfigs(), [])\n  const artIdList = useMemo(() => {\n    const filterFunc = filterFunction(filterOption, filterConfigs)\n    return (\n      dbDirty &&\n      database.arts.values\n        .filter(filterFunc)\n        .map((art) => art.id)\n        .filter((id) => !artExclusion.includes(id))\n        .slice(0, numToShowMap[brPt])\n    )\n  }, [dbDirty, database, filterConfigs, filterOption, brPt, artExclusion])\n\n  return (\n    <ModalWrapper\n      open={show}\n      onClose={onClose}\n      containerProps={{ maxWidth: 'xl' }}\n    >\n      <CardDark>\n        <CardContent\n          sx={{\n            py: 1,\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <Typography variant=\"h6\">{t`excludeArt.selExc`}</Typography>\n          <CloseButton onClick={onClose} />\n        </CardContent>\n        <Divider />\n        <CardContent>\n          <Suspense\n            fallback={\n              <Skeleton variant=\"rectangular\" width=\"100%\" height={200} />\n            }\n          >\n            <ArtifactFilterDisplay\n              filterOption={filterOption}\n              filterOptionDispatch={filterOptionDispatch}\n              filteredIds={artIdList}\n            />\n          </Suspense>\n          <Box mt={1}>\n            <Suspense\n              fallback={\n                <Skeleton variant=\"rectangular\" width=\"100%\" height={300} />\n              }\n            >\n              <Grid container spacing={1} columns={{ xs: 2, md: 3, lg: 4 }}>\n                {artIdList.map((id) => (\n                  <Grid item key={id} xs={1}>\n                    <ArtifactCard artifactId={id} onClick={clickHandler} />\n                  </Grid>\n                ))}\n              </Grid>\n            </Suspense>\n          </Box>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  )\n}\n","import { allElementWithPhyKeys } from '@genshin-optimizer/consts'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Divider,\n  Grid,\n  Typography,\n} from '@mui/material'\nimport { useContext, useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport SlotIcon from '../../../../../Components/Artifact/SlotIcon'\nimport BootstrapTooltip from '../../../../../Components/BootstrapTooltip'\nimport SqBadge from '../../../../../Components/SqBadge'\nimport { StatColoredWithUnit } from '../../../../../Components/StatDisplay'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport Artifact from '../../../../../Data/Artifacts/Artifact'\nimport { DatabaseContext } from '../../../../../Database/Database'\nimport StatIcon from '../../../../../KeyMap/StatIcon'\nimport { iconInlineProps } from '../../../../../SVGIcons'\nimport FlowerIcon from '../../../../../SVGIcons/ArtifactSlot/FlowerIcon'\nimport PlumeIcon from '../../../../../SVGIcons/ArtifactSlot/PlumeIcon'\nimport AtkIcon from '../../../../../SVGIcons/Stats/AtkIcon'\nimport HpIcon from '../../../../../SVGIcons/Stats/HpIcon'\nimport { handleMultiSelect } from '../../../../../Util/MultiSelect'\nimport { bulkCatTotal } from '../../../../../Util/totalUtils'\nimport useBuildSetting from '../useBuildSetting'\n\nexport const artifactsSlotsToSelectMainStats = [\n  'sands',\n  'goblet',\n  'circlet',\n] as const\n\nexport default function MainStatSelectionCard({\n  disabled = false,\n  filteredArtIdMap,\n}: {\n  disabled?: boolean\n  filteredArtIdMap: Record<string, boolean>\n}) {\n  const { t } = useTranslation('artifact')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { mainStatKeys },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const { database } = useContext(DatabaseContext)\n  const { mainStatSlotTots, slotTots } = useMemo(() => {\n    const catKeys = {\n      flowerMainStatTots: Artifact.slotMainStats('flower'),\n      plumeMainStatTots: Artifact.slotMainStats('plume'),\n      sandsMainStatTots: Artifact.slotMainStats('sands'),\n      gobletMainStatTots: Artifact.slotMainStats('goblet'),\n      circletMainStatTots: Artifact.slotMainStats('circlet'),\n      slotTots: artifactsSlotsToSelectMainStats,\n    } as const\n    const catTotals = bulkCatTotal(catKeys, (ctMap) =>\n      Object.entries(database.arts.data).forEach(([id, art]) => {\n        const { slotKey, mainStatKey } = art\n        if (\n          (artifactsSlotsToSelectMainStats as readonly string[]).includes(\n            slotKey\n          )\n        ) {\n          ctMap.slotTots[slotKey].total++\n          if (filteredArtIdMap[id]) ctMap.slotTots[slotKey].current++\n        }\n        ctMap[`${slotKey}MainStatTots`][mainStatKey].total++\n        if (filteredArtIdMap[id])\n          ctMap[`${slotKey}MainStatTots`][mainStatKey].current++\n      })\n    )\n    return {\n      mainStatSlotTots: {\n        flower: catTotals.flowerMainStatTots,\n        plume: catTotals.plumeMainStatTots,\n        sands: catTotals.sandsMainStatTots,\n        goblet: catTotals.gobletMainStatTots,\n        circlet: catTotals.circletMainStatTots,\n      },\n      slotTots: catTotals.slotTots,\n    }\n  }, [database, filteredArtIdMap])\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <Divider />\n      <Box display=\"flex\">\n        <CardContent sx={{ flexGrow: 1 }}>\n          <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\n            <BootstrapTooltip\n              placement=\"top\"\n              title={<Typography>{t(`slotName.flower`)}</Typography>}\n            >\n              <FlowerIcon fontSize=\"inherit\" />\n            </BootstrapTooltip>\n            <Box flexGrow={1}>\n              <SqBadge color=\"info\">\n                <HpIcon {...iconInlineProps} /> {mainStatSlotTots.flower.hp}\n              </SqBadge>\n            </Box>\n          </Box>\n        </CardContent>\n        <Divider orientation=\"vertical\" flexItem />\n        <CardContent sx={{ flexGrow: 1 }}>\n          <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\n            <BootstrapTooltip\n              placement=\"top\"\n              title={<Typography>{t(`slotName.plume`)}</Typography>}\n            >\n              <PlumeIcon fontSize=\"inherit\" />\n            </BootstrapTooltip>\n            <Box flexGrow={1}>\n              <SqBadge color=\"info\">\n                <AtkIcon {...iconInlineProps} /> {mainStatSlotTots.plume.atk}\n              </SqBadge>\n            </Box>\n          </Box>\n        </CardContent>\n      </Box>\n      {artifactsSlotsToSelectMainStats.map((slotKey) => {\n        const selectedMainKeys = mainStatKeys[slotKey]\n        const mainKeys = Artifact.slotMainStats(slotKey)\n        const mainKeysHandler = handleMultiSelect([...mainKeys])\n        return (\n          <Box key={slotKey}>\n            <Divider />\n            <CardContent sx={{ pt: 1, pb: 1 }}>\n              <Box\n                sx={{ display: 'flex', gap: 1, alignItems: 'center', pb: 1 }}\n              >\n                <BootstrapTooltip\n                  placement=\"top\"\n                  title={<Typography>{t(`slotName.${slotKey}`)}</Typography>}\n                >\n                  <Box lineHeight={0}>\n                    <SlotIcon\n                      slotKey={slotKey}\n                      iconProps={{ fontSize: 'inherit' }}\n                    />\n                  </Box>\n                </BootstrapTooltip>\n                <Box flexGrow={1}>\n                  <SqBadge color=\"info\">{slotTots[slotKey]}</SqBadge>\n                </Box>\n              </Box>\n              <Grid container spacing={1}>\n                {mainKeys.map((mainStatKey, i) => {\n                  const element = allElementWithPhyKeys.find((ele) =>\n                    mainStatKey.includes(ele)\n                  )\n                  const color = selectedMainKeys.includes(mainStatKey)\n                    ? element ?? 'success'\n                    : 'secondary'\n                  return (\n                    <Grid\n                      item\n                      key={mainStatKey}\n                      flexGrow={1}\n                      xs={\n                        (i < 3 && slotKey !== 'goblet') || slotKey === 'goblet'\n                          ? 4\n                          : undefined\n                      }\n                    >\n                      <BootstrapTooltip\n                        placement=\"top\"\n                        title={\n                          <Typography>\n                            <strong>\n                              <StatColoredWithUnit statKey={mainStatKey} />\n                            </strong>\n                          </Typography>\n                        }\n                        disableInteractive\n                      >\n                        <Button\n                          fullWidth\n                          size=\"small\"\n                          color={color}\n                          sx={{\n                            height: '100%',\n                            pointerEvents: disabled ? 'none' : undefined,\n                            cursor: disabled ? 'none' : undefined,\n                          }}\n                          startIcon={<StatIcon statKey={mainStatKey} />}\n                          onClick={() =>\n                            buildSettingDispatch({\n                              mainStatKeys: {\n                                ...mainStatKeys,\n                                [slotKey]: mainKeysHandler(\n                                  selectedMainKeys,\n                                  mainStatKey\n                                ),\n                              },\n                            })\n                          }\n                        >\n                          {mainStatSlotTots[slotKey][mainStatKey]}\n                        </Button>\n                      </BootstrapTooltip>\n                    </Grid>\n                  )\n                })}\n              </Grid>\n            </CardContent>\n          </Box>\n        )\n      })}\n    </Box>\n  )\n}\n","import {\n  CheckBox,\n  CheckBoxOutlineBlank,\n  DeleteForever,\n} from '@mui/icons-material'\nimport { Button, ButtonGroup } from '@mui/material'\nimport { useCallback, useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport CustomNumberInput, {\n  CustomNumberInputButtonGroupWrapper,\n} from '../../../../../Components/CustomNumberInput'\nimport { DataContext } from '../../../../../Context/DataContext'\nimport type {\n  StatFilters,\n  StatFilterSetting,\n} from '../../../../../Database/DataManagers/BuildSettingData'\nimport type { NodeDisplay } from '../../../../../Formula/uiData'\nimport { objPathValue } from '../../../../../Util/Util'\nimport OptimizationTargetSelector from './OptimizationTargetSelector'\n\ntype OptimizationTargetEditorListProps = {\n  statFilters: StatFilters\n  setStatFilters: (statFilters: StatFilters) => void\n  disabled: boolean\n}\n\nexport default function OptimizationTargetEditorList({\n  statFilters,\n  setStatFilters,\n  disabled = false,\n}: OptimizationTargetEditorListProps) {\n  const setTarget = useCallback(\n    (path: string[], oldPath?: string[], oldIndex?: number) => {\n      const statFilters_ = { ...statFilters }\n      const oldPathStr = JSON.stringify(oldPath)\n      const oldFilterArr = oldPath ? [...statFilters[oldPathStr]!] : undefined\n      const pathStr = JSON.stringify(path)\n      const filterArr = [...(statFilters[pathStr] ?? [])]\n      // Copy/create new setting\n      if (oldIndex !== undefined && oldFilterArr)\n        filterArr.push(oldFilterArr[oldIndex])\n      else filterArr.push({ value: 0, disabled: false })\n      statFilters_[pathStr] = filterArr\n      // Remove old setting\n      if (oldIndex !== undefined && oldFilterArr) {\n        oldFilterArr.splice(oldIndex, 1)\n        if (oldFilterArr.length) statFilters_[oldPathStr] = oldFilterArr\n        else delete statFilters_[oldPathStr]\n      }\n      setStatFilters({ ...statFilters_ })\n    },\n    [setStatFilters, statFilters]\n  )\n\n  const delTarget = useCallback(\n    (path: string[], index: number) => {\n      const statFilters_ = { ...statFilters }\n      const pathStr = JSON.stringify(path)\n      const filterArr = [...statFilters[pathStr]!]\n      filterArr.splice(index, 1)\n      if (filterArr.length) statFilters_[pathStr] = filterArr\n      else delete statFilters_[pathStr]\n      setStatFilters({ ...statFilters_ })\n    },\n    [setStatFilters, statFilters]\n  )\n\n  const setTargetValue = useCallback(\n    (path: string[], index: number, value: number) => {\n      const statFilters_ = { ...statFilters }\n      const pathStr = JSON.stringify(path)\n      const filterArr = [...statFilters[pathStr]!]\n      filterArr[index] = { ...filterArr[index], value } as StatFilterSetting\n      statFilters_[pathStr] = filterArr\n      setStatFilters({ ...statFilters_ })\n    },\n    [setStatFilters, statFilters]\n  )\n\n  const setTargetDisabled = useCallback(\n    (path: string[], index: number, disabled: boolean) => {\n      const statFilters_ = { ...statFilters }\n      const pathStr = JSON.stringify(path)\n      const filterArr = [...statFilters[pathStr]!]\n      filterArr[index] = { ...filterArr[index], disabled } as StatFilterSetting\n      statFilters_[pathStr] = filterArr\n      setStatFilters({ ...statFilters_ })\n    },\n    [setStatFilters, statFilters]\n  )\n\n  return (\n    <>\n      {Object.entries(statFilters).flatMap(([pathStr, settings]) =>\n        settings?.map((setting, index) => (\n          <OptimizationTargetEditorItem\n            path={JSON.parse(pathStr)}\n            setting={setting}\n            index={index}\n            setTarget={setTarget}\n            delTarget={delTarget}\n            setValue={setTargetValue}\n            setDisabled={setTargetDisabled}\n            disabled={disabled}\n            key={pathStr + index}\n          />\n        ))\n      )}\n      <OptimizationTargetEditorItem\n        setTarget={setTarget}\n        delTarget={delTarget}\n        setValue={setTargetValue}\n        setDisabled={setTargetDisabled}\n        disabled={disabled}\n      />\n    </>\n  )\n}\n\ntype OptimizationTargetEditorItemProps = {\n  path?: string[]\n  setting?: StatFilterSetting\n  index?: number\n  setTarget: (path: string[], oldPath?: string[], oldIndex?: number) => void\n  delTarget: (path: string[], index: number) => void\n  setValue: (path: string[], index: number, value: number) => void\n  setDisabled: (path: string[], index: number, disabled: boolean) => void\n  disabled: boolean\n}\nfunction OptimizationTargetEditorItem({\n  path,\n  setting,\n  index,\n  setTarget,\n  delTarget,\n  setValue,\n  setDisabled,\n  disabled,\n}: OptimizationTargetEditorItemProps) {\n  const { t } = useTranslation('page_character_optimize')\n  const { data } = useContext(DataContext)\n  const onChange = useCallback(\n    (val: number | undefined) =>\n      path && index !== undefined && setValue(path, index, val ?? 0),\n    [setValue, path, index]\n  )\n  const buttonStyle = { p: 1, flexBasis: 30, flexGrow: 0, flexShrink: 0 }\n\n  const buildConstraintNode: NodeDisplay = objPathValue(\n    data.getDisplay(),\n    path ?? []\n  )\n  const isPercent = buildConstraintNode?.info?.unit === '%'\n\n  return (\n    <ButtonGroup\n      sx={{ '& .MuiButtonGroup-grouped': { minWidth: 24 }, width: '100%' }}\n    >\n      {!!setting && !!path && index !== undefined && (\n        <Button\n          sx={buttonStyle}\n          color={setting.disabled ? 'secondary' : 'success'}\n          onClick={() => setDisabled(path, index, !setting.disabled)}\n          disabled={disabled}\n        >\n          {setting.disabled ? <CheckBoxOutlineBlank /> : <CheckBox />}\n        </Button>\n      )}\n      <OptimizationTargetSelector\n        showEmptyTargets\n        optimizationTarget={path}\n        setTarget={(target) => setTarget(target, path, index)}\n        defaultText={t('targetSelector.selectBuildTarget')}\n      />\n      <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 150, flexGrow: 1 }}>\n        <CustomNumberInput\n          float\n          disabled={!path || disabled}\n          value={setting?.value}\n          placeholder=\"Stat Value\"\n          onChange={onChange}\n          sx={{ px: 1 }}\n          inputProps={{ sx: { textAlign: 'right' } }}\n          endAdornment={isPercent ? '%' : undefined}\n        />\n      </CustomNumberInputButtonGroupWrapper>\n      {!!path && index !== undefined && (\n        <Button\n          sx={buttonStyle}\n          color=\"error\"\n          onClick={() => delTarget(path, index)}\n          disabled={disabled}\n        >\n          <DeleteForever fontSize=\"small\" />\n        </Button>\n      )}\n    </ButtonGroup>\n  )\n}\n","import { Box, CardContent, Divider, Typography } from '@mui/material'\nimport { useCallback, useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport CardLight from '../../../../../Components/Card/CardLight'\nimport InfoTooltip from '../../../../../Components/InfoTooltip'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport type { StatFilters } from '../../../../../Database/DataManagers/BuildSettingData'\nimport useBuildSetting from '../useBuildSetting'\nimport OptimizationTargetEditorList from './OptimizationTargetEditorList'\n\nexport default function StatFilterCard({\n  disabled = false,\n}: {\n  disabled?: boolean\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { statFilters },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const setStatFilters = useCallback(\n    (statFilters: StatFilters) => buildSettingDispatch({ statFilters }),\n    [buildSettingDispatch]\n  )\n\n  return (\n    <Box>\n      <CardLight>\n        <CardContent\n          sx={{\n            display: 'flex',\n            gap: 1,\n            justifyContent: 'space-between',\n            flexDirection: 'column',\n          }}\n        >\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <Typography\n              sx={{ fontWeight: 'bold' }}\n            >{t`constraintFilter.title`}</Typography>\n            <InfoTooltip\n              title={<Typography>{t`constraintFilter.tooltip`}</Typography>}\n            />\n          </Box>\n        </CardContent>\n        <Divider />\n        <Box display=\"flex\" flexDirection=\"column\" gap={0.5}>\n          <OptimizationTargetEditorList\n            statFilters={statFilters}\n            setStatFilters={setStatFilters}\n            disabled={disabled}\n          />\n        </Box>\n      </CardLight>\n    </Box>\n  )\n}\n","import Artifact from '../../../../Data/Artifacts/Artifact'\nimport { input } from '../../../../Formula'\nimport { computeUIData } from '../../../../Formula/api'\nimport { formulaString } from '../../../../Formula/debug'\nimport type { Data, NumNode } from '../../../../Formula/type'\nimport { constant, setReadNodeKeys } from '../../../../Formula/utils'\nimport type { ICachedArtifact } from '../../../../Types/artifact'\nimport { allMainStatKeys, allSubstatKeys } from '../../../../Types/artifact'\nimport { deepClone, objectKeyMap, objectMap } from '../../../../Util/Util'\nimport type {\n  ArtifactBuildData,\n  ArtifactsBySlot,\n  DynStat,\n} from '../../../../Solver/common'\n\nconst dynamic = setReadNodeKeys(\n  deepClone({ dyn: { ...input.art, ...input.artSet } })\n)\nexport const dynamicData = {\n  art: objectKeyMap(\n    [...allMainStatKeys, ...allSubstatKeys],\n    (key) => dynamic.dyn[key]\n  ),\n  artSet: objectMap(input.artSet, (_, key) => dynamic.dyn[key]),\n}\n\nexport function compactArtifacts(\n  arts: ICachedArtifact[],\n  mainStatAssumptionLevel: number,\n  allowPartial: boolean\n): ArtifactsBySlot {\n  const result: ArtifactsBySlot = {\n    base: {},\n    values: { flower: [], plume: [], goblet: [], circlet: [], sands: [] },\n  }\n  const keys = new Set<string>()\n\n  for (const art of arts) {\n    const mainStatVal = Artifact.mainStatValue(\n      art.mainStatKey,\n      art.rarity,\n      Math.max(Math.min(mainStatAssumptionLevel, art.rarity * 4), art.level)\n    )\n\n    const data: ArtifactBuildData = {\n      id: art.id,\n      set: art.setKey,\n      values: {\n        [art.setKey]: 1,\n        [art.mainStatKey]: art.mainStatKey.endsWith('_')\n          ? mainStatVal / 100\n          : mainStatVal,\n        ...Object.fromEntries(\n          art.substats.map((substat) => [\n            substat.key,\n            substat.key.endsWith('_')\n              ? substat.accurateValue / 100\n              : substat.accurateValue,\n          ])\n        ),\n      },\n    }\n    delete data.values['']\n    result.values[art.slotKey].push(data)\n    Object.keys(data.values).forEach((x) => keys.add(x))\n  }\n  result.base = objectKeyMap([...keys], (_) => 0)\n  if (allowPartial)\n    for (const value of Object.values(result.values))\n      value.push({ id: '', values: {} })\n  return result\n}\n\nexport function debugCompute(\n  nodes: NumNode[],\n  base: DynStat,\n  arts: ArtifactBuildData[]\n) {\n  const stats = { ...base }\n  for (const art of arts) {\n    for (const [key, value] of Object.entries(art.values)) {\n      stats[key] = (stats[key] ?? 0) + value\n    }\n  }\n  const data = {\n    dyn: Object.fromEntries(\n      Object.entries(stats).map(([key, value]) => [key, constant(value)])\n    ),\n  } as Data\n  const uiData = computeUIData([data])\n  return {\n    base,\n    arts,\n    stats,\n    data,\n    uiData,\n    nodes: nodes.map(formulaString),\n    results: nodes.map((node) => uiData.get(node)),\n  }\n}\n","import type { CharacterKey } from '@genshin-optimizer/consts'\nimport { charKeyToLocCharKey } from '@genshin-optimizer/consts'\nimport {\n  CheckBox,\n  CheckBoxOutlineBlank,\n  Close,\n  DeleteForever,\n  Science,\n  TrendingUp,\n} from '@mui/icons-material'\nimport NotificationsActiveIcon from '@mui/icons-material/NotificationsActive'\nimport NotificationsOffIcon from '@mui/icons-material/NotificationsOff'\nimport {\n  Alert,\n  Box,\n  Button,\n  ButtonGroup,\n  CardContent,\n  Divider,\n  Grid,\n  Link,\n  MenuItem,\n  Skeleton,\n  ToggleButton,\n  Typography,\n} from '@mui/material'\nimport React, {\n  Suspense,\n  useCallback,\n  useContext,\n  useDeferredValue,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { Link as RouterLink, useLocation, useNavigate } from 'react-router-dom'\nimport ArtifactLevelSlider from '../../../../Components/Artifact/ArtifactLevelSlider'\nimport BootstrapTooltip from '../../../../Components/BootstrapTooltip'\nimport CardLight from '../../../../Components/Card/CardLight'\nimport CharacterCard from '../../../../Components/Character/CharacterCard'\nimport DropdownButton from '../../../../Components/DropdownMenu/DropdownButton'\nimport {\n  HitModeToggle,\n  ReactionToggle,\n} from '../../../../Components/HitModeEditor'\nimport InfoTooltip from '../../../../Components/InfoTooltip'\nimport SolidToggleButtonGroup from '../../../../Components/SolidToggleButtonGroup'\nimport SqBadge from '../../../../Components/SqBadge'\nimport { CharacterContext } from '../../../../Context/CharacterContext'\nimport type { dataContextObj } from '../../../../Context/DataContext'\nimport { DataContext } from '../../../../Context/DataContext'\nimport { GraphContext } from '../../../../Context/GraphContext'\nimport { OptimizationTargetContext } from '../../../../Context/OptimizationTargetContext'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport { defThreads } from '../../../../Database/DataEntries/DisplayOptimizeEntry'\nimport { mergeData, uiDataForTeam } from '../../../../Formula/api'\nimport { optimize } from '../../../../Formula/optimization'\nimport type { NumNode } from '../../../../Formula/type'\nimport type { UIData } from '../../../../Formula/uiData'\nimport useCharacterReducer from '../../../../ReactHooks/useCharacterReducer'\nimport useCharSelectionCallback from '../../../../ReactHooks/useCharSelectionCallback'\nimport useDBMeta from '../../../../ReactHooks/useDBMeta'\nimport useForceUpdate from '../../../../ReactHooks/useForceUpdate'\nimport useGlobalError from '../../../../ReactHooks/useGlobalError'\nimport useMediaQueryUp from '../../../../ReactHooks/useMediaQueryUp'\nimport useTeamData, { getTeamData } from '../../../../ReactHooks/useTeamData'\nimport type { OptProblemInput } from '../../../../Solver'\nimport type { Build } from '../../../../Solver/common'\nimport { mergeBuilds, mergePlot } from '../../../../Solver/common'\nimport { GOSolver } from '../../../../Solver/GOSolver/GOSolver'\nimport type { ICachedArtifact } from '../../../../Types/artifact'\nimport { bulkCatTotal } from '../../../../Util/totalUtils'\nimport { objectKeyMap, objPathValue, range } from '../../../../Util/Util'\nimport { maxBuildsToShowList } from './Build'\nimport AllowChar from './Components/AllowChar'\nimport ArtifactSetConfig from './Components/ArtifactSetConfig'\nimport AssumeFullLevelToggle from './Components/AssumeFullLevelToggle'\nimport BonusStatsCard from './Components/BonusStatsCard'\nimport type { BuildStatus } from './Components/BuildAlert'\nimport BuildAlert from './Components/BuildAlert'\nimport BuildDisplayItem from './Components/BuildDisplayItem'\nimport ChartCard from './Components/ChartCard'\nimport ExcludeArt from './Components/ExcludeArt'\nimport MainStatSelectionCard from './Components/MainStatSelectionCard'\nimport OptimizationTargetSelector from './Components/OptimizationTargetSelector'\nimport StatFilterCard from './Components/StatFilterCard'\nimport { compactArtifacts, dynamicData } from './foreground'\nimport useBuildResult from './useBuildResult'\nimport useBuildSetting from './useBuildSetting'\n\nconst audio = new Audio('notification.mp3')\nexport default function TabBuild() {\n  const { t } = useTranslation('page_character_optimize')\n  const {\n    character: { key: characterKey, compareData },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const { setChartData, graphBuilds, setGraphBuilds } = useContext(GraphContext)\n  const { gender } = useDBMeta()\n\n  const [notification, setnotification] = useState(false)\n  const notificationRef = useRef(false)\n  useEffect(() => {\n    notificationRef.current = notification\n  }, [notification])\n\n  const [buildStatus, setBuildStatus] = useState({\n    type: 'inactive',\n    tested: 0,\n    failed: 0,\n    skipped: 0,\n    total: 0,\n  } as BuildStatus)\n  const generatingBuilds = buildStatus.type !== 'inactive'\n\n  const [artsDirty, setArtsDirty] = useForceUpdate()\n\n  const [{ threads = defThreads }, setDisplayOptimize] = useState(\n    database.displayOptimize.get()\n  )\n  useEffect(\n    () => database.displayOptimize.follow((_r, to) => setDisplayOptimize(to)),\n    [database, setDisplayOptimize]\n  )\n\n  const maxWorkers = threads > defThreads ? defThreads : threads\n  const setMaxWorkers = useCallback(\n    (threads: number) => database.displayOptimize.set({ threads }),\n    [database]\n  )\n\n  const characterDispatch = useCharacterReducer(characterKey)\n  const onClickTeammate = useCharSelectionCallback()\n\n  // Clear state when changing characters\n  useEffect(() => {\n    setBuildStatus({\n      type: 'inactive',\n      tested: 0,\n      failed: 0,\n      skipped: 0,\n      total: 0,\n    })\n  }, [characterKey])\n\n  const noArtifact = useMemo(() => !database.arts.values.length, [database])\n\n  const { buildSetting, buildSettingDispatch } = useBuildSetting(characterKey)\n  const {\n    plotBase,\n    optimizationTarget,\n    mainStatAssumptionLevel,\n    allowPartial,\n    maxBuildsToShow,\n    levelLow,\n    levelHigh,\n  } = buildSetting\n  const {\n    buildResult: { builds, buildDate },\n    buildResultDispatch,\n  } = useBuildResult(characterKey)\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\n  const { characterSheet, target: data } =\n    teamData?.[characterKey as CharacterKey] ?? {}\n  const optimizationTargetNode =\n    optimizationTarget && objPathValue(data?.getDisplay(), optimizationTarget)\n  const isSM = ['xs', 'sm'].includes(useMediaQueryUp())\n\n  //register changes in artifact database\n  useEffect(\n    () => database.arts.followAny(setArtsDirty),\n    [setArtsDirty, database]\n  )\n\n  const deferredArtsDirty = useDeferredValue(artsDirty)\n  const deferredBuildSetting = useDeferredValue(buildSetting)\n  const filteredArts = useMemo(() => {\n    const {\n      mainStatKeys,\n      excludedLocations,\n      artExclusion,\n      levelLow,\n      levelHigh,\n      allowLocationsState,\n      useExcludedArts,\n    } = deferredArtsDirty && deferredBuildSetting\n\n    return database.arts.values.filter((art) => {\n      if (!useExcludedArts && artExclusion.includes(art.id)) return false\n      if (art.level < levelLow) return false\n      if (art.level > levelHigh) return false\n      const mainStats = mainStatKeys[art.slotKey]\n      if (mainStats?.length && !mainStats.includes(art.mainStatKey))\n        return false\n\n      const locKey = charKeyToLocCharKey(characterKey)\n      const unequippedStateAndEquippedElsewhere =\n        allowLocationsState === 'unequippedOnly' &&\n        art.location &&\n        art.location !== locKey\n      const customListStateAndNotOnList =\n        allowLocationsState === 'customList' &&\n        art.location &&\n        art.location !== locKey &&\n        excludedLocations.includes(art.location)\n      if (unequippedStateAndEquippedElsewhere || customListStateAndNotOnList)\n        return false\n\n      return true\n    })\n  }, [database, characterKey, deferredArtsDirty, deferredBuildSetting])\n\n  const filteredArtIdMap = useMemo(\n    () =>\n      objectKeyMap(\n        filteredArts.map(({ id }) => id),\n        (_) => true\n      ),\n    [filteredArts]\n  )\n  const { levelTotal, allowListTotal, excludedTotal } = useMemo(() => {\n    const catKeys = {\n      levelTotal: ['in'],\n      allowListTotal: ['in'],\n      excludedTotal: ['in'],\n    } as const\n    return bulkCatTotal(catKeys, (ctMap) =>\n      Object.entries(database.arts.data).forEach(([id, art]) => {\n        const { level, location } = art\n        const {\n          levelLow,\n          levelHigh,\n          excludedLocations,\n          allowLocationsState,\n          artExclusion,\n        } = deferredArtsDirty && deferredBuildSetting\n        if (level >= levelLow && level <= levelHigh) {\n          ctMap.levelTotal.in.total++\n          if (filteredArtIdMap[id]) ctMap.levelTotal.in.current++\n        }\n        const locKey = charKeyToLocCharKey(characterKey)\n        const allStateAndEquippedSomewhereElse =\n          allowLocationsState === 'all' && location && location !== locKey\n        const customListStateAndNotOnList =\n          allowLocationsState === 'customList' &&\n          location &&\n          location !== locKey &&\n          !excludedLocations.includes(location)\n        if (allStateAndEquippedSomewhereElse || customListStateAndNotOnList) {\n          ctMap.allowListTotal.in.total++\n          if (filteredArtIdMap[id]) ctMap.allowListTotal.in.current++\n        }\n        if (artExclusion.includes(id)) {\n          ctMap.excludedTotal.in.total++\n          if (filteredArtIdMap[id]) ctMap.excludedTotal.in.current++\n        }\n      })\n    )\n  }, [\n    characterKey,\n    database.arts.data,\n    deferredArtsDirty,\n    deferredBuildSetting,\n    filteredArtIdMap,\n  ])\n\n  const tabFocused = useRef(true)\n  useEffect(() => {\n    const onFocus = () => (tabFocused.current = true)\n    const onBlur = () => (tabFocused.current = false)\n    window.addEventListener('focus', onFocus)\n    window.addEventListener('blur', onBlur)\n    return () => {\n      window.removeEventListener('focus', onFocus)\n      window.removeEventListener('blur', onBlur)\n    }\n  }, [tabFocused])\n\n  // Provides a function to cancel the work\n  const cancelToken = useRef(() => {})\n  //terminate worker when component unmounts\n  useEffect(() => () => cancelToken.current(), [])\n  const throwGlobalError = useGlobalError()\n\n  const generateBuilds = useCallback(async () => {\n    const {\n      artSetExclusion,\n      plotBase,\n      statFilters,\n      optimizationTarget,\n      mainStatAssumptionLevel,\n      allowPartial,\n      maxBuildsToShow,\n    } = buildSetting\n    if (!characterKey || !optimizationTarget) return\n\n    const split = compactArtifacts(\n      filteredArts,\n      mainStatAssumptionLevel,\n      allowPartial\n    )\n\n    const teamData = getTeamData(\n      database,\n      characterKey,\n      mainStatAssumptionLevel,\n      []\n    )\n    if (!teamData) return\n    const workerData = uiDataForTeam(teamData.teamData, gender, characterKey)[\n      characterKey\n    ]?.target.data![0]\n    if (!workerData) return\n    Object.assign(workerData, mergeData([workerData, dynamicData])) // Mark art fields as dynamic\n    const unoptimizedOptimizationTargetNode = objPathValue(\n      workerData.display ?? {},\n      optimizationTarget\n    ) as NumNode | undefined\n    if (!unoptimizedOptimizationTargetNode) return\n    const targetNode = unoptimizedOptimizationTargetNode\n    const valueFilter: { value: NumNode; minimum: number }[] = Object.entries(\n      statFilters\n    )\n      .flatMap(([pathStr, settings]) =>\n        settings\n          .filter((setting) => !setting.disabled)\n          .map((setting) => {\n            const filterNode: NumNode = objPathValue(\n              workerData.display ?? {},\n              JSON.parse(pathStr)\n            )\n            const minimum =\n              filterNode.info?.unit === '%'\n                ? setting.value / 100\n                : setting.value // TODO: Conversion\n            return { value: filterNode, minimum: minimum }\n          })\n      )\n      .filter((x) => x.value && x.minimum > -Infinity)\n\n    setChartData(undefined)\n\n    const cancelled = new Promise<void>((r) => (cancelToken.current = r))\n\n    const unoptimizedNodes = [\n      ...valueFilter.map((x) => x.value),\n      unoptimizedOptimizationTargetNode,\n    ]\n    const minimum = [...valueFilter.map((x) => x.minimum), -Infinity]\n    const plotBaseNumNode: NumNode =\n      plotBase && objPathValue(workerData.display ?? {}, plotBase)\n    if (plotBaseNumNode) {\n      unoptimizedNodes.push(plotBaseNumNode)\n      minimum.push(-Infinity)\n    }\n\n    const nodes = optimize(\n      unoptimizedNodes,\n      workerData,\n      ({ path: [p] }) => p !== 'dyn'\n    )\n    const plotBaseNode = plotBaseNumNode ? nodes.pop() : undefined\n    const optimizationTargetNode = nodes.pop()!\n\n    const problem: OptProblemInput = {\n      arts: split,\n      optimizationTarget: optimizationTargetNode,\n      exclusion: artSetExclusion,\n      constraints: nodes.map((value, i) => ({ value, min: minimum[i] })),\n\n      topN: maxBuildsToShow,\n      plotBase: plotBaseNode,\n    }\n    const status: Omit<BuildStatus, 'type'> = {\n      tested: 0,\n      failed: 0,\n      skipped: 0,\n      total: 0,\n      startTime: performance.now(),\n    }\n    const statusUpdateTimer = setInterval(\n      () => setBuildStatus({ type: 'active', ...status }),\n      100\n    )\n\n    const cancellationError = new Error()\n    try {\n      const solver = new GOSolver(problem, status, maxWorkers)\n      cancelled.then(() => solver.cancel(cancellationError))\n\n      const results = await solver.solve()\n      solver.cancel() // Done using `solver`\n\n      cancelToken.current = () => {}\n\n      if (plotBaseNumNode) {\n        const plotData = mergePlot(results.map((x) => x.plotData!))\n        let data = Object.values(plotData)\n        if (targetNode.info?.unit === '%')\n          data = data.map(({ value, plot, artifactIds }) => ({\n            value: value * 100,\n            plot,\n            artifactIds,\n          })) as Build[]\n        if (plotBaseNumNode.info?.unit === '%')\n          data = data.map(({ value, plot, artifactIds }) => ({\n            value,\n            plot: (plot ?? 0) * 100,\n            artifactIds,\n          })) as Build[]\n        setChartData({\n          valueNode: targetNode,\n          plotNode: plotBaseNumNode,\n          data,\n        })\n      }\n      const builds = mergeBuilds(\n        results.map((x) => x.builds),\n        maxBuildsToShow\n      )\n      if (process.env.NODE_ENV === 'development')\n        console.log('Build Result', builds)\n\n      buildResultDispatch({\n        builds: builds.map((build) => build.artifactIds),\n        buildDate: Date.now(),\n      })\n\n      setTimeout(() => {\n        // Using a ref because a user can cancel the notification while the build is going.\n        if (results && notificationRef.current) {\n          audio.play()\n          if (!tabFocused.current)\n            setTimeout(() => window.alert(t`buildCompleted`), 1)\n        }\n      }, 100)\n    } catch (e) {\n      // Worker error, cancelled, printer catches on fire, etc.\n      if (e !== cancellationError) {\n        console.log('Failed to load worker')\n        console.log(e)\n        if (e instanceof Error) throwGlobalError(e)\n      }\n\n      cancelToken.current()\n      status.tested = 0\n      status.failed = 0\n      status.skipped = 0\n      status.total = 0\n    } finally {\n      clearInterval(statusUpdateTimer)\n      setBuildStatus({\n        type: 'inactive',\n        ...status,\n        finishTime: performance.now(),\n      })\n    }\n  }, [\n    buildSetting,\n    characterKey,\n    filteredArts,\n    database,\n    gender,\n    setChartData,\n    maxWorkers,\n    buildResultDispatch,\n    t,\n    throwGlobalError,\n  ])\n\n  const characterName = characterSheet?.name ?? 'Character Name'\n\n  const setPlotBase = useCallback(\n    (plotBase: string[] | undefined) => {\n      buildSettingDispatch({ plotBase })\n      setChartData(undefined)\n    },\n    [buildSettingDispatch, setChartData]\n  )\n  const dataContext: dataContextObj | undefined = useMemo(() => {\n    return data && teamData && { data, teamData }\n  }, [data, teamData])\n\n  const targetSelector = (\n    <OptimizationTargetSelector\n      optimizationTarget={optimizationTarget}\n      setTarget={(target) =>\n        buildSettingDispatch({ optimizationTarget: target })\n      }\n      disabled={!!generatingBuilds}\n    />\n  )\n\n  const getGraphBuildLabel = useCallback(\n    (index: number) => (\n      <Trans t={t} i18nKey=\"graphBuildLabel\" count={index + 1}>\n        Graph #{{ count: index + 1 }}\n      </Trans>\n    ),\n    [t]\n  )\n  const getNormBuildLabel = useCallback((index: number) => `#${index + 1}`, [])\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n      {noArtifact && (\n        <Alert severity=\"warning\" variant=\"filled\">\n          <Trans t={t} i18nKey=\"noArtis\">\n            Oops! It looks like you haven't added any artifacts to GO yet! You\n            should go to the{' '}\n            <Link component={RouterLink} to=\"/artifacts\">\n              Artifacts\n            </Link>{' '}\n            page and add some!\n          </Trans>\n        </Alert>\n      )}\n      {/* Build Generator Editor */}\n      {dataContext && (\n        <DataContext.Provider value={dataContext}>\n          <Grid container spacing={1}>\n            {/* 1*/}\n            <Grid\n              item\n              xs={12}\n              sm={6}\n              lg={3}\n              display=\"flex\"\n              flexDirection=\"column\"\n              gap={1}\n            >\n              {/* character card */}\n              <Box>\n                <CharacterCard\n                  characterKey={characterKey}\n                  onClickTeammate={onClickTeammate}\n                />\n              </Box>\n              <BonusStatsCard />\n            </Grid>\n\n            {/* 2 */}\n            <Grid\n              item\n              xs={12}\n              sm={6}\n              lg={4}\n              display=\"flex\"\n              flexDirection=\"column\"\n              gap={1}\n            >\n              {/* Level Filter */}\n              <CardLight>\n                <CardContent sx={{ display: 'flex', gap: 1 }}>\n                  <Typography\n                    sx={{ fontWeight: 'bold' }}\n                  >{t`levelFilter`}</Typography>\n                  <SqBadge color=\"info\">{levelTotal.in}</SqBadge>\n                </CardContent>\n                <Divider />\n                <CardContent>\n                  <ArtifactLevelSlider\n                    levelLow={levelLow}\n                    levelHigh={levelHigh}\n                    setLow={(levelLow) => buildSettingDispatch({ levelLow })}\n                    setHigh={(levelHigh) => buildSettingDispatch({ levelHigh })}\n                    setBoth={(levelLow, levelHigh) =>\n                      buildSettingDispatch({ levelLow, levelHigh })\n                    }\n                    disabled={generatingBuilds}\n                  />\n                </CardContent>\n              </CardLight>\n\n              {/* Main Stat Filters */}\n              <CardLight>\n                <CardContent>\n                  <Typography\n                    sx={{ fontWeight: 'bold' }}\n                  >{t`mainStat.title`}</Typography>\n                </CardContent>\n                <Divider />\n                <CardContent>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                    <AssumeFullLevelToggle\n                      mainStatAssumptionLevel={mainStatAssumptionLevel}\n                      setmainStatAssumptionLevel={(\n                        mainStatAssumptionLevel: number\n                      ) => buildSettingDispatch({ mainStatAssumptionLevel })}\n                      disabled={generatingBuilds}\n                    />\n                    <InfoTooltip\n                      title={\n                        <Box>\n                          <Typography variant=\"h6\">{t`mainStat.levelAssTooltip.title`}</Typography>\n                          <Typography>{t`mainStat.levelAssTooltip.desc`}</Typography>\n                        </Box>\n                      }\n                    />\n                  </Box>\n                </CardContent>\n                {/* main stat selector */}\n                <MainStatSelectionCard\n                  disabled={generatingBuilds}\n                  filteredArtIdMap={filteredArtIdMap}\n                />\n              </CardLight>\n            </Grid>\n\n            {/* 3 */}\n            <Grid\n              item\n              xs={12}\n              sm={6}\n              lg={5}\n              display=\"flex\"\n              flexDirection=\"column\"\n              gap={1}\n            >\n              <ArtifactSetConfig disabled={generatingBuilds} />\n\n              {/* use excluded */}\n              <ExcludeArt\n                disabled={generatingBuilds}\n                excludedTotal={excludedTotal.in}\n              />\n\n              <Button\n                fullWidth\n                startIcon={\n                  allowPartial ? <CheckBox /> : <CheckBoxOutlineBlank />\n                }\n                color={allowPartial ? 'success' : 'secondary'}\n                onClick={() =>\n                  buildSettingDispatch({ allowPartial: !allowPartial })\n                }\n                disabled={generatingBuilds}\n              >\n                {t`allowPartial`}\n              </Button>\n\n              {/* use equipped */}\n              <AllowChar\n                disabled={generatingBuilds}\n                allowListTotal={allowListTotal.in}\n              />\n\n              {/*Minimum Final Stat Filter */}\n              <StatFilterCard disabled={generatingBuilds} />\n            </Grid>\n          </Grid>\n          {/* Footer */}\n          {isSM && targetSelector}\n          <ButtonGroup>\n            {!isSM && targetSelector}\n            <DropdownButton\n              disabled={generatingBuilds || !characterKey}\n              title={\n                <Trans t={t} i18nKey=\"build\" count={maxBuildsToShow}>\n                  {{ count: maxBuildsToShow }} Builds\n                </Trans>\n              }\n            >\n              <MenuItem>\n                <Typography variant=\"caption\" color=\"info.main\">\n                  {t('buildDropdownDesc')}\n                </Typography>\n              </MenuItem>\n              <Divider />\n              {maxBuildsToShowList.map((v) => (\n                <MenuItem\n                  key={v}\n                  onClick={() => buildSettingDispatch({ maxBuildsToShow: v })}\n                >\n                  <Trans t={t} i18nKey=\"build\" count={v}>\n                    {{ count: v }} Builds\n                  </Trans>\n                </MenuItem>\n              ))}\n            </DropdownButton>\n            <DropdownButton\n              disabled={generatingBuilds || !characterKey}\n              sx={{ borderRadius: '4px 0px 0px 4px' }}\n              title={\n                <Trans t={t} i18nKey=\"thread\" count={maxWorkers}>\n                  {{ count: maxWorkers }} Threads\n                </Trans>\n              }\n            >\n              <MenuItem>\n                <Typography variant=\"caption\" color=\"info.main\">\n                  {t('threadDropdownDesc')}\n                </Typography>\n              </MenuItem>\n              <Divider />\n              {range(1, defThreads)\n                .reverse()\n                .map((v) => (\n                  <MenuItem key={v} onClick={() => setMaxWorkers(v)}>\n                    <Trans t={t} i18nKey=\"thread\" count={v}>\n                      {{ count: v }} Threads\n                    </Trans>\n                  </MenuItem>\n                ))}\n            </DropdownButton>\n            <BootstrapTooltip placement=\"top\" title={t`notifyTooltip`}>\n              <Button\n                sx={{ borderRadius: 0 }}\n                color=\"warning\"\n                onClick={() => setnotification((n) => !n)}\n              >\n                {notification ? (\n                  <NotificationsActiveIcon />\n                ) : (\n                  <NotificationsOffIcon />\n                )}\n              </Button>\n            </BootstrapTooltip>\n            <BootstrapTooltip\n              placement=\"top\"\n              title={!optimizationTarget ? t('selectTargetFirst') : ''}\n            >\n              <span>\n                <Button\n                  disabled={\n                    !characterKey ||\n                    !optimizationTarget ||\n                    !optimizationTargetNode ||\n                    optimizationTargetNode.isEmpty\n                  }\n                  color={generatingBuilds ? 'error' : 'success'}\n                  onClick={\n                    generatingBuilds\n                      ? () => cancelToken.current()\n                      : generateBuilds\n                  }\n                  startIcon={generatingBuilds ? <Close /> : <TrendingUp />}\n                  sx={{ borderRadius: '0px 4px 4px 0px' }}\n                >\n                  {generatingBuilds\n                    ? t('generateButton.cancel')\n                    : t('generateButton.generateBuilds')}\n                </Button>\n              </span>\n            </BootstrapTooltip>\n          </ButtonGroup>\n          {!!characterKey && (\n            <BuildAlert\n              {...{ status: buildStatus, characterName, maxBuildsToShow }}\n            />\n          )}\n          <Box>\n            <ChartCard\n              disabled={generatingBuilds || !optimizationTarget}\n              plotBase={plotBase}\n              setPlotBase={setPlotBase}\n              showTooltip={!optimizationTarget}\n            />\n          </Box>\n          <CardLight>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                <Typography sx={{ flexGrow: 1 }}>\n                  {builds ? (\n                    <span>\n                      Showing{' '}\n                      <strong>\n                        {builds.length + (graphBuilds ? graphBuilds.length : 0)}\n                      </strong>{' '}\n                      build generated for {characterName}.{' '}\n                      {!!buildDate && (\n                        <span>\n                          Build generated on:{' '}\n                          <strong>\n                            {new Date(buildDate).toLocaleString()}\n                          </strong>\n                        </span>\n                      )}\n                    </span>\n                  ) : (\n                    <span>Select a character to generate builds.</span>\n                  )}\n                </Typography>\n                <Button\n                  disabled={!builds.length}\n                  color=\"error\"\n                  onClick={() => {\n                    setGraphBuilds(undefined)\n                    buildResultDispatch({ builds: [], buildDate: 0 })\n                  }}\n                >\n                  Clear Builds\n                </Button>\n              </Box>\n              <Grid container display=\"flex\" spacing={1}>\n                <Grid item>\n                  <HitModeToggle size=\"small\" />\n                </Grid>\n                <Grid item>\n                  <ReactionToggle size=\"small\" />\n                </Grid>\n                <Grid item flexGrow={1} />\n                <Grid item>\n                  <SolidToggleButtonGroup\n                    exclusive\n                    value={compareData}\n                    onChange={(_e, v) => characterDispatch({ compareData: v })}\n                    size=\"small\"\n                  >\n                    <ToggleButton value={false} disabled={!compareData}>\n                      Show new builds\n                    </ToggleButton>\n                    <ToggleButton value={true} disabled={compareData}>\n                      Compare vs. equipped\n                    </ToggleButton>\n                  </SolidToggleButtonGroup>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </CardLight>\n\n          <OptimizationTargetContext.Provider value={optimizationTarget}>\n            {graphBuilds && (\n              <BuildList\n                builds={graphBuilds}\n                characterKey={characterKey}\n                data={data}\n                compareData={compareData}\n                disabled={!!generatingBuilds}\n                getLabel={getGraphBuildLabel}\n                setBuilds={setGraphBuilds}\n              />\n            )}\n            <BuildList\n              builds={builds}\n              characterKey={characterKey}\n              data={data}\n              compareData={compareData}\n              disabled={!!generatingBuilds}\n              getLabel={getNormBuildLabel}\n            />\n          </OptimizationTargetContext.Provider>\n        </DataContext.Provider>\n      )}\n    </Box>\n  )\n}\n\nfunction BuildList({\n  builds,\n  setBuilds,\n  characterKey,\n  data,\n  compareData,\n  disabled,\n  getLabel,\n}: {\n  builds: string[][]\n  setBuilds?: (builds: string[][] | undefined) => void\n  characterKey?: '' | CharacterKey\n  data?: UIData\n  compareData: boolean\n  disabled: boolean\n  getLabel: (index: number) => Displayable\n}) {\n  const deleteBuild = useCallback(\n    (index: number) => {\n      if (setBuilds) {\n        const builds_ = [...builds]\n        builds_.splice(index, 1)\n        setBuilds(builds_)\n      }\n    },\n    [builds, setBuilds]\n  )\n  // Memoize the build list because calculating/rendering the build list is actually very expensive, which will cause longer optimization times.\n  const list = useMemo(\n    () => (\n      <Suspense\n        fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}\n      >\n        {builds?.map(\n          (build, index) =>\n            characterKey &&\n            data && (\n              <DataContextWrapper\n                key={index + build.join()}\n                characterKey={characterKey}\n                build={build}\n                oldData={data}\n              >\n                <BuildItemWrapper\n                  index={index}\n                  label={getLabel(index)}\n                  build={build}\n                  compareData={compareData}\n                  disabled={disabled}\n                  deleteBuild={setBuilds ? deleteBuild : undefined}\n                />\n              </DataContextWrapper>\n            )\n        )}\n      </Suspense>\n    ),\n    [\n      builds,\n      characterKey,\n      data,\n      compareData,\n      disabled,\n      getLabel,\n      deleteBuild,\n      setBuilds,\n    ]\n  )\n  return list\n}\nfunction BuildItemWrapper({\n  index,\n  label,\n  build,\n  compareData,\n  disabled,\n  deleteBuild,\n}: {\n  index: number\n  label: Displayable\n  build: string[]\n  compareData: boolean\n  disabled: boolean\n  deleteBuild?: (index: number) => void\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  const location = useLocation()\n  const navigate = useNavigate()\n  const toTC = useCallback(() => {\n    const paths = location.pathname.split('/')\n    paths.pop()\n    navigate(`${paths.join('/')}/theorycraft`, { state: { build } })\n  }, [navigate, build, location.pathname])\n\n  return (\n    <BuildDisplayItem\n      label={label}\n      compareBuild={compareData}\n      disabled={disabled}\n      extraButtonsLeft={\n        <>\n          <Button\n            color=\"info\"\n            size=\"small\"\n            startIcon={<Science />}\n            onClick={toTC}\n          >\n            {t('theorycraftButton')}\n          </Button>\n          {deleteBuild && (\n            <Button\n              color=\"error\"\n              size=\"small\"\n              startIcon={<DeleteForever />}\n              onClick={() => deleteBuild(index)}\n            >\n              {t('removeBuildButton')}\n            </Button>\n          )}\n        </>\n      }\n    />\n  )\n}\n\ntype Prop = {\n  children: React.ReactNode\n  characterKey: CharacterKey\n  build: string[]\n  oldData: UIData\n}\nfunction DataContextWrapper({ children, characterKey, build, oldData }: Prop) {\n  const { database } = useContext(DatabaseContext)\n  const {\n    buildSetting: { mainStatAssumptionLevel },\n  } = useBuildSetting(characterKey)\n  // Update the build when the build artifacts are changed.\n  const [dirty, setDirty] = useForceUpdate()\n  useEffect(\n    () => database.arts.followAny((id) => build.includes(id) && setDirty()),\n    [database, build, setDirty]\n  )\n  const buildsArts = useMemo(\n    () =>\n      dirty &&\n      (build\n        .map((i) => database.arts.get(i))\n        .filter((a) => a) as ICachedArtifact[]),\n    [dirty, build, database]\n  )\n  const teamData = useTeamData(\n    characterKey,\n    mainStatAssumptionLevel,\n    buildsArts\n  )\n  const providerValue = useMemo(() => {\n    const tdc = teamData?.[characterKey]\n    if (!tdc) return\n    return { data: tdc.target, teamData, oldData }\n  }, [teamData, oldData, characterKey])\n  if (!providerValue) return null\n  return (\n    <DataContext.Provider value={providerValue}>\n      {children}\n    </DataContext.Provider>\n  )\n}\n","import { useCallback, useState } from 'react'\n\n/* Hook to get a callback function for throwing\nsynchronous error from asynchronous code\nWhen this callback is used somewhere within an error boundary,\nit will trigger it, even if you are in an async block\n\n```\nconst throwError = useGlobalError()\nasync function foo() { throwError(new Error()) }\n```\n*/\nexport default function useGlobalError(): (e: Error) => void {\n  const [, setError] = useState()\n  return useCallback((e: Error) => {\n    setError(() => {\n      throw e\n    })\n  }, [])\n}\n","import type { CharacterKey, GenderKey } from '@genshin-optimizer/consts'\nimport Albedo from './Character_Albedo_Card.png'\nimport Alhaitham from './Character_Alhaitham_Card.jpg'\nimport Aloy from './Character_Aloy_Card.png'\nimport Amber from './Character_Amber_Card.jpg'\nimport AratakiItto from './Character_Arataki_Itto_Card.jpg'\nimport Barbara from './Character_Barbara_Card.jpg'\nimport Beidou from './Character_Beidou_Card.jpg'\nimport Bennett from './Character_Bennett_Card.jpg'\nimport Candace from './Character_Candace_Card.jpg'\nimport Chongyun from './Character_Chongyun_Card.jpg'\nimport Collei from './Character_Collei_Card.jpg'\nimport Cyno from './Character_Cyno_Card.jpg'\nimport Dehya from './Character_Dehya_Card.jpg'\nimport Diluc from './Character_Diluc_Card.jpg'\nimport Diona from './Character_Diona_Card.png'\nimport Dori from './Character_Dori_Card.jpg'\nimport Eula from './Character_Eula_Card.png'\nimport Faruzan from './Character_Faruzan_Card.jpg'\nimport Fischl from './Character_Fischl_Card.jpg'\nimport Ganyu from './Character_Ganyu_Card.png'\nimport Gorou from './Character_Gorou_Card.png'\nimport HuTao from './Character_Hu_Tao_Card.png'\nimport Jean from './Character_Jean_Card.jpg'\nimport Kaeya from './Character_Kaeya_Card.jpg'\nimport KamisatoAyaka from './Character_Kamisato_Ayaka_Card.png'\nimport KamisatoAyato from './Character_Kamisato_Ayato_Card.png'\nimport KaedeharaKazuha from './Character_Kazuha_Card.png'\nimport Keqing from './Character_Keqing_Card.jpg'\nimport Klee from './Character_Klee_Card.jpg'\nimport KujouSara from './Character_Kujou_Sara_Card.jpg'\nimport KukiShinobu from './Character_Kuki_Shinobu_Card.jpg'\nimport Layla from './Character_Layla_Card.jpeg'\nimport Lisa from './Character_Lisa_Card.jpg'\nimport Mika from './Character_Mika_Card.jpg'\nimport Mona from './Character_Mona_Card.jpg'\nimport Nahida from './Character_Nahida_Card.jpeg'\nimport Nilou from './Character_Nilou_Card.jpg'\nimport Ningguang from './Character_Ningguang_Card.jpg'\nimport Noelle from './Character_Noelle_Card.jpg'\nimport Qiqi from './Character_Qiqi_Card.jpg'\nimport RaidenShogun from './Character_Raiden_Shogun_Card.png'\nimport Razor from './Character_Razor_Card.jpg'\nimport Rosaria from './Character_Rosaria_Card.png'\nimport SangonomiyaKokomi from './Character_Sangonomiya_Kokomi_Card.jpg'\nimport Sayu from './Character_Sayu_Card.png'\nimport Shenhe from './Character_Shenhe_Card.jpg'\nimport ShikanoinHeizou from './Character_Shikanoin_Heizou_Card.png'\nimport Somnia from './Character_Somnia_Card.png'\nimport Sucrose from './Character_Sucrose_Card.jpg'\nimport Tartaglia from './Character_Tartaglia_Card.png'\nimport Thoma from './Character_Thoma_Card.jpg'\nimport Tighnari from './Character_Tighnari_Card.jpg'\nimport Venti from './Character_Venti_Card.jpg'\nimport Wanderer from './Character_Wanderer_Card.jpg'\nimport Xiangling from './Character_Xiangling_Card.jpg'\nimport Xiao from './Character_Xiao_Card.jpg'\nimport Xingqiu from './Character_Xingqiu_Card.jpg'\nimport Xinyan from './Character_Xinyan_Card.jpg'\nimport YaeMiko from './Character_Yae_Miko_Card.png'\nimport Yanfei from './Character_Yanfei_Card.png'\nimport Yaoyao from './Character_Yaoyao_Card.jpg'\nimport Yelan from './Character_Yelan_Card.jpg'\nimport Yoimiya from './Character_Yoimiya_Card.png'\nimport YunJin from './Character_Yun_Jin_Card.jpg'\nimport Zhongli from './Character_Zhongli_Card.png'\nimport TravelerF from './Traveler_Female_Card.jpg'\nimport TravelerM from './Traveler_Male_Card.jpg'\n\nconst charCards = {\n  Albedo,\n  Alhaitham,\n  Aloy,\n  Amber,\n  AratakiItto,\n  Barbara,\n  Beidou,\n  Bennett,\n  Candace,\n  Chongyun,\n  Collei,\n  Cyno,\n  Dehya,\n  Diluc,\n  Diona,\n  Dori,\n  Eula,\n  Faruzan,\n  Fischl,\n  Ganyu,\n  Gorou,\n  HuTao,\n  Jean,\n  KaedeharaKazuha,\n  Kaeya,\n  KamisatoAyaka,\n  KamisatoAyato,\n  Keqing,\n  Klee,\n  KujouSara,\n  KukiShinobu,\n  Layla,\n  Lisa,\n  Mika,\n  Mona,\n  Nahida,\n  Nilou,\n  Ningguang,\n  Noelle,\n  Qiqi,\n  RaidenShogun,\n  Razor,\n  Rosaria,\n  SangonomiyaKokomi,\n  Sayu,\n  Shenhe,\n  ShikanoinHeizou,\n  Somnia,\n  Sucrose,\n  Tartaglia,\n  Thoma,\n  Tighnari,\n  TravelerF,\n  TravelerM,\n  Venti,\n  Wanderer,\n  Xiangling,\n  Xiao,\n  Xingqiu,\n  Xinyan,\n  YaeMiko,\n  Yanfei,\n  Yaoyao,\n  Yelan,\n  Yoimiya,\n  YunJin,\n  Zhongli,\n} as const\n\nexport function charCard(charKey: CharacterKey, gender: GenderKey): string {\n  switch (charKey) {\n    case 'TravelerAnemo':\n    case 'TravelerDendro':\n    case 'TravelerElectro':\n    case 'TravelerGeo':\n      return charCards[`Traveler${gender}`] ?? ''\n    default:\n      return charCards[charKey] ?? ''\n  }\n}\n","import { Close, Difference } from '@mui/icons-material'\nimport { Button, Skeleton, Tooltip, Typography } from '@mui/material'\nimport { Suspense, useContext, useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { CharacterContext } from '../../../../Context/CharacterContext'\nimport {\n  HitModeToggle,\n  ReactionToggle,\n} from '../../../../Components/HitModeEditor'\nimport ModalWrapper from '../../../../Components/ModalWrapper'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport { DataContext } from '../../../../Context/DataContext'\nimport useBoolState from '../../../../ReactHooks/useBoolState'\nimport useTeamData from '../../../../ReactHooks/useTeamData'\nimport { objectMap } from '../../../../Util/Util'\nimport useBuildSetting from '../TabOptimize/useBuildSetting'\nimport BuildDisplayItem from '../TabOptimize/Components/BuildDisplayItem'\n\nexport default function CompareBuildButton({\n  artId,\n  weaponId,\n}: {\n  artId?: string\n  weaponId?: string\n}) {\n  const { t } = useTranslation('page_character')\n  const [show, onShow, onHide] = useBoolState(false)\n\n  return (\n    <>\n      <ModalWrapper\n        open={show}\n        onClose={onHide}\n        containerProps={{ maxWidth: 'xl' }}\n      >\n        <CompareContent artId={artId} weaponId={weaponId} onHide={onHide} />\n      </ModalWrapper>\n      <Tooltip\n        title={<Typography>{t`tabEquip.compare`}</Typography>}\n        placement=\"top\"\n        arrow\n      >\n        <Button color=\"info\" size=\"small\" onClick={onShow}>\n          <Difference />\n        </Button>\n      </Tooltip>\n    </>\n  )\n}\nfunction CompareContent({\n  artId,\n  weaponId,\n  onHide,\n}: {\n  artId?: string\n  weaponId?: string\n  onHide: () => void\n}) {\n  const { database } = useContext(DatabaseContext)\n  const {\n    character: { key: characterKey, equippedArtifacts },\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { mainStatAssumptionLevel },\n  } = useBuildSetting(characterKey)\n  const { data: oldData } = useContext(DataContext)\n  const build = useMemo(() => {\n    const newArt = database.arts.get(artId ?? '')\n    const artmap = objectMap(equippedArtifacts, (id, slot) =>\n      slot === newArt?.slotKey ? newArt : database.arts.get(id)\n    )\n    return Object.values(artmap).filter((a) => a)\n  }, [database, equippedArtifacts, artId])\n  const teamData = useTeamData(\n    characterKey,\n    mainStatAssumptionLevel,\n    build,\n    weaponId ? database.weapons.get(weaponId) : undefined\n  )\n  const dataProviderValue = useMemo(\n    () =>\n      teamData && { data: teamData[characterKey]!.target, teamData, oldData },\n    [characterKey, teamData, oldData]\n  )\n  return (\n    <Suspense\n      fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}\n    >\n      {dataProviderValue && (\n        <DataContext.Provider value={dataProviderValue}>\n          <BuildDisplayItem\n            compareBuild={true}\n            extraButtonsLeft={\n              <>\n                <HitModeToggle size=\"small\" />\n                <ReactionToggle size=\"small\" />\n              </>\n            }\n            extraButtonsRight={\n              <Button size=\"small\" color=\"error\" onClick={onHide}>\n                <Close />\n              </Button>\n            }\n          />\n        </DataContext.Provider>\n      )}\n    </Suspense>\n  )\n}\n","import type { ArtifactSlotKey } from '@genshin-optimizer/consts'\nimport {\n  Box,\n  CardContent,\n  Divider,\n  Grid,\n  Skeleton,\n  Typography,\n} from '@mui/material'\nimport {\n  lazy,\n  Suspense,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n} from 'react'\nimport { useTranslation } from 'react-i18next'\nimport Assets from '../../../../Assets/Assets'\nimport CardDark from '../../../../Components/Card/CardDark'\nimport CloseButton from '../../../../Components/CloseButton'\nimport ImgIcon from '../../../../Components/Image/ImgIcon'\nimport ModalWrapper from '../../../../Components/ModalWrapper'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport ArtifactCard from '../../../../PageArtifact/ArtifactCard'\nimport type { FilterOption } from '../../../../PageArtifact/ArtifactSort'\nimport {\n  artifactFilterConfigs,\n  initialFilterOption,\n} from '../../../../PageArtifact/ArtifactSort'\nimport useForceUpdate from '../../../../ReactHooks/useForceUpdate'\nimport useMediaQueryUp from '../../../../ReactHooks/useMediaQueryUp'\nimport { filterFunction } from '../../../../Util/SortByFilters'\nimport CompareBuildButton from './CompareBuildButton'\n\nconst numToShowMap = { xs: 2 * 3, sm: 2 * 3, md: 3 * 3, lg: 4 * 3, xl: 4 * 3 }\nconst ArtifactFilterDisplay = lazy(\n  () => import('../../../../Components/Artifact/ArtifactFilterDisplay')\n)\n\nexport default function ArtifactSwapModal({\n  onChangeId,\n  slotKey,\n  show,\n  onClose,\n}: {\n  onChangeId: (id: string) => void\n  slotKey: ArtifactSlotKey\n  show: boolean\n  onClose: () => void\n}) {\n  const { t } = useTranslation('page_character')\n  const { database } = useContext(DatabaseContext)\n  const clickHandler = useCallback(\n    (id) => {\n      onChangeId(id)\n      onClose()\n    },\n    [onChangeId, onClose]\n  )\n  const filterOptionReducer = useCallback(\n    (state, action) => ({ ...state, ...action, slotKeys: [slotKey] }),\n    [slotKey]\n  )\n\n  const [filterOption, filterOptionDispatch]: [\n    FilterOption,\n    (action: any) => void\n  ] = useReducer(filterOptionReducer, {\n    ...initialFilterOption(),\n    slotKeys: [slotKey],\n  })\n\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  useEffect(() => {\n    return database.arts.followAny(forceUpdate)\n  }, [database, forceUpdate])\n\n  const brPt = useMediaQueryUp()\n\n  const filterConfigs = useMemo(() => artifactFilterConfigs(), [])\n  const artIdList = useMemo(() => {\n    const filterFunc = filterFunction(filterOption, filterConfigs)\n    return (\n      dbDirty &&\n      database.arts.values\n        .filter(filterFunc)\n        .map((art) => art.id)\n        .slice(0, numToShowMap[brPt])\n    )\n  }, [dbDirty, database, filterConfigs, filterOption, brPt])\n\n  return (\n    <ModalWrapper\n      open={show}\n      onClose={onClose}\n      containerProps={{ maxWidth: 'xl' }}\n    >\n      <CardDark>\n        <CardContent\n          sx={{\n            py: 1,\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <Typography variant=\"h6\">\n            {slotKey ? <ImgIcon src={Assets.slot[slotKey]} /> : null}{' '}\n            {t`tabEquip.swapArt`}\n          </Typography>\n          <CloseButton onClick={onClose} />\n        </CardContent>\n        <Divider />\n        <CardContent>\n          <Suspense\n            fallback={\n              <Skeleton variant=\"rectangular\" width=\"100%\" height={200} />\n            }\n          >\n            <ArtifactFilterDisplay\n              filterOption={filterOption}\n              filterOptionDispatch={filterOptionDispatch}\n              filteredIds={artIdList}\n              disableSlotFilter\n            />\n          </Suspense>\n          <Box mt={1}>\n            <Suspense\n              fallback={\n                <Skeleton variant=\"rectangular\" width=\"100%\" height={300} />\n              }\n            >\n              <Grid container spacing={1} columns={{ xs: 2, md: 3, lg: 4 }}>\n                {artIdList.map((id) => (\n                  <Grid item key={id} xs={1}>\n                    <ArtifactCard\n                      artifactId={id}\n                      extraButtons={<CompareBuildButton artId={id} />}\n                      onClick={clickHandler}\n                    />\n                  </Grid>\n                ))}\n              </Grid>\n            </Suspense>\n          </Box>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  )\n}\n","import type {\n  RarityKey,\n  WeaponKey,\n  WeaponTypeKey,\n} from '@genshin-optimizer/consts'\nimport { allRarityKeys } from '@genshin-optimizer/consts'\nimport { Add } from '@mui/icons-material'\nimport StarRoundedIcon from '@mui/icons-material/StarRounded'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Divider,\n  Grid,\n  TextField,\n  ToggleButton,\n  Typography,\n} from '@mui/material'\nimport type { ChangeEvent } from 'react'\nimport {\n  Suspense,\n  useCallback,\n  useContext,\n  useDeferredValue,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { useTranslation } from 'react-i18next'\nimport Assets from '../../../../Assets/Assets'\nimport CardDark from '../../../../Components/Card/CardDark'\nimport CloseButton from '../../../../Components/CloseButton'\nimport ImgIcon from '../../../../Components/Image/ImgIcon'\nimport ModalWrapper from '../../../../Components/ModalWrapper'\nimport SolidToggleButtonGroup from '../../../../Components/SolidToggleButtonGroup'\nimport WeaponSelectionModal from '../../../../Components/Weapon/WeaponSelectionModal'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport WeaponCard from '../../../../PageWeapon/WeaponCard'\nimport WeaponEditor from '../../../../PageWeapon/WeaponEditor'\nimport useForceUpdate from '../../../../ReactHooks/useForceUpdate'\nimport { handleMultiSelect } from '../../../../Util/MultiSelect'\nimport { filterFunction, sortFunction } from '../../../../Util/SortByFilters'\nimport {\n  weaponFilterConfigs,\n  weaponSortConfigs,\n  weaponSortMap,\n} from '../../../../Util/WeaponSort'\nimport { initialWeapon } from '../../../../Util/WeaponUtil'\nimport CompareBuildButton from './CompareBuildButton'\n\nconst rarityHandler = handleMultiSelect([...allRarityKeys])\n\nexport default function WeaponSwapModal({\n  onChangeId,\n  weaponTypeKey,\n  show,\n  onClose,\n}: {\n  onChangeId: (id: string) => void\n  weaponTypeKey: WeaponTypeKey\n  show: boolean\n  onClose: () => void\n}) {\n  const { t } = useTranslation([\n    'page_character',\n    'page_weapon',\n    'weaponNames_gen',\n  ])\n  const { database } = useContext(DatabaseContext)\n  const [newWeaponModalShow, setnewWeaponModalShow] = useState(false)\n  const clickHandler = useCallback(\n    (id: string) => {\n      onChangeId(id)\n      onClose()\n    },\n    [onChangeId, onClose]\n  )\n\n  const [editWeaponId, setEditWeaponId] = useState('')\n  const newWeapon = useCallback(\n    (weaponKey: WeaponKey) => {\n      setEditWeaponId(database.weapons.new(initialWeapon(weaponKey)))\n    },\n    [database, setEditWeaponId]\n  )\n  const resetEditWeapon = useCallback(() => setEditWeaponId(''), [])\n\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  useEffect(\n    () => database.weapons.followAny(forceUpdate),\n    [forceUpdate, database]\n  )\n\n  const [rarity, setRarity] = useState<RarityKey[]>([5, 4, 3])\n  const [searchTerm, setSearchTerm] = useState('')\n  const deferredSearchTerm = useDeferredValue(searchTerm)\n\n  const weaponIdList = useMemo(\n    () =>\n      (dbDirty &&\n        database.weapons.values\n          .filter(\n            filterFunction(\n              { weaponType: weaponTypeKey, rarity, name: deferredSearchTerm },\n              weaponFilterConfigs()\n            )\n          )\n          .sort(\n            sortFunction(\n              weaponSortMap['level'] ?? [],\n              false,\n              weaponSortConfigs()\n            )\n          )\n          .map((weapon) => weapon.id)) ??\n      [],\n    [dbDirty, database, rarity, weaponTypeKey, deferredSearchTerm]\n  )\n\n  return (\n    <ModalWrapper open={show} onClose={onClose}>\n      <CardDark>\n        <Suspense fallback={false}>\n          <WeaponSelectionModal\n            show={newWeaponModalShow}\n            onHide={() => setnewWeaponModalShow(false)}\n            onSelect={newWeapon}\n            weaponTypeFilter={weaponTypeKey}\n          />\n        </Suspense>\n        {/* Editor/character detail display */}\n        <Suspense fallback={false}>\n          <WeaponEditor\n            weaponId={editWeaponId}\n            footer\n            onClose={resetEditWeapon}\n          />\n        </Suspense>\n        <CardContent sx={{ py: 1 }}>\n          <Grid container>\n            <Grid item flexGrow={1}>\n              <Typography variant=\"h6\">\n                {weaponTypeKey ? (\n                  <ImgIcon src={Assets.weaponTypes[weaponTypeKey]} />\n                ) : null}{' '}\n                {t`page_character:tabEquip.swapWeapon`}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <CloseButton onClick={onClose} />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardContent sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n          <Grid container spacing={1}>\n            <Grid item>\n              <SolidToggleButtonGroup\n                sx={{ height: '100%' }}\n                value={rarity}\n                size=\"small\"\n              >\n                {allRarityKeys.map((star) => (\n                  <ToggleButton\n                    key={star}\n                    value={star}\n                    onClick={() => setRarity(rarityHandler(rarity, star))}\n                  >\n                    <Box display=\"flex\">\n                      <strong>{star}</strong>\n                      <StarRoundedIcon />\n                    </Box>\n                  </ToggleButton>\n                ))}\n              </SolidToggleButtonGroup>\n            </Grid>\n            <Grid item flexGrow={1}>\n              <TextField\n                autoFocus\n                size=\"small\"\n                value={searchTerm}\n                onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>\n                  setSearchTerm(e.target.value)\n                }\n                label={t('page_weapon:weaponName')}\n                sx={{ height: '100%' }}\n                InputProps={{\n                  sx: { height: '100%' },\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            fullWidth\n            onClick={() => setnewWeaponModalShow(true)}\n            color=\"info\"\n            startIcon={<Add />}\n          >\n            {t('page_weapon:addWeapon')}\n          </Button>\n          <Grid container spacing={1}>\n            {weaponIdList.map((weaponId) => (\n              <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3}>\n                <WeaponCard\n                  weaponId={weaponId}\n                  onClick={clickHandler}\n                  extraButtons={<CompareBuildButton weaponId={weaponId} />}\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  )\n}\n","import type { ArtifactSlotKey, WeaponTypeKey } from '@genshin-optimizer/consts'\nimport { allArtifactSlotKeys } from '@genshin-optimizer/consts'\nimport { Settings, SwapHoriz } from '@mui/icons-material'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Divider,\n  Grid,\n  ListItem,\n  Stack,\n  Tooltip,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@mui/material'\nimport {\n  lazy,\n  Suspense,\n  useCallback,\n  useContext,\n  useDeferredValue,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { useTranslation } from 'react-i18next'\nimport SetEffectDisplay from '../../../../Components/Artifact/SetEffectDisplay'\nimport SlotIcon from '../../../../Components/Artifact/SlotIcon'\nimport SubstatToggle from '../../../../Components/Artifact/SubstatToggle'\nimport CardDark from '../../../../Components/Card/CardDark'\nimport CardLight from '../../../../Components/Card/CardLight'\nimport DocumentDisplay from '../../../../Components/DocumentDisplay'\nimport {\n  BasicFieldDisplay,\n  FieldDisplayList,\n} from '../../../../Components/FieldDisplay'\nimport ModalWrapper from '../../../../Components/ModalWrapper'\nimport PercentBadge from '../../../../Components/PercentBadge'\nimport { CharacterContext } from '../../../../Context/CharacterContext'\nimport { DataContext } from '../../../../Context/DataContext'\nimport { dataSetEffects } from '../../../../Data/Artifacts'\nimport Artifact from '../../../../Data/Artifacts/Artifact'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport { uiInput as input } from '../../../../Formula'\nimport ArtifactCard from '../../../../PageArtifact/ArtifactCard'\nimport WeaponCard from '../../../../PageWeapon/WeaponCard'\nimport useBoolState from '../../../../ReactHooks/useBoolState'\nimport useCharMeta from '../../../../ReactHooks/useCharMeta'\nimport { iconInlineProps } from '../../../../SVGIcons'\nimport { allSubstatKeys } from '../../../../Types/artifact'\nimport { charKeyToLocCharKey } from '../../../../Types/consts'\nimport type { IFieldDisplay } from '../../../../Types/fieldDisplay'\nimport ArtifactSwapModal from './ArtifactSwapModal'\nimport WeaponSwapModal from './WeaponSwapModal'\n\nconst WeaponEditor = lazy(() => import('../../../../PageWeapon/WeaponEditor'))\n\nexport default function EquipmentSection() {\n  const {\n    character: { equippedWeapon, key: characterKey },\n    characterSheet,\n  } = useContext(CharacterContext)\n  const { teamData, data } = useContext(DataContext)\n  const weaponSheet = teamData[characterKey]?.weaponSheet\n  const [weaponId, setweaponId] = useState('')\n  const showWeapon = useCallback(\n    () => setweaponId(equippedWeapon),\n    [equippedWeapon]\n  )\n  const hideWeapon = useCallback(() => setweaponId(''), [])\n\n  //triggers when character swap weapons\n  useEffect(() => {\n    if (weaponId && weaponId !== equippedWeapon) setweaponId(equippedWeapon)\n  }, [weaponId, equippedWeapon])\n\n  const theme = useTheme()\n  const breakpoint = useMediaQuery(theme.breakpoints.up('lg'))\n\n  const weaponDoc = useMemo(\n    () =>\n      weaponSheet &&\n      weaponSheet.document.length > 0 && (\n        <CardLight>\n          <Box p={1}>\n            <DocumentDisplay sections={weaponSheet.document} />\n          </Box>\n        </CardLight>\n      ),\n    [weaponSheet]\n  )\n  const { rvFilter } = useCharMeta(characterKey)\n  const deferredRvFilter = useDeferredValue(rvFilter)\n  const deferredRvSet = useMemo(\n    () => new Set(deferredRvFilter),\n    [deferredRvFilter]\n  )\n  return (\n    <Box>\n      <Suspense fallback={false}>\n        <WeaponEditor\n          weaponId={weaponId}\n          footer\n          onClose={hideWeapon}\n          extraButtons={\n            <LargeWeaponSwapButton\n              weaponTypeKey={characterSheet.weaponTypeKey}\n            />\n          }\n        />\n      </Suspense>\n      <Grid container spacing={1}>\n        {breakpoint && (\n          <Grid\n            item\n            xs={12}\n            md={12}\n            lg={3}\n            xl={3}\n            sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n          >\n            {weaponDoc && weaponDoc}\n            <ArtifactSectionCard />\n          </Grid>\n        )}\n        <Grid item xs={12} md={12} lg={9} xl={9} container spacing={1}>\n          <Grid\n            item\n            xs={12}\n            sm={6}\n            md={4}\n            display=\"flex\"\n            flexDirection=\"column\"\n            gap={1}\n          >\n            <WeaponCard\n              weaponId={equippedWeapon}\n              onEdit={showWeapon}\n              canEquip\n              extraButtons={\n                <WeaponSwapButton\n                  weaponTypeKey={characterSheet.weaponTypeKey}\n                />\n              }\n            />\n          </Grid>\n          {allArtifactSlotKeys.map((slotKey) => (\n            <Grid item xs={12} sm={6} md={4} key={slotKey}>\n              {data.get(input.art[slotKey].id).value ? (\n                <ArtifactCard\n                  artifactId={data.get(input.art[slotKey].id).value}\n                  effFilter={deferredRvSet}\n                  extraButtons={<ArtifactSwapButton slotKey={slotKey} />}\n                  editorProps={{}}\n                  canEquip\n                />\n              ) : (\n                <ArtSwapCard slotKey={slotKey} />\n              )}\n            </Grid>\n          ))}\n        </Grid>\n        {!breakpoint && (\n          <Grid item xs={12} md={12} xl={3} container spacing={1}>\n            {weaponDoc && (\n              <Grid item xs={12} md={6} lg={4}>\n                {weaponDoc}\n              </Grid>\n            )}\n            <Grid\n              item\n              xs={12}\n              md={6}\n              lg={4}\n              sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n            >\n              <ArtifactSectionCard />\n            </Grid>\n          </Grid>\n        )}\n      </Grid>\n    </Box>\n  )\n}\nfunction ArtSwapCard({ slotKey }: { slotKey: ArtifactSlotKey }) {\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  const { t } = useTranslation('artifact')\n  return (\n    <CardLight\n      sx={{\n        height: '100%',\n        width: '100%',\n        minHeight: 300,\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <CardContent>\n        <Typography>\n          <SlotIcon iconProps={iconInlineProps} slotKey={slotKey} />{' '}\n          {t(`slotName.${slotKey}`)}\n        </Typography>\n      </CardContent>\n      <Divider />\n      <Box\n        sx={{\n          flexGrow: 1,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <ArtifactSwapModal\n          slotKey={slotKey}\n          show={show}\n          onClose={onClose}\n          onChangeId={(id) =>\n            database.arts.set(id, {\n              location: charKeyToLocCharKey(characterKey),\n            })\n          }\n        />\n        <Button onClick={onOpen} color=\"info\" sx={{ borderRadius: '1em' }}>\n          <SwapHoriz sx={{ height: 100, width: 100 }} />\n        </Button>\n      </Box>\n    </CardLight>\n  )\n}\nfunction WeaponSwapButton({ weaponTypeKey }: { weaponTypeKey: WeaponTypeKey }) {\n  const { t } = useTranslation('page_character')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return (\n    <>\n      <Tooltip\n        title={<Typography>{t`tabEquip.swapWeapon`}</Typography>}\n        placement=\"top\"\n        arrow\n      >\n        <Button color=\"info\" size=\"small\" onClick={onOpen}>\n          <SwapHoriz />\n        </Button>\n      </Tooltip>\n      <WeaponSwapModal\n        weaponTypeKey={weaponTypeKey}\n        onChangeId={(id) =>\n          database.weapons.set(id, {\n            location: charKeyToLocCharKey(characterKey),\n          })\n        }\n        show={show}\n        onClose={onClose}\n      />\n    </>\n  )\n}\nfunction LargeWeaponSwapButton({\n  weaponTypeKey,\n}: {\n  weaponTypeKey: WeaponTypeKey\n}) {\n  const { t } = useTranslation('page_character')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return (\n    <>\n      <Button\n        color=\"info\"\n        onClick={onOpen}\n        startIcon={<SwapHoriz />}\n      >{t`tabEquip.swapWeapon`}</Button>\n      <WeaponSwapModal\n        weaponTypeKey={weaponTypeKey}\n        onChangeId={(id) =>\n          database.weapons.set(id, {\n            location: charKeyToLocCharKey(characterKey),\n          })\n        }\n        show={show}\n        onClose={onClose}\n      />\n    </>\n  )\n}\nfunction ArtifactSwapButton({ slotKey }: { slotKey: ArtifactSlotKey }) {\n  const { t } = useTranslation('page_character')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return (\n    <>\n      <Tooltip\n        title={<Typography>{t`tabEquip.swapArt`}</Typography>}\n        placement=\"top\"\n        arrow\n      >\n        <Button color=\"info\" size=\"small\" onClick={onOpen}>\n          <SwapHoriz />\n        </Button>\n      </Tooltip>\n      <ArtifactSwapModal\n        slotKey={slotKey}\n        show={show}\n        onClose={onClose}\n        onChangeId={(id) =>\n          database.arts.set(id, { location: charKeyToLocCharKey(characterKey) })\n        }\n      />\n    </>\n  )\n}\nfunction ArtifactSectionCard() {\n  const { t } = useTranslation(['page_character', 'artifact'])\n  const { database } = useContext(DatabaseContext)\n  const {\n    character,\n    character: { key: characterKey, equippedArtifacts },\n  } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const hasEquipped = useMemo(\n    () => !!Object.values(equippedArtifacts).filter((i) => i).length,\n    [equippedArtifacts]\n  )\n  const unequipArts = useCallback(() => {\n    if (!character) return\n    if (\n      !window.confirm(\n        'Do you want to move all currently equipped artifacts to inventory?'\n      )\n    )\n      return\n    Object.values(equippedArtifacts).forEach((aid) =>\n      database.arts.set(aid, { location: '' })\n    )\n  }, [character, database, equippedArtifacts])\n\n  const setEffects = useMemo(() => dataSetEffects(data), [data])\n  const { rvFilter } = useCharMeta(characterKey)\n  const setRVFilter = useCallback(\n    (rvFilter) => database.charMeta.set(characterKey, { rvFilter }),\n    [database, characterKey]\n  )\n\n  const [show, onShow, onHide] = useBoolState()\n  const deferredrvFilter = useDeferredValue(rvFilter)\n  const { rvField, rvmField } = useMemo(() => {\n    const {\n      currentEfficiency,\n      currentEfficiency_,\n      maxEfficiency,\n      maxEfficiency_,\n    } = Object.values(equippedArtifacts).reduce(\n      (a, artid) => {\n        const art = database.arts.get(artid)\n        if (art) {\n          const { currentEfficiency, maxEfficiency } =\n            Artifact.getArtifactEfficiency(art, new Set(deferredrvFilter))\n          const {\n            currentEfficiency: currentEfficiency_,\n            maxEfficiency: maxEfficiency_,\n          } = Artifact.getArtifactEfficiency(art, new Set(allSubstatKeys))\n          a.currentEfficiency = a.currentEfficiency + currentEfficiency\n          a.maxEfficiency = a.maxEfficiency + maxEfficiency\n\n          a.currentEfficiency_ = a.currentEfficiency_ + currentEfficiency_\n          a.maxEfficiency_ = a.maxEfficiency_ + maxEfficiency_\n        }\n        return a\n      },\n      {\n        currentEfficiency: 0,\n        currentEfficiency_: 0,\n        maxEfficiency: 0,\n        maxEfficiency_: 0,\n      }\n    )\n    const rvField: IFieldDisplay = {\n      text: t`artifact:editor.curSubEff`,\n      value: !(currentEfficiency - currentEfficiency_) ? (\n        <PercentBadge value={currentEfficiency} max={4500} valid />\n      ) : (\n        <span>\n          <PercentBadge value={currentEfficiency} max={4500} valid /> /{' '}\n          <PercentBadge value={currentEfficiency_} max={4500} valid />\n        </span>\n      ),\n    }\n    const rvmField: IFieldDisplay = {\n      text: t`artifact:editor.maxSubEff`,\n      canShow: () => !!(currentEfficiency_ - maxEfficiency_),\n      value: !(maxEfficiency - maxEfficiency_) ? (\n        <PercentBadge value={maxEfficiency} max={4500} valid />\n      ) : (\n        <span>\n          <PercentBadge value={maxEfficiency} max={4500} valid /> /{' '}\n          <PercentBadge value={maxEfficiency_} max={4500} valid />\n        </span>\n      ),\n    }\n    return { rvField, rvmField }\n  }, [t, deferredrvFilter, equippedArtifacts, database])\n\n  return (\n    <CardLight>\n      {hasEquipped && (\n        <Button\n          color=\"error\"\n          onClick={unequipArts}\n          fullWidth\n          sx={{ borderBottomRightRadius: 0, borderBottomLeftRadius: 0 }}\n        >{t`tabEquip.unequipArts`}</Button>\n      )}\n      <Box p={1}>\n        <Stack spacing={1}>\n          <CardDark>\n            <Button\n              fullWidth\n              color=\"info\"\n              startIcon={<Settings />}\n              sx={{ borderBottomLeftRadius: 0, borderBottomRightRadius: 0 }}\n              onClick={onShow}\n            >\n              RV Filter\n            </Button>\n            <ModalWrapper open={show} onClose={onHide}>\n              <CardDark>\n                <CardContent>\n                  <Typography\n                    textAlign=\"center\"\n                    gutterBottom\n                    variant=\"h6\"\n                  >{t`artifact:efficiencyFilter.title`}</Typography>\n                  <SubstatToggle\n                    selectedKeys={rvFilter}\n                    onChange={setRVFilter}\n                  />\n                </CardContent>\n              </CardDark>\n            </ModalWrapper>\n            <FieldDisplayList>\n              <BasicFieldDisplay field={rvField} component={ListItem} />\n              {rvmField?.canShow?.(data) && (\n                <BasicFieldDisplay field={rvmField} component={ListItem} />\n              )}\n            </FieldDisplayList>\n          </CardDark>\n          {setEffects &&\n            Object.entries(setEffects).flatMap(([setKey, setNumKeyArr]) =>\n              setNumKeyArr.map((setNumKey) => (\n                <CardDark\n                  key={setKey + setNumKey}\n                  sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}\n                >\n                  <SetEffectDisplay\n                    key={setKey + setNumKey}\n                    setKey={setKey}\n                    setNumKey={setNumKey}\n                  />\n                </CardDark>\n              ))\n            )}\n        </Stack>\n      </Box>\n    </CardLight>\n  )\n}\n","import { charCard } from '@genshin-optimizer/char-cards'\nimport type { AscensionKey, CharacterKey } from '@genshin-optimizer/consts'\nimport { allArtifactSlotKeys } from '@genshin-optimizer/consts'\nimport { splash } from '@genshin-optimizer/silly-wisher'\nimport { Favorite, FavoriteBorder } from '@mui/icons-material'\nimport {\n  Badge,\n  Box,\n  CardActionArea,\n  Chip,\n  Grid,\n  IconButton,\n  Stack,\n  Typography,\n} from '@mui/material'\nimport { useCallback, useContext, useRef } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport Assets from '../../../../Assets/Assets'\nimport ArtifactCardNano from '../../../../Components/Artifact/ArtifactCardNano'\nimport CardLight from '../../../../Components/Card/CardLight'\nimport CharacterCardPico, {\n  BlankCharacterCardPico,\n} from '../../../../Components/Character/CharacterCardPico'\nimport StatDisplayComponent from '../../../../Components/Character/StatDisplayComponent'\nimport ImgIcon from '../../../../Components/Image/ImgIcon'\nimport SqBadge from '../../../../Components/SqBadge'\nimport { StarsDisplay } from '../../../../Components/StarDisplay'\nimport WeaponCardNano from '../../../../Components/Weapon/WeaponCardNano'\nimport { CharacterContext } from '../../../../Context/CharacterContext'\nimport { DataContext } from '../../../../Context/DataContext'\nimport { SillyContext } from '../../../../Context/SillyContext'\nimport type { TalentSheetElementKey } from '../../../../Data/Characters/ICharacterSheet'\nimport { getLevelString } from '../../../../Data/LevelData'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport { uiInput as input } from '../../../../Formula'\nimport { ElementIcon } from '../../../../KeyMap/StatIcon'\nimport useCharacterReducer from '../../../../ReactHooks/useCharacterReducer'\nimport useCharMeta from '../../../../ReactHooks/useCharMeta'\nimport useDBMeta from '../../../../ReactHooks/useDBMeta'\nimport { range } from '../../../../Util/Util'\nimport EquipmentSection from './EquipmentSection'\n\nexport default function TabOverview() {\n  const scrollRef = useRef<HTMLDivElement>()\n  const onScroll = useCallback(\n    () => scrollRef?.current?.scrollIntoView?.({ behavior: 'smooth' }),\n    [scrollRef]\n  )\n\n  return (\n    <Stack spacing={1}>\n      <Grid container spacing={1} sx={{ justifyContent: 'center' }}>\n        <Grid item xs={8} sm={5} md={4} lg={2.3}>\n          <CharacterProfileCard />\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          sm={7}\n          md={8}\n          lg={9.7}\n          sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n        >\n          <EquipmentRow onClick={onScroll} />\n          <CardLight sx={{ flexGrow: 1, p: 1 }}>\n            <StatDisplayComponent />\n          </CardLight>\n        </Grid>\n      </Grid>\n      <Box ref={scrollRef}>\n        <EquipmentSection />\n      </Box>\n    </Stack>\n  )\n}\nfunction EquipmentRow({ onClick }: { onClick: () => void }) {\n  const {\n    character: { equippedWeapon },\n  } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n\n  return (\n    <Grid container spacing={1} columns={{ xs: 2, sm: 2, md: 3, lg: 6, xl: 6 }}>\n      <Grid item xs={1}>\n        <WeaponCardNano\n          weaponId={equippedWeapon}\n          BGComponent={CardLight}\n          onClick={onClick}\n        />\n      </Grid>\n      {allArtifactSlotKeys.map((slotKey) => (\n        <Grid item key={slotKey} xs={1}>\n          <ArtifactCardNano\n            artifactId={data.get(input.art[slotKey].id).value}\n            slotKey={slotKey}\n            BGComponent={CardLight}\n            onClick={onClick}\n          />\n        </Grid>\n      ))}\n    </Grid>\n  )\n}\n/* Image card with star and name and level */\nfunction CharacterProfileCard() {\n  const { silly } = useContext(SillyContext)\n  const {\n    characterSheet,\n    character: { key: characterKey, team },\n  } = useContext(CharacterContext)\n  const { gender } = useDBMeta()\n  const { data } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(characterKey)\n  const navigate = useNavigate()\n  const level = data.get(input.lvl).value\n  const ascension = data.get(input.asc).value as AscensionKey\n  const constellation = data.get(input.constellation).value\n  const tlvl = {\n    auto: data.get(input.total.auto).value,\n    skill: data.get(input.total.skill).value,\n    burst: data.get(input.total.burst).value,\n  }\n  const tBoost = {\n    auto: data.get(input.total.autoBoost).value,\n    skill: data.get(input.total.skillBoost).value,\n    burst: data.get(input.total.burstBoost).value,\n  }\n  const sillySplash = splash(characterKey, gender)\n  const card = charCard(characterKey, gender)\n\n  return (\n    <CardLight sx={{ height: '100%' }}>\n      {silly && sillySplash ? (\n        <SillyCoverArea src={sillySplash} level={level} ascension={ascension} />\n      ) : (\n        <CoverArea src={card} level={level} ascension={ascension} />\n      )}\n      <Box>\n        <CardActionArea sx={{ p: 1 }} onClick={() => navigate('talent')}>\n          <Grid container spacing={1} mt={-1}>\n            {(['auto', 'skill', 'burst'] as TalentSheetElementKey[]).map(\n              (tKey) => (\n                <Grid item xs={4} key={tKey}>\n                  <Badge\n                    badgeContent={tlvl[tKey]}\n                    color={tBoost[tKey] ? 'info' : 'secondary'}\n                    overlap=\"circular\"\n                    anchorOrigin={{\n                      vertical: 'bottom',\n                      horizontal: 'right',\n                    }}\n                    sx={{\n                      width: '100%',\n                      height: '100%',\n                      '& > .MuiBadge-badge': {\n                        fontSize: '1.25em',\n                        padding: '.25em .4em',\n                        borderRadius: '.5em',\n                        lineHeight: 1,\n                        height: '1.25em',\n                      },\n                    }}\n                  >\n                    <Box\n                      component=\"img\"\n                      src={characterSheet.getTalentOfKey(tKey)?.img}\n                      width=\"100%\"\n                      height=\"auto\"\n                    />\n                  </Badge>\n                </Grid>\n              )\n            )}\n          </Grid>\n        </CardActionArea>\n        <Typography sx={{ textAlign: 'center', mt: 1 }} variant=\"h6\">\n          {characterSheet.constellationName}\n        </Typography>\n        <Grid container spacing={1}>\n          {range(1, 6).map((i) => (\n            <Grid item xs={4} key={i}>\n              <CardActionArea\n                onClick={() =>\n                  characterDispatch({\n                    constellation: i === constellation ? i - 1 : i,\n                  })\n                }\n              >\n                <Box\n                  component=\"img\"\n                  src={\n                    characterSheet.getTalentOfKey(\n                      `constellation${i}` as TalentSheetElementKey\n                    )?.img\n                  }\n                  sx={{\n                    ...(constellation >= i\n                      ? {}\n                      : { filter: 'brightness(50%)' }),\n                  }}\n                  width=\"100%\"\n                  height=\"auto\"\n                />\n              </CardActionArea>\n            </Grid>\n          ))}\n        </Grid>\n        <CardActionArea sx={{ p: 1 }} onClick={() => navigate('teambuffs')}>\n          <Grid container columns={3} spacing={1}>\n            {range(0, 2).map((i) => (\n              <Grid key={i} item xs={1} height=\"100%\">\n                {team[i] ? (\n                  <CharacterCardPico characterKey={team[i] as CharacterKey} />\n                ) : (\n                  <BlankCharacterCardPico index={i} />\n                )}\n              </Grid>\n            ))}\n          </Grid>\n        </CardActionArea>\n      </Box>\n    </CardLight>\n  )\n}\nfunction SillyCoverArea({ src, level, ascension }) {\n  const { characterSheet } = useContext(CharacterContext)\n\n  return (\n    <Box sx={{ position: 'relative' }}>\n      <Box src={src} component=\"img\" width=\"100%\" height=\"auto\" />\n      <Box sx={{ width: '100%', height: '100%' }}>\n        <Box\n          sx={{\n            opacity: 0.85,\n            width: '100%',\n            display: 'flex',\n            justifyContent: 'center',\n            px: 1,\n          }}\n        >\n          <CharChip />\n        </Box>\n        <Typography\n          variant=\"h6\"\n          sx={{\n            width: '100%',\n            opacity: 0.75,\n            textAlign: 'center',\n          }}\n        >\n          <StarsDisplay stars={characterSheet.rarity} colored />\n        </Typography>\n        <FavoriteButton />\n        <LevelBadge level={level} ascension={ascension} />\n      </Box>\n    </Box>\n  )\n}\n\nfunction CoverArea({ src, level, ascension }) {\n  const { characterSheet } = useContext(CharacterContext)\n\n  return (\n    <Box sx={{ position: 'relative' }}>\n      <Box sx={{ position: 'absolute', width: '100%', height: '100%' }}>\n        <Typography\n          variant=\"h6\"\n          sx={{\n            position: 'absolute',\n            width: '100%',\n            left: '50%',\n            bottom: 0,\n            transform: 'translate(-50%, -50%)',\n            opacity: 0.75,\n            textAlign: 'center',\n          }}\n        >\n          <StarsDisplay stars={characterSheet.rarity} colored />\n        </Typography>\n        <Box\n          sx={{\n            position: 'absolute',\n            left: '50%',\n            bottom: '7%',\n            transform: 'translate(-50%, -50%)',\n            opacity: 0.85,\n            width: '100%',\n            display: 'flex',\n            justifyContent: 'center',\n            px: 1,\n          }}\n        >\n          <CharChip />\n        </Box>\n        <FavoriteButton />\n        <LevelBadge level={level} ascension={ascension} />\n      </Box>\n      <Box src={src} component=\"img\" width=\"100%\" height=\"auto\"></Box>\n    </Box>\n  )\n}\n\nfunction CharChip() {\n  const { characterSheet } = useContext(CharacterContext)\n  const charEle = characterSheet.elementKey\n  return (\n    <Chip\n      color={charEle}\n      sx={{ height: 'auto' }}\n      label={\n        <Typography\n          variant=\"h6\"\n          sx={{ display: 'flex', gap: 1, alignItems: 'center' }}\n        >\n          <ElementIcon ele={charEle} />\n          <Box sx={{ whiteSpace: 'normal', textAlign: 'center' }}>\n            {characterSheet.name}\n          </Box>\n          <ImgIcon src={Assets.weaponTypes?.[characterSheet.weaponTypeKey]} />\n        </Typography>\n      }\n    />\n  )\n}\nfunction LevelBadge({\n  level,\n  ascension,\n}: {\n  level: number\n  ascension: AscensionKey\n}) {\n  return (\n    <Typography\n      sx={{ p: 1, position: 'absolute', right: 0, top: 0, opacity: 0.8 }}\n    >\n      <SqBadge>{getLevelString(level, ascension)}</SqBadge>\n    </Typography>\n  )\n}\nfunction FavoriteButton() {\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const { favorite } = useCharMeta(characterKey)\n  return (\n    <Box sx={{ position: 'absolute', left: 0, top: 0 }}>\n      <IconButton\n        sx={{ p: 1 }}\n        color=\"error\"\n        onClick={() =>\n          database.charMeta.set(characterKey, { favorite: !favorite })\n        }\n      >\n        {favorite ? <Favorite /> : <FavoriteBorder />}\n      </IconButton>\n    </Box>\n  )\n}\n","import {\n  Box,\n  CardActionArea,\n  CardContent,\n  Grid,\n  MenuItem,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@mui/material'\nimport { useCallback, useContext, useMemo } from 'react'\nimport CardDark from '../../../Components/Card/CardDark'\nimport CardLight from '../../../Components/Card/CardLight'\nimport ConditionalWrapper from '../../../Components/ConditionalWrapper'\nimport DocumentDisplay from '../../../Components/DocumentDisplay'\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton'\nimport { NodeFieldDisplay } from '../../../Components/FieldDisplay'\nimport { CharacterContext } from '../../../Context/CharacterContext'\nimport { DataContext } from '../../../Context/DataContext'\nimport type { TalentSheetElementKey } from '../../../Data/Characters/ICharacterSheet'\nimport { uiInput as input } from '../../../Formula'\nimport type { NumNode } from '../../../Formula/type'\nimport type { NodeDisplay } from '../../../Formula/uiData'\nimport useCharacterReducer from '../../../ReactHooks/useCharacterReducer'\nimport type { DocumentSection } from '../../../Types/sheet'\nimport { range } from '../../../Util/Util'\n\nconst talentSpacing = {\n  xs: 12,\n  sm: 6,\n  md: 4,\n}\n\nexport default function CharacterTalentPane() {\n  const { character, characterSheet } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(character.key)\n  const skillBurstList = [\n    ['auto', 'Normal/Charged Attack'],\n    ['skill', 'Elemental Skill'],\n    ['burst', 'Elemental Burst'],\n  ] as [TalentSheetElementKey, string][]\n  const passivesList: [\n    tKey: TalentSheetElementKey,\n    tText: string,\n    asc: number\n  ][] = [\n    ['passive1', 'Unlocked at Ascension 1', 1],\n    ['passive2', 'Unlocked at Ascension 4', 4],\n    ['passive3', 'Unlocked by Default', 0],\n  ]\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n\n  const theme = useTheme()\n  const grlg = useMediaQuery(theme.breakpoints.up('lg'))\n  const constellationCards = useMemo(\n    () =>\n      range(1, 6).map((i) => (\n        <SkillDisplayCard\n          talentKey={`constellation${i}` as TalentSheetElementKey}\n          subtitle={`Constellation Lv. ${i}`}\n          onClickTitle={() =>\n            characterDispatch({\n              constellation: i === constellation ? i - 1 : i,\n            })\n          }\n        />\n      )),\n    [constellation, characterDispatch]\n  )\n  return (\n    <>\n      <ReactionDisplay />\n      <Grid container spacing={1}>\n        {/* constellations for 4column */}\n        {grlg && (\n          <Grid\n            item\n            xs={12}\n            md={12}\n            lg={3}\n            sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n          >\n            <CardLight>\n              <CardContent>\n                <Typography variant=\"h6\" sx={{ textAlign: 'center' }}>\n                  Constellation Lv. {constellation}\n                </Typography>\n              </CardContent>\n            </CardLight>\n            {constellationCards.map((c, i) => (\n              <Box key={i} sx={{ opacity: constellation >= i + 1 ? 1 : 0.5 }}>\n                {c}\n              </Box>\n            ))}\n          </Grid>\n        )}\n        <Grid item xs={12} md={12} lg={9} container spacing={1}>\n          {/* auto, skill, burst */}\n          {skillBurstList.map(([tKey, tText]) => (\n            <Grid item key={tKey} {...talentSpacing}>\n              <SkillDisplayCard talentKey={tKey} subtitle={tText} />\n            </Grid>\n          ))}\n          {!!characterSheet.getTalentOfKey('sprint') && (\n            <Grid item {...talentSpacing}>\n              <SkillDisplayCard\n                talentKey=\"sprint\"\n                subtitle=\"Alternative Sprint\"\n              />\n            </Grid>\n          )}\n          {!!characterSheet.getTalentOfKey('passive') && (\n            <Grid item {...talentSpacing}>\n              <SkillDisplayCard talentKey=\"passive\" subtitle=\"Passive\" />\n            </Grid>\n          )}\n          {/* passives */}\n          {passivesList.map(([tKey, tText, asc]) => {\n            const enabled = ascension >= asc\n            if (!characterSheet.getTalentOfKey(tKey)) return null\n            return (\n              <Grid\n                item\n                key={tKey}\n                style={{ opacity: enabled ? 1 : 0.5 }}\n                {...talentSpacing}\n              >\n                <SkillDisplayCard talentKey={tKey} subtitle={tText} />\n              </Grid>\n            )\n          })}\n        </Grid>\n        {/* constellations for < 4 columns */}\n        {!grlg && (\n          <Grid item xs={12} md={12} lg={3} container spacing={1}>\n            <Grid item xs={12}>\n              <CardLight>\n                <CardContent>\n                  <Typography variant=\"h6\" sx={{ textAlign: 'center' }}>\n                    Constellation Lv. {constellation}\n                  </Typography>\n                </CardContent>\n              </CardLight>\n            </Grid>\n            {constellationCards.map((c, i) => (\n              <Grid\n                item\n                key={i}\n                sx={{ opacity: constellation >= i + 1 ? 1 : 0.5 }}\n                {...talentSpacing}\n              >\n                {c}\n              </Grid>\n            ))}\n          </Grid>\n        )}\n      </Grid>\n    </>\n  )\n}\nfunction ReactionDisplay() {\n  const { data } = useContext(DataContext)\n  const reaction = data.getDisplay().reaction as { [key: string]: NodeDisplay }\n  return (\n    <CardLight>\n      <CardContent>\n        <Grid container spacing={1}>\n          {Object.entries(reaction)\n            .filter(([_, node]) => !node.isEmpty)\n            .map(([key, node]) => {\n              return (\n                <Grid item key={key}>\n                  <CardDark>\n                    <CardContent sx={{ p: 1, '&:last-child': { pb: 1 } }}>\n                      <NodeFieldDisplay node={node} />\n                    </CardContent>\n                  </CardDark>\n                </Grid>\n              )\n            })}\n        </Grid>\n      </CardContent>\n    </CardLight>\n  )\n}\n\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\ntype SkillDisplayCardProps = {\n  talentKey: TalentSheetElementKey\n  subtitle: string\n  onClickTitle?: (any) => any\n}\nfunction SkillDisplayCard({\n  talentKey,\n  subtitle,\n  onClickTitle,\n}: SkillDisplayCardProps) {\n  const {\n    character: { talent },\n    characterSheet,\n    characterDispatch,\n  } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n\n  const actionWrapperFunc = useCallback(\n    (children) => (\n      <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>\n    ),\n    [onClickTitle]\n  )\n\n  const setTalentLevel = useCallback(\n    (tKey: TalentSheetElementKey, newTalentLevelKey: number) =>\n      characterDispatch({ talent: { ...talent, [tKey]: newTalentLevelKey } }),\n    [talent, characterDispatch]\n  )\n\n  let header: Displayable | null = null\n\n  if (talentKey in talent) {\n    const levelBoost = data.get(\n      input.total[`${talentKey}Boost`] as NumNode\n    ).value\n    const level = data.get(input.total[talentKey]).value\n    const asc = data.get(input.asc).value\n\n    header = (\n      <DropdownButton\n        fullWidth\n        title={`Talent Lv. ${level}`}\n        color={levelBoost ? 'info' : 'primary'}\n        sx={{ borderRadius: 0 }}\n      >\n        {range(1, talentLimits[asc]).map((i) => (\n          <MenuItem\n            key={i}\n            selected={talent[talentKey] === i}\n            disabled={talent[talentKey] === i}\n            onClick={() => setTalentLevel(talentKey, i)}\n          >\n            Talent Lv. {i + levelBoost}\n          </MenuItem>\n        ))}\n      </DropdownButton>\n    )\n  }\n  const talentSheet = characterSheet.getTalentOfKey(talentKey)\n\n  // Hide header if the header matches the current talent\n  const hideHeader = (section: DocumentSection): boolean => {\n    const headerAction = section.header?.action\n    if (headerAction && typeof headerAction !== 'string') {\n      const key: string = headerAction.props.children.props.key18\n      return key.includes(talentKey)\n    }\n    return false\n  }\n\n  return (\n    <CardLight sx={{ height: '100%' }}>\n      {header}\n      <CardContent>\n        <ConditionalWrapper\n          condition={!!onClickTitle}\n          wrapper={actionWrapperFunc}\n        >\n          <Grid container sx={{ flexWrap: 'nowrap' }}>\n            <Grid item>\n              <Box\n                component=\"img\"\n                src={talentSheet?.img}\n                sx={{ width: 60, height: 'auto' }}\n              />\n            </Grid>\n            <Grid item flexGrow={1} sx={{ pl: 1 }}>\n              <Typography variant=\"h6\">{talentSheet?.name}</Typography>\n              <Typography variant=\"subtitle1\">{subtitle}</Typography>\n            </Grid>\n          </Grid>\n        </ConditionalWrapper>\n        {/* Display document sections */}\n        {talentSheet?.sections ? (\n          <DocumentDisplay\n            sections={talentSheet.sections}\n            hideDesc\n            hideHeader={hideHeader}\n          />\n        ) : null}\n      </CardContent>\n    </CardLight>\n  )\n}\n","import type { CharacterKey } from '@genshin-optimizer/consts'\nimport { PersonAdd } from '@mui/icons-material'\nimport type { AutocompleteProps } from '@mui/material'\nimport {\n  Box,\n  CardContent,\n  CardHeader,\n  Divider,\n  Grid,\n  Skeleton,\n  Typography,\n} from '@mui/material'\nimport { Suspense, useCallback, useContext, useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport CardLight from '../../../Components/Card/CardLight'\nimport CharacterCard from '../../../Components/Character/CharacterCard'\nimport ColorText from '../../../Components/ColoredText'\nimport DocumentDisplay from '../../../Components/DocumentDisplay'\nimport { NodeFieldDisplay } from '../../../Components/FieldDisplay'\nimport type { GeneralAutocompleteOption } from '../../../Components/GeneralAutocomplete'\nimport { GeneralAutocomplete } from '../../../Components/GeneralAutocomplete'\nimport CharIconSide from '../../../Components/Image/CharIconSide'\nimport { InfoTooltipInline } from '../../../Components/InfoTooltip'\nimport type { CharacterContextObj } from '../../../Context/CharacterContext'\nimport { CharacterContext } from '../../../Context/CharacterContext'\nimport type { dataContextObj } from '../../../Context/DataContext'\nimport { DataContext } from '../../../Context/DataContext'\nimport { SillyContext } from '../../../Context/SillyContext'\nimport { dataSetEffects, getArtSheet } from '../../../Data/Artifacts'\nimport { getCharSheet } from '../../../Data/Characters'\nimport { resonanceSheets } from '../../../Data/Resonance'\nimport { DatabaseContext } from '../../../Database/Database'\nimport type { NodeDisplay } from '../../../Formula/uiData'\nimport useCharSelectionCallback from '../../../ReactHooks/useCharSelectionCallback'\nimport useDBMeta from '../../../ReactHooks/useDBMeta'\nimport { charKeyToCharName } from '../../../Types/consts'\nimport { objPathValue, range } from '../../../Util/Util'\n\nexport default function TabTeambuffs() {\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" gap={1} alignItems=\"stretch\">\n      <Grid container spacing={1}>\n        <Grid\n          item\n          xs={12}\n          md={6}\n          lg={3}\n          sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n        >\n          <TeamBuffDisplay />\n          <ResonanceDisplay />\n        </Grid>\n        {range(0, 2).map((i) => (\n          <Grid item xs={12} md={6} lg={3} key={i}>\n            <TeammateDisplay index={i} />\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  )\n}\nexport function TeamBuffDisplay() {\n  const { data, oldData } = useContext(DataContext)\n  const teamBuffs = data.getTeamBuff()\n  const nodes: Array<[string[], NodeDisplay<number>]> = []\n  Object.entries(teamBuffs.total ?? {}).forEach(\n    ([key, node]) =>\n      !node.isEmpty && node.value !== 0 && nodes.push([['total', key], node])\n  )\n  Object.entries(teamBuffs.premod ?? {}).forEach(\n    ([key, node]) =>\n      !node.isEmpty && node.value !== 0 && nodes.push([['premod', key], node])\n  )\n  Object.entries(teamBuffs.enemy ?? {}).forEach(\n    ([key, node]) =>\n      !node.isEmpty &&\n      typeof node.value === 'number' &&\n      node.value !== 0 &&\n      nodes.push([['enemy', key], node as NodeDisplay<number>])\n  )\n  if (!nodes.length) return null\n  return (\n    <CardLight>\n      <CardContent>\n        <Typography>Team Buffs</Typography>\n      </CardContent>\n      <Divider />\n      <CardContent>\n        <Grid container>\n          {nodes.map(\n            ([path, n]) =>\n              n && (\n                <Grid item xs={12} key={JSON.stringify(n.info)}>\n                  <NodeFieldDisplay\n                    node={n}\n                    oldValue={objPathValue(oldData?.getTeamBuff(), path)?.value}\n                  />\n                </Grid>\n              )\n          )}\n        </Grid>\n      </CardContent>\n    </CardLight>\n  )\n}\nfunction ResonanceDisplay() {\n  const { t } = useTranslation('page_character')\n  const { data } = useContext(DataContext)\n  const {\n    character: { team },\n  } = useContext(CharacterContext)\n  const teamCount = team.reduce((a, t) => a + (t ? 1 : 0), 1)\n  return (\n    <>\n      <CardLight>\n        <CardHeader\n          title={\n            <span>\n              {t('tabTeambuff.team_reso')}{' '}\n              <strong>\n                <ColorText color={teamCount >= 4 ? 'success' : 'warning'}>\n                  ({teamCount}/4)\n                </ColorText>\n              </strong>{' '}\n              <InfoTooltipInline\n                title={<Typography>{t`tabTeambuff.resonance_tip`}</Typography>}\n              />\n            </span>\n          }\n          titleTypographyProps={{ variant: 'subtitle2' }}\n        />\n      </CardLight>\n      {resonanceSheets.map((res, i) => (\n        <CardLight key={i} sx={{ opacity: res.canShow(data) ? 1 : 0.5 }}>\n          <CardHeader\n            title={\n              <span>\n                {res.name}{' '}\n                <InfoTooltipInline\n                  title={<Typography>{res.desc}</Typography>}\n                />\n              </span>\n            }\n            action={res.icon}\n            titleTypographyProps={{ variant: 'subtitle2' }}\n          />\n          {res.canShow(data) && <Divider />}\n          {res.canShow(data) && (\n            <CardContent>\n              <DocumentDisplay sections={res.sections} teamBuffOnly hideDesc />\n            </CardContent>\n          )}\n        </CardLight>\n      ))}\n    </>\n  )\n}\nfunction TeammateDisplay({ index }: { index: number }) {\n  const { teamData } = useContext(DataContext)\n  const { t } = useTranslation('page_character')\n  const {\n    character: active,\n    character: { key: activeCharacterKey },\n    characterDispatch,\n  } = useContext(CharacterContext)\n  const teamMateKey = active.team[index]\n  const team = useMemo(\n    () =>\n      [activeCharacterKey, ...active.team].filter((t, i) => i - 1 !== index),\n    [active.team, activeCharacterKey, index]\n  )\n  const onClickHandler = useCharSelectionCallback()\n  const setTeammate = useCallback(\n    (charKey: CharacterKey | '') =>\n      characterDispatch({ type: 'team', index, charKey }),\n    [index, characterDispatch]\n  )\n\n  const dataBundle = teamData[teamMateKey]\n  const teammateCharacterContext: CharacterContextObj | undefined = useMemo(\n    () =>\n      dataBundle && {\n        character: {\n          ...dataBundle.character,\n          conditional: active.teamConditional[teamMateKey] ?? {},\n        },\n        characterSheet: dataBundle.characterSheet,\n        characterDispatch: (state) => {\n          if (!teamMateKey) return\n          if (!('conditional' in state)) return\n          const { conditional } = state\n          if (!conditional) return\n          characterDispatch({\n            type: 'teamConditional',\n            teamMateKey: teamMateKey,\n            conditional,\n          })\n        },\n      },\n    [active, teamMateKey, dataBundle, characterDispatch]\n  )\n  const teamMateDataContext: dataContextObj | undefined = useMemo(\n    () =>\n      dataBundle && {\n        data: dataBundle.target,\n        teamData: teamData,\n      },\n    [dataBundle, teamData]\n  )\n  return (\n    <CardLight sx={{ overflow: 'visible' }}>\n      <TeammateAutocomplete\n        characterKey={teamMateKey}\n        team={team}\n        setChar={setTeammate}\n        label={t('teammate', { count: index + 1 })}\n      />\n      {teamMateKey && teammateCharacterContext && (\n        <CharacterContext.Provider value={teammateCharacterContext}>\n          {teamMateDataContext && (\n            <DataContext.Provider value={teamMateDataContext}>\n              <CharacterCard\n                characterKey={teamMateKey}\n                onClickHeader={onClickHandler}\n                // Need to wrap these elements with the providers for them to use the correct functions.\n                artifactChildren={\n                  <CharacterContext.Provider value={teammateCharacterContext}>\n                    <DataContext.Provider value={teamMateDataContext}>\n                      <CharArtifactCondDisplay />\n                    </DataContext.Provider>\n                  </CharacterContext.Provider>\n                }\n                weaponChildren={\n                  <CharacterContext.Provider value={teammateCharacterContext}>\n                    <DataContext.Provider value={teamMateDataContext}>\n                      <CharWeaponCondDisplay />\n                    </DataContext.Provider>\n                  </CharacterContext.Provider>\n                }\n                characterChildren={\n                  <CharacterContext.Provider value={teammateCharacterContext}>\n                    <DataContext.Provider value={teamMateDataContext}>\n                      <CharTalentCondDisplay />\n                    </DataContext.Provider>\n                  </CharacterContext.Provider>\n                }\n                isTeammateCard\n              />\n            </DataContext.Provider>\n          )}\n        </CharacterContext.Provider>\n      )}\n    </CardLight>\n  )\n}\nfunction CharArtifactCondDisplay() {\n  const { data } = useContext(DataContext)\n  const sections = useMemo(\n    () =>\n      Object.entries(dataSetEffects(data)).flatMap(([setKey, setNums]) =>\n        setNums.flatMap((sn) => getArtSheet(setKey).setEffectDocument(sn) ?? [])\n      ),\n    [data]\n  )\n  if (!sections) return null\n  return <DocumentDisplay sections={sections} teamBuffOnly={true} />\n}\nfunction CharWeaponCondDisplay() {\n  const {\n    character: { key: charKey },\n  } = useContext(CharacterContext)\n  const { teamData } = useContext(DataContext)\n  const weaponSheet = teamData[charKey]!.weaponSheet\n  if (!weaponSheet.document) return null\n  return <DocumentDisplay sections={weaponSheet.document} teamBuffOnly={true} />\n}\nfunction CharTalentCondDisplay() {\n  const {\n    character: { key: charKey },\n  } = useContext(CharacterContext)\n  const { teamData } = useContext(DataContext)\n  const characterSheet = teamData[charKey]!.characterSheet\n  const sections = Object.values(characterSheet.talent).flatMap(\n    (sts) => sts.sections\n  )\n  if (!sections) return null\n  return <DocumentDisplay sections={sections} teamBuffOnly={true} />\n}\n\nfunction TeammateAutocomplete({\n  characterKey,\n  team,\n  label,\n  setChar,\n  autoCompleteProps = {},\n}: {\n  characterKey: CharacterKey | ''\n  team: Array<CharacterKey | ''>\n  label: string\n  setChar: (k: CharacterKey | '') => void\n  autoCompleteProps?: Omit<\n    AutocompleteProps<\n      GeneralAutocompleteOption<CharacterKey | ''>,\n      false,\n      false,\n      false\n    >,\n    'renderInput' | 'onChange' | 'options'\n  >\n}) {\n  const { t } = useTranslation([\n    'sillyWisher_charNames',\n    'page_character',\n    'sheet_gen',\n    'charNames_gen',\n  ])\n  const { database } = useContext(DatabaseContext)\n  const { gender } = useDBMeta()\n  const { silly } = useContext(SillyContext)\n  const namesCB = useCallback(\n    (key: CharacterKey, silly: boolean): string =>\n      key.startsWith('Traveler')\n        ? `${t(\n            `${\n              silly ? 'sillyWisher_charNames' : 'charNames_gen'\n            }:${charKeyToCharName(key, gender)}`\n          )} (${t(\n            `sheet_gen:element.${getCharSheet(key, gender)?.elementKey}`\n          )})`\n        : t(`${silly ? 'sillyWisher_charNames' : 'charNames_gen'}:${key}`),\n    [t, gender]\n  )\n\n  const toImg = useCallback(\n    (key: CharacterKey | '') =>\n      key ? <CharIconSide characterKey={key} /> : <PersonAdd />,\n    []\n  ) //\n  const isFavorite = useCallback(\n    (key: CharacterKey) => database.charMeta.get(key).favorite,\n    [database]\n  )\n  const onDisable = useCallback(\n    ({ key }: { key: CharacterKey | '' }) =>\n      team.filter((t) => t && t !== characterKey).includes(key) ||\n      (key.startsWith('Traveler') &&\n        team.some((t) => t.startsWith('Traveler'))),\n    [team, characterKey]\n  )\n  const values = useMemo(\n    () =>\n      database.chars.keys\n        .map(\n          (v): GeneralAutocompleteOption<CharacterKey> => ({\n            key: v,\n            label: namesCB(v, silly),\n            favorite: isFavorite(v),\n            alternateNames: [namesCB(v, false)],\n          })\n        )\n        .sort((a, b) => {\n          if (a.favorite && !b.favorite) return -1\n          if (!a.favorite && b.favorite) return 1\n          return a.label.localeCompare(b.label)\n        }),\n    [database.chars.keys, namesCB, isFavorite, silly]\n  )\n  return (\n    <Suspense fallback={<Skeleton variant=\"text\" width={100} />}>\n      <GeneralAutocomplete\n        size=\"small\"\n        label={label}\n        options={values}\n        valueKey={characterKey}\n        onChange={(k) => setChar(k ?? '')}\n        getOptionDisabled={onDisable}\n        toImg={toImg}\n        {...autoCompleteProps}\n      />\n    </Suspense>\n  )\n}\n","import type {\n  ArtifactSetKey,\n  ArtifactSlotKey,\n  WeaponTypeKey,\n} from '@genshin-optimizer/consts'\nimport { allArtifactSlotKeys } from '@genshin-optimizer/consts'\nimport { weaponAsset } from '@genshin-optimizer/g-assets'\nimport { CopyAll, DeleteForever, Info, Refresh } from '@mui/icons-material'\nimport StarRoundedIcon from '@mui/icons-material/StarRounded'\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  CardHeader,\n  Divider,\n  Grid,\n  ListItem,\n  MenuItem,\n  Skeleton,\n  Slider,\n  Stack,\n  ToggleButton,\n  Typography,\n} from '@mui/material'\nimport React, {\n  Suspense,\n  useCallback,\n  useContext,\n  useDeferredValue,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useLocation } from 'react-router-dom'\nimport ArtifactSetAutocomplete from '../../../../Components/Artifact/ArtifactSetAutocomplete'\nimport ArtifactSetTooltip from '../../../../Components/Artifact/ArtifactSetTooltip'\nimport SetEffectDisplay from '../../../../Components/Artifact/SetEffectDisplay'\nimport SlotIcon from '../../../../Components/Artifact/SlotIcon'\nimport BootstrapTooltip from '../../../../Components/BootstrapTooltip'\nimport CardDark from '../../../../Components/Card/CardDark'\nimport CardLight from '../../../../Components/Card/CardLight'\nimport StatDisplayComponent from '../../../../Components/Character/StatDisplayComponent'\nimport ColorText from '../../../../Components/ColoredText'\nimport CustomNumberInput from '../../../../Components/CustomNumberInput'\nimport DocumentDisplay from '../../../../Components/DocumentDisplay'\nimport DropdownButton from '../../../../Components/DropdownMenu/DropdownButton'\nimport {\n  FieldDisplayList,\n  NodeFieldDisplay,\n} from '../../../../Components/FieldDisplay'\nimport ImgIcon from '../../../../Components/Image/ImgIcon'\nimport LevelSelect from '../../../../Components/LevelSelect'\nimport RefinementDropdown from '../../../../Components/RefinementDropdown'\nimport SolidToggleButtonGroup from '../../../../Components/SolidToggleButtonGroup'\nimport {\n  StatColoredWithUnit,\n  StatWithUnit,\n} from '../../../../Components/StatDisplay'\nimport { CharacterContext } from '../../../../Context/CharacterContext'\nimport type { dataContextObj } from '../../../../Context/DataContext'\nimport { DataContext } from '../../../../Context/DataContext'\nimport { getArtSheet } from '../../../../Data/Artifacts'\nimport Artifact, { maxArtifactLevel } from '../../../../Data/Artifacts/Artifact'\nimport { artifactDefIcon } from '../../../../Data/Artifacts/ArtifactSheet'\nimport { getWeaponSheet } from '../../../../Data/Weapons'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport { initCharTC } from '../../../../Database/DataManagers/CharacterTCData'\nimport { uiInput as input } from '../../../../Formula'\nimport { computeUIData, dataObjForWeapon } from '../../../../Formula/api'\nimport { constant, percent } from '../../../../Formula/utils'\nimport KeyMap, { cacheValueString } from '../../../../KeyMap'\nimport StatIcon from '../../../../KeyMap/StatIcon'\nimport useBoolState from '../../../../ReactHooks/useBoolState'\nimport useTeamData from '../../../../ReactHooks/useTeamData'\nimport { iconInlineProps } from '../../../../SVGIcons'\nimport type {\n  ICachedArtifact,\n  MainStatKey,\n  SubstatKey,\n} from '../../../../Types/artifact'\nimport type { ICharTC, ICharTCArtifactSlot } from '../../../../Types/character'\nimport type {\n  ArtifactRarity,\n  SetNum,\n  SubstatType,\n} from '../../../../Types/consts'\nimport { substatType } from '../../../../Types/consts'\nimport type { ICachedWeapon } from '../../../../Types/weapon'\nimport { deepClone, objectMap } from '../../../../Util/Util'\nimport { defaultInitialWeaponKey } from '../../../../Util/WeaponUtil'\nimport useCharTC from './useCharTC'\nconst WeaponSelectionModal = React.lazy(\n  () => import('../../../../Components/Weapon/WeaponSelectionModal')\n)\n\ntype ISet = Partial<Record<ArtifactSetKey, 1 | 2 | 4>>\nexport default function TabTheorycraft() {\n  const { database } = useContext(DatabaseContext)\n  const { data: oldData } = useContext(DataContext)\n  const {\n    character,\n    character: { key: characterKey, compareData },\n    characterSheet,\n    characterDispatch,\n  } = useContext(CharacterContext)\n  const data = useCharTC(\n    characterKey,\n    defaultInitialWeaponKey(characterSheet.weaponTypeKey)\n  )\n  const setData = useCallback(\n    (data: ICharTC) => database.charTCs.set(characterKey, data),\n    [characterKey, database]\n  )\n  const resetData = useCallback(() => {\n    setData(initCharTC(defaultInitialWeaponKey(characterSheet.weaponTypeKey)))\n  }, [setData, characterSheet])\n  const setWeapon = useCallback(\n    (action: Partial<ICharTC['weapon']>) => {\n      setData({ ...data, weapon: { ...data.weapon, ...action } })\n    },\n    [setData, data]\n  )\n\n  const copyFrom = useCallback(\n    (eWeapon: ICachedWeapon, build: ICachedArtifact[]) => {\n      const newData = initCharTC(eWeapon.key)\n      newData.artifact.substats.type = data.artifact.substats.type\n\n      newData.weapon.level = eWeapon.level\n      newData.weapon.ascension = eWeapon.ascension\n      newData.weapon.refinement = eWeapon.refinement\n\n      const sets = {}\n      build.forEach((art) => {\n        if (!art) return\n        const { slotKey, setKey, substats, mainStatKey, level, rarity } = art\n        newData.artifact.slots[slotKey].level = level\n        newData.artifact.slots[slotKey].statKey = mainStatKey\n        newData.artifact.slots[slotKey].rarity = rarity\n        sets[setKey] = (sets[setKey] ?? 0) + 1\n        substats.forEach((substat) => {\n          if (substat.key)\n            newData.artifact.substats.stats[substat.key] =\n              (newData.artifact.substats.stats[substat.key] ?? 0) +\n              substat.accurateValue\n        })\n      })\n      newData.artifact.sets = Object.fromEntries(\n        Object.entries(sets)\n          .map(([key, value]) => [\n            key,\n            value === 3\n              ? 2\n              : value === 5\n              ? 4\n              : value === 1 && !(key as string).startsWith('PrayersFor')\n              ? 0\n              : value,\n          ])\n          .filter(([, value]) => value)\n      )\n      setData(newData)\n    },\n    [data, setData]\n  )\n  const location = useLocation()\n  const { build: locBuild } = (location.state as\n    | { build: string[] }\n    | undefined) ?? { build: undefined }\n  useEffect(() => {\n    if (!locBuild) return\n    const eWeapon = database.weapons.get(character.equippedWeapon)!\n    copyFrom(\n      eWeapon,\n      locBuild.map((i) => database.arts.get(i)!)\n    )\n    // WARNING: if copyFrom is included, it will cause a render loop due to its setData <---> data\n    // eslint-disable-next-line\n  }, [locBuild, database])\n\n  const copyFromEquipped = useCallback(() => {\n    const eWeapon = database.weapons.get(character.equippedWeapon)!\n    copyFrom(\n      eWeapon,\n      Object.values(character.equippedArtifacts)\n        .map((a) => database.arts.get(a)!)\n        .filter((a) => a)\n    )\n  }, [\n    database,\n    character.equippedArtifacts,\n    character.equippedWeapon,\n    copyFrom,\n  ])\n\n  const weapon: ICachedWeapon = useMemo(() => {\n    return {\n      ...data.weapon,\n      location: '',\n      lock: false,\n      id: '',\n    }\n  }, [data])\n  const setArtifact = useCallback(\n    (artifact: ICharTC['artifact']) => {\n      const data_ = deepClone(data)\n      data_.artifact = artifact\n      setData(data_)\n    },\n    [data, setData]\n  )\n\n  const setSubstatsType = useCallback(\n    (t: SubstatType) => {\n      const data_ = deepClone(data)\n      data_.artifact.substats.type = t\n      setData(data_)\n    },\n    [data, setData]\n  )\n\n  const setSubstats = useCallback(\n    (setSubstats: Record<SubstatKey, number>) => {\n      const data_ = deepClone(data)\n      data_.artifact.substats.stats = setSubstats\n      setData(data_)\n    },\n    [data, setData]\n  )\n\n  const deferredData = useDeferredValue(data)\n  const overriderArtData = useMemo(() => {\n    const stats = { ...deferredData.artifact.substats.stats }\n    Object.values(deferredData.artifact.slots).forEach(\n      ({ statKey, rarity, level }) =>\n        (stats[statKey] =\n          (stats[statKey] ?? 0) +\n          Artifact.mainStatValue(statKey, rarity, level))\n    )\n    return {\n      art: objectMap(stats, (v, k) =>\n        k.endsWith('_') ? percent(v / 100) : constant(v)\n      ),\n      artSet: objectMap(deferredData.artifact.sets, (v) => constant(v)),\n    }\n  }, [deferredData])\n\n  const overrideWeapon: ICachedWeapon = useMemo(\n    () => ({\n      id: '',\n      location: '',\n      key: data.weapon.key,\n      level: data.weapon.level,\n      ascension: data.weapon.ascension,\n      refinement: data.weapon.refinement,\n      lock: false,\n    }),\n    [data]\n  )\n  const teamData = useTeamData(\n    characterKey,\n    0,\n    overriderArtData,\n    overrideWeapon\n  )\n\n  const { target: charUIData } = teamData?.[characterKey] ?? {}\n\n  const dataContextValue: dataContextObj | undefined = useMemo(() => {\n    if (!teamData || !charUIData) return undefined\n    return {\n      data: charUIData,\n      teamData,\n    }\n  }, [charUIData, teamData])\n  const dataContextValueWithOld: dataContextObj | undefined = useMemo(() => {\n    if (!dataContextValue) return undefined\n    return {\n      ...dataContextValue,\n      oldData: compareData ? oldData : undefined,\n    }\n  }, [dataContextValue, compareData, oldData])\n  return (\n    <Stack spacing={1}>\n      <CardLight>\n        <Box sx={{ display: 'flex', gap: 1, p: 1 }}>\n          <Box sx={{ flexGrow: 1, display: 'flex', gap: 1 }}>\n            <Button\n              color=\"info\"\n              onClick={copyFromEquipped}\n              startIcon={<CopyAll />}\n            >\n              Copy from equipped\n            </Button>\n            <Button color=\"error\" onClick={resetData} startIcon={<Refresh />}>\n              Reset\n            </Button>\n          </Box>\n          <SolidToggleButtonGroup\n            exclusive\n            value={compareData}\n            onChange={(e, v) => characterDispatch({ compareData: v })}\n            size=\"small\"\n          >\n            <ToggleButton value={false} disabled={!compareData}>\n              Show TC stats\n            </ToggleButton>\n            <ToggleButton value={true} disabled={compareData}>\n              Compare vs. equipped\n            </ToggleButton>\n          </SolidToggleButtonGroup>\n        </Box>\n      </CardLight>\n      {dataContextValue ? (\n        <DataContext.Provider value={dataContextValue}>\n          <Grid container spacing={1} sx={{ justifyContent: 'center' }}>\n            <Grid item sx={{ flexGrow: -1 }}>\n              <WeaponEditorCard\n                weapon={weapon}\n                setWeapon={setWeapon}\n                weaponTypeKey={characterSheet.weaponTypeKey}\n              />\n              <ArtifactMainLevelCard\n                artifactData={data.artifact}\n                setArtifactData={setArtifact}\n              />\n            </Grid>\n            <Grid item sx={{ flexGrow: 1 }}>\n              <ArtifactSubCard\n                substats={data.artifact.substats.stats}\n                setSubstats={setSubstats}\n                substatsType={data.artifact.substats.type}\n                setSubstatsType={setSubstatsType}\n                mainStatKeys={Object.values(data.artifact.slots).map(\n                  (s) => s.statKey\n                )}\n              />\n            </Grid>\n          </Grid>\n        </DataContext.Provider>\n      ) : (\n        <Skeleton variant=\"rectangular\" width=\"100%\" height={500} />\n      )}\n      <CardLight sx={{ flexGrow: 1, p: 1 }}>\n        {dataContextValueWithOld ? (\n          <DataContext.Provider value={dataContextValueWithOld}>\n            <StatDisplayComponent />\n          </DataContext.Provider>\n        ) : (\n          <Skeleton variant=\"rectangular\" width=\"100%\" height={500} />\n        )}\n      </CardLight>\n    </Stack>\n  )\n}\n\nfunction WeaponEditorCard({\n  weapon,\n  setWeapon,\n  weaponTypeKey,\n}: {\n  weapon: ICachedWeapon\n  weaponTypeKey: WeaponTypeKey\n  setWeapon: (action: Partial<ICharTC['weapon']>) => void\n}) {\n  const { key, level = 0, refinement = 1, ascension = 0 } = weapon\n  const weaponSheet = getWeaponSheet(key)\n  const [show, onShow, onHide] = useBoolState()\n  const { data } = useContext(DataContext)\n  const weaponUIData = useMemo(\n    () => weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]),\n    [weaponSheet, weapon]\n  )\n  return (\n    <CardLight sx={{ p: 1, mb: 1 }}>\n      <WeaponSelectionModal\n        ascension={ascension}\n        show={show}\n        onHide={onHide}\n        onSelect={(k) => setWeapon({ key: k })}\n        weaponTypeFilter={weaponTypeKey}\n      />\n      <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n        <Box display=\"flex\" gap={1}>\n          <Box\n            className={`grad-${weaponSheet.rarity}star`}\n            component=\"img\"\n            src={weaponAsset(weapon.key, ascension >= 2)}\n            sx={{\n              flexshrink: 1,\n              flexBasis: 0,\n              maxWidth: '30%',\n              borderRadius: 1,\n            }}\n          />\n          <Stack spacing={1} flexGrow={1}>\n            <Button\n              fullWidth\n              color=\"info\"\n              sx={{ flexGrow: 1 }}\n              onClick={onShow}\n            >\n              <Box sx={{ maxWidth: '10em' }}>{weaponSheet?.name}</Box>\n            </Button>\n            {weaponSheet.hasRefinement && (\n              <RefinementDropdown\n                refinement={refinement}\n                setRefinement={(r) => setWeapon({ refinement: r })}\n              />\n            )}\n          </Stack>\n        </Box>\n        <LevelSelect\n          level={level}\n          ascension={ascension}\n          setBoth={setWeapon}\n          useLow={!weaponSheet.hasRefinement}\n        />\n        <CardDark>\n          <CardHeader\n            title={'Main Stats'}\n            titleTypographyProps={{ variant: 'subtitle2' }}\n          />\n          <Divider />\n          {weaponUIData && (\n            <FieldDisplayList>\n              {[input.weapon.main, input.weapon.sub, input.weapon.sub2].map(\n                (node) => {\n                  const n = weaponUIData.get(node)\n                  if (n.isEmpty || !n.value) return null\n                  return (\n                    <NodeFieldDisplay\n                      key={JSON.stringify(n.info)}\n                      node={n}\n                      component={ListItem}\n                    />\n                  )\n                }\n              )}\n            </FieldDisplayList>\n          )}\n        </CardDark>\n        {data && weaponSheet?.document && (\n          <DocumentDisplay sections={weaponSheet.document} />\n        )}\n      </Box>\n    </CardLight>\n  )\n}\n\nfunction ArtifactMainLevelCard({\n  artifactData,\n  setArtifactData,\n}: {\n  artifactData: ICharTC['artifact']\n  setArtifactData: (a: ICharTC['artifact']) => void\n}) {\n  const setSlot = useCallback(\n    (slotKey: ArtifactSlotKey) => (slot: ICharTCArtifactSlot) => {\n      const artifactData_ = deepClone(artifactData)\n      artifactData_.slots[slotKey] = slot\n      setArtifactData(artifactData_)\n    },\n    [artifactData, setArtifactData]\n  )\n\n  const setArtSet = useCallback(\n    (artSet: ISet) => {\n      const artifactData_ = deepClone(artifactData)\n      artifactData_.sets = artSet\n      setArtifactData(artifactData_)\n    },\n    [artifactData, setArtifactData]\n  )\n\n  return (\n    <Stack spacing={1}>\n      <CardLight sx={{ p: 1 }}>\n        <Stack spacing={1}>\n          {allArtifactSlotKeys.map((s) => (\n            <ArtifactMainLevelSlot\n              key={s}\n              slotKey={s}\n              slot={artifactData.slots[s]}\n              setSlot={setSlot(s)}\n            />\n          ))}\n        </Stack>\n      </CardLight>\n      <Suspense\n        fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={200} />}\n      >\n        <ArtifactSetsEditor artSet={artifactData.sets} setArtSet={setArtSet} />\n      </Suspense>\n    </Stack>\n  )\n}\nfunction ArtifactMainLevelSlot({\n  slotKey,\n  slot,\n  setSlot: setSlotProp,\n}: {\n  slotKey: ArtifactSlotKey\n  slot: ICharTCArtifactSlot\n  setSlot: (s: ICharTCArtifactSlot) => void\n}) {\n  const { level, statKey, rarity } = slot\n  const keys = Artifact.slotMainStats(slotKey)\n  const setSlot = useCallback(\n    (action: Partial<ICharTCArtifactSlot>) => {\n      setSlotProp({ ...slot, ...action })\n    },\n    [slot, setSlotProp]\n  )\n  const setRarity = useCallback(\n    (r: ArtifactRarity) => {\n      const mLvl = maxArtifactLevel[r] ?? 0\n      if (level > mLvl) setSlot({ rarity: r, level: mLvl })\n      else setSlot({ rarity: r })\n    },\n    [level, setSlot]\n  )\n\n  return (\n    <Box\n      display=\"flex\"\n      gap={1}\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n    >\n      <SlotIcon slotKey={slotKey} />\n      <CardDark\n        sx={{ height: '100%', minWidth: '5em', flexGrow: 1, display: 'flex' }}\n      >\n        {keys.length === 1 ? (\n          <Box\n            p={1}\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            width=\"100%\"\n            display=\"flex\"\n            gap={1}\n          >\n            <StatIcon statKey={keys[0]} iconProps={iconInlineProps} />{' '}\n            {KeyMap.getStr(keys[0])}\n          </Box>\n        ) : (\n          <DropdownButton\n            sx={{ px: 0 }}\n            fullWidth\n            title={<StatWithUnit statKey={statKey} />}\n            color={KeyMap.getVariant(statKey) ?? 'success'}\n          >\n            {keys.map((msk) => (\n              <MenuItem\n                key={msk}\n                disabled={statKey === msk}\n                onClick={() => setSlot({ statKey: msk })}\n              >\n                <StatColoredWithUnit statKey={msk} />\n              </MenuItem>\n            ))}\n          </DropdownButton>\n        )}\n      </CardDark>\n      <DropdownButton\n        sx={{ px: 0 }}\n        title={\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            {rarity} <StarRoundedIcon fontSize=\"inherit\" />\n          </Box>\n        }\n      >\n        {[5, 4, 3].map((r) => (\n          <MenuItem\n            key={r}\n            disabled={rarity === r}\n            onClick={() => setRarity(r as ArtifactRarity)}\n          >\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              {r} <StarRoundedIcon fontSize=\"inherit\" />\n            </Box>\n          </MenuItem>\n        ))}\n      </DropdownButton>\n      <CustomNumberInput\n        startAdornment=\"+\"\n        value={level}\n        color={Artifact.levelVariant(level)}\n        onChange={(l) => l !== undefined && setSlot({ level: l })}\n        sx={{ borderRadius: 1, pl: 1, my: 0, height: '100%' }}\n        inputProps={{ sx: { pl: 0.5, width: '2em' }, max: 20, min: 0 }}\n      />\n      <CardDark sx={{ height: '100%', minWidth: '4em' }}>\n        <Box p={1} textAlign=\"center\">{`${cacheValueString(\n          Artifact.mainStatValue(statKey, rarity, level),\n          KeyMap.unit(statKey)\n        )}${KeyMap.unit(statKey)}`}</Box>\n      </CardDark>\n    </Box>\n  )\n}\n\nfunction ArtifactSetsEditor({\n  artSet,\n  setArtSet,\n}: {\n  artSet: ISet\n  setArtSet(artSet: ISet)\n}) {\n  const setSet = useCallback(\n    (setKey: ArtifactSetKey | '') => {\n      if (!setKey) return\n      setArtSet({\n        ...artSet,\n        [setKey]: parseInt(Object.keys(getArtSheet(setKey).setEffects)[0]),\n      })\n    },\n    [artSet, setArtSet]\n  )\n\n  const setValue = useCallback(\n    (setKey: ArtifactSetKey) => (value: 1 | 2 | 4) =>\n      setArtSet({ ...artSet, [setKey]: value }),\n    [artSet, setArtSet]\n  )\n  const deleteValue = useCallback(\n    (setKey: ArtifactSetKey) => () => {\n      const { [setKey]: _, ...rest } = artSet\n      setArtSet({ ...rest })\n    },\n    [artSet, setArtSet]\n  )\n\n  const remaining = 5 - Object.values(artSet).reduce((a, b) => a + b, 0)\n\n  return (\n    <Stack spacing={1} sx={{ flexGrow: 1 }}>\n      {Object.entries(artSet).map(([setKey, value]) => (\n        <ArtifactSetEditor\n          key={setKey}\n          setKey={setKey}\n          value={value}\n          setValue={setValue(setKey)}\n          deleteValue={deleteValue(setKey)}\n          remaining={remaining}\n        />\n      ))}\n      <CardLight sx={{ flexGrow: 1, overflow: 'visible' }}>\n        <ArtifactSetAutocomplete\n          artSetKey={''}\n          setArtSetKey={setSet}\n          label={'New Artifact Set'}\n          getOptionDisabled={({ key }) =>\n            Object.keys(artSet).includes(key as ArtifactSetKey) ||\n            !key ||\n            Object.keys(getArtSheet(key).setEffects).every(\n              (n) => parseInt(n) > remaining\n            )\n          }\n        />\n      </CardLight>\n    </Stack>\n  )\n}\nfunction ArtifactSetEditor({\n  setKey,\n  value,\n  setValue,\n  deleteValue,\n  remaining,\n}: {\n  setKey: ArtifactSetKey\n  value: 1 | 2 | 4\n  setValue: (v: 1 | 2 | 4) => void\n  deleteValue: () => void\n  remaining: number\n}) {\n  const artifactSheet = getArtSheet(setKey)\n\n  /* Assumes that all conditionals are from 4-Set. needs to change if there are 2-Set conditionals */\n  const set4CondNums = useMemo(() => {\n    if (value < 4) return []\n    return Object.keys(artifactSheet.setEffects).filter((setNumKey) =>\n      artifactSheet.setEffects[setNumKey]?.document.some(\n        (doc) => 'states' in doc\n      )\n    )\n  }, [artifactSheet, value])\n\n  return (\n    <CardLight>\n      <Box display=\"flex\">\n        <ArtifactSetTooltip artifactSheet={artifactSheet} numInSet={value}>\n          <Box flexGrow={1} p={1} display=\"flex\" gap={1} alignItems=\"center\">\n            <ImgIcon size={2} src={artifactDefIcon(setKey)} />\n            <Box>{artifactSheet.setName}</Box>\n            <Info />\n          </Box>\n        </ArtifactSetTooltip>\n        <ButtonGroup>\n          <DropdownButton\n            size=\"small\"\n            title={<Box whiteSpace=\"nowrap\">{value}-set</Box>}\n          >\n            {Object.keys(artifactSheet.setEffects)\n              .map((setKey) => parseInt(setKey))\n              .map((setKey) => (\n                <MenuItem\n                  key={setKey}\n                  disabled={value === setKey || setKey > remaining + value}\n                  onClick={() => setValue(setKey as 1 | 2 | 4)}\n                >\n                  {setKey}-set\n                </MenuItem>\n              ))}\n          </DropdownButton>\n          <Button color=\"error\" size=\"small\" onClick={deleteValue}>\n            <DeleteForever />\n          </Button>\n        </ButtonGroup>\n      </Box>\n      {!!set4CondNums.length && (\n        <Stack spacing={1} sx={{ p: 1 }}>\n          {set4CondNums.map((setNumKey) => (\n            <SetEffectDisplay\n              key={setNumKey}\n              setKey={setKey}\n              setNumKey={parseInt(setNumKey) as SetNum}\n              hideHeader\n              conditionalsOnly\n            />\n          ))}\n        </Stack>\n      )}\n    </CardLight>\n  )\n}\nfunction ArtifactSubCard({\n  substats,\n  setSubstats,\n  substatsType,\n  setSubstatsType,\n  mainStatKeys,\n}: {\n  substats: Record<SubstatKey, number>\n  setSubstats: (substats: Record<SubstatKey, number>) => void\n  substatsType: SubstatType\n  setSubstatsType: (t: SubstatType) => void\n  mainStatKeys: MainStatKey[]\n}) {\n  const setValue = useCallback(\n    (key: SubstatKey) => (v: number) => setSubstats({ ...substats, [key]: v }),\n    [substats, setSubstats]\n  )\n  const { t } = useTranslation('page_character')\n  const rv =\n    Object.entries(substats).reduce(\n      (t, [k, v]) => t + v / Artifact.substatValue(k),\n      0\n    ) * 100\n  const rolls = Object.entries(substats).reduce(\n    (t, [k, v]) => t + v / Artifact.substatValue(k, undefined, substatsType),\n    0\n  )\n  return (\n    <CardLight sx={{ p: 1, height: '100%' }}>\n      <Box sx={{ mb: 1, display: 'flex', gap: 1 }}>\n        <DropdownButton\n          fullWidth\n          title={t(`tabTheorycraft.substatType.${substatsType}`)}\n        >\n          {substatType.map((st) => (\n            <MenuItem\n              key={st}\n              disabled={substatsType === st}\n              onClick={() => setSubstatsType(st)}\n            >\n              {t(`tabTheorycraft.substatType.${st}`)}\n            </MenuItem>\n          ))}\n        </DropdownButton>\n        <BootstrapTooltip\n          title={<Typography>{t`tabTheorycraft.maxTotalRolls`}</Typography>}\n          placement=\"top\"\n        >\n          <CardDark\n            sx={{\n              textAlign: 'center',\n              py: 0.5,\n              px: 1,\n              minWidth: '15em',\n              whiteSpace: 'nowrap',\n              display: 'flex',\n              gap: 2,\n              justifyContent: 'flex-end',\n              alignItems: 'center',\n            }}\n          >\n            <ColorText color={rolls > 45 ? 'warning' : undefined}>\n              Rolls: <strong>{rolls.toFixed(0)}</strong>\n            </ColorText>\n            <ColorText color={rolls > 45 ? 'warning' : undefined}>\n              RV: <strong>{rv.toFixed(1)}%</strong>\n            </ColorText>\n          </CardDark>\n        </BootstrapTooltip>\n      </Box>\n      <Stack spacing={1}>\n        {Object.entries(substats).map(([k, v]) => (\n          <ArtifactSubstatEditor\n            key={k}\n            statKey={k}\n            value={v}\n            setValue={setValue(k)}\n            substatsType={substatsType}\n            mainStatKeys={mainStatKeys}\n          />\n        ))}\n      </Stack>\n    </CardLight>\n  )\n}\nfunction ArtifactSubstatEditor({\n  statKey,\n  value,\n  setValue,\n  substatsType,\n  mainStatKeys,\n}: {\n  statKey: SubstatKey\n  value: number\n  setValue: (v: number) => void\n  substatsType: SubstatType\n  mainStatKeys: MainStatKey[]\n}) {\n  const { t } = useTranslation('page_character')\n  const substatValue = Artifact.substatValue(statKey, 5, substatsType)\n  const [rolls, setRolls] = useState(() => value / substatValue)\n  useEffect(() => setRolls(value / substatValue), [value, substatValue])\n\n  const unit = KeyMap.unit(statKey)\n  const displayValue = rolls * substatValue\n\n  const rv = ((rolls * substatValue) / Artifact.substatValue(statKey)) * 100\n  const numMains = mainStatKeys.reduce(\n    (t, ms) => t + (ms === statKey ? 1 : 0),\n    0\n  )\n  const maxRolls = (5 - numMains) * 6\n  // 0.0001 to nudge float comparasion\n  const invalid = rolls - 0.0001 > maxRolls\n  const setRValue = useCallback(\n    (r: number) => setValue(r * substatValue),\n    [setValue, substatValue]\n  )\n\n  return (\n    <Stack spacing={0.5}>\n      <Box\n        display=\"flex\"\n        gap={1}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <CardDark\n          sx={{\n            p: 0.5,\n            minWidth: '11em',\n            flexGrow: 1,\n            display: 'flex',\n            gap: 1,\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <StatIcon statKey={statKey} iconProps={{ fontSize: 'inherit' }} />\n          {KeyMap.getStr(statKey)}\n          {KeyMap.unit(statKey)}\n        </CardDark>\n        <BootstrapTooltip\n          title={\n            <Typography>\n              {t(\n                numMains\n                  ? `tabTheorycraft.maxRollsMain`\n                  : `tabTheorycraft.maxRolls`,\n                { value: maxRolls }\n              )}\n            </Typography>\n          }\n          placement=\"top\"\n        >\n          <CardDark sx={{ textAlign: 'center', p: 0.5, minWidth: '8em' }}>\n            <ColorText color={invalid ? 'warning' : undefined}>\n              RV: <strong>{rv.toFixed(1)}%</strong>\n            </ColorText>\n          </CardDark>\n        </BootstrapTooltip>\n      </Box>\n      <Box\n        display=\"flex\"\n        gap={1}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <CustomNumberInput\n          color={displayValue ? 'success' : 'primary'}\n          float={KeyMap.unit(statKey) === '%'}\n          endAdornment={\n            KeyMap.unit(statKey) || <Box width=\"1em\" component=\"span\" />\n          }\n          value={parseFloat(displayValue.toFixed(2))}\n          onChange={(v) => v !== undefined && setValue(v)}\n          sx={{ borderRadius: 1, px: 1, height: '100%', width: '6em' }}\n          inputProps={{ sx: { textAlign: 'right' }, min: 0 }}\n        />\n        <CardDark\n          sx={{\n            px: 2,\n            flexGrow: 1,\n            display: 'flex',\n            gap: 1,\n            alignItems: 'center',\n            justifyContent: 'center',\n            overflow: 'visible',\n          }}\n        >\n          <Slider\n            size=\"small\"\n            value={rolls}\n            max={maxRolls}\n            min={0}\n            step={1}\n            marks\n            valueLabelDisplay=\"auto\"\n            onChange={(e, v) => setRolls(v as number)}\n            onChangeCommitted={(e, v) => setRValue(v as number)}\n          />\n        </CardDark>\n        <CustomNumberInput\n          color={value ? (invalid ? 'warning' : 'success') : 'primary'}\n          float\n          startAdornment={\n            <Box\n              sx={{\n                whiteSpace: 'nowrap',\n                width: '7em',\n                display: 'flex',\n                justifyContent: 'space-between',\n              }}\n            >\n              <span>\n                {cacheValueString(substatValue, unit)}\n                {unit}\n              </span>\n              <span>x</span>\n            </Box>\n          }\n          value={parseFloat(rolls.toFixed(2))}\n          onChange={(v) => v !== undefined && setValue(v * substatValue)}\n          sx={{ borderRadius: 1, px: 1, my: 0, height: '100%', width: '7em' }}\n          inputProps={{ sx: { textAlign: 'right', pr: 0.5 }, min: 0, step: 1 }}\n        />\n      </Box>\n    </Stack>\n  )\n}\n","import { useContext, useEffect, useState } from 'react'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport type { CharacterKey, WeaponKey } from '../../../../Types/consts'\n\nexport default function useCharTC(\n  characterKey: CharacterKey,\n  defWeapon: WeaponKey\n) {\n  const { database } = useContext(DatabaseContext)\n  const [charTC, setCharTC] = useState(() =>\n    database.charTCs.getWithInit(characterKey, defWeapon)\n  )\n  useEffect(\n    () => setCharTC(database.charTCs.getWithInit(characterKey, defWeapon)),\n    [database, characterKey, defWeapon]\n  )\n  useEffect(\n    () =>\n      characterKey\n        ? database.charTCs.follow(\n            characterKey,\n            (k, r, v) => r === 'update' && setCharTC(v)\n          )\n        : undefined,\n    [characterKey, setCharTC, database]\n  )\n  return charTC\n}\n","import type { TravelerKey } from '@genshin-optimizer/consts'\nimport { allElementKeys } from '@genshin-optimizer/consts'\nimport { MenuItem } from '@mui/material'\nimport { useContext } from 'react'\nimport ColorText from '../../Components/ColoredText'\nimport DropdownButton from '../../Components/DropdownMenu/DropdownButton'\nimport { CharacterContext } from '../../Context/CharacterContext'\nimport { stg } from '../../Data/SheetUtil'\nimport useCharSelectionCallback from '../../ReactHooks/useCharSelectionCallback'\nimport { travelerElements, TravelerToElement } from '../../Types/consts'\n\nexport default function TravelerElementSelect() {\n  const { character } = useContext(CharacterContext)\n  const { key } = character\n  const setCharacter = useCharSelectionCallback()\n  if (!key.startsWith('Traveler')) return null\n\n  const elementKey = allElementKeys.find((e) => key.toLowerCase().includes(e))\n  if (!elementKey) return null\n\n  return (\n    <DropdownButton\n      color={elementKey}\n      title={<strong>{stg(`element.${elementKey}`)}</strong>}\n    >\n      {travelerElements.map((eleKey) => (\n        <MenuItem\n          key={eleKey}\n          selected={elementKey === eleKey}\n          disabled={elementKey === eleKey}\n          onClick={() =>\n            setCharacter(TravelerToElement(key as TravelerKey, eleKey))\n          }\n        >\n          <strong>\n            <ColorText color={eleKey}>{stg(`element.${eleKey}`)}</ColorText>\n          </strong>\n        </MenuItem>\n      ))}\n    </DropdownButton>\n  )\n}\n","import { Female, Male } from '@mui/icons-material'\nimport { Button } from '@mui/material'\nimport { useCallback, useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { CharacterContext } from '../../Context/CharacterContext'\nimport { DatabaseContext } from '../../Database/Database'\nimport useDBMeta from '../../ReactHooks/useDBMeta'\n\nexport default function TravelerGenderSelect() {\n  const { t } = useTranslation('ui')\n  const { database } = useContext(DatabaseContext)\n  const { character } = useContext(CharacterContext)\n  const { key } = character\n  const { gender } = useDBMeta()\n  const toggleGender = useCallback(\n    () => database.dbMeta.set({ gender: gender === 'F' ? 'M' : 'F' }),\n    [gender, database]\n  )\n  if (!key.startsWith('Traveler')) return null\n  return (\n    <Button\n      onClick={toggleGender}\n      startIcon={gender === 'F' ? <Female /> : <Male />}\n    >\n      <strong>{t(`gender.${gender}`)}</strong>{' '}\n    </Button>\n  )\n}\n","import type { CharacterKey } from '@genshin-optimizer/consts'\nimport {\n  BarChart,\n  Calculate,\n  FactCheck,\n  Groups,\n  Person,\n  Science,\n  TrendingUp,\n} from '@mui/icons-material'\nimport { Box, Button, CardContent, Skeleton, Tab, Tabs } from '@mui/material'\nimport {\n  Suspense,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Link as RouterLink,\n  Navigate,\n  Route,\n  Routes,\n  useMatch,\n  useNavigate,\n  useParams,\n} from 'react-router-dom'\nimport CardDark from '../../Components/Card/CardDark'\nimport CardLight from '../../Components/Card/CardLight'\nimport CloseButton from '../../Components/CloseButton'\nimport {\n  HitModeToggle,\n  InfusionAuraDropdown,\n  ReactionToggle,\n} from '../../Components/HitModeEditor'\nimport LevelSelect from '../../Components/LevelSelect'\nimport SqBadge from '../../Components/SqBadge'\nimport type { CharacterContextObj } from '../../Context/CharacterContext'\nimport { CharacterContext } from '../../Context/CharacterContext'\nimport type { dataContextObj } from '../../Context/DataContext'\nimport { DataContext } from '../../Context/DataContext'\nimport {\n  FormulaDataContext,\n  FormulaDataWrapper,\n} from '../../Context/FormulaDataContext'\nimport type { ChartData, GraphContextObj } from '../../Context/GraphContext'\nimport { GraphContext } from '../../Context/GraphContext'\nimport { SillyContext } from '../../Context/SillyContext'\nimport { getCharSheet } from '../../Data/Characters'\nimport { DatabaseContext } from '../../Database/Database'\nimport useBoolState from '../../ReactHooks/useBoolState'\nimport useCharacter from '../../ReactHooks/useCharacter'\nimport useCharacterReducer from '../../ReactHooks/useCharacterReducer'\nimport useDBMeta from '../../ReactHooks/useDBMeta'\nimport useTeamData from '../../ReactHooks/useTeamData'\nimport useTitle from '../../ReactHooks/useTitle'\nimport { charKeyToCharName } from '../../Types/consts'\nimport { CustomMultiTargetButton } from '../CustomMultiTarget'\nimport CharSelectButton from './CharSelectButton'\nimport FormulaModal from './FormulaModal'\nimport StatModal from './StatModal'\nimport TabBuild from './Tabs/TabOptimize'\nimport TabOverview from './Tabs/TabOverview'\nimport TabTalent from './Tabs/TabTalent'\nimport TabTeambuffs from './Tabs/TabTeambuffs'\nimport TabTheorycraft from './Tabs/TabTheorycraft'\nimport TravelerElementSelect from './TravelerElementSelect'\nimport TravelerGenderSelect from './TravelerGenderSelect'\n\nexport default function CharacterDisplay() {\n  const navigate = useNavigate()\n  const { database } = useContext(DatabaseContext)\n  const onClose = useCallback(() => navigate('/characters'), [navigate])\n  const { characterKey } = useParams<{ characterKey?: CharacterKey }>()\n  const invalidKey = !database.chars.keys.includes(characterKey as CharacterKey)\n  if (invalidKey) return <Navigate to=\"/characters\" />\n\n  return (\n    <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n      <Suspense\n        fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}\n      >\n        {characterKey && (\n          <CharacterDisplayCard\n            key={characterKey}\n            characterKey={characterKey}\n            onClose={onClose}\n          />\n        )}\n      </Suspense>\n    </Box>\n  )\n}\n\ntype CharacterDisplayCardProps = {\n  characterKey: CharacterKey\n  onClose?: () => void\n}\nfunction CharacterDisplayCard({\n  characterKey,\n  onClose,\n}: CharacterDisplayCardProps) {\n  const { silly } = useContext(SillyContext)\n  const character = useCharacter(characterKey)\n  const { gender } = useDBMeta()\n  const characterSheet = getCharSheet(characterKey, gender)\n  const teamData = useTeamData(characterKey)\n  const { target: charUIData } = teamData?.[characterKey] ?? {}\n  const {\n    params: { tab = 'overview' },\n  } = useMatch({ path: '/characters/:charKey/:tab', end: false }) ?? {\n    params: { tab: 'overview' },\n  }\n  const { t } = useTranslation([\n    'sillyWisher_charNames',\n    'charNames_gen',\n    'page_character',\n  ])\n\n  useTitle(\n    useMemo(\n      () =>\n        `${t(\n          `${\n            silly ? 'sillyWisher_charNames' : 'charNames_gen'\n          }:${charKeyToCharName(characterKey, gender)}`\n        )} - ${t(`page_character:tabs.${tab}`)}`,\n      [t, silly, characterKey, gender, tab]\n    )\n  )\n\n  const characterDispatch = useCharacterReducer(character?.key ?? '')\n\n  const dataContextValue: dataContextObj | undefined = useMemo(() => {\n    if (!teamData || !charUIData) return undefined\n    return {\n      data: charUIData,\n      teamData,\n      oldData: undefined,\n    }\n  }, [charUIData, teamData])\n\n  const characterContextValue: CharacterContextObj | undefined = useMemo(() => {\n    if (!character || !characterSheet) return undefined\n    return {\n      character,\n      characterSheet,\n      characterDispatch,\n    }\n  }, [character, characterSheet, characterDispatch])\n\n  const [chartData, setChartData] = useState(undefined as ChartData | undefined)\n  const [graphBuilds, setGraphBuilds] = useState<string[][]>()\n  const graphContextValue: GraphContextObj | undefined = useMemo(() => {\n    return {\n      chartData,\n      setChartData,\n      graphBuilds,\n      setGraphBuilds,\n    }\n  }, [chartData, graphBuilds])\n\n  // Clear state when switching characters\n  useEffect(() => {\n    setChartData(undefined)\n    setGraphBuilds(undefined)\n  }, [characterKey])\n\n  return (\n    <CardDark>\n      {dataContextValue && characterContextValue && graphContextValue ? (\n        <CharacterContext.Provider value={characterContextValue}>\n          <DataContext.Provider value={dataContextValue}>\n            <GraphContext.Provider value={graphContextValue}>\n              <FormulaDataWrapper>\n                <CardContent\n                  sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n                >\n                  <Box display=\"flex\">\n                    <Box display=\"flex\" gap={1} flexWrap=\"wrap\" flexGrow={1}>\n                      <CharSelectButton />\n                      <TravelerElementSelect />\n                      <TravelerGenderSelect />\n                      <DetailStatButton />\n                      <CustomMultiTargetButton />\n                      <FormulasButton />\n                    </Box>\n                    {!!onClose && <CloseButton onClick={onClose} />}\n                  </Box>\n                  <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n                    {character && (\n                      <LevelSelect\n                        level={character.level}\n                        ascension={character.ascension}\n                        setBoth={characterDispatch}\n                      />\n                    )}\n                    <HitModeToggle size=\"small\" />\n                    <InfusionAuraDropdown />\n                    <ReactionToggle size=\"small\" />\n                  </Box>\n                  <CardLight>\n                    <TabNav tab={tab} />\n                  </CardLight>\n                  <CharacterPanel />\n                  <CardLight>\n                    <TabNav tab={tab} />\n                  </CardLight>\n                </CardContent>\n              </FormulaDataWrapper>\n            </GraphContext.Provider>\n          </DataContext.Provider>\n        </CharacterContext.Provider>\n      ) : (\n        <Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />\n      )}\n    </CardDark>\n  )\n}\nfunction CharacterPanel() {\n  return (\n    <Suspense\n      fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={500} />}\n    >\n      <Routes>\n        {/* Character Panel */}\n        <Route index element={<TabOverview />} />\n        <Route path=\"/talent\" element={<TabTalent />} />\n        <Route path=\"/teambuffs\" element={<TabTeambuffs />} />\n        <Route path=\"/optimize\" element={<TabBuild />} />\n        <Route path=\"/theorycraft\" element={<TabTheorycraft />} />\n      </Routes>\n    </Suspense>\n  )\n}\nfunction TabNav({ tab }: { tab: string }) {\n  const { t } = useTranslation('page_character')\n  return (\n    <Tabs\n      value={tab}\n      variant=\"scrollable\"\n      allowScrollButtonsMobile\n      sx={{\n        '& .MuiTab-root:hover': {\n          transition: 'background-color 0.25s ease',\n          backgroundColor: 'rgba(255,255,255,0.1)',\n        },\n      }}\n    >\n      <Tab\n        sx={{ minWidth: '20%' }}\n        value=\"overview\"\n        label={t('tabs.overview')}\n        icon={<Person />}\n        component={RouterLink}\n        to=\"\"\n      />\n      <Tab\n        sx={{ minWidth: '20%' }}\n        value=\"talent\"\n        label={t('tabs.talent')}\n        icon={<FactCheck />}\n        component={RouterLink}\n        to=\"talent\"\n      />\n      <Tab\n        sx={{ minWidth: '20%' }}\n        value=\"teambuffs\"\n        label={t('tabs.teambuffs')}\n        icon={<Groups />}\n        component={RouterLink}\n        to=\"teambuffs\"\n      />\n      <Tab\n        sx={{ minWidth: '20%' }}\n        value=\"optimize\"\n        label={t('tabs.optimize')}\n        icon={<TrendingUp />}\n        component={RouterLink}\n        to=\"optimize\"\n      />\n      <Tab\n        sx={{ minWidth: '20%' }}\n        value=\"theorycraft\"\n        label={t('tabs.theorycraft')}\n        icon={<Science />}\n        component={RouterLink}\n        to=\"theorycraft\"\n      />\n    </Tabs>\n  )\n}\n\nfunction DetailStatButton() {\n  const { t } = useTranslation('page_character')\n  const [open, onOpen, onClose] = useBoolState()\n  const {\n    character: { bonusStats },\n  } = useContext(CharacterContext)\n  const bStatsNum = Object.keys(bonusStats).length\n  return (\n    <>\n      <Button color=\"info\" startIcon={<BarChart />} onClick={onOpen}>\n        {t`addStats.title`}\n        {!!bStatsNum && (\n          <SqBadge sx={{ ml: 1 }} color=\"success\">\n            {bStatsNum}\n          </SqBadge>\n        )}\n      </Button>\n      <StatModal open={open} onClose={onClose} />\n    </>\n  )\n}\nfunction FormulasButton() {\n  const { onModalOpen } = useContext(FormulaDataContext)\n  return (\n    <>\n      <Button color=\"info\" startIcon={<Calculate />} onClick={onModalOpen}>\n        Formulas {'&'} Calcs\n      </Button>\n      <FormulaModal />\n    </>\n  )\n}\n"],"names":["GraphContext","createContext","CharacterSelectionModal","React","CharSelectButton","useTranslation","characterSheet","character","key","characterKey","useContext","CharacterContext","showModal","setshowModal","useState","setCharacter","useCharSelectionCallback","Suspense","fallback","show","onHide","onSelect","Button","color","onClick","startIcon","CharIconSide","name","t","FormulaModal","modalOpen","FormulaDataContext","setFormulaData","onCloseHandler","useCallback","undefined","ModalWrapper","open","onClose","CardDark","CardHeader","title","action","CloseButton","CardContent","sx","pt","CalculationDisplay","data","DataContext","contextData","sections","getDisplaySections","Skeleton","variant","width","height","Box","mr","mb","map","Nodes","FormulaCalc","displayNs","sectionKey","database","DatabaseContext","header","useMemo","getDisplayHeader","Object","entries","every","_","node","isEmpty","icon","CardLight","CardHeaderCustom","avatar","ImgIcon","size","src","SqBadge","Divider","FormulaAccordian","contextNode","expanded","setExpanded","handleChange","e","isExpanded","scrollRef","useRef","useEffect","setTimeout","current","scrollIntoView","behavior","Accordion","bgcolor","onChange","ref","AccordionSummary","expandIcon","ExpandMore","Typography","info","nodeVStr","allAmpReactions","display","ml","AmpReactionModeText","reaction","trigger","subVariant","AccordionDetails","formulas","subform","i","component","styled","props","other","IconButton","theme","expand","transform","marginLeft","transition","transitions","create","duration","shortest","FlexButtonGroup","ButtonGroup","StatInput","children","value","placeholder","defaultValue","onValueChange","percent","disabled","onReset","restProps","TextButton","px","CustomNumberInput","flexBasis","flexGrow","inputProps","textAlign","float","endAdornment","flexShrink","Replay","EnemyExpandCard","characterDispatch","setexpanded","toggle","eLvlNode","get","input","eDefRed","eDefIgn","enemyOverride","gap","alignItems","flexWrap","Chip","label","allElementWithPhyKeys","element","EnemyResText","justifyContent","Collapse","in","timeout","unmountOnExit","EnemyEditor","immune","isFinite","ele","iconProps","iconInlineProps","content","bsProps","xs","md","eLvl","enemyLevel","enemyDefIgn_","enemyDefRed_","Grid","container","spacing","item","fullWidth","href","target","rel","palette","contentLight","main","KeyMap","type","statKey","eleKey","val","elementImmunity","Number","MAX_VALUE","Infinity","CheckBox","CheckBoxOutlineBlank","cols","lg","StatModal","Stack","BonusStatsEditor","MainStatsCards","keys","allInputPremodKeys","wrapperFunc","bonusStats","setFilter","columns","Alert","severity","i18nKey","StatEditorList","statKeys","statFilters","setStatFilters","mainSubKeys","mainReadNodes","k","mainEditKeys","otherStatKeys","allEleDmgKeys","allEleResKeys","miscStatkeys","includes","StatDisplayContent","nodes","extra","oldData","FieldDisplay","rn","ListItem","oldValue","JSON","stringify","specialNode","charEle","elementKey","isMelee","otherStatReadNodes","filter","n","miscStatReadNodes","StatDisplayCard","length","py","OptimizationTargetContext","reaffine","arts","forceRename","affineNodes","Set","topLevelAffine","visit","isAffine","add","operands","forEach","op","has","dynKeys","mapFormulas","f","operation","path","affineOps","nonAffineOps","affine","sum","nonConst","assertUnreachable","base","nextDynKey","affineMap","Map","dynRead","reaffineArt","stat","values","constantFold","dyn","objectMap","constant","fromEntries","v","result","objectKeyMap","allArtifactSlotKeys","slot","id","set","offsets","baseValue","pruneOrder","numTop","exclusion","progress","allowRainbow","rainbow","noSwitchIn","noSwitchOut","list","newList","art","count","otherBetterEqual","otherMaybeBetter","some","otherBetter","canSwitch","pruneArtRange","minimum","baseRange","x","min","max","wrap","artRanges","computeArtRange","otherArtRanges","addArtRange","a","read","newRange","computeNodeRange","pruneNodeRange","nodeRange","operandRanges","threshold","pass","fail","newOperands","op1","op2","ranges","range","reads","forEachNodes","Error","computeMinMax","allOperations","reduce","accu","c","NaN","minMaxes","Math","FIFO","head","tail","this","push","pop","reverse","WorkerCoordinator","constructor","workers","prio","callback","commands","workDone","_workers","cancel","cancelled","notifyNonEmpty","p","worker","onmessage","onMessage","onerror","onError","w","Promise","resolve","rej","catch","terminate","async","processingInput","command","find","hasCommand","race","res","all","then","postMessage","message","msg","resultType","broadcast","notifiedBroadcast","GOSolver","problem","status","numWorker","super","Array","fill","Worker","URL","r","interim","finalizedResults","total","maxIterateSize","topN","buildValues","preprocess","execute","plotBase","optimizationTarget","constraints","minimums","maxValues","thres","pruneExclusion","optimize","forced","should","deps","newArts","newNodes","pruneAll","optTarget","tested","failed","skipped","oldThreshold","sort","b","splice","useBuildSetting","buildSetting","setBuildSetting","buildSettings","follow","buildSettingDispatch","CharListMode","AllowChar","allowListTotal","t_pc","silly","SillyContext","excludedLocations","allowLocationsState","onOpen","useBoolState","dbDirty","forceUpdate","useForceUpdate","deferredDbDirty","useDeferredValue","searchTerm","setSearchTerm","deferredSearchTerm","elementKeys","setElementKeys","allElementKeys","deferredElementKeys","weaponTypeKeys","setWeaponTypeKeys","allWeaponTypeKeys","deferredWeaponTypeKeys","charKeyMap","from","chars","ck","filterFunction","weaponType","characterFilterConfigs","locList","ck1","c1","ck2","c2","choosec1","choosec2","c1f","charMeta","favorite","c2f","art1","equippedArtifacts","art2","localeCompare","charKeyToLocCharKey","elementTotals","weaponTypeTotals","locListTotals","catKeys","bulkCatTotal","ctMap","sheet","getCharSheet","gender","weaponTypeKey","locKey","allowed","excluded","followAny","mouseUpDetected","setMouseUpDetected","allowAll","disallowAll","concat","setState","_e","state","toggleList","lkList","lkArray","newExcludedLocations","lk","onMouseUp","useTot","charactersAllowed","stateBadgeColor","containerProps","maxWidth","draggable","InfoTooltip","pb","SolidToggleButtonGroup","exclusive","baseColor","allAllowLocationsState","s","ToggleButton","TextField","autoFocus","InputProps","WeaponToggle","totals","ElementToggle","opacity","SelectItemGrid","ShowChart","borderRadius","minWidth","Settings","charList","setCharList","charListMode","setCharListMode","sm","xl","SelectItem","selected","char","LocationToCharacterKey","onMouseEnter","buttons","ToggleToAllow","ToggleToExclude","onMouseDown","mode","disableTooltip","borderColor","borderWidth","borderStyle","fontSize","SlotIcon","slotKey","CharacterCardPico","SetEffectDisplay","setKey","setNumKey","hideHeader","conditionalsOnly","getArtSheet","document","setEffectDocument","section","flexDirection","DocumentDisplay","ArtifactSetConfig","dataContext","conditional","artSetExclusion","setOpen","artKeysByRarity","setKeysByRarities","flatMap","sets","artKeys","artSlotCount","getNumSlots","allowRainbow2","allowRainbow4","allowTotals","artifactCondCount","allArtifactSetKeys","fakeDataContextObj","UIData","artSet","resetArtConds","tconditional","setAllExclusion","setnum","exclude","artSetExclusion_","deepClone","Block","AllSetAllowExcludeCard","allowTotal","setNum","gutterBottom","handleArtSetExclusion","endIcon","ArtifactSetCard","slotCount","large","charAt","indexOf","setExclusionSet","allow4","slots","set4CondNums","setEffects","doc","exclude2","exclude4","className","rarity","artifactDefIcon","mx","ns","StarRounded","Translate","key18","paddingTop","parseInt","tot","levels","AssumeFullLevelToggle","mainStatAssumptionLevel","setmainStatAssumptionLevel","DropdownButton","lvl","MenuItem","BonusStatsCard","bonusStatsKeys","fontWeight","Monospace","fontFamily","BorderLinearProgress","LinearProgress","BuildAlert","startTime","finishTime","characterName","hasTotal","generatingBuilds","unskipped","testedString","toLocaleString","unskippedString","skippedText","durationString","timeStringMs","round","performance","now","subtitle","toFixed","LocationIcon","useDBMeta","BootstrapTooltip","placement","sideMargin","StatWithUnit","disableIcon","StatIcon","StatColoredWithUnit","ArtifactCardNano","artifactId","pSlotKey","showLocation","BGComponent","useArtifact","actionWrapperFunc","CardActionArea","useTheme","Assets","level","mainStatKey","substats","location","mainStatLevel","mainStatUnit","alpha","secondary","ConditionalWrapper","condition","wrapper","position","ArtifactTooltip","artifactAsset","m","maxHeight","pointerEvents","Artifact","BusinessCenter","overflow","bottom","backgroundColor","disableInteractive","lineHeight","style","padding","cacheValueString","SubstatDisplay","numRolls","rolls","rollColor","clamp","unit","alignContent","StatDisplayComponent","Masonry","Section","displayNsReads","nodeKey","customRead","emphasize","WeaponCardNano","weaponId","weapon","useWeapon","weaponSheet","getWeaponSheet","computeUIData","dataObjForWeapon","refinement","WeaponNameTooltip","weaponAsset","ascension","WeaponSheet","hasRefinement","WeaponStat","ArtifactSetBadges","artifacts","currentlyEquipped","setToSlots","arti","acc","curr","_k1","slotarr1","_k2","slotarr2","slotarr","ArtifactSetBadge","artifactSheet","numInSet","setActive","ArtifactSetTooltip","BuildDisplayItem","compareBuild","extraButtonsRight","extraButtonsLeft","newOld","setNewOld","close","equipBuild","window","confirm","aid","oldAid","weapons","statProviderContext","dataContext_","artifactIdsBySlot","artiId","artNanos","oldId","newId","CompareArtifactModal","Checkroom","onEquip","newLoc","ArtifactCard","canEquip","editorProps","disableSet","disableSlot","extraButtons","ExcludeButton","ChevronRight","ExcludeEquipButton","locationKey","artExclusion","toggleArr","arrow","useBuildResult","buildResult","setBuildResult","buildResultDispatch","CustomDot","cx","cy","payload","selectedPoint","radiusSelected","radiusUnselected","colorSelected","colorUnselected","shape","isSelected","y","CustomShape","stroke","points","CustomTooltip","xLabel","xUnit","yLabel","yUnit","setSelectedPoint","addBuildToList","tooltipProps","artifactsBySlot","artifactIds","artiObj","clickAwayHandler","generLabel","generBuildNumber","graphLabel","graphBuildNumber","active","ClickAwayListener","onClickAway","stopPropagation","direction","ArtifactCardPico","artifactObj","valueString","highlighted","EnhancedPoint","trueY","ChartCard","setPlotBase","showTooltip","chartData","showDownload","setshowDownload","showMin","setshowMin","graphBuilds","builds","generatedBuilds","sliderLow","setSliderLow","sliderHigh","setSliderHigh","setSlider","TypeError","l","h","displayData","downloadData","sliderMin","sliderMax","currentBuild","plot","enhancedDatum","datumBuildMap","isCurrentBuild","aId","console","log","graphBuildIndex","findIndex","build","generBuildIndex","minimumData","point","last","allData","plotBaseNode","objPathValue","getDisplay","buttonText","OptimizationTargetSelector","setTarget","defaultText","Download","ReadOnlyTextArea","Chart","plotNode","valueNode","Slider","marks","onChangeCommitted","step","valueLabelDisplay","valueLabelFormat","optTargetColor","highlightedColor","currentColor","lineColor","setGraphBuilds","chartOnClick","chartX","chartY","clickedX","clickedY","nearestDomPtData","querySelectorAll","domPtA","domPtB","aChartX","aChartY","dataset","aDistance","sqrt","bChartX","bChartY","d","xValue","yValue","getNearestPoint","xLabelValue","getLabelFromNode","yLabelValue","ResponsiveContainer","ComposedChart","cursor","CartesianGrid","strokeDasharray","XAxis","dataKey","scale","domain","tick","tickFormatter","Label","dy","YAxis","allowDecimals","angle","dx","Tooltip","wrapperStyle","Legend","Line","connectNulls","strokeWidth","isAnimationActive","dot","activeDot","Scatter","textSuffix","ExcludeArt","excludedTotal","useExcludedArts","numExcludedArt","showSel","onOpenSel","onCloseSel","onDelSelect","toggleArtExclusion","ArtifactSelectModal","Add","whiteSpace","totalStr","numToShowMap","filterOptionReducer","clickHandler","filterOption","filterOptionDispatch","useReducer","initialFilterOption","brPt","useMediaQueryUp","filterConfigs","artifactFilterConfigs","artIdList","filterFunc","slice","ArtifactFilterDisplay","filteredIds","mt","artifactsSlotsToSelectMainStats","MainStatSelectionCard","filteredArtIdMap","mainStatKeys","mainStatSlotTots","slotTots","flowerMainStatTots","plumeMainStatTots","sandsMainStatTots","gobletMainStatTots","circletMainStatTots","catTotals","flower","plume","sands","goblet","circlet","FlowerIcon","HpIcon","hp","orientation","flexItem","PlumeIcon","AtkIcon","atk","selectedMainKeys","mainKeys","mainKeysHandler","handleMultiSelect","OptimizationTargetEditorList","oldPath","oldIndex","statFilters_","oldPathStr","oldFilterArr","pathStr","filterArr","delTarget","index","setTargetValue","setTargetDisabled","settings","setting","OptimizationTargetEditorItem","parse","setValue","setDisabled","buttonStyle","buildConstraintNode","isPercent","showEmptyTargets","DeleteForever","StatFilterCard","dynamic","setReadNodeKeys","dynamicData","allMainStatKeys","allSubstatKeys","audio","Audio","TabBuild","compareData","setChartData","notification","setnotification","notificationRef","buildStatus","setBuildStatus","artsDirty","setArtsDirty","threads","defThreads","setDisplayOptimize","displayOptimize","_r","to","maxWorkers","setMaxWorkers","useCharacterReducer","onClickTeammate","noArtifact","allowPartial","maxBuildsToShow","levelLow","levelHigh","buildDate","teamData","useTeamData","optimizationTargetNode","isSM","deferredArtsDirty","deferredBuildSetting","filteredArts","mainStats","unequippedStateAndEquippedElsewhere","customListStateAndNotOnList","levelTotal","allStateAndEquippedSomewhereElse","tabFocused","onFocus","onBlur","addEventListener","removeEventListener","cancelToken","throwGlobalError","setError","useGlobalError","generateBuilds","split","mainStatVal","endsWith","substat","accurateValue","compactArtifacts","getTeamData","workerData","uiDataForTeam","assign","mergeData","unoptimizedOptimizationTargetNode","targetNode","valueFilter","filterNode","unoptimizedNodes","plotBaseNumNode","statusUpdateTimer","setInterval","cancellationError","solver","results","solve","plotData","plots","mergePlot","maxNum","mergeBuilds","process","Date","play","alert","clearInterval","targetSelector","getGraphBuildLabel","getNormBuildLabel","Link","RouterLink","CharacterCard","ArtifactLevelSlider","setLow","setHigh","setBoth","maxBuildsToShowList","NotificationsActive","NotificationsOff","Close","TrendingUp","Provider","BuildList","getLabel","setBuilds","deleteBuild","builds_","DataContextWrapper","BuildItemWrapper","join","useLocation","navigate","useNavigate","toTC","paths","pathname","Science","dirty","setDirty","buildsArts","providerValue","tdc","charCards","Albedo","Alhaitham","Aloy","Amber","AratakiItto","Barbara","Beidou","Bennett","Candace","Chongyun","Collei","Cyno","Dehya","Diluc","Diona","Dori","Eula","Faruzan","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","KamisatoAyato","Keqing","Klee","KujouSara","KukiShinobu","Layla","Lisa","Mika","Mona","Nahida","Nilou","Ningguang","Noelle","Qiqi","RaidenShogun","Razor","Rosaria","SangonomiyaKokomi","Sayu","Shenhe","ShikanoinHeizou","Somnia","Sucrose","Tartaglia","Thoma","Tighnari","TravelerF","TravelerM","Venti","Wanderer","Xiangling","Xiao","Xingqiu","Xinyan","YaeMiko","Yanfei","Yaoyao","Yelan","Yoimiya","YunJin","Zhongli","CompareBuildButton","artId","onShow","CompareContent","Difference","newArt","artmap","dataProviderValue","lazy","ArtifactSwapModal","onChangeId","slotKeys","disableSlotFilter","rarityHandler","allRarityKeys","WeaponSwapModal","newWeaponModalShow","setnewWeaponModalShow","editWeaponId","setEditWeaponId","newWeapon","weaponKey","new","initialWeapon","resetEditWeapon","setRarity","weaponIdList","weaponFilterConfigs","sortFunction","weaponSortMap","weaponSortConfigs","WeaponSelectionModal","weaponTypeFilter","WeaponEditor","footer","star","WeaponCard","EquipmentSection","equippedWeapon","setweaponId","showWeapon","hideWeapon","breakpoint","useMediaQuery","breakpoints","up","weaponDoc","rvFilter","useCharMeta","deferredRvFilter","deferredRvSet","LargeWeaponSwapButton","ArtifactSectionCard","onEdit","WeaponSwapButton","effFilter","ArtifactSwapButton","ArtSwapCard","minHeight","SwapHoriz","hasEquipped","unequipArts","dataSetEffects","setRVFilter","deferredrvFilter","rvField","rvmField","currentEfficiency","currentEfficiency_","maxEfficiency","maxEfficiency_","artid","text","PercentBadge","valid","canShow","borderBottomRightRadius","borderBottomLeftRadius","SubstatToggle","selectedKeys","field","setNumKeyArr","TabOverview","onScroll","CharacterProfileCard","EquipmentRow","team","constellation","tlvl","auto","skill","burst","tBoost","sillySplash","splash","card","charKey","charCard","SillyCoverArea","CoverArea","tKey","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","getTalentOfKey","img","constellationName","CharChip","stars","colored","FavoriteButton","LevelBadge","left","right","top","getLevelString","Favorite","FavoriteBorder","talentSpacing","CharacterTalentPane","grlg","constellationCards","SkillDisplayCard","talentKey","onClickTitle","ReactionDisplay","tText","asc","enabled","talentLimits","talent","setTalentLevel","newTalentLevelKey","levelBoost","talentSheet","pl","hideDesc","headerAction","TabTeambuffs","TeamBuffDisplay","ResonanceDisplay","TeammateDisplay","teamBuffs","getTeamBuff","premod","enemy","teamCount","titleTypographyProps","resonanceSheets","desc","teamBuffOnly","activeCharacterKey","teamMateKey","onClickHandler","setTeammate","dataBundle","teammateCharacterContext","teamConditional","teamMateDataContext","TeammateAutocomplete","setChar","onClickHeader","artifactChildren","CharArtifactCondDisplay","weaponChildren","CharWeaponCondDisplay","characterChildren","CharTalentCondDisplay","isTeammateCard","setNums","sn","sts","autoCompleteProps","namesCB","startsWith","charKeyToCharName","toImg","PersonAdd","isFavorite","onDisable","alternateNames","GeneralAutocomplete","options","valueKey","getOptionDisabled","TabTheorycraft","defWeapon","charTC","setCharTC","charTCs","getWithInit","useCharTC","defaultInitialWeaponKey","setData","resetData","initCharTC","setWeapon","copyFrom","eWeapon","newData","artifact","stats","locBuild","copyFromEquipped","lock","setArtifact","data_","setSubstatsType","setSubstats","deferredData","overriderArtData","overrideWeapon","charUIData","dataContextValue","dataContextValueWithOld","CopyAll","Refresh","WeaponEditorCard","ArtifactMainLevelCard","artifactData","setArtifactData","ArtifactSubCard","substatsType","weaponUIData","flexshrink","RefinementDropdown","setRefinement","LevelSelect","useLow","setSlot","artifactData_","setArtSet","ArtifactMainLevelSlot","ArtifactSetsEditor","setSlotProp","mLvl","maxArtifactLevel","msk","startAdornment","my","setSet","deleteValue","rest","remaining","ArtifactSetEditor","ArtifactSetAutocomplete","artSetKey","setArtSetKey","setName","Info","rv","substatType","st","ArtifactSubstatEditor","substatValue","setRolls","displayValue","numMains","ms","maxRolls","invalid","setRValue","parseFloat","pr","TravelerElementSelect","toLowerCase","stg","travelerElements","TravelerToElement","TravelerGenderSelect","toggleGender","dbMeta","Female","Male","CharacterDisplay","useParams","CharacterDisplayCard","useCharacter","params","tab","useMatch","end","useTitle","characterContextValue","graphContextValue","DetailStatButton","CustomMultiTarget","FormulasButton","TabNav","CharacterPanel","Tabs","allowScrollButtonsMobile","Tab","Person","FactCheck","Groups","bStatsNum","BarChart","onModalOpen","Calculate"],"sourceRoot":""}