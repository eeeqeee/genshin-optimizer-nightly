{"version":3,"file":"265.fc083b295f199a5d.js","mappings":"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","sources":["webpack:///../../node_modules/@mui/icons-material/esm/ArrowRightAlt.js","webpack:///./src/app/Data/Materials/Material.ts","webpack:///./src/app/PageDocumentation/index.tsx","webpack:///../../node_modules/@mui/material/Link/linkClasses.js","webpack:///../../node_modules/@mui/material/Link/getTextDecoration.js","webpack:///../../node_modules/@mui/material/Link/Link.js"],"sourcesContent":["import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16.01 11H4v2h12.01v3L20 12l-3.99-4z\"\n}), 'ArrowRightAlt');","import material_gen from './material_gen.json'\nconst material = material_gen\nexport default material\n","import {\n  allArtifactSetKeys,\n  allLocationCharacterKeys,\n  allWeaponKeys,\n} from '@genshin-optimizer/consts'\nimport { ArrowRightAlt } from '@mui/icons-material'\nimport {\n  Box,\n  CardContent,\n  Divider,\n  Grid,\n  Link as MuiLink,\n  Skeleton,\n  styled,\n  Tab,\n  Tabs,\n  Typography,\n} from '@mui/material'\nimport { Suspense, useContext } from 'react'\nimport ReactGA from 'react-ga4'\nimport { useTranslation } from 'react-i18next'\nimport { Link, Route, Routes, useMatch } from 'react-router-dom'\nimport CardDark from '../Components/Card/CardDark'\nimport CardLight from '../Components/Card/CardLight'\nimport SqBadge from '../Components/SqBadge'\nimport { artStatPercent } from '../Data/Artifacts/Artifact'\nimport material from '../Data/Materials/Material'\nimport { DatabaseContext } from '../Database/Database'\nimport useDBMeta from '../ReactHooks/useDBMeta'\nimport { charKeyToCharName } from '../Types/consts'\n\nexport default function PageDocumentation() {\n  // const { t } = useTranslation(\"documentation\")\n  ReactGA.send({ hitType: 'pageview', page: '/doc' })\n\n  const {\n    params: { currentTab },\n  } = useMatch('/doc/:currentTab') ?? { params: { currentTab: '' } }\n\n  return (\n    <CardDark sx={{ my: 1 }}>\n      <Grid container sx={{ px: 2, py: 1 }}>\n        <Grid item flexGrow={1}>\n          <Typography variant=\"h6\">Documentation</Typography>\n        </Grid>\n        <Grid item>\n          <Typography variant=\"h6\">\n            <SqBadge color=\"info\">Version. 2</SqBadge>\n          </Typography>\n        </Grid>\n      </Grid>\n      <Divider />\n      <CardContent>\n        <Grid container spacing={1}>\n          <Grid item xs={12} md={2}>\n            <CardLight sx={{ height: '100%' }}>\n              <Tabs\n                orientation=\"vertical\"\n                value={currentTab}\n                aria-label=\"Documentation Navigation\"\n                sx={{ borderRight: 1, borderColor: 'divider' }}\n              >\n                <Tab label=\"Overview\" value=\"\" component={Link} to=\"\" />\n                <Tab\n                  label={'Key naming convention'}\n                  value=\"KeyNaming\"\n                  component={Link}\n                  to=\"KeyNaming\"\n                />\n                <Tab\n                  label={<code>StatKey</code>}\n                  value=\"StatKey\"\n                  component={Link}\n                  to=\"StatKey\"\n                />\n                <Tab\n                  label={<code>ArtifactSetKey</code>}\n                  value=\"ArtifactSetKey\"\n                  component={Link}\n                  to=\"ArtifactSetKey\"\n                />\n                <Tab\n                  label={<code>CharacterKey</code>}\n                  value=\"CharacterKey\"\n                  component={Link}\n                  to=\"CharacterKey\"\n                />\n                <Tab\n                  label={<code>WeaponKey</code>}\n                  value=\"WeaponKey\"\n                  component={Link}\n                  to=\"WeaponKey\"\n                />\n                <Tab\n                  label={<code>MaterialKey</code>}\n                  value=\"MaterialKey\"\n                  component={Link}\n                  to=\"MaterialKey\"\n                />\n                <Tab\n                  label={'Version History'}\n                  value=\"VersionHistory\"\n                  component={Link}\n                  to=\"VersionHistory\"\n                />\n              </Tabs>\n            </CardLight>\n          </Grid>\n          <Grid item xs={12} md={10}>\n            <CardLight sx={{ height: '100%' }}>\n              <CardContent>\n                <Suspense\n                  fallback={\n                    <Skeleton variant=\"rectangular\" width=\"100%\" height={600} />\n                  }\n                >\n                  <Routes>\n                    <Route index element={<Overview />} />\n                    <Route\n                      path=\"/VersionHistory\"\n                      element={<VersionHistoryPane />}\n                    />\n                    <Route path=\"/MaterialKey\" element={<MaterialKeyPane />} />\n                    <Route\n                      path=\"/ArtifactSetKey\"\n                      element={<ArtifactSetKeyPane />}\n                    />\n                    <Route path=\"/WeaponKey\" element={<WeaponKeyPane />} />\n                    <Route\n                      path=\"/CharacterKey\"\n                      element={<CharacterKeyPane />}\n                    />\n                    <Route path=\"/StatKey\" element={<StatKeyPane />} />\n                    <Route path=\"/KeyNaming\" element={<KeyNamingPane />} />\n                  </Routes>\n                </Suspense>\n              </CardContent>\n            </CardLight>\n          </Grid>\n        </Grid>\n      </CardContent>\n    </CardDark>\n  )\n}\n\nconst goodCode = `interface IGOOD {\n  format: \"GOOD\" // A way for people to recognize this format.\n  version: number // GOOD API version.\n  source: string // The app that generates this data.\n  characters?: ICharacter[]\n  artifacts?: IArtifact[]\n  weapons?: IWeapon[]\n  materials?: { // Added in version 2\n    [key:MaterialKey]: number\n  }\n}`\n\nconst artifactCode = `interface IArtifact {\n  setKey: SetKey //e.g. \"GladiatorsFinale\"\n  slotKey: SlotKey //e.g. \"plume\"\n  level: number //0-20 inclusive\n  rarity: number //1-5 inclusive\n  mainStatKey: StatKey\n  location: CharacterKey|\"\" //where \"\" means not equipped.\n  lock: boolean //Whether the artifact is locked in game.\n  substats: ISubstat[]\n}\n\ninterface ISubstat {\n  key: StatKey //e.g. \"critDMG_\"\n  value: number //e.g. 19.4\n}\n\ntype SlotKey = \"flower\" | \"plume\" | \"sands\" | \"goblet\" | \"circlet\"`\n\nconst weaponCode = `interface IWeapon {\n  key: WeaponKey //\"CrescentPike\"\n  level: number //1-90 inclusive\n  ascension: number //0-6 inclusive. need to disambiguate 80/90 or 80/80\n  refinement: number //1-5 inclusive\n  location: CharacterKey | \"\" //where \"\" means not equipped.\n  lock: boolean //Whether the weapon is locked in game.\n}`\nconst characterCode = `interface ICharacter {\n  key: CharacterKey //e.g. \"Rosaria\"\n  level: number //1-90 inclusive\n  constellation: number //0-6 inclusive\n  ascension: number //0-6 inclusive. need to disambiguate 80/90 or 80/80\n  talent: { //does not include boost from constellations. 1-15 inclusive\n    auto: number\n    skill: number\n    burst: number\n  }\n}`\n\nfunction Overview() {\n  return (\n    <>\n      <Typography gutterBottom variant=\"h4\">\n        Genshin Open Object Description (GOOD)\n      </Typography>\n      <Typography gutterBottom>\n        <strong>GOOD</strong> is a data format description to map Genshin Data\n        into a parsable JSON. This is intended to be a standardized format to\n        allow Genshin developers/programmers to transfer data without needing\n        manual conversion.\n      </Typography>\n      <Typography gutterBottom>\n        As of version 6.0.0, Genshin Optimizer's database export conforms to\n        this format.\n      </Typography>\n      <CardDark>\n        <CardContent>\n          <CodeBlock text={goodCode} />\n        </CardContent>\n      </CardDark>\n      <br />\n      <Typography gutterBottom variant=\"h4\">\n        Artifact data representation\n      </Typography>\n      <CardDark>\n        <CardContent>\n          <CodeBlock text={artifactCode} />\n        </CardContent>\n      </CardDark>\n      <br />\n      <Typography gutterBottom variant=\"h4\">\n        Weapon data representation\n      </Typography>\n      <CardDark>\n        <CardContent>\n          <CodeBlock text={weaponCode} />\n        </CardContent>\n      </CardDark>\n      <br />\n      <Typography gutterBottom variant=\"h4\">\n        Character data representation\n      </Typography>\n      <CardDark>\n        <CardContent>\n          <CodeBlock text={characterCode} />\n        </CardContent>\n      </CardDark>\n    </>\n  )\n}\nfunction KeyNamingPane() {\n  return (\n    <CardDark>\n      <CardContent>\n        <Typography>Key Naming Convention</Typography>\n      </CardContent>\n      <Divider />\n      <CardContent>\n        <Typography gutterBottom>\n          The keys in the GOOD format, like Artifact sets, weapon keys,\n          character keys, are all in <strong>PascalCase</strong>. This makes the\n          name easy to derive from the in-game text, assuming no renames occur.\n          If a rename is needed, then the standard will have to increment\n          versions. (Last change was in 1.2 when the Prototype weapons were\n          renamed)\n        </Typography>\n        <Typography gutterBottom>\n          {' '}\n          To derive the PascalKey from a specific name, remove all symbols from\n          the name, and Capitalize each word:\n        </Typography>\n        <Typography>\n          <code>Gladiator's Finale</code>{' '}\n          <ArrowRightAlt sx={{ verticalAlign: 'bottom' }} />{' '}\n          <code>GladiatorsFinale</code>\n        </Typography>\n        <Typography>\n          <code>Spirit Locket of Boreas</code>{' '}\n          <ArrowRightAlt sx={{ verticalAlign: 'bottom' }} />{' '}\n          <code>SpiritLocketOfBoreas</code>\n        </Typography>\n        <Typography>\n          <code>\"The Catch\"</code>{' '}\n          <ArrowRightAlt sx={{ verticalAlign: 'bottom' }} />{' '}\n          <code>TheCatch</code>\n        </Typography>\n      </CardContent>\n    </CardDark>\n  )\n}\n\nfunction StatKeyPane() {\n  const { t: tk } = useTranslation('statKey_gen')\n  const statKeys = [\n    'hp',\n    'hp_',\n    'atk',\n    'atk_',\n    'def',\n    'def_',\n    'eleMas',\n    'enerRech_',\n    'heal_',\n    'critRate_',\n    'critDMG_',\n    'physical_dmg_',\n    'anemo_dmg_',\n    'geo_dmg_',\n    'electro_dmg_',\n    'hydro_dmg_',\n    'pyro_dmg_',\n    'cryo_dmg_',\n    'dendro_dmg_',\n  ] as const\n  const statKeysCode = `type StatKey\\n  = ${statKeys\n    .map((k) => `\"${k}\" //${tk(k)}${artStatPercent(k)}`)\n    .join(`\\n  | `)}`\n  return (\n    <>\n      <Typography gutterBottom variant=\"h4\">\n        StatKey\n      </Typography>\n      <CardDark>\n        <CardContent>\n          <CodeBlock text={statKeysCode} />\n        </CardContent>\n      </CardDark>\n    </>\n  )\n}\nfunction ArtifactSetKeyPane() {\n  const { t } = useTranslation('artifactNames_gen')\n  const artSetKeysCode = `type ArtifactSetKey\\n  = ${[\n    ...new Set(allArtifactSetKeys),\n  ]\n    .sort()\n    .map((k) => `\"${k}\" //${t(`artifactNames_gen:${k}`)}`)\n    .join(`\\n  | `)}`\n  return (\n    <>\n      <Typography gutterBottom variant=\"h4\">\n        ArtifactSetKey\n      </Typography>\n      <CardDark>\n        <CardContent>\n          <CodeBlock text={artSetKeysCode} />\n        </CardContent>\n      </CardDark>\n    </>\n  )\n}\nfunction CharacterKeyPane() {\n  const { t } = useTranslation('charNames_gen')\n  const { database } = useContext(DatabaseContext)\n  const { gender } = useDBMeta()\n  const charKeysCode = `type CharacterKey\\n  = ${[\n    ...new Set(allLocationCharacterKeys),\n  ]\n    .sort()\n    .map(\n      (k) =>\n        `\"${k}\" //${t(\n          `charNames_gen:${charKeyToCharName(\n            database.chars.LocationToCharacterKey(k),\n            gender\n          )}`\n        )}`\n    )\n    .join(`\\n  | `)}`\n  return (\n    <>\n      <Typography gutterBottom variant=\"h4\">\n        CharacterKey\n      </Typography>\n      <CardDark>\n        <CardContent>\n          <CodeBlock text={charKeysCode} />\n        </CardContent>\n      </CardDark>\n    </>\n  )\n}\nfunction WeaponKeyPane() {\n  const { t } = useTranslation('weaponNames_gen')\n  const weaponKeysCode = `type WeaponKey\\n  = ${[...new Set(allWeaponKeys)]\n    .sort()\n    .map((k) => `\"${k}\" //${t(`weaponNames_gen:${k}`)}`)\n    .join(`\\n  | `)}`\n  return (\n    <>\n      <Typography gutterBottom variant=\"h4\">\n        WeaponKey\n      </Typography>\n      <CardDark>\n        <CardContent>\n          <CodeBlock text={weaponKeysCode} />\n        </CardContent>\n      </CardDark>\n    </>\n  )\n}\nfunction MaterialKeyPane() {\n  const { t } = useTranslation('material_gen')\n  const weaponKeysCode = `type MaterialKey\\n  = ${Object.keys(material as any)\n    .sort()\n    .map((k) => `\"${k}\" //${t(`${k}.name`)}`)\n    .join(`\\n  | `)}`\n  return (\n    <>\n      <Typography gutterBottom variant=\"h4\">\n        MaterialKey\n      </Typography>\n      <CardDark>\n        <CardContent>\n          <Typography gutterBottom>\n            The item names are taken from the english translation, and then\n            converted into{' '}\n            <MuiLink component={Link} to=\"KeyNaming\">\n              <code>PascalCase</code>\n            </MuiLink>\n            .\n          </Typography>\n          <CodeBlock text={weaponKeysCode} />\n        </CardContent>\n      </CardDark>\n    </>\n  )\n}\n\nfunction VersionHistoryPane() {\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" gap={2}>\n      <Typography gutterBottom variant=\"h4\">\n        Version History\n      </Typography>\n      <CardDark>\n        <CardContent>\n          <Typography>Version 1</Typography>\n        </CardContent>\n        <Divider />\n        <CardContent>\n          <Typography>\n            Created general <code>IGOOD</code> format with character, weapon,\n            artifact fields.\n          </Typography>\n        </CardContent>\n      </CardDark>\n      <CardDark>\n        <CardContent>\n          <Typography>Version 2</Typography>\n        </CardContent>\n        <Divider />\n        <CardContent>\n          <Typography>\n            Adds <code>materials</code> field to <code>IGOOD</code>. All other\n            fields remain the same. V2 is backwards compatible with V1.\n          </Typography>\n        </CardContent>\n      </CardDark>\n    </Box>\n  )\n}\n\ntype LineNumberProps = {\n  digits?: number\n}\nconst LineNumber = styled('textarea')<LineNumberProps>(\n  ({ theme, digits = 2 }) => ({\n    width: `${digits}em`,\n    overflow: 'hidden',\n    userSelect: 'none',\n    color: theme.palette.text.secondary,\n    resize: 'none',\n    border: 'none',\n    whiteSpace: 'pre',\n    fontFamily: 'monospace',\n    lineHeight: 1,\n    '&:disabled': {\n      backgroundColor: 'transparent',\n    },\n  })\n)\n\nconst CodeArea = styled('textarea')(({ theme }) => ({\n  '&:disabled': {\n    backgroundColor: 'transparent',\n  },\n  lineHeight: 1,\n  width: '100%',\n  overflowY: 'auto',\n  overflowX: 'auto',\n  fontFamily: 'monospace',\n  border: 'none',\n  // padding: 1em;\n  whiteSpace: 'pre',\n  backgroundColor: 'transparent',\n  resize: 'none',\n  color: theme.palette.info.light,\n}))\nfunction CodeBlock({ text }) {\n  const lines = text.split(/\\r\\n|\\r|\\n/).length + 1\n  const lineNums = Array.from(Array(lines).keys())\n    .map((i) => i + 1)\n    .join('\\n')\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\">\n      <LineNumber\n        disabled={true}\n        spellCheck=\"false\"\n        aria-label=\"Code Sample\"\n        sx={{ height: `${lines + 1}em` }}\n        value={lineNums}\n        unselectable=\"on\"\n        digits={lines.toString().length}\n      />\n      <CodeArea\n        sx={{ flexGrow: 1, height: `${lines + 1}em` }}\n        disabled={true}\n        spellCheck=\"false\"\n        aria-label=\"Code Sample\"\n        value={text}\n      />\n    </Box>\n  )\n}\n","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getLinkUtilityClass(slot) {\n  return generateUtilityClass('MuiLink', slot);\n}\nconst linkClasses = generateUtilityClasses('MuiLink', ['root', 'underlineNone', 'underlineHover', 'underlineAlways', 'button', 'focusVisible']);\nexport default linkClasses;","import { alpha, getPath } from '@mui/system';\nexport const colorTransformations = {\n  primary: 'primary.main',\n  textPrimary: 'text.primary',\n  secondary: 'secondary.main',\n  textSecondary: 'text.secondary',\n  error: 'error.main'\n};\nconst transformDeprecatedColors = color => {\n  return colorTransformations[color] || color;\n};\nconst getTextDecoration = ({\n  theme,\n  ownerState\n}) => {\n  const transformedColor = transformDeprecatedColors(ownerState.color);\n  const color = getPath(theme, `palette.${transformedColor}`, false) || ownerState.color;\n  const channelColor = getPath(theme, `palette.${transformedColor}Channel`);\n  if ('vars' in theme && channelColor) {\n    return `rgba(${channelColor} / 0.4)`;\n  }\n  return alpha(color, 0.4);\n};\nexport default getTextDecoration;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\", \"sx\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nimport linkClasses, { getLinkUtilityClass } from './linkClasses';\nimport getTextDecoration, { colorTransformations } from './getTextDecoration';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    component,\n    focusVisible,\n    underline\n  } = ownerState;\n  const slots = {\n    root: ['root', `underline${capitalize(underline)}`, component === 'button' && 'button', focusVisible && 'focusVisible']\n  };\n  return composeClasses(slots, getLinkUtilityClass, classes);\n};\nconst LinkRoot = styled(Typography, {\n  name: 'MuiLink',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`underline${capitalize(ownerState.underline)}`], ownerState.component === 'button' && styles.button];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  return _extends({}, ownerState.underline === 'none' && {\n    textDecoration: 'none'\n  }, ownerState.underline === 'hover' && {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  }, ownerState.underline === 'always' && _extends({\n    textDecoration: 'underline'\n  }, ownerState.color !== 'inherit' && {\n    textDecorationColor: getTextDecoration({\n      theme,\n      ownerState\n    })\n  }, {\n    '&:hover': {\n      textDecorationColor: 'inherit'\n    }\n  }), ownerState.component === 'button' && {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    MozAppearance: 'none',\n    // Reset\n    WebkitAppearance: 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n    },\n\n    [`&.${linkClasses.focusVisible}`]: {\n      outline: 'auto'\n    }\n  });\n});\nconst Link = /*#__PURE__*/React.forwardRef(function Link(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiLink'\n  });\n  const {\n      className,\n      color = 'primary',\n      component = 'a',\n      onBlur,\n      onFocus,\n      TypographyClasses,\n      underline = 'always',\n      variant = 'inherit',\n      sx\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    isFocusVisibleRef,\n    onBlur: handleBlurVisible,\n    onFocus: handleFocusVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const handlerRef = useForkRef(ref, focusVisibleRef);\n  const handleBlur = event => {\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setFocusVisible(false);\n    }\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n  const handleFocus = event => {\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      setFocusVisible(true);\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n  const ownerState = _extends({}, props, {\n    color,\n    component,\n    focusVisible,\n    underline,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(LinkRoot, _extends({\n    color: color,\n    className: clsx(classes.root, className),\n    classes: TypographyClasses,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    ownerState: ownerState,\n    variant: variant,\n    sx: [...(!Object.keys(colorTransformations).includes(color) ? [{\n      color\n    }] : []), ...(Array.isArray(sx) ? sx : [sx])]\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the link.\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.any,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * `classes` prop applied to the [`Typography`](/material-ui/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n  /**\n   * Controls when the link should have an underline.\n   * @default 'always'\n   */\n  underline: PropTypes.oneOf(['always', 'hover', 'none']),\n  /**\n   * Applies the theme typography styles.\n   * @default 'inherit'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string])\n} : void 0;\nexport default Link;"],"names":["createSvgIcon","d","PageDocumentation","ReactGA","hitType","page","params","currentTab","useMatch","CardDark","sx","my","Grid","container","px","py","item","flexGrow","Typography","variant","SqBadge","color","Divider","CardContent","spacing","xs","md","CardLight","height","Tabs","orientation","value","borderRight","borderColor","Tab","label","component","Link","to","Suspense","fallback","Skeleton","width","index","element","Overview","path","VersionHistoryPane","MaterialKeyPane","ArtifactSetKeyPane","WeaponKeyPane","CharacterKeyPane","StatKeyPane","KeyNamingPane","gutterBottom","CodeBlock","text","ArrowRightAlt","verticalAlign","t","tk","useTranslation","statKeysCode","map","k","artStatPercent","join","artSetKeysCode","Set","allArtifactSetKeys","sort","database","useContext","DatabaseContext","gender","useDBMeta","charKeysCode","allLocationCharacterKeys","charKeyToCharName","chars","LocationToCharacterKey","weaponKeysCode","allWeaponKeys","Object","keys","material","Box","display","flexDirection","gap","LineNumber","styled","theme","digits","overflow","userSelect","palette","secondary","resize","border","whiteSpace","fontFamily","lineHeight","backgroundColor","CodeArea","overflowY","overflowX","info","light","lines","split","length","lineNums","Array","from","i","disabled","spellCheck","unselectable","toString","getLinkUtilityClass","slot","generateUtilityClass","generateUtilityClasses","colorTransformations","primary","textPrimary","textSecondary","error","ownerState","transformedColor","transformDeprecatedColors","channelColor","_excluded","LinkRoot","name","overridesResolver","props","styles","root","capitalize","underline","button","textDecoration","textDecorationColor","position","WebkitTapHighlightColor","outline","margin","borderRadius","padding","cursor","MozAppearance","WebkitAppearance","borderStyle","inProps","ref","useThemeProps","className","onBlur","onFocus","TypographyClasses","other","isFocusVisibleRef","handleBlurVisible","handleFocusVisible","focusVisibleRef","useIsFocusVisible","focusVisible","setFocusVisible","handlerRef","useForkRef","classes","slots","composeClasses","useUtilityClasses","event","current","includes","isArray"],"sourceRoot":""}