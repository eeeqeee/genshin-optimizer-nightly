{"version":3,"file":"840.60171fea6c598fa2.js","mappings":"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","sources":["webpack:///./src/app/Components/Character/LocationAutocomplete.tsx","webpack:///./src/app/Components/Character/LocationName.tsx","webpack:///./src/app/Components/Image/CharIconSide.tsx","webpack:///./src/app/Components/ToggleButton/WeaponToggle.tsx","webpack:///./src/app/PageWeapon/index.tsx","webpack:///./src/app/ReactHooks/useWeapon.tsx","webpack:///./src/app/Util/totalUtils.ts","webpack:///../../node_modules/@mui/icons-material/Edit.js","webpack:///../../node_modules/@mui/icons-material/esm/Add.js","webpack:///../../node_modules/@mui/icons-material/esm/BusinessCenter.js","webpack:///../../node_modules/@mui/icons-material/esm/Lock.js","webpack:///../../node_modules/@mui/icons-material/esm/LockOpen.js"],"sourcesContent":["import { characterAsset } from '@genshin-optimizer/g-assets'\nimport { BusinessCenter } from '@mui/icons-material'\nimport type { AutocompleteProps } from '@mui/material'\nimport { Skeleton } from '@mui/material'\nimport { Suspense, useCallback, useContext, useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { getCharSheet } from '../../Data/Characters'\nimport type CharacterSheet from '../../Data/Characters/CharacterSheet'\nimport { DatabaseContext } from '../../Database/Database'\nimport useDBMeta from '../../ReactHooks/useDBMeta'\nimport type { LocationCharacterKey, LocationKey } from '../../Types/consts'\nimport {\n  charKeyToCharName,\n  charKeyToLocCharKey,\n  travelerKeys,\n} from '../../Types/consts'\nimport type { GeneralAutocompleteOption } from '../GeneralAutocomplete'\nimport { GeneralAutocomplete } from '../GeneralAutocomplete'\nimport ThumbSide from './ThumbSide'\ntype LocationAutocompleteProps = {\n  location: LocationKey\n  setLocation: (v: LocationKey) => void\n  filter?: (v: CharacterSheet) => void\n  autoCompleteProps?: Omit<\n    AutocompleteProps<\n      GeneralAutocompleteOption<LocationKey>,\n      false,\n      false,\n      false\n    >,\n    'renderInput' | 'onChange' | 'options'\n  >\n}\nexport function LocationAutocomplete({\n  location,\n  setLocation,\n  filter = () => true,\n  autoCompleteProps = {},\n}: LocationAutocompleteProps) {\n  const { t } = useTranslation(['ui', 'artifact', 'charNames_gen'])\n  const { database } = useContext(DatabaseContext)\n  const { gender } = useDBMeta()\n  const toText = useCallback(\n    (key: LocationCharacterKey): string =>\n      t(\n        `charNames_gen:${charKeyToCharName(\n          database.chars.LocationToCharacterKey(key),\n          gender\n        )}`\n      ),\n    [database, gender, t]\n  )\n  const toImg = useCallback(\n    (key: LocationKey) =>\n      key === '' ? (\n        <BusinessCenter />\n      ) : (\n        <ThumbSide\n          src={characterAsset(\n            database.chars.LocationToCharacterKey(key),\n            'iconSide',\n            gender\n          )}\n          sx={{ pr: 1 }}\n        />\n      ),\n    [database, gender]\n  )\n  const isFavorite = useCallback(\n    (key: LocationCharacterKey) =>\n      key === 'Traveler'\n        ? travelerKeys.some((key) => database.charMeta.get(key).favorite)\n        : key\n        ? database.charMeta.get(key).favorite\n        : false,\n    [database]\n  )\n\n  const values: GeneralAutocompleteOption<LocationKey>[] = useMemo(\n    () => [\n      {\n        key: '',\n        label: t`artifact:filterLocation.inventory`,\n      },\n      ...Array.from(\n        new Set(\n          database.chars.keys\n            .filter((k) =>\n              getCharSheet(k, gender) ? filter(getCharSheet(k, gender)) : true\n            )\n            .map((k) => charKeyToLocCharKey(k))\n        )\n      )\n        .map((v) => ({ key: v, label: toText(v), favorite: isFavorite(v) }))\n        .sort((a, b) => {\n          if (a.favorite && !b.favorite) return -1\n          if (!a.favorite && b.favorite) return 1\n          return a.label.localeCompare(b.label)\n        }),\n    ],\n    [t, toText, isFavorite, database, filter, gender]\n  )\n  return (\n    <Suspense fallback={<Skeleton variant=\"text\" width={100} />}>\n      <GeneralAutocomplete\n        size=\"small\"\n        options={values}\n        valueKey={location}\n        onChange={(k) => setLocation(k ?? '')}\n        toImg={toImg}\n        {...autoCompleteProps}\n      />\n    </Suspense>\n  )\n}\n","import type { LocationKey } from '@genshin-optimizer/consts'\nimport { characterAsset } from '@genshin-optimizer/g-assets'\nimport { BusinessCenter } from '@mui/icons-material'\nimport { Box, Typography } from '@mui/material'\nimport { useContext, useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { getCharSheet } from '../../Data/Characters'\nimport { DatabaseContext } from '../../Database/Database'\nimport useDBMeta from '../../ReactHooks/useDBMeta'\nimport CharIconSide from '../Image/CharIconSide'\n\nexport default function LocationName({ location }: { location: LocationKey }) {\n  const { t } = useTranslation('ui')\n  const { database } = useContext(DatabaseContext)\n  const { gender } = useDBMeta()\n  const characterSheet = useMemo(\n    () =>\n      location\n        ? getCharSheet(database.chars.LocationToCharacterKey(location), gender)\n        : undefined,\n    [location, gender, database]\n  )\n  return (\n    <Typography component=\"span\">\n      {location && characterSheet?.name ? (\n        <Box>\n          <CharIconSide\n            src={characterAsset(\n              database.chars.LocationToCharacterKey(location),\n              'iconSide',\n              gender\n            )}\n            size={3}\n            sideMargin\n          />\n          <Box sx={{ pr: 1 }} component=\"span\">\n            {characterSheet.name}\n          </Box>\n        </Box>\n      ) : (\n        <span>\n          <BusinessCenter sx={{ verticalAlign: 'text-bottom' }} />{' '}\n          {t('inventory')}\n        </span>\n      )}\n    </Typography>\n  )\n}\n","import { styled } from '@mui/material'\ninterface ImgIconProps {\n  size?: number\n  sideMargin?: boolean\n}\nconst CharIconSide = styled('img', {\n  name: 'ImgIcon',\n  slot: 'Root',\n  shouldForwardProp: (pn) =>\n    !['size', 'sideMargin'].includes(pn as 'size' | 'sideMargin'),\n})<ImgIconProps>(({ size = 2, sideMargin = false }) => ({\n  display: 'inline-block',\n  width: `${size}em`,\n  height: `${size}em`,\n  marginTop: `${0.85 * (1 - size)}em`,\n  marginBottom: `${0.15 * (1 - size)}em`,\n  marginLeft: sideMargin ? undefined : `${0.3 * (1 - size)}em`,\n  marginRight: sideMargin ? undefined : `${0.3 * (1 - size)}em`,\n  verticalAlign: 'text-bottom',\n}))\n\nexport default CharIconSide\n","import { Chip, ToggleButton, useMediaQuery, useTheme } from '@mui/material'\nimport Assets from '../../Assets/Assets'\nimport type { WeaponTypeKey } from '@genshin-optimizer/consts'\nimport { allWeaponTypeKeys } from '@genshin-optimizer/consts'\nimport { handleMultiSelect } from '../../Util/MultiSelect'\nimport ImgIcon from '../Image/ImgIcon'\nimport type { SolidToggleButtonGroupProps } from '../SolidToggleButtonGroup'\nimport SolidToggleButtonGroup from '../SolidToggleButtonGroup'\ntype WeaponToggleProps = Omit<\n  SolidToggleButtonGroupProps,\n  'onChange' | 'value'\n> & {\n  onChange: (value: WeaponTypeKey[]) => void\n  value: WeaponTypeKey[]\n  totals: Record<WeaponTypeKey, Displayable>\n}\n\nconst weaponTypeHandler = handleMultiSelect([...allWeaponTypeKeys])\nexport default function WeaponToggle({\n  value,\n  totals,\n  onChange,\n  ...props\n}: WeaponToggleProps) {\n  const theme = useTheme()\n  const xs = !useMediaQuery(theme.breakpoints.up('sm'))\n  return (\n    <SolidToggleButtonGroup exclusive value={value} {...props}>\n      {allWeaponTypeKeys.map((wt) => (\n        <ToggleButton\n          key={wt}\n          value={wt}\n          sx={{\n            p: xs ? 1 : undefined,\n            minWidth: xs ? 0 : '7em',\n            display: 'flex',\n            gap: xs ? 0 : 1,\n          }}\n          onClick={() => onChange(weaponTypeHandler(value, wt))}\n        >\n          <ImgIcon src={Assets.weaponTypes?.[wt]} size={2} sideMargin />\n          <Chip label={totals[wt]} size=\"small\" />\n        </ToggleButton>\n      ))}\n    </SolidToggleButtonGroup>\n  )\n}\n","import type { WeaponKey } from '@genshin-optimizer/consts'\nimport { allRarityKeys, allWeaponTypeKeys } from '@genshin-optimizer/consts'\nimport { Add } from '@mui/icons-material'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Grid,\n  Pagination,\n  Skeleton,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport type { ChangeEvent } from 'react'\nimport React, {\n  lazy,\n  Suspense,\n  useCallback,\n  useContext,\n  useDeferredValue,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport ReactGA from 'react-ga4'\nimport { Trans, useTranslation } from 'react-i18next'\nimport CardDark from '../Components/Card/CardDark'\nimport SortByButton from '../Components/SortByButton'\nimport RarityToggle from '../Components/ToggleButton/RarityToggle'\nimport WeaponToggle from '../Components/ToggleButton/WeaponToggle'\nimport { getWeaponSheet } from '../Data/Weapons'\nimport { DatabaseContext } from '../Database/Database'\nimport useForceUpdate from '../ReactHooks/useForceUpdate'\nimport useMediaQueryUp from '../ReactHooks/useMediaQueryUp'\nimport { filterFunction, sortFunction } from '../Util/SortByFilters'\nimport { catTotal } from '../Util/totalUtils'\nimport { clamp } from '../Util/Util'\nimport {\n  weaponFilterConfigs,\n  weaponSortConfigs,\n  weaponSortMap,\n} from '../Util/WeaponSort'\nimport { initialWeapon } from '../Util/WeaponUtil'\nimport WeaponCard from './WeaponCard'\nconst WeaponSelectionModal = React.lazy(\n  () => import('../Components/Weapon/WeaponSelectionModal')\n)\n// Lazy load the weapon display\nconst WeaponEditor = lazy(() => import('./WeaponEditor'))\n\nconst columns = { xs: 1, sm: 2, md: 3, lg: 3, xl: 4 }\nconst numToShowMap = { xs: 10, sm: 12, md: 24, lg: 24, xl: 24 }\n\nconst sortKeys = Object.keys(weaponSortMap)\nexport default function PageWeapon() {\n  const { t } = useTranslation(['page_weapon', 'ui', 'weaponNames_gen'])\n  const { database } = useContext(DatabaseContext)\n  const [state, setState] = useState(database.displayWeapon.get())\n  useEffect(\n    () => database.displayWeapon.follow((r, dbMeta) => setState(dbMeta)),\n    [database]\n  )\n\n  const [newWeaponModalShow, setnewWeaponModalShow] = useState(false)\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  const invScrollRef = useRef<HTMLDivElement>(null)\n  const [pageIndex, setPageIndex] = useState(0)\n  //set follow, should run only once\n  useEffect(() => {\n    ReactGA.send({ hitType: 'pageview', page: '/weapon' })\n    return database.weapons.followAny(\n      (k, r) => (r === 'new' || r === 'remove') && forceUpdate()\n    )\n  }, [forceUpdate, database])\n\n  const brPt = useMediaQueryUp()\n  const maxNumToDisplay = numToShowMap[brPt]\n\n  const deleteWeapon = useCallback(\n    async (key: string) => {\n      const weapon = database.weapons.get(key)\n      if (!weapon) return\n      const name = t(`weaponNames_gen:${weapon.key}`)\n\n      if (!window.confirm(t('removeWeapon', { value: name }))) return\n      database.weapons.remove(key)\n      if (state.editWeaponId === key)\n        database.displayWeapon.set({ editWeaponId: '' })\n    },\n    [state.editWeaponId, database, t]\n  )\n\n  const editWeapon = useCallback(\n    (key: string | undefined) => {\n      database.displayWeapon.set({ editWeaponId: key })\n    },\n    [database]\n  )\n\n  const newWeapon = useCallback(\n    (weaponKey: WeaponKey) => {\n      editWeapon(database.weapons.new(initialWeapon(weaponKey)))\n    },\n    [database, editWeapon]\n  )\n\n  const [searchTerm, setSearchTerm] = useState('')\n  const deferredSearchTerm = useDeferredValue(searchTerm)\n\n  const { sortType, ascending, weaponType, rarity } = state\n  const { weaponIdList, totalWeaponNum } = useMemo(() => {\n    const weapons = database.weapons.values\n    const totalWeaponNum = weapons.length\n    const weaponIdList = weapons\n      .filter(\n        filterFunction(\n          { weaponType, rarity, name: deferredSearchTerm },\n          weaponFilterConfigs()\n        )\n      )\n      .sort(\n        sortFunction(\n          weaponSortMap[sortType] ?? [],\n          ascending,\n          weaponSortConfigs()\n        )\n      )\n      .map((weapon) => weapon.id)\n    return dbDirty && { weaponIdList, totalWeaponNum }\n  }, [\n    dbDirty,\n    database,\n    sortType,\n    ascending,\n    rarity,\n    weaponType,\n    deferredSearchTerm,\n  ])\n\n  const { weaponIdsToShow, numPages, currentPageIndex } = useMemo(() => {\n    const numPages = Math.ceil(weaponIdList.length / maxNumToDisplay)\n    const currentPageIndex = clamp(pageIndex, 0, numPages - 1)\n    return {\n      weaponIdsToShow: weaponIdList.slice(\n        currentPageIndex * maxNumToDisplay,\n        (currentPageIndex + 1) * maxNumToDisplay\n      ),\n      numPages,\n      currentPageIndex,\n    }\n  }, [weaponIdList, pageIndex, maxNumToDisplay])\n\n  // Pagination\n  const totalShowing =\n    weaponIdList.length !== totalWeaponNum\n      ? `${weaponIdList.length}/${totalWeaponNum}`\n      : `${totalWeaponNum}`\n  const setPage = useCallback(\n    (_: ChangeEvent<unknown>, value: number) => {\n      invScrollRef.current?.scrollIntoView({ behavior: 'smooth' })\n      setPageIndex(value - 1)\n    },\n    [setPageIndex, invScrollRef]\n  )\n\n  const resetEditWeapon = useCallback(\n    () => database.displayWeapon.set({ editWeaponId: '' }),\n    [database]\n  )\n\n  const { editWeaponId } = state\n\n  // Validate weaponId to be an actual weapon\n  useEffect(() => {\n    if (!editWeaponId) return\n    if (!database.weapons.get(editWeaponId)) resetEditWeapon()\n  }, [database, editWeaponId, resetEditWeapon])\n\n  const weaponTotals = useMemo(\n    () =>\n      catTotal(allWeaponTypeKeys, (ct) =>\n        Object.entries(database.weapons.data).forEach(([id, weapon]) => {\n          const wtk = getWeaponSheet(weapon.key).weaponType\n          ct[wtk].total++\n          if (weaponIdList.includes(id)) ct[wtk].current++\n        })\n      ),\n    [database, weaponIdList]\n  )\n\n  const weaponRarityTotals = useMemo(\n    () =>\n      catTotal(allRarityKeys, (ct) =>\n        Object.entries(database.weapons.data).forEach(([id, weapon]) => {\n          const wr = getWeaponSheet(weapon.key).rarity\n          ct[wr].total++\n          if (weaponIdList.includes(id)) ct[wr].current++\n        })\n      ),\n    [database, weaponIdList]\n  )\n\n  return (\n    <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n      <Suspense fallback={false}>\n        <WeaponSelectionModal\n          show={newWeaponModalShow}\n          onHide={() => setnewWeaponModalShow(false)}\n          onSelect={newWeapon}\n        />\n      </Suspense>\n      {/* Editor/character detail display */}\n      <Suspense fallback={false}>\n        <WeaponEditor\n          weaponId={editWeaponId}\n          footer\n          onClose={resetEditWeapon}\n        />\n      </Suspense>\n\n      <CardDark ref={invScrollRef}>\n        <CardContent sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n          <Box display=\"flex\" flexWrap=\"wrap\" gap={1} alignItems=\"stretch\">\n            <WeaponToggle\n              onChange={(weaponType) =>\n                database.displayWeapon.set({ weaponType })\n              }\n              value={weaponType}\n              totals={weaponTotals}\n              size=\"small\"\n            />\n            <RarityToggle\n              sx={{ height: '100%' }}\n              onChange={(rarity) => database.displayWeapon.set({ rarity })}\n              value={rarity}\n              totals={weaponRarityTotals}\n              size=\"small\"\n            />\n            <Box flexGrow={1} />\n            <TextField\n              autoFocus\n              size=\"small\"\n              value={searchTerm}\n              onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>\n                setSearchTerm(e.target.value)\n              }\n              label={t('weaponName')}\n              sx={{ height: '100%' }}\n              InputProps={{\n                sx: { height: '100%' },\n              }}\n            />\n          </Box>\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"flex-end\"\n            flexWrap=\"wrap\"\n          >\n            <Pagination\n              count={numPages}\n              page={currentPageIndex + 1}\n              onChange={setPage}\n            />\n            <ShowingWeapon\n              numShowing={weaponIdsToShow.length}\n              total={totalShowing}\n              t={t}\n            />\n            <SortByButton\n              sx={{ height: '100%' }}\n              sortKeys={sortKeys}\n              value={sortType}\n              onChange={(sortType) => database.displayWeapon.set({ sortType })}\n              ascending={ascending}\n              onChangeAsc={(ascending) =>\n                database.displayWeapon.set({ ascending })\n              }\n            />\n          </Box>\n        </CardContent>\n      </CardDark>\n      <Suspense\n        fallback={\n          <Skeleton\n            variant=\"rectangular\"\n            sx={{ width: '100%', height: '100%', minHeight: 500 }}\n          />\n        }\n      >\n        <Button\n          fullWidth\n          onClick={() => setnewWeaponModalShow(true)}\n          color=\"info\"\n          startIcon={<Add />}\n        >\n          {t('page_weapon:addWeapon')}\n        </Button>\n        <Grid container spacing={1} columns={columns}>\n          {weaponIdsToShow.map((weaponId) => (\n            <Grid item key={weaponId} xs={1}>\n              <WeaponCard\n                weaponId={weaponId}\n                onDelete={deleteWeapon}\n                onEdit={editWeapon}\n                canEquip\n              />\n            </Grid>\n          ))}\n        </Grid>\n      </Suspense>\n      {numPages > 1 && (\n        <CardDark>\n          <CardContent>\n            <Grid container alignItems=\"flex-end\">\n              <Grid item flexGrow={1}>\n                <Pagination\n                  count={numPages}\n                  page={currentPageIndex + 1}\n                  onChange={setPage}\n                />\n              </Grid>\n              <Grid item>\n                <ShowingWeapon\n                  numShowing={weaponIdsToShow.length}\n                  total={totalShowing}\n                  t={t}\n                />\n              </Grid>\n            </Grid>\n          </CardContent>\n        </CardDark>\n      )}\n    </Box>\n  )\n}\nfunction ShowingWeapon({ numShowing, total, t }) {\n  return (\n    <Typography color=\"text.secondary\">\n      <Trans t={t} i18nKey=\"showingNum\" count={numShowing} value={total}>\n        Showing <b>{{ count: numShowing } as TransObject}</b> out of{' '}\n        {{ value: total }} Weapons\n      </Trans>\n    </Typography>\n  )\n}\n","import { useContext, useEffect, useState } from 'react'\nimport { DatabaseContext } from '../Database/Database'\n\nexport default function useWeapon(weaponID: string | undefined = '') {\n  const { database } = useContext(DatabaseContext)\n  const [weapon, setWeapon] = useState(database.weapons.get(weaponID))\n  useEffect(\n    () => setWeapon(database.weapons.get(weaponID)),\n    [database, weaponID]\n  )\n  useEffect(\n    () =>\n      weaponID\n        ? database.weapons.follow(\n            weaponID,\n            (k, r, v) => r === 'update' && setWeapon(v)\n          )\n        : undefined,\n    [weaponID, setWeapon, database]\n  )\n  return weapon\n}\n","import { objectMap } from './Util'\ntype Entry = {\n  total: number\n  current: number\n}\ntype CatTotalKey = string | number | symbol\n// A helper function to generate multiple `current/total` formated string object with categories using a single callback\nexport function bulkCatTotal(\n  catTotals: Record<CatTotalKey, readonly CatTotalKey[]>,\n  cb: (ctMap: Record<CatTotalKey, Record<CatTotalKey, Entry>>) => void\n) {\n  const ctMap = objectMap(catTotals, (keys) => catTotalObj(keys))\n  cb(ctMap)\n  return objectMap(ctMap, (ct) => catTotalToStringObj(ct))\n}\n// A helper function to generate a `current/total` formated string object with categories\nexport function catTotal<T extends CatTotalKey>(\n  keys: readonly T[],\n  cb: (ct: Record<T, Entry>) => void\n) {\n  const ct = catTotalObj(keys)\n  cb(ct)\n  return catTotalToStringObj(ct)\n}\n\nfunction catTotalObj<T extends CatTotalKey>(\n  keys: readonly T[]\n): Record<T, Entry> {\n  return Object.fromEntries(\n    keys.map((k) => [k, { total: 0, current: 0 }])\n  ) as Record<T, Entry>\n}\n\nfunction catTotalToStringObj<T extends CatTotalKey>(tot: Record<T, Entry>) {\n  return objectMap(tot, ({ total, current }) =>\n    current === total ? `${total}` : `${current}/${total}`\n  ) as Record<T, string>\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');\nexports.default = _default;","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M10 16v-1H3.01L3 19c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2v-4h-7v1h-4zm10-9h-4.01V5l-2-2h-4l-2 2v2H4c-1.1 0-2 .9-2 2v3c0 1.11.89 2 2 2h6v-2h4v2h6c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zm-6 0h-4V5h4v2z\"\n}), 'BusinessCenter');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\"\n}), 'Lock');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z\"\n}), 'LockOpen');"],"names":["LocationAutocomplete","location","setLocation","filter","autoCompleteProps","t","useTranslation","database","useContext","DatabaseContext","gender","useDBMeta","toText","useCallback","key","charKeyToCharName","chars","LocationToCharacterKey","toImg","src","characterAsset","sx","pr","isFavorite","travelerKeys","charMeta","get","favorite","values","useMemo","label","Array","from","Set","keys","k","getCharSheet","map","charKeyToLocCharKey","v","sort","a","b","localeCompare","Suspense","fallback","variant","width","size","options","valueKey","onChange","LocationName","characterSheet","undefined","component","name","sideMargin","verticalAlign","styled","slot","shouldForwardProp","pn","includes","display","height","marginTop","marginBottom","marginLeft","marginRight","weaponTypeHandler","handleMultiSelect","allWeaponTypeKeys","WeaponToggle","value","totals","props","theme","useTheme","xs","useMediaQuery","breakpoints","up","exclusive","wt","p","minWidth","gap","onClick","Assets","WeaponSelectionModal","React","WeaponEditor","lazy","columns","sm","md","lg","xl","numToShowMap","sortKeys","Object","weaponSortMap","PageWeapon","state","setState","useState","displayWeapon","useEffect","follow","r","dbMeta","newWeaponModalShow","setnewWeaponModalShow","dbDirty","forceUpdate","useForceUpdate","invScrollRef","useRef","pageIndex","setPageIndex","ReactGA","hitType","page","weapons","followAny","brPt","useMediaQueryUp","maxNumToDisplay","deleteWeapon","async","weapon","window","confirm","remove","editWeaponId","set","editWeapon","newWeapon","weaponKey","new","initialWeapon","searchTerm","setSearchTerm","deferredSearchTerm","useDeferredValue","sortType","ascending","weaponType","rarity","weaponIdList","totalWeaponNum","length","filterFunction","weaponFilterConfigs","sortFunction","weaponSortConfigs","id","weaponIdsToShow","numPages","currentPageIndex","Math","ceil","clamp","slice","totalShowing","setPage","_","current","scrollIntoView","behavior","resetEditWeapon","weaponTotals","catTotal","ct","entries","data","forEach","wtk","getWeaponSheet","total","weaponRarityTotals","allRarityKeys","wr","my","flexDirection","show","onHide","onSelect","weaponId","footer","onClose","ref","flexWrap","alignItems","flexGrow","autoFocus","e","target","InputProps","justifyContent","count","ShowingWeapon","numShowing","onChangeAsc","minHeight","fullWidth","color","startIcon","container","spacing","item","onDelete","onEdit","canEquip","i18nKey","useWeapon","weaponID","setWeapon","bulkCatTotal","catTotals","cb","ctMap","objectMap","catTotalObj","catTotalToStringObj","fromEntries","tot","_interopRequireDefault","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}