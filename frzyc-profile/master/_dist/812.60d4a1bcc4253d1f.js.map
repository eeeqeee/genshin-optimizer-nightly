{"version":3,"file":"812.60d4a1bcc4253d1f.js","mappings":"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","sources":["webpack:///./src/app/Components/Artifact/ArtifactRarityDropdown.tsx","webpack:///./src/app/Components/Artifact/ArtifactSlotDropdown.tsx","webpack:///./src/app/Components/CustomNumberTextField.tsx","webpack:///./src/app/ReactHooks/usePromise.tsx","webpack:///./src/app/Util/ArtifactUtil.ts","webpack:///./src/app/PageArtifact/ArtifactEditor/Components/SubstatEfficiencyDisplayCard.tsx","webpack:///./src/app/PageArtifact/ArtifactEditor/Components/SubstatInput.tsx","webpack:///./src/app/PageArtifact/ArtifactEditor/Components/UploadExplainationModal.tsx","webpack:///./src/app/PageArtifact/ScanningUtil.tsx","webpack:///./src/app/PageArtifact/BorrowManager.ts","webpack:///./src/app/PageArtifact/ArtifactEditor.tsx"],"sourcesContent":["import type { ButtonProps } from '@mui/material'\nimport { MenuItem } from '@mui/material'\nimport { useTranslation } from 'react-i18next'\nimport type { ArtifactRarity } from '../../Types/consts'\nimport DropdownButton from '../DropdownMenu/DropdownButton'\nimport { StarsDisplay } from '../StarDisplay'\n\ntype props = ButtonProps & {\n  rarity?: ArtifactRarity\n  onChange: (rarity: ArtifactRarity) => void\n  filter: (ArtifactRarity) => boolean\n}\n\nexport default function ArtifactRarityDropdown({\n  rarity,\n  onChange,\n  filter,\n  ...props\n}: props) {\n  const { t } = useTranslation('artifact')\n  return (\n    <DropdownButton\n      {...props}\n      title={rarity ? <StarsDisplay stars={rarity} inline /> : t`editor.rarity`}\n      color={rarity ? 'success' : 'primary'}\n    >\n      {([5, 4, 3] as ArtifactRarity[]).map((rarity) => (\n        <MenuItem\n          key={rarity}\n          disabled={!filter(rarity)}\n          onClick={() => onChange(rarity)}\n        >\n          <StarsDisplay stars={rarity} inline />\n        </MenuItem>\n      ))}\n    </DropdownButton>\n  )\n}\n","import type { ArtifactSlotKey } from '@genshin-optimizer/consts'\nimport { allArtifactSlotKeys } from '@genshin-optimizer/consts'\nimport { Replay } from '@mui/icons-material'\nimport type { ButtonProps } from '@mui/material'\nimport { Divider, ListItemIcon, ListItemText, MenuItem } from '@mui/material'\nimport { useTranslation } from 'react-i18next'\nimport DropdownButton from '../DropdownMenu/DropdownButton'\nimport SlotIcon from './SlotIcon'\n\ntype ArtifactSlotDropdownProps = ButtonProps & {\n  slotKey?: ArtifactSlotKey | ''\n  onChange: (slotKey: ArtifactSlotKey | '') => void\n  hasUnselect?: boolean\n}\n\nexport default function ArtifactSlotDropdown({\n  slotKey = '',\n  onChange,\n  hasUnselect = false,\n  ...props\n}: ArtifactSlotDropdownProps) {\n  const { t } = useTranslation(['artifact', 'ui'])\n  return (\n    <DropdownButton\n      title={slotKey ? t(`artifact:slotName:${slotKey}`) : t('artifact:slot')}\n      color={slotKey ? 'success' : 'primary'}\n      startIcon={slotKey ? <SlotIcon slotKey={slotKey} /> : undefined}\n      {...props}\n    >\n      {hasUnselect && (\n        <MenuItem\n          selected={slotKey === ''}\n          disabled={slotKey === ''}\n          onClick={() => onChange('')}\n        >\n          <ListItemIcon>\n            <Replay />\n          </ListItemIcon>\n          <ListItemText>{t`ui:unselect`}</ListItemText>\n        </MenuItem>\n      )}\n      {hasUnselect && <Divider />}\n      {allArtifactSlotKeys.map((key) => (\n        <MenuItem\n          key={key}\n          selected={slotKey === key}\n          disabled={slotKey === key}\n          onClick={() => onChange(key)}\n        >\n          <ListItemIcon>\n            <SlotIcon slotKey={key} />\n          </ListItemIcon>\n          <ListItemText>{t(`artifact:slotName:${key}`)}</ListItemText>\n        </MenuItem>\n      ))}\n    </DropdownButton>\n  )\n}\n","import type { TextFieldProps } from '@mui/material'\nimport { TextField } from '@mui/material'\nimport { useCallback, useEffect, useState } from 'react'\ntype props = TextFieldProps & {\n  value?: number | undefined\n  onChange: (newValue: number | undefined) => void\n  disabled?: boolean\n  float?: boolean\n  allowEmpty?: boolean\n}\nexport default function CustomNumberTextField({\n  value,\n  onChange,\n  disabled = false,\n  float = false,\n  ...props\n}: props) {\n  const [state, setState] = useState('')\n  const sendChange = useCallback(() => {\n    if (state === '') return onChange(0)\n    const parseFunc = float ? parseFloat : parseInt\n    onChange(parseFunc(state))\n  }, [onChange, state, float])\n  useEffect(() => setState(value?.toString() ?? ''), [value, setState]) // update value on value change\n\n  return (\n    <TextField\n      value={state}\n      aria-label=\"custom-input\"\n      type=\"number\"\n      onChange={(e: any) => setState(e.target.value)}\n      onBlur={sendChange}\n      disabled={disabled}\n      onKeyDown={(e: any) => e.key === 'Enter' && sendChange()}\n      {...props}\n    />\n  )\n}\n","import { useEffect, useState } from 'react'\n/**\n *\n * @param promiseFunc\n * @param dependencies - Reloads the promise when any of the dependencies are changed. (Using useEffect dependency)\n * @param useOld - When the promises are updated, then there is a period of time before the new promise return. useOld uses the previous value without a undefined gap.\n * @returns\n */\nexport default function usePromise<T>(\n  promiseFunc: () => Promise<T> | undefined,\n  dependencies: any[],\n  useOld = true\n): T | undefined {\n  const [res, setRes] = useState<[T] | undefined>(undefined)\n  useEffect(() => {\n    let pending = true\n    //encapsulate `res` in an array `[res]`, because res can sometimes be a function, that can interfere with the `useState` api.\n    promiseFunc()?.then((res) => pending && setRes([res]), console.error) ??\n      setRes(undefined)\n    return () => {\n      pending = false\n      !useOld && setRes(undefined)\n    }\n  }, dependencies) // eslint-disable-line react-hooks/exhaustive-deps\n  return res?.[0]\n}\n","import { allArtifactSetKeys } from '@genshin-optimizer/consts'\nimport { getArtSheet } from '../Data/Artifacts'\nimport Artifact from '../Data/Artifacts/Artifact'\nimport artifactSubstatRollCorrection from '../Data/Artifacts/artifact_sub_rolls_correction_gen.json'\nimport KeyMap, { cacheValueString } from '../KeyMap'\nimport type { IArtifact, ISubstat, SubstatKey } from '../Types/artifact'\nimport { allSubstatKeys } from '../Types/artifact'\nimport { getRandomElementFromArray, getRandomIntInclusive } from './Util'\n\n// do not randomize Prayers since they don't have all slots\nconst artSets = allArtifactSetKeys.filter((k) => !k.startsWith('Prayers'))\nexport function randomizeArtifact(base: Partial<IArtifact> = {}): IArtifact {\n  const setKey = base.setKey ?? getRandomElementFromArray(artSets)\n  const sheet = getArtSheet(setKey)\n  const rarity = base.rarity ?? getRandomElementFromArray(sheet.rarity)\n  const slot = base.slotKey ?? getRandomElementFromArray(sheet.slots)\n  const mainStatKey =\n    base.mainStatKey ?? getRandomElementFromArray(Artifact.slotMainStats(slot))\n  const level = base.level ?? getRandomIntInclusive(0, rarity * 4)\n  const substats: ISubstat[] = [0, 1, 2, 3].map(() => ({ key: '', value: 0 }))\n\n  const { low, high } = Artifact.rollInfo(rarity)\n  const totRolls = Math.floor(level / 4) + getRandomIntInclusive(low, high)\n  const numOfInitialSubstats = Math.min(totRolls, 4)\n  const numUpgradesOrUnlocks = totRolls - numOfInitialSubstats\n\n  const RollStat = (substat: SubstatKey): number =>\n    getRandomElementFromArray(Artifact.getSubstatRollData(substat, rarity))\n\n  let remainingSubstats = allSubstatKeys.filter((key) => mainStatKey !== key)\n  for (const substat of substats.slice(0, numOfInitialSubstats)) {\n    substat.key = getRandomElementFromArray(remainingSubstats)\n    substat.value = RollStat(substat.key)\n    remainingSubstats = remainingSubstats.filter((key) => key !== substat.key)\n  }\n  for (let i = 0; i < numUpgradesOrUnlocks; i++) {\n    const substat = getRandomElementFromArray(substats)\n    substat.value += RollStat(substat.key as any)\n  }\n  for (const substat of substats)\n    if (substat.key) {\n      const value = cacheValueString(substat.value, KeyMap.unit(substat.key))\n      substat.value = parseFloat(\n        artifactSubstatRollCorrection[rarity]?.[substat.key]?.[value] ?? value\n      )\n    }\n\n  return {\n    setKey,\n    rarity,\n    slotKey: slot,\n    mainStatKey,\n    level,\n    substats,\n    location: base.location ?? '',\n    lock: false,\n  }\n}\n","import { Grid, Typography } from '@mui/material'\nimport React from 'react'\nimport { Trans } from 'react-i18next'\nimport CardLight from '../../../Components/Card/CardLight'\nimport InfoTooltip from '../../../Components/InfoTooltip'\nimport PercentBadge from '../../../Components/PercentBadge'\n\nexport default function SubstatEfficiencyDisplayCard({\n  efficiency,\n  max = false,\n  t,\n  valid,\n}) {\n  const eff = max ? 'maxSubEff' : 'curSubEff'\n  return (\n    <CardLight sx={{ py: 1, px: 2 }}>\n      <Grid container spacing={1}>\n        <Grid item>{t(`editor.${eff}`)}</Grid>\n        <Grid item flexGrow={1}>\n          <InfoTooltip\n            title={\n              <span>\n                <Typography variant=\"h6\">{t(`editor.${eff}`)}</Typography>\n                <Typography>\n                  <Trans t={t} i18nKey={`editor.${eff}Desc`} />\n                </Typography>\n              </span>\n            }\n          />\n        </Grid>\n        <Grid item xs=\"auto\">\n          <PercentBadge\n            valid={valid}\n            max={900}\n            value={valid ? efficiency : 'ERR'}\n          />\n        </Grid>\n      </Grid>\n    </CardLight>\n  )\n}\n","import {\n  Box,\n  Button,\n  ButtonGroup,\n  Grid,\n  ListItemIcon,\n  ListItemText,\n  MenuItem,\n  Slider,\n  Typography,\n} from '@mui/material'\nimport { useEffect, useMemo, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { ArtifactStatWithUnit } from '../../../Components/Artifact/ArtifactStatKeyDisplay'\nimport CardLight from '../../../Components/Card/CardLight'\nimport CustomNumberInput, {\n  CustomNumberInputButtonGroupWrapper,\n} from '../../../Components/CustomNumberInput'\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton'\nimport PercentBadge from '../../../Components/PercentBadge'\nimport SqBadge from '../../../Components/SqBadge'\nimport TextButton from '../../../Components/TextButton'\nimport Artifact, { artifactSubRolls } from '../../../Data/Artifacts/Artifact'\nimport artifactSubstatRollCorrection from '../../../Data/Artifacts/artifact_sub_rolls_correction_gen.json'\nimport KeyMap, { cacheValueString } from '../../../KeyMap'\nimport StatIcon from '../../../KeyMap/StatIcon'\nimport type { ICachedArtifact, ISubstat } from '../../../Types/artifact'\nimport { allSubstatKeys } from '../../../Types/artifact'\nimport type { RollColorKey } from '../../../Types/consts'\nimport { clamp } from '../../../Util/Util'\n\nexport default function SubstatInput({\n  index,\n  artifact,\n  setSubstat,\n}: {\n  index: number\n  artifact: ICachedArtifact | undefined\n  setSubstat: (index: number, substat: ISubstat) => void\n}) {\n  const { t } = useTranslation('artifact')\n  const { mainStatKey = '', rarity = 5 } = artifact ?? {}\n  const {\n    key = '',\n    value = 0,\n    rolls = [],\n    efficiency = 0,\n  } = artifact?.substats[index] ?? {}\n\n  const accurateValue = rolls.reduce((a, b) => a + b, 0)\n  const unit = KeyMap.unit(key),\n    rollNum = rolls.length\n\n  let error = '',\n    rollData: readonly number[] = [],\n    allowedRolls = 0\n\n  if (artifact) {\n    // Account for the rolls it will need to fill all 4 substates, +1 for its base roll\n    const rarity = artifact.rarity\n    const { numUpgrades, high } = Artifact.rollInfo(rarity)\n    const maxRollNum = numUpgrades + high - 3\n    allowedRolls = maxRollNum - rollNum\n    rollData = key ? Artifact.getSubstatRollData(key, rarity) : []\n  }\n  const rollOffset = 7 - rollData.length\n\n  if (!rollNum && key && value) error = error || t`editor.substat.error.noCalc`\n  if (allowedRolls < 0)\n    error =\n      error ||\n      t('editor.substat.error.noOverRoll', { value: allowedRolls + rollNum })\n\n  const marks = useMemo(\n    () =>\n      key\n        ? [\n            { value: 0 },\n            ...artifactSubRolls(rarity, key).map((v) => ({ value: v })),\n          ]\n        : [{ value: 0 }],\n    [key, rarity]\n  )\n\n  return (\n    <CardLight>\n      <Box sx={{ display: 'flex' }}>\n        <ButtonGroup size=\"small\" sx={{ width: '100%', display: 'flex' }}>\n          <DropdownButton\n            startIcon={key ? <StatIcon statKey={key} /> : undefined}\n            title={\n              key ? (\n                <ArtifactStatWithUnit statKey={key} />\n              ) : (\n                t('editor.substat.substatFormat', { value: index + 1 })\n              )\n            }\n            disabled={!artifact}\n            color={key ? 'success' : 'primary'}\n            sx={{ whiteSpace: 'nowrap' }}\n          >\n            {key && (\n              <MenuItem\n                onClick={() => setSubstat(index, { key: '', value: 0 })}\n              >{t`editor.substat.noSubstat`}</MenuItem>\n            )}\n            {allSubstatKeys\n              .filter((key) => mainStatKey !== key)\n              .map((k) => (\n                <MenuItem\n                  key={k}\n                  selected={key === k}\n                  disabled={key === k}\n                  onClick={() => setSubstat(index, { key: k, value: 0 })}\n                >\n                  <ListItemIcon>\n                    <StatIcon statKey={k} />\n                  </ListItemIcon>\n                  <ListItemText>\n                    <ArtifactStatWithUnit statKey={k} />\n                  </ListItemText>\n                </MenuItem>\n              ))}\n          </DropdownButton>\n          <CustomNumberInputButtonGroupWrapper\n            sx={{ flexBasis: 30, flexGrow: 1 }}\n          >\n            <CustomNumberInput\n              float={unit === '%'}\n              placeholder={t`editor.substat.selectSub`}\n              value={key ? value : undefined}\n              onChange={(value) =>\n                setSubstat(index, { key, value: value ?? 0 })\n              }\n              disabled={!key}\n              error={!!error}\n              sx={{\n                px: 1,\n              }}\n              inputProps={{\n                sx: { textAlign: 'right' },\n              }}\n            />\n          </CustomNumberInputButtonGroupWrapper>\n          {!!rollData.length && (\n            <TextButton>{t`editor.substat.nextRolls`}</TextButton>\n          )}\n          {rollData.map((v, i) => {\n            let newValue = cacheValueString(accurateValue + v, unit)\n            newValue =\n              artifactSubstatRollCorrection[rarity]?.[key]?.[newValue] ??\n              newValue\n            return (\n              <Button\n                key={i}\n                color={`roll${clamp(rollOffset + i, 1, 6)}` as any}\n                disabled={(value && !rollNum) || allowedRolls <= 0}\n                onClick={() =>\n                  setSubstat(index, { key, value: parseFloat(newValue) })\n                }\n              >\n                {newValue}\n              </Button>\n            )\n          })}\n        </ButtonGroup>\n      </Box>\n      <Box px={2}>\n        <SliderWrapper\n          value={value}\n          marks={marks}\n          setValue={(v) =>\n            setSubstat(index, { key, value: (v as number) ?? 0 })\n          }\n          disabled={!key}\n        />\n      </Box>\n      <Box sx={{ px: 1, pb: 1 }}>\n        {error ? (\n          <SqBadge color=\"error\">{t`ui:error`}</SqBadge>\n        ) : (\n          <Grid container>\n            <Grid item>\n              <SqBadge\n                color={\n                  rollNum === 0\n                    ? 'secondary'\n                    : (`roll${clamp(rollNum, 1, 6)}` as RollColorKey)\n                }\n              >\n                {rollNum\n                  ? t('editor.substat.RollCount', { count: rollNum })\n                  : t`editor.substat.noRoll`}\n              </SqBadge>\n            </Grid>\n            <Grid item flexGrow={1}>\n              {!!rolls.length &&\n                [...rolls].sort().map((val, i) => (\n                  <Typography\n                    component=\"span\"\n                    key={`${i}.${val}`}\n                    color={`roll${clamp(\n                      rollOffset + rollData.indexOf(val),\n                      1,\n                      6\n                    )}.main`}\n                    sx={{ ml: 1 }}\n                  >\n                    {cacheValueString(val, unit)}\n                  </Typography>\n                ))}\n            </Grid>\n            <Grid item xs=\"auto\" flexShrink={1}>\n              <Typography>\n                <Trans\n                  t={t}\n                  i18nKey=\"editor.substat.eff\"\n                  color=\"text.secondary\"\n                >\n                  {'Efficiency: '}\n                  <PercentBadge\n                    valid={true}\n                    max={rollNum * 100}\n                    value={\n                      efficiency\n                        ? efficiency\n                        : (t`editor.substat.noStat` as string)\n                    }\n                  />\n                </Trans>\n              </Typography>\n            </Grid>\n          </Grid>\n        )}\n      </Box>\n    </CardLight>\n  )\n}\nfunction SliderWrapper({\n  value,\n  setValue,\n  marks,\n  disabled = false,\n}: {\n  value: number\n  setValue: (v: number) => void\n  marks: Array<{ value: number }>\n  disabled: boolean\n}) {\n  const [innerValue, setinnerValue] = useState(value)\n  useEffect(() => setinnerValue(value), [value])\n  return (\n    <Slider\n      value={innerValue}\n      step={null}\n      disabled={disabled}\n      marks={marks}\n      min={0}\n      max={marks[marks.length - 1]?.value ?? 0}\n      onChange={(e, v) => setinnerValue(v as number)}\n      onChangeCommitted={(e, v) => setValue(v as number)}\n      valueLabelDisplay=\"auto\"\n    />\n  )\n}\n","import {\n  Alert,\n  Box,\n  CardContent,\n  Divider,\n  Grid,\n  Typography,\n} from '@mui/material'\nimport CardDark from '../../../Components/Card/CardDark'\nimport CloseButton from '../../../Components/CloseButton'\nimport ModalWrapper from '../../../Components/ModalWrapper'\nimport scan_art_main from './imgs/scan_art_main.png'\nimport Snippet from './imgs/snippet.png'\nexport default function UploadExplainationModal({\n  modalShow,\n  hide,\n}: {\n  modalShow: boolean\n  hide: () => void\n}) {\n  return (\n    <ModalWrapper open={modalShow} onClose={hide}>\n      <CardDark>\n        <CardContent sx={{ py: 1 }}>\n          <Grid container>\n            <Grid item flexGrow={1}>\n              <Typography variant=\"subtitle1\">\n                How do Upload Screenshots for parsing\n              </Typography>\n            </Grid>\n            <Grid item>\n              <CloseButton onClick={hide} />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardContent>\n          <Alert variant=\"outlined\" severity=\"warning\">\n            NOTE: Artifact Scanning currently only work for{' '}\n            <strong>ENGLISH</strong> artifacts.\n          </Alert>\n          <Grid container spacing={1} mt={1}>\n            <Grid item xs={8} md={4}>\n              <Box\n                component=\"img\"\n                alt=\"snippet of the screen to take\"\n                src={Snippet}\n                width=\"100%\"\n                height=\"auto\"\n              />\n            </Grid>\n            <Grid item xs={12} md={8}>\n              <Typography gutterBottom>\n                Using screenshots can dramatically decrease the amount of time\n                you manually input in stats on the Genshin Optimizer.\n              </Typography>\n              <Typography variant=\"h5\">\n                Where to snip the screenshot.\n              </Typography>\n              <Typography gutterBottom>\n                In game, Open your bag, and navigate to the artifacts tab.\n                Select the artifact you want to scan with Genshin Optimizer.{' '}\n                <b>Only artifact from this screen can be scanned.</b>\n              </Typography>\n              <Typography variant=\"h6\">Single artifact</Typography>\n              <Typography gutterBottom>\n                To take a screenshot, in Windows, the shortcut is{' '}\n                <strong>Shift + WindowsKey + S</strong>. Once you selected the\n                region, the image is automatically included in your clipboard.\n              </Typography>\n              <Typography variant=\"h6\">Multiple artifacts</Typography>\n              <Typography gutterBottom>\n                To take advantage of batch uploads, you can use a tool like{' '}\n                <a href=\"https://picpick.app/\" target=\"_blank\" rel=\"noreferrer\">\n                  PicPick\n                </a>{' '}\n                to create a macro to easily to screenshot a region to screenshot\n                multiple artifacts at once.\n              </Typography>\n              <Typography variant=\"h5\">\n                What to include in the screenshot.\n              </Typography>\n              <Typography>\n                As shown in the Image, starting from the top with the artifact\n                name, all the way to the set name(the text in green).{' '}\n              </Typography>\n            </Grid>\n            <Grid item xs={12} md={7}>\n              <Typography variant=\"h5\">\n                Adding Screenshot to Genshin Optimizer\n              </Typography>\n              <Typography>\n                At this point, you should have the artifact snippet either saved\n                to your harddrive, or in your clipboard.\n              </Typography>\n              <Typography gutterBottom>\n                You can click on the box next to \"Browse\" to browse the files in\n                your harddrive for multiple screenshots.\n              </Typography>\n              <Typography>\n                For single screenshots from the snippets, just press{' '}\n                <strong>Ctrl + V</strong> to paste from your clipboard.\n              </Typography>\n              <Typography gutterBottom>\n                You should be able to see a Preview of your artifact snippet,\n                and after waiting a few seconds, the artifact set and the\n                substats will be filled in in the <b>Artifact Editor</b>.\n              </Typography>\n              <Typography variant=\"h5\">Finishing the Artifact</Typography>\n              <Typography>\n                Unfortunately, computer vision is not 100%. There will always be\n                cases where something is not scanned properly. You should always\n                double check the scanned artifact values! Once the artifact has\n                been filled, Click on <strong>Add Artifact</strong> to finish\n                editing the artifact.\n              </Typography>\n            </Grid>\n            <Grid item xs={8} md={5}>\n              <Box\n                component=\"img\"\n                alt=\"main screen after importing stats\"\n                src={scan_art_main}\n                width=\"100%\"\n                height=\"auto\"\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardContent sx={{ py: 1 }}>\n          <CloseButton large onClick={hide} />\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  )\n}\n","import type {\n  ArtifactSetKey,\n  ArtifactSlotKey,\n  RarityKey,\n} from '@genshin-optimizer/consts'\nimport {\n  allArtifactSetKeys,\n  allArtifactSlotKeys,\n} from '@genshin-optimizer/consts'\nimport type { RecognizeResult, Scheduler } from 'tesseract.js'\nimport { createScheduler, createWorker } from 'tesseract.js'\nimport ColorText from '../Components/ColoredText'\nimport { getArtSheet } from '../Data/Artifacts'\nimport Artifact from '../Data/Artifacts/Artifact'\nimport KeyMap, { cacheValueString } from '../KeyMap'\nimport type {\n  IArtifact,\n  ICachedArtifact,\n  ISubstat,\n  MainStatKey,\n  SubstatKey,\n} from '../Types/artifact'\nimport { allMainStatKeys, allSubstatKeys } from '../Types/artifact'\nimport type { ArtifactRarity } from '../Types/consts'\nimport { allArtifactRarities } from '../Types/consts'\nimport { clamp, hammingDistance, objectKeyMap } from '../Util/Util'\nimport { BorrowManager } from './BorrowManager'\n\nconst starColor = { r: 255, g: 204, b: 50 } //#FFCC32\nconst workerCount = 2\n\nconst schedulers = new BorrowManager(\n  async (language): Promise<Scheduler> => {\n    const scheduler = createScheduler()\n    const promises = Array(workerCount)\n      .fill(0)\n      .map(async (_) => {\n        const worker = await createWorker({\n          errorHandler: console.error,\n        })\n\n        await worker.load()\n        await worker.loadLanguage(language)\n        await worker.initialize(language)\n        scheduler.addWorker(worker)\n      })\n\n    await Promise.any(promises)\n    return scheduler\n  },\n  (_language, value) => {\n    value.then((value) => value.terminate())\n  }\n)\n\nexport type ProcessedEntry = {\n  fileName: string\n  imageURL: string\n  artifact: IArtifact\n  texts: Dict<keyof ICachedArtifact, Displayable>\n}\nexport type OutstandingEntry = {\n  file: File\n  fileName: string\n  imageURL?: Promise<string>\n  result?: Promise<{ file: File; result: ProcessedEntry }>\n}\ntype Queue = { processed: ProcessedEntry[]; outstanding: OutstandingEntry[] }\ntype UploadMessage = { type: 'upload'; files: OutstandingEntry[] }\ntype ProcessingMessage = { type: 'processing' }\ntype ProcessedMessage = {\n  type: 'processed'\n  file: File\n  result: ProcessedEntry\n}\ntype PopMessage = { type: 'pop' }\ntype ClearMessage = { type: 'clear' }\ntype Color = [number, number, number] // RGB\nexport const queueReducer = (\n  queue: Queue,\n  message:\n    | UploadMessage\n    | ProcessingMessage\n    | ProcessedMessage\n    | PopMessage\n    | ClearMessage\n): Queue => {\n  switch (message.type) {\n    case 'upload':\n      return {\n        processed: queue.processed,\n        outstanding: [...queue.outstanding, ...message.files],\n      }\n    case 'processing': // Processing `outstanding` head. Refresh\n      return { processed: queue.processed, outstanding: [...queue.outstanding] }\n    case 'processed':\n      if (queue.outstanding[0].file === message.file)\n        return {\n          processed: [...queue.processed, message.result],\n          outstanding: queue.outstanding.slice(1),\n        }\n      return queue // Not in the list, ignored\n    case 'pop':\n      return {\n        processed: queue.processed.slice(1),\n        outstanding: queue.outstanding,\n      }\n    case 'clear':\n      return { processed: [], outstanding: [] }\n  }\n}\n\nexport function processEntry(entry: OutstandingEntry) {\n  if (entry.result) return\n\n  const { file, fileName } = entry\n  entry.imageURL = fileToURL(file)\n  entry.result = entry.imageURL.then(async (imageURL) => {\n    const ocrResult = await ocr(imageURL)\n\n    const [artifact, texts] = findBestArtifact(\n      ocrResult.rarities,\n      parseSetKeys(ocrResult.artifactSetTexts),\n      parseSlotKeys(ocrResult.whiteTexts),\n      parseSubstats(ocrResult.substatTexts),\n      parseMainStatKeys(ocrResult.whiteTexts),\n      parseMainStatValues(ocrResult.whiteTexts)\n    )\n\n    return { file, result: { fileName, imageURL, artifact, texts } }\n  })\n}\n\nconst fileToURL = (file: File): Promise<string> =>\n  new Promise((resolve) => {\n    const reader = new FileReader()\n    reader.onloadend = ({ target }) => resolve(target!.result as string)\n    reader.readAsDataURL(file)\n  })\nconst urlToImageData = (urlFile: string): Promise<ImageData> =>\n  new Promise((resolve) => {\n    const img = new Image()\n    img.onload = ({ target }) =>\n      resolve(imageToImageData(target as HTMLImageElement))\n    img.src = urlFile\n  })\nfunction imageToImageData(image: HTMLImageElement): ImageData {\n  const canvas = document.createElement('canvas'),\n    context = canvas.getContext('2d')!\n  canvas.width = image.width\n  canvas.height = image.height\n  context.drawImage(image, 0, 0, image.width, image.height)\n  return context.getImageData(0, 0, image.width, image.height) as ImageData // TODO: May be undefined\n}\nfunction imageDataToCanvas(imageData: ImageData) {\n  // create off-screen canvas element\n  const canvas = document.createElement('canvas')\n  canvas.width = imageData.width\n  canvas.height = imageData.height\n\n  // update canvas with new data\n  canvas.getContext('2d')!.putImageData(imageData, 0, 0)\n  return canvas // produces a PNG file\n}\n\nasync function ocr(imageURL: string): Promise<{\n  artifactSetTexts: string[]\n  substatTexts: string[]\n  whiteTexts: string[]\n  rarities: Set<RarityKey>\n}> {\n  const imageData = await urlToImageData(imageURL)\n\n  const width = imageData.width,\n    halfHeight = Math.floor(imageData.height / 2)\n  const bottomOpts = {\n    rectangle: { top: halfHeight, left: 0, width, height: halfHeight },\n  }\n\n  const awaits = [\n    textsFromImage(\n      bandPass(imageData, [140, 140, 140], [255, 255, 255], {\n        mode: 'bw',\n        region: 'top',\n      })\n    ), // slotkey, mainStatValue, level\n    textsFromImage(\n      bandPass(imageData, [30, 50, 80], [160, 160, 160], { region: 'bot' }),\n      bottomOpts\n    ), // substats\n    textsFromImage(\n      bandPass(imageData, [30, 160, 30], [200, 255, 200], {\n        mode: 'bw',\n        region: 'bot',\n      }),\n      bottomOpts\n    ), // artifact set, look for greenish texts\n  ]\n\n  const rarities = parseRarities(\n    imageData.data,\n    imageData.width,\n    imageData.height\n  )\n  const [whiteTexts, substatTexts, artifactSetTexts] = await Promise.all(awaits)\n  return { whiteTexts, substatTexts, artifactSetTexts, rarities }\n}\nasync function textsFromImage(\n  imageData: ImageData,\n  options: object | undefined = undefined\n): Promise<string[]> {\n  const canvas = imageDataToCanvas(imageData)\n  const rec = await schedulers.borrow(\n    'eng',\n    async (scheduler) =>\n      (await (\n        await scheduler\n      ).addJob('recognize', canvas, options)) as RecognizeResult\n  )\n  return rec.data.lines.map((line) => line.text)\n}\n\nexport function findBestArtifact(\n  rarities: Set<number>,\n  textSetKeys: Set<ArtifactSetKey>,\n  slotKeys: Set<ArtifactSlotKey>,\n  substats: ISubstat[],\n  mainStatKeys: Set<MainStatKey>,\n  mainStatValues: { mainStatValue: number; unit?: string }[]\n): [IArtifact, Dict<keyof ICachedArtifact, Displayable>] {\n  // const relevantSetKey = [...new Set<ArtifactSetKey>([...textSetKeys, \"Adventurer\", \"ArchaicPetra\"])]\n  // TODO: restore\n  const relevantSetKey = [\n    ...new Set<ArtifactSetKey>([...textSetKeys, 'EmblemOfSeveredFate']),\n  ]\n\n  let bestScore = -1,\n    bestArtifacts: IArtifact[] = [\n      {\n        // setKey: \"Adventurer\", rarity: 3, level: 0, slotKey: \"flower\", mainStatKey: \"hp\", substats: [],\n        // TODO: restore\n        setKey: 'EmblemOfSeveredFate',\n        rarity: 3,\n        level: 0,\n        slotKey: 'flower',\n        mainStatKey: 'hp',\n        substats: [],\n        location: '',\n        lock: false,\n      },\n    ]\n\n  // Rate each rarity\n  const rarityRates = objectKeyMap(allArtifactRarities, (rarity) => {\n    let score = 0\n    if (textSetKeys.size) {\n      const count = [...textSetKeys].reduce(\n        (count, set) =>\n          count + (getArtSheet(set).rarity.includes(rarity) ? 1 : 0),\n        0\n      )\n      score += count / textSetKeys.size\n    }\n    if (substats.length) {\n      const count = substats.reduce(\n        (count, substat) =>\n          count +\n          (Artifact.getSubstatRolls(\n            substat.key as SubstatKey,\n            substat.value,\n            rarity\n          ).length\n            ? 1\n            : 0),\n        0\n      )\n      score += (count / substats.length) * 2\n    }\n    return score\n  })\n\n  // Test all *probable* combinations\n  for (const slotKey of allArtifactSlotKeys) {\n    for (const mainStatKey of Artifact.slotMainStats(slotKey)) {\n      const mainStatScore =\n        (slotKeys.has(slotKey) ? 1 : 0) +\n        (mainStatKeys.has(mainStatKey) ? 1 : 0)\n      const relevantMainStatValues = mainStatValues\n        .filter(\n          (value) => value.unit !== '%' || KeyMap.unit(mainStatKey) === '%'\n        ) // Ignore \"%\" text if key isn't \"%\"\n        .map((value) => value.mainStatValue)\n\n      for (const [rarityString, rarityIndividualScore] of Object.entries(\n        rarityRates\n      )) {\n        const rarity = parseInt(rarityString) as ArtifactRarity\n        const setKeys = relevantSetKey.filter((setKey) =>\n          getArtSheet(setKey).rarity.includes(rarity)\n        )\n        const rarityScore = mainStatScore + rarityIndividualScore\n\n        if (rarityScore + 2 < bestScore) continue // Early bail out\n\n        for (const minimumMainStatValue of relevantMainStatValues) {\n          const values = Artifact.mainStatValues(rarity, mainStatKey)\n          const level = Math.max(\n            0,\n            values.findIndex((level) => level >= minimumMainStatValue)\n          )\n          const mainStatVal = values[level]\n          const mainStatValScore =\n            rarityScore + (mainStatVal === minimumMainStatValue ? 1 : 0)\n\n          for (const setKey of setKeys) {\n            const score = mainStatValScore + (textSetKeys.has(setKey) ? 1 : 0)\n            if (score >= bestScore) {\n              if (score > bestScore) bestArtifacts = []\n              bestScore = score\n              bestArtifacts.push({\n                setKey,\n                rarity,\n                level,\n                slotKey,\n                mainStatKey,\n                substats: [],\n                location: '',\n                lock: false,\n              })\n            }\n          }\n        }\n        if (rarityScore >= bestScore) {\n          const level = 0\n          for (const setKey of setKeys) {\n            const score = rarityScore + (textSetKeys.has(setKey) ? 1 : 0)\n\n            if (score > bestScore) bestArtifacts = []\n            bestScore = score\n            bestArtifacts.push({\n              setKey,\n              rarity,\n              level,\n              slotKey,\n              mainStatKey,\n              substats: [],\n              location: '',\n              lock: false,\n            })\n          }\n        }\n      }\n    }\n  }\n\n  const texts = {} as Dict<keyof ICachedArtifact, Displayable>\n  const chosen = {\n    setKey: new Set(),\n    rarity: new Set(),\n    level: new Set(),\n    slotKey: new Set(),\n    mainStatKey: new Set(),\n    mainStatVal: new Set(),\n  } as Dict<keyof ICachedArtifact, Set<string>>\n\n  const result = bestArtifacts[0],\n    resultMainStatVal = Artifact.mainStatValue(\n      result.mainStatKey,\n      result.rarity,\n      result.level\n    )!\n  result.substats = substats.filter(\n    (substat, i) =>\n      substat.key !== result.mainStatKey &&\n      substats.slice(0, i).every((other) => other.key !== substat.key)\n  )\n  for (let i = result.substats.length; i < 4; i++)\n    result.substats.push({ key: '', value: 0 })\n\n  for (const other of bestArtifacts) {\n    chosen.setKey!.add(other.setKey)\n    chosen.rarity!.add(other.rarity as any)\n    chosen.level!.add(other.level as any)\n    chosen.slotKey!.add(other.slotKey)\n    chosen.mainStatKey!.add(other.mainStatKey)\n  }\n\n  function unknownText<T>(\n    value: T,\n    name: Displayable,\n    text: (arg: T) => Displayable\n  ) {\n    return (\n      <>\n        Unknown {name} : Set to{' '}\n        <ColorText color=\"error\">{text(value)}</ColorText>\n      </>\n    )\n  }\n  function ambiguousText<T>(\n    value: T,\n    available: T[],\n    name: Displayable,\n    text: (arg: T) => Displayable\n  ) {\n    return (\n      <>\n        Ambiguous {name} <ColorText color=\"error\">{text(value)}</ColorText> :\n        May also be{' '}\n        {available\n          .filter((v) => v !== value)\n          .map((value, index) => (\n            <>\n              <b>{index > 0 ? '/' : ''}</b>\n              <ColorText color=\"warning\">{text(value)}</ColorText>\n            </>\n          ))}\n      </>\n    )\n  }\n  function detectedText<T>(\n    value: T,\n    name: Displayable,\n    text: (arg: T) => Displayable\n  ) {\n    return (\n      <>\n        Detected {name} <ColorText color=\"success\">{text(value)}</ColorText>\n      </>\n    )\n  }\n  function inferredText<T>(\n    value: T,\n    name: Displayable,\n    text: (arg: T) => Displayable\n  ) {\n    return (\n      <>\n        Inferred {name} <ColorText color=\"warning\">{text(value)}</ColorText>\n      </>\n    )\n  }\n\n  function addText(\n    key: keyof ICachedArtifact,\n    available: Set<any>,\n    name: Displayable,\n    text: (value) => Displayable\n  ) {\n    const recommended = new Set(\n      [...chosen[key]!].filter((value) => available.has(value))\n    )\n    if (recommended.size > 1)\n      texts[key] = ambiguousText(result[key], [...available], name, text)\n    else if (recommended.size === 1)\n      texts[key] = detectedText(result[key], name, text)\n    else if (chosen[key]!.size > 1)\n      texts[key] = unknownText(result[key], name, text)\n    else texts[key] = inferredText(result[key], name, text)\n  }\n\n  addText('setKey', textSetKeys, 'Set', (value) => getArtSheet(value).name)\n  addText('rarity', rarities, 'Rarity', (value) => (\n    <>\n      {value} {value !== 1 ? 'Stars' : 'Star'}\n    </>\n  ))\n  addText('slotKey', slotKeys, 'Slot', (value) => (\n    <>{Artifact.slotName(value)}</>\n  ))\n  addText('mainStatKey', mainStatKeys, 'Main Stat', (value) => (\n    <>{KeyMap.getStr(value)}</>\n  ))\n  texts.substats = (\n    <>\n      {result.substats\n        .filter((substat) => substat.key !== '')\n        .map((substat, i) => (\n          <div key={i}>\n            {detectedText(substat, 'Sub Stat', (value) => (\n              <>\n                {KeyMap.getStr(value.key)}+\n                {cacheValueString(value.value, KeyMap.unit(value.key))}\n                {KeyMap.unit(value.key)}\n              </>\n            ))}\n          </div>\n        ))}\n    </>\n  )\n\n  const valueStrFunc = (value) => (\n    <>\n      {cacheValueString(value, KeyMap.unit(result.mainStatKey))}\n      {KeyMap.unit(result.mainStatKey)}\n    </>\n  )\n  if (\n    mainStatValues.find((value) => value.mainStatValue === resultMainStatVal)\n  ) {\n    if (mainStatKeys.has(result.mainStatKey)) {\n      texts.level = detectedText(result.level, 'Level', (value) => '+' + value)\n      texts.mainStatVal = detectedText(\n        resultMainStatVal,\n        'Main Stat value',\n        valueStrFunc\n      )\n    } else {\n      texts.level = inferredText(result.level, 'Level', (value) => '+' + value)\n      texts.mainStatVal = inferredText(\n        resultMainStatVal,\n        'Main Stat value',\n        valueStrFunc\n      )\n    }\n  } else {\n    texts.level = unknownText(result.level, 'Level', (value) => '+' + value)\n    texts.mainStatVal = unknownText(\n      resultMainStatVal,\n      'Main Stat value',\n      valueStrFunc\n    )\n  }\n\n  return [result, texts]\n}\n\nfunction parseSetKeys(texts: string[]): Set<ArtifactSetKey> {\n  const results = new Set<ArtifactSetKey>([])\n  for (const text of texts)\n    for (const key of allArtifactSetKeys)\n      if (\n        hammingDistance(\n          text.replace(/\\W/g, ''),\n          getArtSheet(key).nameRaw.replace(/\\W/g, '')\n        ) <= 2\n      )\n        results.add(key)\n  return results\n}\nfunction parseRarities(\n  pixels: Uint8ClampedArray,\n  width: number,\n  height: number\n): Set<RarityKey> {\n  const d = pixels\n  let lastRowNum = 0,\n    rowsWithNumber = 0\n  const results = new Set<RarityKey>([])\n  for (let y = 0; y < height; y++) {\n    let star = 0,\n      onStar = false\n    for (let x = 0; x < width; x++) {\n      const i = (y * width + x) * 4\n      const r = d[i],\n        g = d[i + 1],\n        b = d[i + 2]\n      if (colorCloseEnough({ r, g, b }, starColor)) {\n        if (!onStar) {\n          onStar = true\n          star++\n        }\n      } else {\n        onStar = false\n      }\n    }\n\n    if (lastRowNum !== star) {\n      lastRowNum = star\n      rowsWithNumber = 1\n    } else if (lastRowNum) {\n      rowsWithNumber++\n      if (rowsWithNumber >= 10)\n        results.add(clamp(lastRowNum, 3, 5) as RarityKey)\n    }\n  }\n  return results\n}\nfunction colorCloseEnough(color1, color2, threshold = 5) {\n  const intCloseEnough = (a, b) => Math.abs(a - b) <= threshold\n  return (\n    intCloseEnough(color1.r, color2.r) &&\n    intCloseEnough(color1.g, color2.g) &&\n    intCloseEnough(color1.b, color2.b)\n  )\n}\nfunction parseSlotKeys(texts: string[]): Set<ArtifactSlotKey> {\n  const results = new Set<ArtifactSlotKey>()\n  for (const text of texts)\n    for (const key of allArtifactSlotKeys)\n      if (\n        hammingDistance(\n          text.replace(/\\W/g, ''),\n          Artifact.slotName(key).replace(/\\W/g, '')\n        ) <= 2\n      )\n        results.add(key)\n  return results\n}\nfunction parseMainStatKeys(texts: string[]): Set<MainStatKey> {\n  const results = new Set<MainStatKey>([])\n  for (const text of texts)\n    for (const key of allMainStatKeys) {\n      if (text.toLowerCase().includes(KeyMap.getStr(key)?.toLowerCase() ?? ''))\n        results.add(key)\n      //use fuzzy compare on the ... Bonus texts. heal_ is included.\n      if (\n        key.includes('_bonu') &&\n        hammingDistance(\n          text.replace(/\\W/g, ''),\n          (KeyMap.getStr(key) ?? '').replace(/\\W/g, '')\n        ) <= 1\n      )\n        results.add(key)\n    }\n  return results\n}\nfunction parseMainStatValues(\n  texts: string[]\n): { mainStatValue: number; unit?: string }[] {\n  const results: { mainStatValue: number; unit?: string }[] = []\n  for (const text of texts) {\n    let regex = /(\\d+[,|\\\\.]+\\d)%/\n    let match = regex.exec(text)\n    if (match)\n      results.push({\n        mainStatValue: parseFloat(\n          match[1].replace(/,/g, '.').replace(/\\.{2,}/g, '.')\n        ),\n        unit: '%',\n      })\n    regex = /(\\d+[,|\\\\.]\\d{3}|\\d{2,3})/\n    match = regex.exec(text)\n    if (match)\n      results.push({\n        mainStatValue: parseInt(match[1].replace(/[,|\\\\.]+/g, '')),\n      })\n  }\n  return results\n}\nfunction parseSubstats(texts: string[]): ISubstat[] {\n  const matches: ISubstat[] = []\n  for (let text of texts) {\n    text = text.replace(/^[\\W]+/, '').replace(/\\n/, '')\n    //parse substats\n    allSubstatKeys.forEach((key) => {\n      const name = KeyMap.getStr(key)\n      const regex =\n        KeyMap.unit(key) === '%'\n          ? new RegExp(name + '\\\\s*\\\\+\\\\s*(\\\\d+[\\\\.|,]+\\\\d)%', 'im')\n          : new RegExp(name + '\\\\s*\\\\+\\\\s*(\\\\d+,\\\\d+|\\\\d+)($|\\\\s)', 'im')\n      const match = regex.exec(text)\n      if (match)\n        matches.push({\n          key,\n          value: parseFloat(\n            match[1].replace(/,/g, '.').replace(/\\.{2,}/g, '.')\n          ),\n        })\n    })\n  }\n  return matches.slice(0, 4)\n}\n\nfunction bandPass(\n  pixelData: ImageData,\n  color1: Color,\n  color2: Color,\n  options: { region?: 'top' | 'bot' | 'all'; mode?: 'bw' | 'color' | 'invert' }\n) {\n  const { region = 'all', mode = 'color' } = options\n  const d = Uint8ClampedArray.from(pixelData.data)\n  const top = region === 'top',\n    bot = region === 'bot',\n    all = region === 'all'\n  const bw = mode === 'bw',\n    invert = mode === 'invert'\n  const halfInd = Math.floor(pixelData.width * (pixelData.height / 2) * 4)\n  for (let i = 0; i < d.length; i += 4) {\n    const r = d[i],\n      g = d[i + 1],\n      b = d[i + 2]\n    if (\n      (all || (top && i < halfInd) || (bot && i > halfInd)) &&\n      r >= color1[0] &&\n      r <= color2[0] &&\n      g >= color1[1] &&\n      g <= color2[1] &&\n      b >= color1[2] &&\n      b <= color2[2]\n    ) {\n      if (bw) d[i] = d[i + 1] = d[i + 2] = 0\n      else if (invert) {\n        d[i] = 255 - r\n        d[i + 1] = 255 - g\n        d[i + 2] = 255 - b\n      } // else orignal color\n    } else {\n      d[i] = d[i + 1] = d[i + 2] = 255\n    }\n  }\n  return new ImageData(d, pixelData.width, pixelData.height)\n}\n","export class BorrowManager<T> {\n  data: Dict<string, { value: T; refCount: number }> = {}\n  init: (key: string) => T\n  deinit: (key: string, value: T) => void\n\n  constructor(\n    init: (key: string) => T,\n    deinit: (key: string, value: T) => void\n  ) {\n    this.init = init\n    this.deinit = deinit\n  }\n\n  /**\n   * Borrow the object corresponding to `key`, creating the object as necessary.\n   * The borrowing ends when `callback`'s promise is fulfilled.\n   * When the last borrowing ends, `deinit` the object.\n   *\n   * Do not use `arg` after the `callback`'s promise is fulfilled.\n   */\n  async borrow<R>(key: string, callback: (arg: T) => Promise<R>): Promise<R> {\n    if (!this.data[key]) {\n      this.data[key] = { value: this.init(key), refCount: 0 }\n    }\n\n    const box = this.data[key]!\n    box.refCount += 1\n    const result = await callback(box.value)\n    box.refCount -= 1\n    if (!box.refCount) {\n      // Last user. Cleaning up\n      delete this.data[key]\n      this.deinit(key, box.value)\n    }\n    return result\n  }\n}\n","import type { ArtifactSetKey, ArtifactSlotKey } from '@genshin-optimizer/consts'\nimport { allElementWithPhyKeys } from '@genshin-optimizer/consts'\nimport { artifactAsset } from '@genshin-optimizer/g-assets'\nimport {\n  Add,\n  ChevronRight,\n  PhotoCamera,\n  Replay,\n  Shuffle,\n  Update,\n} from '@mui/icons-material'\nimport HelpIcon from '@mui/icons-material/Help'\nimport {\n  Alert,\n  Box,\n  Button,\n  ButtonGroup,\n  CardContent,\n  CardHeader,\n  CircularProgress,\n  Grid,\n  MenuItem,\n  Skeleton,\n  styled,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@mui/material'\nimport type { ChangeEvent } from 'react'\nimport {\n  Suspense,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useState,\n} from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport ArtifactRarityDropdown from '../Components/Artifact/ArtifactRarityDropdown'\nimport ArtifactSetAutocomplete from '../Components/Artifact/ArtifactSetAutocomplete'\nimport ArtifactSlotDropdown from '../Components/Artifact/ArtifactSlotDropdown'\nimport {\n  ArtifactColoredIconStatWithUnit,\n  ArtifactStatWithUnit,\n} from '../Components/Artifact/ArtifactStatKeyDisplay'\nimport CardDark from '../Components/Card/CardDark'\nimport CardLight from '../Components/Card/CardLight'\nimport CloseButton from '../Components/CloseButton'\nimport CustomNumberTextField from '../Components/CustomNumberTextField'\nimport DropdownButton from '../Components/DropdownMenu/DropdownButton'\nimport ImgIcon from '../Components/Image/ImgIcon'\nimport ModalWrapper from '../Components/ModalWrapper'\nimport { getArtSheet } from '../Data/Artifacts'\nimport Artifact from '../Data/Artifacts/Artifact'\nimport { DatabaseContext } from '../Database/Database'\nimport {\n  cachedArtifact,\n  validateArtifact,\n} from '../Database/DataManagers/ArtifactData'\nimport KeyMap, { cacheValueString } from '../KeyMap'\nimport StatIcon from '../KeyMap/StatIcon'\nimport useForceUpdate from '../ReactHooks/useForceUpdate'\nimport usePromise from '../ReactHooks/usePromise'\nimport type {\n  IArtifact,\n  ICachedArtifact,\n  ISubstat,\n  MainStatKey,\n} from '../Types/artifact'\nimport { allSubstatKeys } from '../Types/artifact'\nimport type { ArtifactRarity } from '../Types/consts'\nimport { randomizeArtifact } from '../Util/ArtifactUtil'\nimport { clamp, deepClone } from '../Util/Util'\nimport ArtifactCard from './ArtifactCard'\nimport SubstatEfficiencyDisplayCard from './ArtifactEditor/Components/SubstatEfficiencyDisplayCard'\nimport SubstatInput from './ArtifactEditor/Components/SubstatInput'\nimport UploadExplainationModal from './ArtifactEditor/Components/UploadExplainationModal'\nimport type { OutstandingEntry, ProcessedEntry } from './ScanningUtil'\nimport { processEntry, queueReducer } from './ScanningUtil'\n\nconst maxProcessingCount = 3,\n  maxProcessedCount = 16\nconst allSubstatFilter = new Set(allSubstatKeys)\ntype ResetMessage = { type: 'reset' }\ntype SubstatMessage = { type: 'substat'; index: number; substat: ISubstat }\ntype OverwriteMessage = { type: 'overwrite'; artifact: IArtifact }\ntype UpdateMessage = { type: 'update'; artifact: Partial<IArtifact> }\ntype Message = ResetMessage | SubstatMessage | OverwriteMessage | UpdateMessage\ninterface IEditorArtifact {\n  setKey: ArtifactSetKey\n  slotKey: ArtifactSlotKey\n  level: number\n  rarity: ArtifactRarity\n  mainStatKey: MainStatKey\n  substats: ISubstat[]\n}\nfunction artifactReducer(\n  state: IEditorArtifact | undefined,\n  action: Message\n): IEditorArtifact | undefined {\n  switch (action.type) {\n    case 'reset':\n      return\n    case 'substat': {\n      const { index, substat } = action\n      const oldIndex = substat.key\n        ? state!.substats.findIndex((current) => current.key === substat.key)\n        : -1\n      if (oldIndex === -1 || oldIndex === index)\n        state!.substats[index] = substat\n      // Already in used, swap the items instead\n      else\n        [state!.substats[index], state!.substats[oldIndex]] = [\n          state!.substats[oldIndex],\n          state!.substats[index],\n        ]\n      return { ...state! }\n    }\n    case 'overwrite':\n      return action.artifact\n    case 'update':\n      return { ...state!, ...action.artifact }\n  }\n}\n\nconst InputInvis = styled('input')({\n  display: 'none',\n})\nexport type ArtifactEditorProps = {\n  artifactIdToEdit?: string\n  cancelEdit: () => void\n  allowUpload?: boolean\n  allowEmpty?: boolean\n  disableSet?: boolean\n  disableSlot?: boolean\n}\nexport default function ArtifactEditor({\n  artifactIdToEdit = '',\n  cancelEdit,\n  allowUpload = false,\n  allowEmpty = false,\n  disableSet = false,\n  disableSlot = false,\n}: ArtifactEditorProps) {\n  const { t } = useTranslation('artifact')\n\n  const { database } = useContext(DatabaseContext)\n\n  const [show, setShow] = useState(false)\n\n  const [dirtyDatabase, setDirtyDatabase] = useForceUpdate()\n  useEffect(\n    () => database.arts.followAny(setDirtyDatabase),\n    [database, setDirtyDatabase]\n  )\n\n  const [editorArtifact, artifactDispatch] = useReducer(\n    artifactReducer,\n    undefined\n  )\n  const artifact = useMemo(\n    () => editorArtifact && validateArtifact(editorArtifact, true),\n    [editorArtifact]\n  )\n\n  const [modalShow, setModalShow] = useState(false)\n\n  const [{ processed, outstanding }, dispatchQueue] = useReducer(queueReducer, {\n    processed: [],\n    outstanding: [],\n  })\n  const firstProcessed = processed[0] as ProcessedEntry | undefined\n  const firstOutstanding = outstanding[0] as OutstandingEntry | undefined\n\n  const processingImageURL = usePromise(\n    () => firstOutstanding?.imageURL,\n    [firstOutstanding?.imageURL]\n  )\n  const processingResult = usePromise(\n    () => firstOutstanding?.result,\n    [firstOutstanding?.result]\n  )\n\n  const remaining = processed.length + outstanding.length\n\n  const image = firstProcessed?.imageURL ?? processingImageURL\n  const { artifact: artifactProcessed, texts } = firstProcessed ?? {}\n  // const fileName = firstProcessed?.fileName ?? firstOutstanding?.fileName ?? \"Click here to upload Artifact screenshot files\"\n\n  const disableEditSlot = !!artifact?.location || disableSlot\n\n  useEffect(() => {\n    if (!artifact && artifactProcessed)\n      artifactDispatch({ type: 'overwrite', artifact: artifactProcessed })\n  }, [artifact, artifactProcessed, artifactDispatch])\n\n  useEffect(() => {\n    const numProcessing = Math.min(\n      maxProcessedCount - processed.length,\n      maxProcessingCount,\n      outstanding.length\n    )\n    const processingCurrent = numProcessing && !outstanding[0].result\n    outstanding.slice(0, numProcessing).forEach(processEntry)\n    if (processingCurrent) dispatchQueue({ type: 'processing' })\n  }, [processed.length, outstanding])\n\n  useEffect(() => {\n    if (processingResult)\n      dispatchQueue({ type: 'processed', ...processingResult })\n  }, [processingResult, dispatchQueue])\n\n  const uploadFiles = useCallback(\n    (files?: FileList | null) => {\n      if (!files) return\n      setShow(true)\n      dispatchQueue({\n        type: 'upload',\n        files: Array.from(files).map((file) => ({ file, fileName: file.name })),\n      })\n    },\n    [dispatchQueue, setShow]\n  )\n  const clearQueue = useCallback(\n    () => dispatchQueue({ type: 'clear' }),\n    [dispatchQueue]\n  )\n\n  useEffect(() => {\n    const pasteFunc = (e: Event) =>\n      uploadFiles((e as ClipboardEvent).clipboardData?.files)\n    allowUpload && window.addEventListener('paste', pasteFunc)\n    return () => {\n      if (allowUpload) window.removeEventListener('paste', pasteFunc)\n    }\n  }, [uploadFiles, allowUpload])\n\n  const onUpload = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      if (!e.target) return\n      uploadFiles(e.target.files)\n      e.target.value = '' // reset the value so the same file can be uploaded again...\n    },\n    [uploadFiles]\n  )\n\n  const {\n    old,\n    oldType,\n  }: {\n    old: ICachedArtifact | undefined\n    oldType: 'edit' | 'duplicate' | 'upgrade' | ''\n  } = useMemo(() => {\n    const databaseArtifact =\n      dirtyDatabase && artifactIdToEdit && database.arts.get(artifactIdToEdit)\n    if (databaseArtifact) return { old: databaseArtifact, oldType: 'edit' }\n    if (artifact === undefined) return { old: undefined, oldType: '' }\n    const { duplicated, upgraded } =\n      dirtyDatabase && database.arts.findDups(artifact)\n    return {\n      old: duplicated[0] ?? upgraded[0],\n      oldType: duplicated.length !== 0 ? 'duplicate' : 'upgrade',\n    }\n  }, [artifact, artifactIdToEdit, database, dirtyDatabase])\n\n  const { artifact: cArtifact, errors } = useMemo(() => {\n    if (!artifact) return { artifact: undefined, errors: [] as Displayable[] }\n    const validated = cachedArtifact(artifact, artifactIdToEdit)\n    if (old) validated.artifact.location = old.location\n    return validated\n  }, [artifact, artifactIdToEdit, old])\n\n  // Overwriting using a different function from `databaseArtifact` because `useMemo` does not\n  // guarantee to trigger *only when* dependencies change, which is necessary in this case.\n  useEffect(() => {\n    if (artifactIdToEdit === 'new') {\n      setShow(true)\n      artifactDispatch({ type: 'reset' })\n    }\n    const databaseArtifact =\n      artifactIdToEdit && dirtyDatabase && database.arts.get(artifactIdToEdit)\n    if (databaseArtifact) {\n      setShow(true)\n      artifactDispatch({\n        type: 'overwrite',\n        artifact: deepClone(databaseArtifact),\n      })\n    }\n  }, [artifactIdToEdit, database, dirtyDatabase])\n\n  const sheet = artifact ? getArtSheet(artifact.setKey) : undefined\n  const reset = useCallback(() => {\n    cancelEdit?.()\n    dispatchQueue({ type: 'pop' })\n    artifactDispatch({ type: 'reset' })\n  }, [cancelEdit, artifactDispatch])\n  const update = useCallback(\n    (newValue: Partial<IArtifact>) => {\n      const newSheet = newValue.setKey ? getArtSheet(newValue.setKey) : sheet!\n\n      function pick<T>(\n        value: T | undefined,\n        available: readonly T[],\n        prefer?: T\n      ): T {\n        return value && available.includes(value)\n          ? value\n          : prefer ?? available[0]\n      }\n\n      if (newValue.setKey) {\n        newValue.rarity = pick(\n          artifact?.rarity,\n          newSheet.rarity,\n          Math.max(...newSheet.rarity) as ArtifactRarity\n        )\n        newValue.slotKey = pick(artifact?.slotKey, newSheet.slots)\n      }\n      if (newValue.rarity) newValue.level = artifact?.level ?? 0\n      if (newValue.level)\n        newValue.level = clamp(\n          newValue.level,\n          0,\n          4 * (newValue.rarity ?? artifact!.rarity)\n        )\n      if (newValue.slotKey)\n        newValue.mainStatKey = pick(\n          artifact?.mainStatKey,\n          Artifact.slotMainStats(newValue.slotKey)\n        )\n\n      if (newValue.mainStatKey) {\n        newValue.substats = [0, 1, 2, 3].map((i) =>\n          artifact && artifact.substats[i].key !== newValue.mainStatKey\n            ? artifact!.substats[i]\n            : { key: '', value: 0 }\n        )\n      }\n      artifactDispatch({ type: 'update', artifact: newValue })\n    },\n    [artifact, sheet, artifactDispatch]\n  )\n  const setSubstat = useCallback(\n    (index: number, substat: ISubstat) => {\n      artifactDispatch({ type: 'substat', index, substat })\n    },\n    [artifactDispatch]\n  )\n  const isValid = !errors.length\n  const canClearArtifact = (): boolean =>\n    window.confirm(t`editor.clearPrompt` as string)\n  const { rarity = 5, level = 0, slotKey = 'flower' } = artifact ?? {}\n  const { currentEfficiency = 0, maxEfficiency = 0 } = cArtifact\n    ? Artifact.getArtifactEfficiency(cArtifact, allSubstatFilter)\n    : {}\n  const preventClosing = processed.length || outstanding.length\n  const onClose = useCallback(\n    (e) => {\n      if (preventClosing) e.preventDefault()\n      setShow(false)\n      cancelEdit()\n    },\n    [preventClosing, setShow, cancelEdit]\n  )\n\n  const theme = useTheme()\n  const grmd = useMediaQuery(theme.breakpoints.up('md'))\n\n  const element = artifact\n    ? allElementWithPhyKeys.find((ele) => artifact.mainStatKey.includes(ele))\n    : undefined\n  const color = artifact ? element ?? 'success' : 'primary'\n\n  const updateSetKey = useCallback(\n    (setKey: ArtifactSetKey | '') =>\n      update({ setKey: setKey as ArtifactSetKey }),\n    [update]\n  )\n  const setACDisable = useCallback(\n    (key: ArtifactSetKey | '') => {\n      if (key === '') return true\n      //Disable being able to select any of the prayer set unless the current slotkey is circlet\n      if (\n        disableEditSlot &&\n        slotKey !== 'circlet' &&\n        (key === 'PrayersForDestiny' ||\n          key === 'PrayersForIllumination' ||\n          key === 'PrayersForWisdom' ||\n          key === 'PrayersToSpringtime')\n      )\n        return true\n      return false\n    },\n    [disableEditSlot, slotKey]\n  )\n\n  return (\n    <ModalWrapper open={show} onClose={onClose}>\n      <Suspense\n        fallback={\n          <Skeleton\n            variant=\"rectangular\"\n            sx={{ width: '100%', height: show ? '100%' : 64 }}\n          />\n        }\n      >\n        <CardDark>\n          <UploadExplainationModal\n            modalShow={modalShow}\n            hide={() => setModalShow(false)}\n          />\n          <CardHeader\n            title={\n              <Trans t={t} i18nKey=\"editor.title\">\n                Artifact Editor\n              </Trans>\n            }\n            action={\n              <CloseButton disabled={!!preventClosing} onClick={onClose} />\n            }\n          />\n          <CardContent\n            sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n          >\n            <Grid container spacing={1} columns={{ xs: 1, md: 2 }}>\n              {/* Left column */}\n              <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n                {/* set & rarity */}\n                <Box sx={{ display: 'flex', gap: 1 }}>\n                  {/* Artifact Set */}\n                  <ArtifactSetAutocomplete\n                    disabled={disableSet}\n                    size=\"small\"\n                    artSetKey={artifact?.setKey ?? ''}\n                    setArtSetKey={updateSetKey}\n                    sx={{ flexGrow: 1 }}\n                    label={artifact?.setKey ? '' : t('editor.unknownSetName')}\n                    getOptionDisabled={({ key }) => setACDisable(key)}\n                  />\n                  {/* rarity dropdown */}\n                  <ArtifactRarityDropdown\n                    rarity={artifact ? rarity : undefined}\n                    onChange={(r) => update({ rarity: r })}\n                    filter={(r) => !!sheet?.rarity?.includes?.(r)}\n                    disabled={!sheet}\n                  />\n                </Box>\n\n                {/* level */}\n                <Box component=\"div\" display=\"flex\">\n                  <CustomNumberTextField\n                    id=\"filled-basic\"\n                    label=\"Level\"\n                    variant=\"filled\"\n                    sx={{ flexShrink: 1, flexGrow: 1, mr: 1, my: 0 }}\n                    margin=\"dense\"\n                    size=\"small\"\n                    value={level}\n                    disabled={!sheet}\n                    placeholder={`0~${rarity * 4}`}\n                    onChange={(l) => update({ level: l })}\n                  />\n                  <ButtonGroup>\n                    <Button\n                      onClick={() => update({ level: level - 1 })}\n                      disabled={!sheet || level === 0}\n                    >\n                      -\n                    </Button>\n                    {rarity\n                      ? [...Array(rarity + 1).keys()]\n                          .map((i) => 4 * i)\n                          .map((i) => (\n                            <Button\n                              key={i}\n                              onClick={() => update({ level: i })}\n                              disabled={!sheet || level === i}\n                            >\n                              {i}\n                            </Button>\n                          ))\n                      : null}\n                    <Button\n                      onClick={() => update({ level: level + 1 })}\n                      disabled={!sheet || level === rarity * 4}\n                    >\n                      +\n                    </Button>\n                  </ButtonGroup>\n                </Box>\n\n                {/* slot */}\n                <Box component=\"div\" display=\"flex\">\n                  <ArtifactSlotDropdown\n                    disabled={disableEditSlot || !sheet}\n                    slotKey={slotKey}\n                    onChange={(slotKey) => update({ slotKey })}\n                  />\n                  <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\n                    <Suspense fallback={<Skeleton width=\"60%\" />}>\n                      <Typography color=\"text.secondary\">\n                        {artifact && sheet?.getSlotName(artifact!.slotKey) ? (\n                          <span>\n                            <ImgIcon\n                              size={2}\n                              src={artifactAsset(\n                                artifact.setKey,\n                                artifact.slotKey\n                              )}\n                            />\n                            {sheet?.getSlotName(artifact!.slotKey)}\n                          </span>\n                        ) : (\n                          t`editor.unknownPieceName`\n                        )}\n                      </Typography>\n                    </Suspense>\n                  </CardLight>\n                </Box>\n\n                {/* main stat */}\n                <Box component=\"div\" display=\"flex\">\n                  <DropdownButton\n                    startIcon={\n                      artifact?.mainStatKey ? (\n                        <StatIcon statKey={artifact.mainStatKey} />\n                      ) : undefined\n                    }\n                    title={\n                      <b>\n                        {artifact ? (\n                          <ArtifactStatWithUnit\n                            statKey={artifact.mainStatKey}\n                          />\n                        ) : (\n                          t`mainStat`\n                        )}\n                      </b>\n                    }\n                    disabled={!sheet}\n                    color={color}\n                  >\n                    {Artifact.slotMainStats(slotKey).map((mainStatK) => (\n                      <MenuItem\n                        key={mainStatK}\n                        selected={artifact?.mainStatKey === mainStatK}\n                        disabled={artifact?.mainStatKey === mainStatK}\n                        onClick={() => update({ mainStatKey: mainStatK })}\n                      >\n                        <ArtifactColoredIconStatWithUnit statKey={mainStatK} />\n                      </MenuItem>\n                    ))}\n                  </DropdownButton>\n                  <CardLight sx={{ p: 1, ml: 1, flexGrow: 1 }}>\n                    <Typography color=\"text.secondary\">\n                      {artifact\n                        ? `${cacheValueString(\n                            Artifact.mainStatValue(\n                              artifact.mainStatKey,\n                              rarity,\n                              level\n                            ),\n                            KeyMap.unit(artifact.mainStatKey)\n                          )}${KeyMap.unit(artifact.mainStatKey)}`\n                        : t`mainStat`}\n                    </Typography>\n                  </CardLight>\n                </Box>\n\n                {/* Current/Max Substats Efficiency */}\n                <SubstatEfficiencyDisplayCard\n                  valid={isValid}\n                  efficiency={currentEfficiency}\n                  t={t}\n                />\n                {currentEfficiency !== maxEfficiency && (\n                  <SubstatEfficiencyDisplayCard\n                    max\n                    valid={isValid}\n                    efficiency={maxEfficiency}\n                    t={t}\n                  />\n                )}\n\n                {/* Image OCR */}\n                {allowUpload && (\n                  <CardLight>\n                    <CardContent\n                      sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n                    >\n                      {/* TODO: artifactDispatch not overwrite */}\n                      <Suspense\n                        fallback={<Skeleton width=\"100%\" height=\"100\" />}\n                      >\n                        <Grid container spacing={1} alignItems=\"center\">\n                          <Grid item flexGrow={1}>\n                            <label htmlFor=\"contained-button-file\">\n                              <InputInvis\n                                accept=\"image/*\"\n                                id=\"contained-button-file\"\n                                multiple\n                                type=\"file\"\n                                onChange={onUpload}\n                              />\n                              <Button\n                                component=\"span\"\n                                startIcon={<PhotoCamera />}\n                              >\n                                Upload Screenshot (or Ctrl-V)\n                              </Button>\n                            </label>\n                          </Grid>\n                          <Grid item>\n                            <Button\n                              color=\"info\"\n                              sx={{ px: 2, minWidth: 0 }}\n                              onClick={() => setModalShow(true)}\n                            >\n                              <HelpIcon />\n                            </Button>\n                          </Grid>\n                        </Grid>\n                        {image && (\n                          <Box display=\"flex\" justifyContent=\"center\">\n                            <Box\n                              component=\"img\"\n                              src={image}\n                              width=\"100%\"\n                              maxWidth={350}\n                              height=\"auto\"\n                              alt=\"Screenshot to parse for artifact values\"\n                            />\n                          </Box>\n                        )}\n                        {remaining > 0 && (\n                          <CardDark sx={{ pl: 2 }}>\n                            <Grid container spacing={1} alignItems=\"center\">\n                              {!firstProcessed && firstOutstanding && (\n                                <Grid item>\n                                  <CircularProgress size=\"1em\" />\n                                </Grid>\n                              )}\n                              <Grid item flexGrow={1}>\n                                <Typography>\n                                  <span>\n                                    Screenshots in file-queue:{' '}\n                                    <b>{remaining}</b>\n                                    {/* {process.env.NODE_ENV === \"development\" && ` (Debug: Processed ${processed.length}/${maxProcessedCount}, Processing: ${outstanding.filter(entry => entry.result).length}/${maxProcessingCount}, Outstanding: ${outstanding.length})`} */}\n                                  </span>\n                                </Typography>\n                              </Grid>\n                              <Grid item>\n                                <Button\n                                  size=\"small\"\n                                  color=\"error\"\n                                  onClick={clearQueue}\n                                >\n                                  Clear file-queue\n                                </Button>\n                              </Grid>\n                            </Grid>\n                          </CardDark>\n                        )}\n                      </Suspense>\n                    </CardContent>\n                  </CardLight>\n                )}\n              </Grid>\n\n              {/* Right column */}\n              <Grid item xs={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n                {/* substat selections */}\n                {[0, 1, 2, 3].map((index) => (\n                  <SubstatInput\n                    key={index}\n                    index={index}\n                    artifact={cArtifact}\n                    setSubstat={setSubstat}\n                  />\n                ))}\n                {texts && (\n                  <CardLight>\n                    <CardContent>\n                      <div>{texts.slotKey}</div>\n                      <div>{texts.mainStatKey}</div>\n                      <div>{texts.mainStatVal}</div>\n                      <div>{texts.rarity}</div>\n                      <div>{texts.level}</div>\n                      <div>{texts.substats}</div>\n                      <div>{texts.setKey}</div>\n                    </CardContent>\n                  </CardLight>\n                )}\n              </Grid>\n            </Grid>\n\n            {/* Duplicate/Updated/Edit UI */}\n            {old && (\n              <Grid\n                container\n                sx={{ justifyContent: 'space-around' }}\n                spacing={1}\n              >\n                <Grid item xs={12} md={5.5} lg={4}>\n                  <CardLight>\n                    <Typography\n                      sx={{ textAlign: 'center' }}\n                      py={1}\n                      variant=\"h6\"\n                      color=\"text.secondary\"\n                    >\n                      {oldType !== 'edit'\n                        ? oldType === 'duplicate'\n                          ? t`editor.dupArt`\n                          : t`editor.upArt`\n                        : t`editor.beforeEdit`}\n                    </Typography>\n                    <ArtifactCard artifactObj={old} />\n                  </CardLight>\n                </Grid>\n                {grmd && (\n                  <Grid\n                    item\n                    md={1}\n                    display=\"flex\"\n                    alignItems=\"center\"\n                    justifyContent=\"center\"\n                  >\n                    <CardLight sx={{ display: 'flex' }}>\n                      <ChevronRight sx={{ fontSize: 40 }} />\n                    </CardLight>\n                  </Grid>\n                )}\n                <Grid item xs={12} md={5.5} lg={4}>\n                  <CardLight>\n                    <Typography\n                      sx={{ textAlign: 'center' }}\n                      py={1}\n                      variant=\"h6\"\n                      color=\"text.secondary\"\n                    >{t`editor.preview`}</Typography>\n                    <ArtifactCard artifactObj={cArtifact} />\n                  </CardLight>\n                </Grid>\n              </Grid>\n            )}\n\n            {/* Error alert */}\n            {!isValid && (\n              <Alert variant=\"filled\" severity=\"error\">\n                {errors.map((e, i) => (\n                  <div key={i}>{e}</div>\n                ))}\n              </Alert>\n            )}\n\n            {/* Buttons */}\n            <Grid container spacing={2}>\n              <Grid item>\n                {oldType === 'edit' ? (\n                  <Button\n                    startIcon={<Add />}\n                    onClick={() => {\n                      database.arts.set(old!.id, editorArtifact!)\n                      if (allowEmpty) reset()\n                      else {\n                        setShow(false)\n                        cancelEdit()\n                      }\n                    }}\n                    disabled={!editorArtifact || !isValid}\n                    color=\"primary\"\n                  >\n                    {t`editor.btnSave`}\n                  </Button>\n                ) : (\n                  <Button\n                    startIcon={<Add />}\n                    onClick={() => {\n                      database.arts.new(artifact!)\n                      if (allowEmpty) reset()\n                      else {\n                        setShow(false)\n                        cancelEdit()\n                      }\n                    }}\n                    disabled={!artifact || !isValid}\n                    color={oldType === 'duplicate' ? 'warning' : 'primary'}\n                  >\n                    {t`editor.btnAdd`}\n                  </Button>\n                )}\n              </Grid>\n              <Grid item flexGrow={1}>\n                {allowEmpty && (\n                  <Button\n                    startIcon={<Replay />}\n                    disabled={!artifact}\n                    onClick={() => {\n                      canClearArtifact() && reset()\n                    }}\n                    color=\"error\"\n                  >{t`editor.btnClear`}</Button>\n                )}\n              </Grid>\n              <Grid item>\n                {process.env.NODE_ENV === 'development' && (\n                  <Button\n                    color=\"info\"\n                    startIcon={<Shuffle />}\n                    onClick={() =>\n                      artifactDispatch({\n                        type: 'overwrite',\n                        artifact: randomizeArtifact(),\n                      })\n                    }\n                  >{t`editor.btnRandom`}</Button>\n                )}\n              </Grid>\n              {old && oldType !== 'edit' && (\n                <Grid item>\n                  <Button\n                    startIcon={<Update />}\n                    onClick={() => {\n                      database.arts.set(old.id, {\n                        ...editorArtifact,\n                        location: old.location,\n                      })\n                      allowEmpty ? reset() : setShow(false)\n                    }}\n                    disabled={!editorArtifact || !isValid}\n                    color=\"success\"\n                  >{t`editor.btnUpdate`}</Button>\n                </Grid>\n              )}\n            </Grid>\n          </CardContent>\n        </CardDark>\n      </Suspense>\n    </ModalWrapper>\n  )\n}\n"],"names":["ArtifactRarityDropdown","rarity","onChange","filter","props","t","useTranslation","DropdownButton","title","stars","inline","color","map","MenuItem","disabled","onClick","ArtifactSlotDropdown","slotKey","hasUnselect","startIcon","SlotIcon","undefined","selected","ListItemIcon","Replay","ListItemText","Divider","allArtifactSlotKeys","key","CustomNumberTextField","value","float","state","setState","useState","sendChange","useCallback","parseFunc","parseFloat","parseInt","useEffect","toString","TextField","type","e","target","onBlur","onKeyDown","usePromise","promiseFunc","dependencies","useOld","res","setRes","pending","then","console","error","allArtifactSetKeys","k","startsWith","SubstatEfficiencyDisplayCard","efficiency","max","valid","eff","CardLight","sx","py","px","Grid","container","spacing","item","flexGrow","InfoTooltip","Typography","variant","i18nKey","xs","PercentBadge","SubstatInput","index","artifact","setSubstat","mainStatKey","rolls","substats","accurateValue","reduce","a","b","unit","KeyMap","rollNum","length","rollData","allowedRolls","numUpgrades","high","Artifact","rollOffset","marks","useMemo","artifactSubRolls","v","Box","display","ButtonGroup","size","width","StatIcon","statKey","whiteSpace","allSubstatKeys","CustomNumberInput","flexBasis","placeholder","inputProps","textAlign","TextButton","i","newValue","cacheValueString","artifactSubstatRollCorrection","Button","clamp","SliderWrapper","setValue","pb","SqBadge","count","sort","val","component","indexOf","ml","flexShrink","innerValue","setinnerValue","Slider","step","min","onChangeCommitted","valueLabelDisplay","UploadExplainationModal","modalShow","hide","ModalWrapper","open","onClose","CardDark","CardContent","CloseButton","Alert","severity","mt","md","alt","src","Snippet","height","gutterBottom","href","rel","scan_art_main","large","starColor","r","g","schedulers","constructor","init","deinit","data","this","async","callback","refCount","box","result","scheduler","createScheduler","promises","Array","fill","worker","createWorker","errorHandler","load","loadLanguage","language","initialize","addWorker","Promise","any","_language","terminate","queueReducer","queue","message","processed","outstanding","files","file","slice","processEntry","entry","fileName","imageURL","fileToURL","ocrResult","imageData","urlFile","resolve","img","Image","onload","image","canvas","document","createElement","context","getContext","drawImage","getImageData","imageToImageData","halfHeight","Math","floor","bottomOpts","rectangle","top","left","awaits","textsFromImage","bandPass","mode","region","rarities","pixels","d","lastRowNum","rowsWithNumber","results","Set","y","star","onStar","x","colorCloseEnough","add","parseRarities","whiteTexts","substatTexts","artifactSetTexts","all","ocr","texts","textSetKeys","slotKeys","mainStatKeys","mainStatValues","relevantSetKey","bestScore","bestArtifacts","setKey","level","location","lock","rarityRates","objectKeyMap","allArtifactRarities","score","set","getArtSheet","includes","substat","mainStatScore","has","relevantMainStatValues","mainStatValue","rarityString","rarityIndividualScore","Object","entries","setKeys","rarityScore","minimumMainStatValue","values","findIndex","mainStatValScore","push","chosen","mainStatVal","resultMainStatVal","every","other","unknownText","name","text","ambiguousText","available","detectedText","inferredText","addText","recommended","valueStrFunc","find","findBestArtifact","hammingDistance","replace","nameRaw","parseSetKeys","parseSlotKeys","matches","match","RegExp","exec","parseSubstats","allMainStatKeys","toLowerCase","parseMainStatKeys","regex","parseMainStatValues","reader","FileReader","onloadend","readAsDataURL","options","putImageData","imageDataToCanvas","borrow","addJob","lines","line","color1","color2","threshold","intCloseEnough","abs","pixelData","Uint8ClampedArray","from","bot","bw","invert","halfInd","ImageData","allSubstatFilter","artifactReducer","action","oldIndex","current","InputInvis","styled","ArtifactEditor","artifactIdToEdit","cancelEdit","allowUpload","allowEmpty","disableSet","disableSlot","database","useContext","DatabaseContext","show","setShow","dirtyDatabase","setDirtyDatabase","useForceUpdate","arts","followAny","editorArtifact","artifactDispatch","useReducer","validateArtifact","setModalShow","dispatchQueue","firstProcessed","firstOutstanding","processingImageURL","processingResult","remaining","artifactProcessed","disableEditSlot","numProcessing","processingCurrent","forEach","uploadFiles","clearQueue","pasteFunc","clipboardData","window","addEventListener","removeEventListener","onUpload","old","oldType","databaseArtifact","get","duplicated","upgraded","findDups","cArtifact","errors","validated","cachedArtifact","deepClone","sheet","reset","update","newSheet","pick","prefer","slots","isValid","currentEfficiency","maxEfficiency","preventClosing","preventDefault","theme","useTheme","grmd","useMediaQuery","breakpoints","up","element","allElementWithPhyKeys","ele","updateSetKey","setACDisable","Suspense","fallback","Skeleton","CardHeader","flexDirection","gap","columns","ArtifactSetAutocomplete","artSetKey","setArtSetKey","label","getOptionDisabled","id","mr","my","margin","l","keys","p","getSlotName","ImgIcon","artifactAsset","mainStatK","alignItems","htmlFor","accept","multiple","PhotoCamera","minWidth","Help","justifyContent","maxWidth","pl","CircularProgress","lg","ArtifactCard","artifactObj","ChevronRight","fontSize","Add","new","confirm","process","Update"],"sourceRoot":""}