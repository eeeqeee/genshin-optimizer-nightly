{"version":3,"file":"224.d593bcaa884f547d.js","mappings":"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","sources":["webpack:///./src/app/PageCharacter/index.tsx"],"sourcesContent":["import type { CharacterKey } from '@genshin-optimizer/consts'\nimport { allElementKeys, allWeaponTypeKeys } from '@genshin-optimizer/consts'\nimport {\n  DeleteForever,\n  FactCheck,\n  Groups,\n  Science,\n  TrendingUp,\n} from '@mui/icons-material'\nimport AddIcon from '@mui/icons-material/Add'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Divider,\n  Grid,\n  IconButton,\n  Pagination,\n  Skeleton,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport type { ChangeEvent } from 'react'\nimport React, {\n  Suspense,\n  useCallback,\n  useContext,\n  useDeferredValue,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport ReactGA from 'react-ga4'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { useNavigate } from 'react-router-dom'\nimport BootstrapTooltip from '../Components/BootstrapTooltip'\nimport CardDark from '../Components/Card/CardDark'\nimport CharacterCard from '../Components/Character/CharacterCard'\nimport SortByButton from '../Components/SortByButton'\nimport ElementToggle from '../Components/ToggleButton/ElementToggle'\nimport WeaponToggle from '../Components/ToggleButton/WeaponToggle'\nimport { getCharSheet } from '../Data/Characters'\nimport { getWeaponSheet } from '../Data/Weapons'\nimport { DatabaseContext } from '../Database/Database'\nimport useCharSelectionCallback from '../ReactHooks/useCharSelectionCallback'\nimport useDBMeta from '../ReactHooks/useDBMeta'\nimport useForceUpdate from '../ReactHooks/useForceUpdate'\nimport useMediaQueryUp from '../ReactHooks/useMediaQueryUp'\nimport { charKeyToCharName } from '../Types/consts'\nimport {\n  characterFilterConfigs,\n  characterSortConfigs,\n  characterSortMap,\n} from '../Util/CharacterSort'\nimport { filterFunction, sortFunction } from '../Util/SortByFilters'\nimport { catTotal } from '../Util/totalUtils'\nimport { clamp } from '../Util/Util'\nconst CharacterSelectionModal = React.lazy(\n  () => import('./CharacterSelectionModal')\n)\nconst columns = { xs: 1, sm: 2, md: 3, lg: 4, xl: 4 }\nconst numToShowMap = { xs: 6, sm: 8, md: 12, lg: 16, xl: 16 }\nconst sortKeys = Object.keys(characterSortMap)\n\nexport default function PageCharacter() {\n  const { t } = useTranslation([\n    'page_character',\n    'sillyWisher_charNames',\n    'charNames_gen',\n  ])\n  const { database } = useContext(DatabaseContext)\n  const [state, setState] = useState(() => database.displayCharacter.get())\n  useEffect(\n    () => database.displayCharacter.follow((r, s) => setState(s)),\n    [database, setState]\n  )\n  const [searchTerm, setSearchTerm] = useState('')\n  const deferredSearchTerm = useDeferredValue(searchTerm)\n  const invScrollRef = useRef<HTMLDivElement>(null)\n  const setPage = useCallback(\n    (_: ChangeEvent<unknown>, value: number) => {\n      invScrollRef.current?.scrollIntoView({ behavior: 'smooth' })\n      database.displayCharacter.set({ pageIndex: value - 1 })\n    },\n    [database, invScrollRef]\n  )\n\n  const brPt = useMediaQueryUp()\n  const maxNumToDisplay = numToShowMap[brPt]\n\n  const [newCharacter, setnewCharacter] = useState(false)\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  // Set follow, should run only once\n  useEffect(() => {\n    ReactGA.send({ hitType: 'pageview', page: '/characters' })\n    return database.chars.followAny(\n      (k, r) => (r === 'new' || r === 'remove') && forceUpdate()\n    )\n  }, [forceUpdate, database])\n\n  // character favorite updater\n  useEffect(\n    () => database.charMeta.followAny((_s) => forceUpdate()),\n    [forceUpdate, database]\n  )\n\n  const { gender } = useDBMeta()\n  const deleteCharacter = useCallback(\n    async (cKey: CharacterKey) => {\n      let name = getCharSheet(cKey, gender).name\n      // Use translated string\n      if (typeof name === 'object')\n        name = t(`sillyWisher_charNames:${charKeyToCharName(cKey, gender)}`)\n\n      if (!window.confirm(t('removeCharacter', { value: name }))) return\n      database.chars.remove(cKey)\n    },\n    [database, gender, t]\n  )\n\n  const editCharacter = useCharSelectionCallback()\n\n  const navigate = useNavigate()\n\n  const deferredState = useDeferredValue(state)\n  const deferredDbDirty = useDeferredValue(dbDirty)\n  const { charKeyList, totalCharNum } = useMemo(() => {\n    const chars = database.chars.keys\n    const totalCharNum = chars.length\n    const { element, weaponType, sortType, ascending } = deferredState\n    const charKeyList = database.chars.keys\n      .filter(\n        filterFunction(\n          { element, weaponType, name: deferredSearchTerm },\n          characterFilterConfigs(database)\n        )\n      )\n      .sort(\n        sortFunction(\n          characterSortMap[sortType] ?? [],\n          ascending,\n          characterSortConfigs(database),\n          ['new', 'favorite']\n        )\n      )\n    return deferredDbDirty && { charKeyList, totalCharNum }\n  }, [deferredDbDirty, database, deferredState, deferredSearchTerm])\n\n  const { weaponType, element, sortType, ascending, pageIndex = 0 } = state\n\n  const { charKeyListToShow, numPages, currentPageIndex } = useMemo(() => {\n    const numPages = Math.ceil(charKeyList.length / maxNumToDisplay)\n    const currentPageIndex = clamp(pageIndex, 0, numPages - 1)\n    return {\n      charKeyListToShow: charKeyList.slice(\n        currentPageIndex * maxNumToDisplay,\n        (currentPageIndex + 1) * maxNumToDisplay\n      ),\n      numPages,\n      currentPageIndex,\n    }\n  }, [charKeyList, pageIndex, maxNumToDisplay])\n\n  const totalShowing =\n    charKeyList.length !== totalCharNum\n      ? `${charKeyList.length}/${totalCharNum}`\n      : `${totalCharNum}`\n\n  const weaponTotals = useMemo(\n    () =>\n      catTotal(allWeaponTypeKeys, (ct) =>\n        Object.entries(database.chars.data).forEach(([ck, char]) => {\n          const weapon = database.weapons.get(char.equippedWeapon)\n          if (!weapon) return\n          const wtk = getWeaponSheet(weapon.key).weaponType\n          ct[wtk].total++\n          if (charKeyList.includes(ck)) ct[wtk].current++\n        })\n      ),\n    [database, charKeyList]\n  )\n\n  const elementTotals = useMemo(\n    () =>\n      catTotal(allElementKeys, (ct) =>\n        Object.entries(database.chars.data).forEach(([ck, char]) => {\n          const eleKey = getCharSheet(char.key, database.gender).elementKey\n          ct[eleKey].total++\n          if (charKeyList.includes(ck)) ct[eleKey].current++\n        })\n      ),\n    [database, charKeyList]\n  )\n\n  return (\n    <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n      <Suspense fallback={false}>\n        <CharacterSelectionModal\n          newFirst\n          show={newCharacter}\n          onHide={() => setnewCharacter(false)}\n          onSelect={editCharacter}\n        />\n      </Suspense>\n      <CardDark ref={invScrollRef}>\n        <CardContent sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n          <Grid container spacing={1}>\n            <Grid item>\n              <WeaponToggle\n                sx={{ height: '100%' }}\n                onChange={(weaponType) =>\n                  database.displayCharacter.set({ weaponType })\n                }\n                value={weaponType}\n                totals={weaponTotals}\n                size=\"small\"\n              />\n            </Grid>\n            <Grid item>\n              <ElementToggle\n                sx={{ height: '100%' }}\n                onChange={(element) =>\n                  database.displayCharacter.set({ element })\n                }\n                value={element}\n                totals={elementTotals}\n                size=\"small\"\n              />\n            </Grid>\n            <Grid item flexGrow={1} />\n            <Grid item>\n              <TextField\n                autoFocus\n                value={searchTerm}\n                onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>\n                  setSearchTerm(e.target.value)\n                }\n                label={t('characterName')}\n                size=\"small\"\n                sx={{ height: '100%' }}\n                InputProps={{\n                  sx: { height: '100%' },\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Box\n            display=\"flex\"\n            justifyContent=\"space-between\"\n            alignItems=\"flex-end\"\n            flexWrap=\"wrap\"\n          >\n            <Pagination\n              count={numPages}\n              page={currentPageIndex + 1}\n              onChange={setPage}\n            />\n            <ShowingCharacter\n              numShowing={charKeyListToShow.length}\n              total={totalShowing}\n              t={t}\n            />\n            <SortByButton\n              sortKeys={sortKeys}\n              value={sortType}\n              onChange={(sortType) =>\n                database.displayCharacter.set({ sortType })\n              }\n              ascending={ascending}\n              onChangeAsc={(ascending) =>\n                database.displayCharacter.set({ ascending })\n              }\n            />\n          </Box>\n        </CardContent>\n      </CardDark>\n      <Button\n        fullWidth\n        onClick={() => setnewCharacter(true)}\n        color=\"info\"\n        startIcon={<AddIcon />}\n      >{t`addNew`}</Button>\n      <Suspense\n        fallback={\n          <Skeleton\n            variant=\"rectangular\"\n            sx={{ width: '100%', height: '100%', minHeight: 5000 }}\n          />\n        }\n      >\n        <Grid container spacing={1} columns={columns}>\n          {charKeyListToShow.map((charKey) => (\n            <Grid item key={charKey} xs={1}>\n              <CharacterCard\n                characterKey={charKey}\n                onClick={() => navigate(`${charKey}`)}\n                footer={\n                  <>\n                    <Divider />\n                    <Box\n                      sx={{\n                        py: 1,\n                        px: 2,\n                        display: 'flex',\n                        gap: 1,\n                        justifyContent: 'space-between',\n                      }}\n                    >\n                      <BootstrapTooltip\n                        placement=\"top\"\n                        title={<Typography>{t('tabs.talent')}</Typography>}\n                      >\n                        <IconButton\n                          onClick={() => navigate(`${charKey}/talent`)}\n                        >\n                          <FactCheck />\n                        </IconButton>\n                      </BootstrapTooltip>\n                      <BootstrapTooltip\n                        placement=\"top\"\n                        title={<Typography>{t('tabs.teambuffs')}</Typography>}\n                      >\n                        <IconButton\n                          onClick={() => navigate(`${charKey}/teambuffs`)}\n                        >\n                          <Groups />\n                        </IconButton>\n                      </BootstrapTooltip>\n                      <BootstrapTooltip\n                        placement=\"top\"\n                        title={<Typography>{t('tabs.optimize')}</Typography>}\n                      >\n                        <IconButton\n                          onClick={() => navigate(`${charKey}/optimize`)}\n                        >\n                          <TrendingUp />\n                        </IconButton>\n                      </BootstrapTooltip>\n                      <BootstrapTooltip\n                        placement=\"top\"\n                        title={<Typography>{t('tabs.theorycraft')}</Typography>}\n                      >\n                        <IconButton\n                          onClick={() => navigate(`${charKey}/theorycraft`)}\n                        >\n                          <Science />\n                        </IconButton>\n                      </BootstrapTooltip>\n                      <Divider orientation=\"vertical\" />\n                      <BootstrapTooltip\n                        placement=\"top\"\n                        title={<Typography>{t('delete')}</Typography>}\n                      >\n                        <IconButton\n                          color=\"error\"\n                          onClick={() => deleteCharacter(charKey)}\n                        >\n                          <DeleteForever />\n                        </IconButton>\n                      </BootstrapTooltip>\n                    </Box>\n                  </>\n                }\n              />\n            </Grid>\n          ))}\n        </Grid>\n      </Suspense>\n      {numPages > 1 && (\n        <CardDark>\n          <CardContent sx={{ display: 'flex', gap: 1 }}>\n            <Button\n              onClick={() => setnewCharacter(true)}\n              color=\"info\"\n              sx={{ minWidth: 0 }}\n            >\n              <AddIcon />\n            </Button>\n            <Grid container alignItems=\"flex-end\" sx={{ flexGrow: 1 }}>\n              <Grid item flexGrow={1}>\n                <Pagination\n                  count={numPages}\n                  page={currentPageIndex + 1}\n                  onChange={setPage}\n                />\n              </Grid>\n              <Grid item>\n                <ShowingCharacter\n                  numShowing={charKeyListToShow.length}\n                  total={totalShowing}\n                  t={t}\n                />\n              </Grid>\n            </Grid>\n          </CardContent>\n        </CardDark>\n      )}\n    </Box>\n  )\n}\nfunction ShowingCharacter({ numShowing, total, t }) {\n  return (\n    <Typography color=\"text.secondary\">\n      <Trans t={t} i18nKey=\"showingNum\" count={numShowing} value={total}>\n        Showing <b>{{ count: numShowing } as TransObject}</b> out of{' '}\n        {{ value: total } as TransObject} Characters\n      </Trans>\n    </Typography>\n  )\n}\n"],"names":["CharacterSelectionModal","React","columns","xs","sm","md","lg","xl","numToShowMap","sortKeys","Object","keys","characterSortMap","PageCharacter","t","useTranslation","database","useContext","DatabaseContext","state","setState","useState","displayCharacter","get","useEffect","follow","r","s","searchTerm","setSearchTerm","deferredSearchTerm","useDeferredValue","invScrollRef","useRef","setPage","useCallback","_","value","current","scrollIntoView","behavior","set","pageIndex","brPt","useMediaQueryUp","maxNumToDisplay","newCharacter","setnewCharacter","dbDirty","forceUpdate","useForceUpdate","ReactGA","hitType","page","chars","followAny","k","charMeta","_s","gender","useDBMeta","deleteCharacter","async","name","getCharSheet","cKey","charKeyToCharName","window","confirm","remove","editCharacter","useCharSelectionCallback","navigate","useNavigate","deferredState","deferredDbDirty","charKeyList","totalCharNum","useMemo","length","element","weaponType","sortType","ascending","filter","filterFunction","characterFilterConfigs","sort","sortFunction","characterSortConfigs","charKeyListToShow","numPages","currentPageIndex","Math","ceil","clamp","slice","totalShowing","weaponTotals","catTotal","allWeaponTypeKeys","ct","entries","data","forEach","ck","char","weapon","weapons","equippedWeapon","wtk","getWeaponSheet","key","total","includes","elementTotals","allElementKeys","eleKey","elementKey","my","display","flexDirection","gap","Suspense","fallback","newFirst","show","onHide","onSelect","ref","sx","container","spacing","item","height","onChange","totals","size","flexGrow","autoFocus","e","target","label","InputProps","justifyContent","alignItems","flexWrap","count","ShowingCharacter","numShowing","onChangeAsc","fullWidth","onClick","color","startIcon","variant","width","minHeight","map","charKey","characterKey","footer","py","px","placement","title","orientation","minWidth","i18nKey"],"sourceRoot":""}