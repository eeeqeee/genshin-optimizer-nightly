{"version":3,"file":"314.d78ab5292b8ef140.js","mappings":";wFAEIA,EAAyB,EAAQ,OAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBF,EAAuB,EAAQ,QAChDG,EAAc,EAAQ,OACtBC,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,mIACD,eACJN,EAAQ,EAAUG,2ECVlB,SAAe,QAA4B,SAAK,OAAQ,CACtDG,EAAG,0IACD,6FCFJ,SAAe,QAA4B,SAAK,OAAQ,CACtDA,EAAG,mMACD,2FCFJ,SAAe,QAA4B,SAAK,OAAQ,CACtDA,EAAG,mIACD,iGCDJ,SAAe,QAA4B,SAAK,OAAQ,CACtDA,EAAG,4dACD,mFCHJ,SAAe,QAA4B,SAAK,OAAQ,CACtDA,EAAG,4kBACD,+FCDJ,SAAe,QAA4B,SAAK,OAAQ,CACtDA,EAAG,weACD,gKCHG,SAASC,EAA8BC,GAC5C,OAAO,EAAAC,EAAA,GAAqB,oBAAqBD,EACnD,CACA,MACA,GAD8B,EAAAE,EAAA,GAAuB,oBAAqB,CAAC,OAAQ,eAAgB,6CCHnG,MAAMC,EAAY,CAAC,WAAY,YAAa,yBAqBtCC,GAAqB,EAAAC,EAAA,IAAOC,EAAA,EAAY,CAC5CC,KAAM,oBACNP,KAAM,OACNQ,kBAAmB,CAACC,EAAOC,IAAWA,EAAOC,MAHpB,EAIxB,EACDC,YACI,CACJC,QAAS,QACTC,UAAW,UACXC,MAAO,OACP,CAAC,YAAY,oBAAyC,CACpDC,SAAUJ,EAAMK,MAAQL,GAAOM,QAAQC,OAAOC,aAC9C,uBAAwB,CACtBJ,QAAS,IAGb,CAAC,KAAK,mBAAuC,oBAAyC,CACpFA,SAAUJ,EAAMK,MAAQL,GAAOM,QAAQC,OAAOE,kBAG5CC,GAA+B,EAAAjB,EAAA,IAAO,OAAQ,CAClDE,KAAM,oBACNP,KAAM,iBACNQ,kBAAmB,CAACC,EAAOC,IAAWA,EAAOa,gBAHV,EAIlC,EACDX,YACI,CACJY,SAAU,SACVC,cAAe,OACfC,SAAU,WACVC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,aAAc,UACdf,QAAS,EACTgB,gBAAiB,eACjBC,WAAYrB,EAAMsB,YAAYC,OAAO,UAAW,CAC9CC,SAAUxB,EAAMsB,YAAYE,SAASC,YAsDzC,EAnDoC,cAAiB,SAAwBC,EAASC,GACpF,MAAM9B,GAAQ,EAAA+B,EAAA,GAAc,CAC1B/B,MAAO6B,EACP/B,KAAM,uBAEF,SACFkC,EAAQ,UACRC,EAAS,sBACTC,GACElC,EACJmC,GAAQ,OAA8BnC,EAAON,GACzC0C,EAAapC,EACbqC,EA/DkBD,KACxB,MAAM,QACJC,GACED,EAKJ,OAAO,EAAAE,EAAA,GAJO,CACZpC,KAAM,CAAC,QACPY,eAAgB,CAAC,mBAEUxB,EAA+B+C,EAAQ,EAuDpDE,CAAkBH,GAClC,OAAoB,UAAMzC,GAAoB,OAAS,CACrDsC,WAAW,OAAKI,EAAQnC,KAAM+B,GAC9BC,uBAAuB,OAAKA,EAAuBG,EAAQG,cAC3DV,IAAKA,EACLM,WAAYA,GACXD,EAAO,CACRH,SAAU,CAACA,GAAuB,SAAKnB,EAA8B,CACnEoB,UAAWI,EAAQvB,eACnBsB,WAAYA,OAGlB,oMCtFO,SAASK,EAAoBlD,GAClC,OAAO,EAAAC,EAAA,GAAqB,UAAWD,EACzC,CACA,MACA,GADoB,EAAAE,EAAA,GAAuB,UAAW,CAAC,OAAQ,gBAAiB,iBAAkB,kBAAmB,SAAU,0CCJxH,MAAMiD,EAAuB,CAClCC,QAAS,eACTC,YAAa,eACbC,UAAW,iBACXC,cAAe,iBACfC,MAAO,cAiBT,EAZ0B,EACxB5C,QACAiC,iBAEA,MAAMY,EAP0BC,IACzBP,EAAqBO,IAAUA,EAMbC,CAA0Bd,EAAWa,OACxDA,GAAQ,QAAQ9C,EAAO,WAAW6C,KAAoB,IAAUZ,EAAWa,MAC3EE,GAAe,QAAQhD,EAAO,WAAW6C,YAC/C,MAAI,SAAU7C,GAASgD,EACd,QAAQA,YAEV,QAAMF,EAAO,GAAI,iBCnB1B,MAAMvD,EAAY,CAAC,YAAa,QAAS,YAAa,SAAU,UAAW,oBAAqB,YAAa,UAAW,MA2BlH0D,GAAW,EAAAxD,EAAA,IAAOyD,EAAA,EAAY,CAClCvD,KAAM,UACNP,KAAM,OACNQ,kBAAmB,CAACC,EAAOC,KACzB,MAAM,WACJmC,GACEpC,EACJ,MAAO,CAACC,EAAOC,KAAMD,EAAO,aAAY,EAAAqD,EAAA,GAAWlB,EAAWmB,cAAwC,WAAzBnB,EAAWoB,WAA0BvD,EAAOwD,OAAO,GAPnH,EASd,EACDtD,QACAiC,iBAEO,OAAS,CAAC,EAA4B,SAAzBA,EAAWmB,WAAwB,CACrDG,eAAgB,QACU,UAAzBtB,EAAWmB,WAAyB,CACrCG,eAAgB,OAChB,UAAW,CACTA,eAAgB,cAEQ,WAAzBtB,EAAWmB,YAA0B,OAAS,CAC/CG,eAAgB,aACM,YAArBtB,EAAWa,OAAuB,CACnCU,oBAAqB,EAAkB,CACrCxD,QACAiC,gBAED,CACD,UAAW,CACTuB,oBAAqB,aAEI,WAAzBvB,EAAWoB,WAA0B,CACvCvC,SAAU,WACV2C,wBAAyB,cACzBrC,gBAAiB,cAGjBsC,QAAS,EACTC,OAAQ,EACRC,OAAQ,EAERzC,aAAc,EACd0C,QAAS,EAETC,OAAQ,UACRC,WAAY,OACZC,cAAe,SACfC,cAAe,OAEfC,iBAAkB,OAElB,sBAAuB,CACrBC,YAAa,QAGf,CAAC,KAAK,kBAA6B,CACjCT,QAAS,YA4Hf,EAxH0B,cAAiB,SAAchC,EAASC,GAChE,MAAM9B,GAAQ,EAAA+B,EAAA,GAAc,CAC1B/B,MAAO6B,EACP/B,KAAM,aAEF,UACFmC,EAAS,MACTgB,EAAQ,UAAS,UACjBO,EAAY,IAAG,OACfe,EAAM,QACNC,EAAO,kBACPC,EAAiB,UACjBlB,EAAY,SAAQ,QACpBmB,EAAU,UAAS,GACnBC,GACE3E,EACJmC,GAAQ,OAA8BnC,EAAON,IACzC,kBACJkF,EACAL,OAAQM,EACRL,QAASM,EACThD,IAAKiD,IACH,EAAAC,EAAA,MACGxC,EAAcyC,GAAmB,YAAe,GACjDC,GAAa,EAAAC,EAAA,GAAWrD,EAAKiD,GAmB7B3C,GAAa,OAAS,CAAC,EAAGpC,EAAO,CACrCiD,QACAO,YACAhB,eACAe,YACAmB,YAEIrC,EA1HkBD,KACxB,MAAM,QACJC,EAAO,UACPmB,EAAS,aACThB,EAAY,UACZe,GACEnB,EACEgD,EAAQ,CACZlF,KAAM,CAAC,OAAQ,aAAY,EAAAoD,EAAA,GAAWC,KAA4B,WAAdC,GAA0B,SAAUhB,GAAgB,iBAE1G,OAAO,EAAAF,EAAA,GAAe8C,EAAO3C,EAAqBJ,EAAQ,EAgH1CE,CAAkBH,GAClC,OAAoB,SAAKgB,GAAU,OAAS,CAC1CH,MAAOA,EACPhB,WAAW,OAAKI,EAAQnC,KAAM+B,GAC9BI,QAASoC,EACTjB,UAAWA,EACXe,OA/BiBc,IACjBR,EAAkBQ,IACgB,IAA9BT,EAAkBU,SACpBL,GAAgB,GAEdV,GACFA,EAAOc,EACT,EAyBAb,QAvBkBa,IAClBP,EAAmBO,IACe,IAA9BT,EAAkBU,SACpBL,GAAgB,GAEdT,GACFA,EAAQa,EACV,EAiBAvD,IAAKoD,EACL9C,WAAYA,EACZsC,QAASA,EACTC,GAAI,IAAMY,OAAOC,KAAK9C,GAAsB+C,SAASxC,GAEhD,GAFyD,CAAC,CAC7DA,aACYyC,MAAMC,QAAQhB,GAAMA,EAAK,CAACA,KACvCxC,GACL,mDCtJA,MAAMyD,EAAUC,SAASC,cAAc,KAMhC,SAASC,EAA8BC,GAC5C,MAAMC,EAAqB,IAAMD,EAAQ,IACzCJ,EAAQM,UAAYD,EACpB,MAAME,EAAOP,EAAQQ,YAUrB,OAAyC,KAArCD,EAAKE,WAAWF,EAAKG,OAAS,IAAiC,SAAVN,KAQlDG,IAASF,GAA6BE,EAC/C,0BC9BA,IAAII,EAAShB,OAAOiB,UAAUC,eAC1BC,EAAQnB,OAAOiB,UAAUG,SACzBC,EAAiBrB,OAAOqB,eACxBC,EAAOtB,OAAOuB,yBAEdnB,EAAU,SAAiBoB,GAC9B,MAA6B,mBAAlBrB,MAAMC,QACTD,MAAMC,QAAQoB,GAGK,mBAApBL,EAAMM,KAAKD,EACnB,EAEIE,EAAgB,SAAuBC,GAC1C,IAAKA,GAA2B,oBAApBR,EAAMM,KAAKE,GACtB,OAAO,EAGR,IASIC,EATAC,EAAoBb,EAAOS,KAAKE,EAAK,eACrCG,EAAmBH,EAAII,aAAeJ,EAAII,YAAYd,WAAaD,EAAOS,KAAKE,EAAII,YAAYd,UAAW,iBAE9G,GAAIU,EAAII,cAAgBF,IAAsBC,EAC7C,OAAO,EAMR,IAAKF,KAAOD,GAEZ,YAAsB,IAARC,GAAuBZ,EAAOS,KAAKE,EAAKC,EACvD,EAGII,EAAc,SAAqBC,EAAQC,GAC1Cb,GAAmC,cAAjBa,EAAQ3H,KAC7B8G,EAAeY,EAAQC,EAAQ3H,KAAM,CACpC4H,YAAY,EACZC,cAAc,EACd3B,MAAOyB,EAAQG,SACfC,UAAU,IAGXL,EAAOC,EAAQ3H,MAAQ2H,EAAQG,QAEjC,EAGIE,EAAc,SAAqBZ,EAAKpH,GAC3C,GAAa,cAATA,EAAsB,CACzB,IAAKyG,EAAOS,KAAKE,EAAKpH,GACrB,OACM,GAAI+G,EAGV,OAAOA,EAAKK,EAAKpH,GAAMkG,KAEzB,CAEA,OAAOkB,EAAIpH,EACZ,EAEAiI,EAAOhJ,QAAU,SAASiJ,IACzB,IAAIP,EAAS3H,EAAMmI,EAAKC,EAAMC,EAAaC,EACvCZ,EAASa,UAAU,GACnBC,EAAI,EACJhC,EAAS+B,UAAU/B,OACnBiC,GAAO,EAaX,IAVsB,kBAAXf,IACVe,EAAOf,EACPA,EAASa,UAAU,IAAM,CAAC,EAE1BC,EAAI,IAES,MAAVd,GAAqC,iBAAXA,GAAyC,mBAAXA,KAC3DA,EAAS,CAAC,GAGJc,EAAIhC,IAAUgC,EAGpB,GAAe,OAFfb,EAAUY,UAAUC,IAInB,IAAKxI,KAAQ2H,EACZQ,EAAMH,EAAYN,EAAQ1H,GAItB0H,KAHJU,EAAOJ,EAAYL,EAAS3H,MAKvByI,GAAQL,IAASjB,EAAciB,KAAUC,EAAcxC,EAAQuC,MAC9DC,GACHA,GAAc,EACdC,EAAQH,GAAOtC,EAAQsC,GAAOA,EAAM,IAEpCG,EAAQH,GAAOhB,EAAcgB,GAAOA,EAAM,CAAC,EAI5CV,EAAYC,EAAQ,CAAE1H,KAAMA,EAAM8H,SAAUI,EAAOO,EAAMH,EAAOF,WAGtC,IAATA,GACjBX,EAAYC,EAAQ,CAAE1H,KAAMA,EAAM8H,SAAUM,KAQjD,OAAOV,CACR,aClHA,IAAIgB,EAAgB,kCAEhBC,EAAgB,MAChBC,EAAmB,OAGnBC,EAAiB,yCACjBC,EAAc,QACdC,EAAc,uDACdC,EAAkB,UAGlBC,EAAa,aAMbC,EAAe,GA8OnB,SAASC,EAAKC,GACZ,OAAOA,EAAMA,EAAIC,QAAQJ,EAAYC,GAAgBA,CACvD,CAnOAjB,EAAOhJ,QAAU,SAASqK,EAAO3B,GAC/B,GAAqB,iBAAV2B,EACT,MAAM,IAAIC,UAAU,mCAGtB,IAAKD,EAAO,MAAO,GAEnB3B,EAAUA,GAAW,CAAC,EAKtB,IAAI6B,EAAS,EACTC,EAAS,EAOb,SAASC,EAAeN,GACtB,IAAIO,EAAQP,EAAIQ,MAAMjB,GAClBgB,IAAOH,GAAUG,EAAMnD,QAC3B,IAAIgC,EAAIY,EAAIS,YAvCF,MAwCVJ,GAAUjB,EAAIY,EAAI5C,OAASgC,EAAIiB,EAASL,EAAI5C,MAC9C,CAOA,SAASrF,IACP,IAAI2I,EAAQ,CAAEC,KAAMP,EAAQC,OAAQA,GACpC,OAAO,SAASO,GAGd,OAFAA,EAAK7I,SAAW,IAAI8I,EAASH,GAC7BI,IACOF,CACT,CACF,CAUA,SAASC,EAASH,GAChBK,KAAKL,MAAQA,EACbK,KAAKC,IAAM,CAAEL,KAAMP,EAAQC,OAAQA,GACnCU,KAAKE,OAAS1C,EAAQ0C,MACxB,CAKAJ,EAASvD,UAAU4D,QAAUhB,EAE7B,IAAIiB,EAAa,GAQjB,SAAStH,EAAMuH,GACb,IAAIC,EAAM,IAAIC,MACZ/C,EAAQ0C,OAAS,IAAMb,EAAS,IAAMC,EAAS,KAAOe,GAQxD,GANAC,EAAIE,OAASH,EACbC,EAAIG,SAAWjD,EAAQ0C,OACvBI,EAAIV,KAAOP,EACXiB,EAAIhB,OAASA,EACbgB,EAAIJ,OAASf,GAET3B,EAAQkD,OAGV,MAAMJ,EAFNF,EAAWO,KAAKL,EAIpB,CAQA,SAASb,EAAMmB,GACb,IAAIC,EAAID,EAAGE,KAAK3B,GAChB,GAAK0B,EAAL,CACA,IAAI5B,EAAM4B,EAAE,GAGZ,OAFAtB,EAAeN,GACfE,EAAQA,EAAM4B,MAAM9B,EAAI5C,QACjBwE,CAJO,CAKhB,CAKA,SAASd,IACPN,EAAMhB,EACR,CAQA,SAASuC,EAASC,GAChB,IAAIC,EAEJ,IADAD,EAAQA,GAAS,GACTC,EAAIC,MACA,IAAND,GACFD,EAAMN,KAAKO,GAGf,OAAOD,CACT,CAQA,SAASE,IACP,IAAIC,EAAMpK,IACV,GAnJgB,KAmJKmI,EAAMkC,OAAO,IAlJvB,KAkJyClC,EAAMkC,OAAO,GAAjE,CAGA,IADA,IAAIhD,EAAI,EAENU,GAAgBI,EAAMkC,OAAOhD,KAtJpB,KAuJIc,EAAMkC,OAAOhD,IAxJZ,KAwJmCc,EAAMkC,OAAOhD,EAAI,OAEhEA,EAIJ,GAFAA,GAAK,EAEDU,IAAiBI,EAAMkC,OAAOhD,EAAI,GACpC,OAAOvF,EAAM,0BAGf,IAAImG,EAAME,EAAM4B,MAAM,EAAG1C,EAAI,GAM7B,OALAiB,GAAU,EACVC,EAAeN,GACfE,EAAQA,EAAM4B,MAAM1C,GACpBiB,GAAU,EAEH8B,EAAI,CACTE,KApKa,UAqKbH,QAASlC,GAvBgE,CAyB7E,CAQA,SAASsC,IACP,IAAIH,EAAMpK,IAGNwK,EAAO/B,EAAMf,GACjB,GAAK8C,EAAL,CAIA,GAHAL,KAGK1B,EAAMd,GAAc,OAAO7F,EAAM,wBAGtC,IAAI2I,EAAMhC,EAAMb,GAEZ8C,EAAMN,EAAI,CACZE,KA7LiB,cA8LjBK,SAAU3C,EAAKwC,EAAK,GAAGtC,QAAQX,EAAeQ,IAC9ChD,MAAO0F,EACHzC,EAAKyC,EAAI,GAAGvC,QAAQX,EAAeQ,IACnCA,IAMN,OAFAU,EAAMZ,GAEC6C,CApBU,CAqBnB,CAyBA,OADA3B,IAjBA,WACE,IAKI6B,EALAC,EAAQ,GAMZ,IAJAb,EAASa,GAIDD,EAAOL,MACA,IAATK,IACFC,EAAMlB,KAAKiB,GACXZ,EAASa,IAIb,OAAOA,CACT,CAGOC,EACT,aCnPAhE,EAAOhJ,QAAU,SAAmBmI,GAClC,OAAc,MAAPA,GAAkC,MAAnBA,EAAII,aACY,mBAA7BJ,EAAII,YAAY0E,UAA2B9E,EAAII,YAAY0E,SAAS9E,EAC/E,2ECDO,MAAM+E,EAAY,CACvBC,SAKF,SAA2BC,EAASC,EAAIC,GACtC,OAAO,IAAAC,GAAaH,GAGpB,SAAyBI,GACvB,OAAgB,OAATA,IAAiB,QAAmBA,GAAQH,EAAGG,GAAQF,EAAIE,EACpE,GAL8C,aAMhD,EAXEC,SAAS,iECEJ,SAASC,EAAaN,EAASC,EAAIb,EAAMmB,GAC9C,MAAMC,EAAQD,EAAMA,EAAM,EAAIE,OAAOC,kBACrC,IAAIC,EAAO,EACX,OAGA,SAAeP,GACb,IAAI,QAAcA,GAEhB,OADAJ,EAAQY,MAAMxB,GACPyB,EAAOT,GAGhB,OAAOH,EAAGG,EACZ,EAGA,SAASS,EAAOT,GACd,OAAI,QAAcA,IAASO,IAASH,GAClCR,EAAQc,QAAQV,GACTS,IAGTb,EAAQe,KAAK3B,GACNa,EAAGG,GACZ,CACF,qJChCO,MCWMY,EAAaC,EAAW,YAQxBC,EAAaD,EAAW,MAexBE,EAAgBF,EAAW,cAS3BG,EAAoBH,EAAW,cAU/BI,EAAmBJ,EAAW,kBAkB9BK,EAAaL,EAAW,uBAW9B,SAASM,EAAanB,GAC3B,OAGW,OAATA,IAAkBA,EAAO,IAAe,MAATA,EAEnC,CASO,SAASoB,EAA0BpB,GACxC,OAAgB,OAATA,IAAkBA,EAAO,GAAc,KAATA,EACvC,CAeO,SAASqB,EAAmBrB,GACjC,OAAgB,OAATA,GAAiBA,GAAQ,CAClC,CAeO,SAASsB,EAActB,GAC5B,OAAiB,IAAVA,IAAyB,IAAVA,GAAwB,KAATA,CACvC,CAiBO,MAAMuB,EAAoBV,EAAW,MAkB/BW,EAAqBX,EDvKhC,+vCC+KF,SAASA,EAAWY,GAClB,OAQA,SAAezB,GACb,OAAgB,OAATA,GAAiByB,EAAMC,KAAKC,OAAOC,aAAa5B,GACzD,CACF,gCClLO,SAAS6B,EAAOC,EAAMzE,EAAO0E,EAAQC,GAC1C,MAAMrE,EAAMmE,EAAK/H,OACjB,IAGIkI,EAHAC,EAAa,EAajB,GAPE7E,EADEA,EAAQ,GACDA,EAAQM,EAAM,EAAIA,EAAMN,EAEzBA,EAAQM,EAAMA,EAAMN,EAG9B0E,EAASA,EAAS,EAAIA,EAAS,EAE3BC,EAAMjI,OAAS,IACjBkI,EAAa9I,MAAMgJ,KAAKH,GACxBC,EAAWG,QAAQ/E,EAAO0E,GACzB,GAAGF,OAAOQ,MAAMP,EAAMG,QAKvB,IAFIF,GAAQ,GAAGF,OAAOQ,MAAMP,EAAM,CAACzE,EAAO0E,IAEnCG,EAAaF,EAAMjI,QACxBkI,EAAaD,EAAMvD,MAAMyD,EAAYA,EAAa,KAClDD,EAAWG,QAAQ/E,EAAO,GACzB,GAAGwE,OAAOQ,MAAMP,EAAMG,GACvBC,GAAc,IACd7E,GAAS,GAGf,CAcO,SAASgB,EAAKyD,EAAME,GACzB,OAAIF,EAAK/H,OAAS,GAChB8H,EAAOC,EAAMA,EAAK/H,OAAQ,EAAGiI,GACtBF,GAGFE,CACT,uFC/CO,SAASM,EAAkBtC,GAChC,OACW,OAATA,IACA,QAA0BA,KAC1B,QAAkBA,GAEX,GAGL,QAAmBA,GACd,OADT,CAGF,gECxBA,MAAM9F,EAAiB,CAAC,EAAEA,eAQnB,SAASqI,EAAkBC,GAEhC,MAAMC,EAAM,CAAC,EACb,IAAIC,GAAS,EAEb,OAASA,EAAQF,EAAWzI,QAC1B4I,EAAgBF,EAAKD,EAAWE,IAGlC,OAAOD,CACT,CASA,SAASE,EAAgBF,EAAKG,GAE5B,IAAIC,EAEJ,IAAKA,KAAQD,EAAW,CACtB,MACM9N,GADQoF,EAAeO,KAAKgI,EAAKI,GAAQJ,EAAII,QAAQC,KACpCL,EAAII,GAAQ,CAAC,GAC9BjO,EAAQgO,EAAUC,GAExB,IAAI7C,EAEJ,IAAKA,KAAQpL,EAAO,CACbsF,EAAeO,KAAK3F,EAAMkL,KAAOlL,EAAKkL,GAAQ,IACnD,MAAMvG,EAAQ7E,EAAMoL,GACpB+C,EAEEjO,EAAKkL,GACL7G,MAAMC,QAAQK,GAASA,EAAQA,EAAQ,CAACA,GAAS,GAErD,CACF,CACF,CAUA,SAASsJ,EAAWC,EAAUlB,GAC5B,IAAIY,GAAS,EAEb,MAAMO,EAAS,GAEf,OAASP,EAAQZ,EAAK/H,SAEE,UAApB+H,EAAKY,GAAOQ,IAAkBF,EAAWC,GAAQ5E,KAAKyD,EAAKY,KAG/D,OAAOM,EAAU,EAAG,EAAGC,EACzB,gCCpEO,SAASE,EAAgC1J,EAAO2J,GACrD,MAAMpD,EAAOK,OAAOgD,SAAS5J,EAAO2J,GAEpC,OAEEpD,EAAO,GACE,KAATA,GACCA,EAAO,IAAMA,EAAO,IACpBA,EAAO,KAAOA,EAAO,KACrBA,EAAO,OAASA,EAAO,OACvBA,EAAO,OAASA,EAAO,OACL,QAAX,MAAPA,IACkB,QAAX,MAAPA,IACDA,EAAO,QAEA,IAGF2B,OAAOC,aAAa5B,EAC7B,2FC3BA,MAAMsD,EACJ,oEAWK,SAASC,EAAa9J,GAC3B,OAAOA,EAAMmD,QAAQ0G,EAA4BE,EACnD,CAQA,SAASA,EAAOC,EAAIC,EAAIC,GACtB,GAAID,EAEF,OAAOA,EAKT,GAAa,KAFAC,EAAG7J,WAAW,GAEV,CACf,MAAM8J,EAAOD,EAAG7J,WAAW,GACrB+J,EAAe,MAATD,GAAyB,KAATA,EAC5B,OAAO,OAAgCD,EAAGlF,MAAMoF,EAAM,EAAI,GAAIA,EAAM,GAAK,GAC3E,CAEA,OAAO,OAA8BF,IAAOF,CAC9C,gCCjCO,SAASK,EAAoBrK,GAClC,OACEA,EACGmD,QAAQ,cAAe,KACvBA,QAAQ,SAAU,IAMlBmH,cACAC,aAEP,gDCLO,SAASC,EAAWlB,EAAYmB,EAAQC,GAE7C,MAAMC,EAAS,GACf,IAAI1B,GAAS,EAEb,OAASA,EAAQK,EAAWhJ,QAAQ,CAClC,MAAMsK,EAAUtB,EAAWL,GAAOuB,WAE9BI,IAAYD,EAAOlL,SAASmL,KAC9BH,EAASG,EAAQH,EAAQC,GACzBC,EAAO/F,KAAKgG,GAEhB,CAEA,OAAOH,CACT,gcCOO,SAASI,EAAkB7K,GAEhC,OAAKA,GAA0B,iBAAVA,EAKjB,aAAcA,GAAS,SAAUA,EAC5B/E,EAAS+E,EAAM/E,UAIpB,UAAW+E,GAAS,QAASA,EACxB/E,EAAS+E,GAId,SAAUA,GAAS,WAAYA,EAC1B8K,EAAM9K,GAIR,GAnBE,EAoBX,CAMA,SAAS8K,EAAMA,GACb,OAAO7B,EAAM6B,GAASA,EAAMjH,MAAQ,IAAMoF,EAAM6B,GAASA,EAAMvH,OACjE,CAMA,SAAStI,EAASoK,GAChB,OAAOyF,EAAMzF,GAAOA,EAAIzB,OAAS,IAAMkH,EAAMzF,GAAOA,EAAInB,IAC1D,CAMA,SAAS+E,EAAMjJ,GACb,OAAOA,GAA0B,iBAAVA,EAAqBA,EAAQ,CACtD,CCvEO,MAAM+K,UAAqBvG,MAmBhClD,YAAYmD,EAAQuG,EAAOC,GAEzB,MAAMC,EAAQ,CAAC,KAAM,MAErB,IAAIjQ,EAAW,CAEb2I,MAAO,CAACC,KAAM,KAAMN,OAAQ,MAE5BW,IAAK,CAACL,KAAM,KAAMN,OAAQ,OAU5B,GAPA4H,QAEqB,iBAAVH,IACTC,EAASD,EACTA,OAAQ3B,GAGY,iBAAX4B,EAAqB,CAC9B,MAAMhC,EAAQgC,EAAOG,QAAQ,MAEd,IAAXnC,EACFiC,EAAM,GAAKD,GAEXC,EAAM,GAAKD,EAAOjG,MAAM,EAAGiE,GAC3BiC,EAAM,GAAKD,EAAOjG,MAAMiE,EAAQ,GAEpC,CAEI+B,IAEE,SAAUA,GAAS,aAAcA,EAC/BA,EAAM/P,WAGRA,EAAW+P,EAAM/P,UAIZ,UAAW+P,GAAS,QAASA,EAGpC/P,EAAW+P,GAGJ,SAAUA,GAAS,WAAYA,KAEtC/P,EAAS2I,MAAQoH,IAWrB/G,KAAKnK,KAAO+Q,EAAkBG,IAAU,MAOxC/G,KAAKoH,QAA4B,iBAAX5G,EAAsBA,EAAO4G,QAAU5G,EAU7DR,KAAKqH,MAAQ,GAES,iBAAX7G,GAAuBA,EAAO6G,QACvCrH,KAAKqH,MAAQ7G,EAAO6G,OAUtBrH,KAAKQ,OAASR,KAAKoH,QAYnBpH,KAAKsH,MAOLtH,KAAKJ,KAAO5I,EAAS2I,MAAMC,KAO3BI,KAAKV,OAAStI,EAAS2I,MAAML,OAO7BU,KAAKhJ,SAAWA,EAOhBgJ,KAAKE,OAAS+G,EAAM,GAOpBjH,KAAKuH,OAASN,EAAM,GAOpBjH,KAAKwH,KAYLxH,KAAKyH,OAOLzH,KAAK0H,SAUL1H,KAAK2H,IAOL3H,KAAK4H,IAEP,EAGFd,EAAavK,UAAUiL,KAAO,GAC9BV,EAAavK,UAAU1G,KAAO,GAC9BiR,EAAavK,UAAUiE,OAAS,GAChCsG,EAAavK,UAAU6K,QAAU,GACjCN,EAAavK,UAAU8K,MAAQ,GAC/BP,EAAavK,UAAU+K,MAAQ,KAC/BR,EAAavK,UAAU+C,OAAS,KAChCwH,EAAavK,UAAUqD,KAAO,KAC9BkH,EAAavK,UAAU2D,OAAS,KAChC4G,EAAavK,UAAUgL,OAAS,KAChCT,EAAavK,UAAUvF,SAAW,KC7K3B,MAAM6Q,EAAO,CAACC,SAcrB,SAAkBD,EAAME,GACtB,QAAY3C,IAAR2C,GAAoC,iBAARA,EAC9B,MAAM,IAAI3I,UAAU,mCAGtB4I,EAAWH,GACX,IAIII,EAJAtI,EAAQ,EACRM,GAAO,EACP+E,EAAQ6C,EAAKxL,OAIjB,QAAY+I,IAAR2C,GAAoC,IAAfA,EAAI1L,QAAgB0L,EAAI1L,OAASwL,EAAKxL,OAAQ,CACrE,KAAO2I,KACL,GAA+B,KAA3B6C,EAAKzL,WAAW4I,IAGlB,GAAIiD,EAAc,CAChBtI,EAAQqF,EAAQ,EAChB,KACF,OACS/E,EAAM,IAGfgI,GAAe,EACfhI,EAAM+E,EAAQ,GAIlB,OAAO/E,EAAM,EAAI,GAAK4H,EAAK9G,MAAMpB,EAAOM,EAC1C,CAEA,GAAI8H,IAAQF,EACV,MAAO,GAGT,IAAIK,GAAoB,EACpBC,EAAWJ,EAAI1L,OAAS,EAE5B,KAAO2I,KACL,GAA+B,KAA3B6C,EAAKzL,WAAW4I,IAGlB,GAAIiD,EAAc,CAChBtI,EAAQqF,EAAQ,EAChB,KACF,OAEIkD,EAAmB,IAGrBD,GAAe,EACfC,EAAmBlD,EAAQ,GAGzBmD,GAAY,IAEVN,EAAKzL,WAAW4I,KAAW+C,EAAI3L,WAAW+L,KACxCA,EAAW,IAGblI,EAAM+E,IAKRmD,GAAY,EACZlI,EAAMiI,IAMVvI,IAAUM,EACZA,EAAMiI,EACGjI,EAAM,IACfA,EAAM4H,EAAKxL,QAGb,OAAOwL,EAAK9G,MAAMpB,EAAOM,EAC3B,EA9F+BmI,QAwG/B,SAAiBP,GAGf,GAFAG,EAAWH,GAES,IAAhBA,EAAKxL,OACP,MAAO,IAGT,IAGIgM,EAHApI,GAAO,EACP+E,EAAQ6C,EAAKxL,OAKjB,OAAS2I,GACP,GAA+B,KAA3B6C,EAAKzL,WAAW4I,IAClB,GAAIqD,EAAgB,CAClBpI,EAAM+E,EACN,KACF,OACUqD,IAEVA,GAAiB,GAIrB,OAAOpI,EAAM,EACc,KAAvB4H,EAAKzL,WAAW,GACd,IACA,IACM,IAAR6D,GAAoC,KAAvB4H,EAAKzL,WAAW,GAC7B,KACAyL,EAAK9G,MAAM,EAAGd,EACpB,EAxIwCqI,QAkJxC,SAAiBT,GACfG,EAAWH,GAEX,IASIQ,EATArD,EAAQ6C,EAAKxL,OAEb4D,GAAO,EACPsI,EAAY,EACZC,GAAY,EAGZC,EAAc,EAIlB,KAAOzD,KAAS,CACd,MAAM1C,EAAOuF,EAAKzL,WAAW4I,GAE7B,GAAa,KAAT1C,EAWArC,EAAM,IAGRoI,GAAiB,EACjBpI,EAAM+E,EAAQ,GAGH,KAAT1C,EAEEkG,EAAW,EACbA,EAAWxD,EACc,IAAhByD,IACTA,EAAc,GAEPD,GAAY,IAGrBC,GAAe,QAzBf,GAAIJ,EAAgB,CAClBE,EAAYvD,EAAQ,EACpB,KACF,CAwBJ,CAEA,GACEwD,EAAW,GACXvI,EAAM,GAEU,IAAhBwI,GAEiB,IAAhBA,GAAqBD,IAAavI,EAAM,GAAKuI,IAAaD,EAAY,EAEvE,MAAO,GAGT,OAAOV,EAAK9G,MAAMyH,EAAUvI,EAC9B,EA/MiDyI,KAyNjD,YAAiBC,GACf,IAEIC,EAFA5D,GAAS,EAIb,OAASA,EAAQ2D,EAAStM,QACxB2L,EAAWW,EAAS3D,IAEhB2D,EAAS3D,KACX4D,OACaxD,IAAXwD,EAAuBD,EAAS3D,GAAS4D,EAAS,IAAMD,EAAS3D,IAIvE,YAAkBI,IAAXwD,EAAuB,IAahC,SAAmBf,GACjBG,EAAWH,GAEX,MAAMgB,EAAkC,KAAvBhB,EAAKzL,WAAW,GAGjC,IAAIL,EAuBN,SAAyB8L,EAAMiB,GAC7B,IAMIxG,EAEAyG,EARAC,EAAS,GACTC,EAAoB,EACpBC,GAAa,EACbC,EAAO,EACPnE,GAAS,EAMb,OAASA,GAAS6C,EAAKxL,QAAQ,CAC7B,GAAI2I,EAAQ6C,EAAKxL,OACfiG,EAAOuF,EAAKzL,WAAW4I,OAClB,IAAa,KAAT1C,EACT,MAEAA,EAAO,EACT,CAEA,GAAa,KAATA,EAAuB,CACzB,GAAI4G,IAAclE,EAAQ,GAAc,IAATmE,QAExB,GAAID,IAAclE,EAAQ,GAAc,IAATmE,EAAY,CAChD,GACEH,EAAO3M,OAAS,GACM,IAAtB4M,GACyC,KAAzCD,EAAO5M,WAAW4M,EAAO3M,OAAS,IACO,KAAzC2M,EAAO5M,WAAW4M,EAAO3M,OAAS,GAElC,GAAI2M,EAAO3M,OAAS,GAGlB,GAFA0M,EAAiBC,EAAOtJ,YAAY,KAEhCqJ,IAAmBC,EAAO3M,OAAS,EAAG,CACpC0M,EAAiB,GACnBC,EAAS,GACTC,EAAoB,IAEpBD,EAASA,EAAOjI,MAAM,EAAGgI,GACzBE,EAAoBD,EAAO3M,OAAS,EAAI2M,EAAOtJ,YAAY,MAG7DwJ,EAAYlE,EACZmE,EAAO,EACP,QACF,OACK,GAAIH,EAAO3M,OAAS,EAAG,CAC5B2M,EAAS,GACTC,EAAoB,EACpBC,EAAYlE,EACZmE,EAAO,EACP,QACF,CAGEL,IACFE,EAASA,EAAO3M,OAAS,EAAI2M,EAAS,MAAQ,KAC9CC,EAAoB,EAExB,MACMD,EAAO3M,OAAS,EAClB2M,GAAU,IAAMnB,EAAK9G,MAAMmI,EAAY,EAAGlE,GAE1CgE,EAASnB,EAAK9G,MAAMmI,EAAY,EAAGlE,GAGrCiE,EAAoBjE,EAAQkE,EAAY,EAG1CA,EAAYlE,EACZmE,EAAO,CACT,MAAoB,KAAT7G,GAAyB6G,GAAQ,EAC1CA,IAEAA,GAAQ,CAEZ,CAEA,OAAOH,CACT,CAtGcI,CAAgBvB,GAAOgB,GAEd,IAAjB9M,EAAMM,QAAiBwM,IACzB9M,EAAQ,KAGNA,EAAMM,OAAS,GAA0C,KAArCwL,EAAKzL,WAAWyL,EAAKxL,OAAS,KACpDN,GAAS,KAGX,OAAO8M,EAAW,IAAM9M,EAAQA,CAClC,CA9BsCsN,CAAUT,EAChD,EAxOuDU,IAAK,KA0W5D,SAAStB,EAAWH,GAClB,GAAoB,iBAATA,EACT,MAAM,IAAIzI,UACR,mCAAqCmK,KAAKC,UAAU3B,GAG1D,CChaO,MAAM4B,EAAO,CAACC,IAErB,WACE,MAAO,GACT,GCoBO,SAASC,EAAMC,GACpB,OACoB,OAAlBA,GACyB,iBAAlBA,GAEPA,EAAcC,MAEdD,EAAc5C,MAElB,CCxBO,SAAS8C,EAAUjC,GACxB,GAAoB,iBAATA,EACTA,EAAO,IAAIkC,IAAIlC,QACV,IAAK8B,EAAM9B,GAAO,CAEvB,MAAM/O,EAAQ,IAAIsG,UAChB,+EACEyI,EACA,KAGJ,MADA/O,EAAMwJ,KAAO,uBACPxJ,CACR,CAEA,GAAsB,UAAlB+O,EAAKmC,SAAsB,CAE7B,MAAMlR,EAAQ,IAAIsG,UAAU,kCAE5B,MADAtG,EAAMwJ,KAAO,yBACPxJ,CACR,CAEA,OAWF,SAA6B6O,GAC3B,GAAqB,KAAjBA,EAAIsC,SAAiB,CAEvB,MAAMnR,EAAQ,IAAIsG,UAChB,wDAGF,MADAtG,EAAMwJ,KAAO,4BACPxJ,CACR,CAEA,MAAMoR,EAAWvC,EAAIuC,SACrB,IAAIlF,GAAS,EAEb,OAASA,EAAQkF,EAAS7N,QACxB,GACiC,KAA/B6N,EAAS9N,WAAW4I,IACe,KAAnCkF,EAAS9N,WAAW4I,EAAQ,GAC5B,CACA,MAAMmF,EAAQD,EAAS9N,WAAW4I,EAAQ,GAC1C,GAAc,KAAVmF,GAAoC,MAAVA,EAAyB,CAErD,MAAMrR,EAAQ,IAAIsG,UAChB,uDAGF,MADAtG,EAAMwJ,KAAO,4BACPxJ,CACR,CACF,CAGF,OAAOsR,mBAAmBF,EAC5B,CA1CSG,CAAoBxC,EAC7B,CCgEA,MAAMyC,EAAQ,CAAC,UAAW,OAAQ,WAAY,OAAQ,UAAW,WAE1D,MAAMC,EAuBXlN,YAAYtB,GAEV,IAAIyB,EAKFA,EAHGzB,EAEuB,iBAAVA,GAoYtB,SAAgBA,GACd,OAAO,IAAWA,EACpB,CAtY4CyO,CAAOzO,GACnC,CAACA,SACF4N,EAAM5N,GACL,CAAC8L,KAAM9L,GAEPA,EANA,CAAC,EAiBbiE,KAAKyK,KAAO,CAAC,EAObzK,KAAK0K,SAAW,GAShB1K,KAAK2K,QAAU,GAOf3K,KAAK0J,IAAMD,EAAKC,MAQhB1J,KAAKjE,MAYLiE,KAAK4K,OAUL5K,KAAKgJ,OAULhJ,KAAK6K,IAIL,IAkBIrJ,EAlBAwD,GAAS,EAEb,OAASA,EAAQsF,EAAMjO,QAAQ,CAC7B,MAAMmF,EAAO8I,EAAMtF,GAKjBxD,KAAQhE,QACU4H,IAAlB5H,EAAQgE,IACU,OAAlBhE,EAAQgE,KAGRxB,KAAKwB,GAAiB,YAATA,EAAqB,IAAIhE,EAAQgE,IAAShE,EAAQgE,GAEnE,CAMA,IAAKA,KAAQhE,EAEN8M,EAAM9O,SAASgG,KAElBxB,KAAKwB,GAAQhE,EAAQgE,GAG3B,CAOIqG,WACF,OAAO7H,KAAK2K,QAAQ3K,KAAK2K,QAAQtO,OAAS,EAC5C,CAWIwL,SAAKA,GACH8B,EAAM9B,KACRA,EAAOiC,EAAUjC,IAGnBiD,EAAejD,EAAM,QAEjB7H,KAAK6H,OAASA,GAChB7H,KAAK2K,QAAQhK,KAAKkH,EAEtB,CAKIO,cACF,MAA4B,iBAAdpI,KAAK6H,KAAoBA,EAAKO,QAAQpI,KAAK6H,WAAQzC,CACnE,CAOIgD,YAAQA,GACV,EAAWpI,KAAK8H,SAAU,WAC1B9H,KAAK6H,KAAOA,EAAKa,KAAKN,GAAW,GAAIpI,KAAK8H,SAC5C,CAKIA,eACF,MAA4B,iBAAd9H,KAAK6H,KAAoBA,EAAKC,SAAS9H,KAAK6H,WAAQzC,CACpE,CASI0C,aAASA,GACXgD,EAAehD,EAAU,YACzBiD,EAAWjD,EAAU,YACrB9H,KAAK6H,KAAOA,EAAKa,KAAK1I,KAAKoI,SAAW,GAAIN,EAC5C,CAKIQ,cACF,MAA4B,iBAAdtI,KAAK6H,KAAoBA,EAAKS,QAAQtI,KAAK6H,WAAQzC,CACnE,CASIkD,YAAQA,GAIV,GAHAyC,EAAWzC,EAAS,WACpB,EAAWtI,KAAKoI,QAAS,WAErBE,EAAS,CACX,GAA8B,KAA1BA,EAAQlM,WAAW,GACrB,MAAM,IAAImE,MAAM,iCAGlB,GAAI+H,EAAQ9M,SAAS,IAAK,GACxB,MAAM,IAAI+E,MAAM,yCAEpB,CAEAP,KAAK6H,KAAOA,EAAKa,KAAK1I,KAAKoI,QAASpI,KAAKgL,MAAQ1C,GAAW,IAC9D,CAKI0C,WACF,MAA4B,iBAAdhL,KAAK6H,KACfA,EAAKC,SAAS9H,KAAK6H,KAAM7H,KAAKsI,cAC9BlD,CACN,CASI4F,SAAKA,GACPF,EAAeE,EAAM,QACrBD,EAAWC,EAAM,QACjBhL,KAAK6H,KAAOA,EAAKa,KAAK1I,KAAKoI,SAAW,GAAI4C,GAAQhL,KAAKsI,SAAW,IACpE,CAWA5L,SAASuO,GACP,OAAQjL,KAAKjE,OAAS,IAAIW,SAASuO,QAAY7F,EACjD,CAkBAgC,QAAQ5G,EAAQuG,EAAOC,GACrB,MAAMI,EAAU,IAAIN,EAAatG,EAAQuG,EAAOC,GAWhD,OATIhH,KAAK6H,OACPT,EAAQvR,KAAOmK,KAAK6H,KAAO,IAAMT,EAAQvR,KACzCuR,EAAQI,KAAOxH,KAAK6H,MAGtBT,EAAQE,OAAQ,EAEhBtH,KAAK0K,SAAS/J,KAAKyG,GAEZA,CACT,CAkBA8D,KAAK1K,EAAQuG,EAAOC,GAClB,MAAMI,EAAUpH,KAAKoH,QAAQ5G,EAAQuG,EAAOC,GAI5C,OAFAI,EAAQE,MAAQ,KAETF,CACT,CAsBA+D,KAAK3K,EAAQuG,EAAOC,GAClB,MAAMI,EAAUpH,KAAKoH,QAAQ5G,EAAQuG,EAAOC,GAI5C,MAFAI,EAAQE,OAAQ,EAEVF,CACR,EAaF,SAAS2D,EAAWK,EAAMvV,GACxB,GAAIuV,GAAQA,EAAK5P,SAASqM,EAAKyB,KAC7B,MAAM,IAAI/I,MACR,IAAM1K,EAAO,uCAAyCgS,EAAKyB,IAAM,IAGvE,CAYA,SAASwB,EAAeM,EAAMvV,GAC5B,IAAKuV,EACH,MAAM,IAAI7K,MAAM,IAAM1K,EAAO,oBAEjC,CAYA,SAAS,EAAWgS,EAAMhS,GACxB,IAAKgS,EACH,MAAM,IAAItH,MAAM,YAAc1K,EAAO,kCAEzC,CCpfO,SAASwV,EAAKvS,GACnB,GAAIA,EACF,MAAMA,CAEV,yBCXe,SAASkE,EAAcjB,GACrC,GAAqB,iBAAVA,GAAgC,OAAVA,EAChC,OAAO,EAGR,MAAMQ,EAAYjB,OAAOgQ,eAAevP,GACxC,QAAsB,OAAdQ,GAAsBA,IAAcjB,OAAOiB,WAAkD,OAArCjB,OAAOgQ,eAAe/O,IAA0BgP,OAAOC,eAAezP,GAAYwP,OAAOE,YAAY1P,EACtK,CCUO,SAAS2P,IAEd,MAAMC,EAAM,GAENC,EAAW,CAACC,IAKlB,YAAgBC,GACd,IAAIC,GAAmB,EAEvB,MAAMC,EAAWF,EAAOG,MAExB,GAAwB,mBAAbD,EACT,MAAM,IAAI5M,UAAU,2CAA6C4M,IAWnE,SAASE,EAAKpT,KAAUqT,GACtB,MAAMC,EAAKT,IAAMI,GACjB,IAAI/G,GAAS,EAEb,GAAIlM,EACFkT,EAASlT,OADX,CAMA,OAASkM,EAAQ8G,EAAOzP,QACA,OAAlB8P,EAAOnH,SAAqCI,IAAlB+G,EAAOnH,KACnCmH,EAAOnH,GAAS8G,EAAO9G,IAK3B8G,EAASK,EAGLC,EA6BH,SAAcC,EAAYL,GAE/B,IAAItF,EAEJ,OAAO4F,EAQP,SAASA,KAAW/H,GAClB,MAAMgI,EAAoBF,EAAWhQ,OAASkI,EAAWlI,OAEzD,IAAI2M,EAEAuD,GACFhI,EAAW5D,KAAK6L,GAGlB,IACExD,EAASqD,EAAW1H,MAAM3E,KAAMuE,EAalC,CAZE,MAAOzL,GAOP,GAAIyT,GAAqB7F,EACvB,MAPqC,EAUvC,OAAO8F,EAVgC,EAWzC,CAEKD,IACCvD,aAAkByD,QACpBzD,EAAO0D,KAAKA,EAAMF,GACTxD,aAAkBzI,MAC3BiM,EAAKxD,GAEL0D,EAAK1D,GAGX,CAMA,SAASwD,EAAK1T,KAAUqT,GACjBzF,IACHA,GAAS,EACTsF,EAASlT,KAAUqT,GAEvB,CAOA,SAASO,EAAK3Q,GACZyQ,EAAK,KAAMzQ,EACb,CACF,CA/FQ4Q,CAAKP,EAAIF,EAATS,IAAkBR,GAElBH,EAAS,QAASG,EAhBpB,CAkBF,CAjCAD,CAAK,QAASJ,EAkChB,EAhDuBc,IAmDvB,SAAaC,GACX,GAA0B,mBAAfA,EACT,MAAM,IAAIzN,UACR,+CAAiDyN,GAKrD,OADAlB,EAAIhL,KAAKkM,GACFjB,CACT,GA1DA,OAAOA,CA2DT,CCtDO,MAAMkB,EAQb,SAASpH,IACP,MAAMqH,EAAerB,IAEfsB,EAAY,GAElB,IAEIC,EAFAC,EAAY,CAAC,EAGbC,GAAe,EA2BnB,OAvBAC,EAAU3C,KA6CV,SAAcvN,EAAKnB,GACjB,GAAmB,iBAARmB,EAET,OAAyB,IAArBkB,UAAU/B,QACZgR,EAAe,OAAQJ,GACvBC,EAAUhQ,GAAOnB,EACVqR,GAIDE,EAAIvQ,KAAKmQ,EAAWhQ,IAAQgQ,EAAUhQ,IAAS,KAIzD,GAAIA,EAGF,OAFAmQ,EAAe,OAAQJ,GACvBC,EAAYhQ,EACLkQ,EAIT,OAAOF,CACT,EAlEAE,EAAUG,YAASnI,EACnBgI,EAAUI,cAAWpI,EAGrBgI,EAAUK,OAiEV,WACE,GAAIR,EACF,OAAOG,EAGT,OAASD,EAAcH,EAAU3Q,QAAQ,CACvC,MAAOqR,KAAalQ,GAAWwP,EAAUG,GAEzC,IAAmB,IAAf3P,EAAQ,GACV,UAGiB,IAAfA,EAAQ,KACVA,EAAQ,QAAK4H,GAIf,MAAMuI,EAAcD,EAAS3Q,KAAKqQ,KAAc5P,GAErB,mBAAhBmQ,GACTZ,EAAaH,IAAIe,EAErB,CAKA,OAHAV,GAAS,EACTE,EAAcxK,OAAOC,kBAEdwK,CACT,EA1FAA,EAAUJ,UAAYA,EAEtBI,EAAUR,IA+FV,SAAa7Q,KAAUyB,GAErB,IAAIoQ,EAIJ,GAFAP,EAAe,MAAOJ,GAElBlR,cAEG,GAAqB,mBAAVA,EAChB8R,EAAU9R,KAAUyB,OACf,IAAqB,iBAAVzB,EAOhB,MAAM,IAAIqD,UAAU,+BAAiCrD,EAAQ,KANzDN,MAAMC,QAAQK,GAChB+R,EAAQ/R,GAERgS,EAAUhS,EAId,CAEI6R,IACFV,EAAUU,SAAWtS,OAAO0S,OAAOd,EAAUU,UAAY,CAAC,EAAGA,IAG/D,OAAOR,EAMP,SAAS5H,EAAIzJ,GACX,GAAqB,mBAAVA,EACT8R,EAAU9R,OACL,IAAqB,iBAAVA,EAQhB,MAAM,IAAIqD,UAAU,+BAAiCrD,EAAQ,KAP7D,GAAIN,MAAMC,QAAQK,GAAQ,CACxB,MAAOkS,KAAWzQ,GAAWzB,EAC7B8R,EAAUI,KAAWzQ,EACvB,MACEuQ,EAAUhS,EAId,CACF,CAMA,SAASgS,EAAU/E,GACjB8E,EAAQ9E,EAAOkF,SAEXlF,EAAO4E,WACTA,EAAWtS,OAAO0S,OAAOJ,GAAY,CAAC,EAAG5E,EAAO4E,UAEpD,CAMA,SAASE,EAAQI,GACf,IAAIlJ,GAAS,EAEb,GAAIkJ,aAEG,KAAIzS,MAAMC,QAAQwS,GAMvB,MAAM,IAAI9O,UAAU,oCAAsC8O,EAAU,KALpE,OAASlJ,EAAQkJ,EAAQ7R,QAAQ,CAE/BmJ,EADc0I,EAAQlJ,GAExB,CAGF,CACF,CAOA,SAAS6I,EAAUI,EAAQlS,GACzB,IAEIoS,EAFAnJ,GAAS,EAIb,OAASA,EAAQgI,EAAU3Q,QACzB,GAAI2Q,EAAUhI,GAAO,KAAOiJ,EAAQ,CAClCE,EAAQnB,EAAUhI,GAClB,KACF,CAGEmJ,GACE,EAAWA,EAAM,KAAO,EAAWpS,KACrCA,EAAQ,KAAO,EAAMoS,EAAM,GAAIpS,IAGjCoS,EAAM,GAAKpS,GAGXiR,EAAUrM,KAAK,IAAIvC,WAEvB,CACF,EApMAgP,EAAUgB,MAuMV,SAAeC,GACbjB,EAAUK,SACV,MAAMjG,EAAO8G,EAAMD,GACbd,EAASH,EAAUG,OAGzB,GAFAgB,EAAa,QAAShB,GAElBiB,EAAQjB,EAAQ,SAElB,OAAO,IAAIA,EAAOtJ,OAAOuD,GAAOA,GAAM4G,QAIxC,OAAOb,EAAOtJ,OAAOuD,GAAOA,EAC9B,EAnNA4F,EAAU5D,UAsNV,SAAmB3J,EAAMwO,GACvBjB,EAAUK,SACV,MAAMjG,EAAO8G,EAAMD,GACbb,EAAWJ,EAAUI,SAI3B,GAHAiB,EAAe,YAAajB,GAC5BkB,EAAW7O,GAEP2O,EAAQhB,EAAU,WAEpB,OAAO,IAAIA,EAAS3N,EAAM2H,GAAMmH,UAIlC,OAAOnB,EAAS3N,EAAM2H,EACxB,EAlOA4F,EAAUvB,IA0OV,SAAahM,EAAMwO,EAAKrC,GACtB0C,EAAW7O,GACXuN,EAAUK,SAELzB,GAA2B,mBAARqC,IACtBrC,EAAWqC,EACXA,OAAMjJ,GAGR,IAAK4G,EACH,OAAO,IAAIS,QAAQmC,GAUrB,SAASA,EAASjI,EAASkI,GAUzB,SAASrC,EAAK1T,EAAOgW,EAAMtH,GACzBsH,EAAOA,GAAQjP,EACX/G,EACF+V,EAAO/V,GACE6N,EACTA,EAAQmI,GAGR9C,EAAS,KAAM8C,EAAMtH,EAEzB,CAlBAuF,EAAalB,IAAIhM,EAAMyO,EAAMD,GAAM7B,EAmBrC,CA5BAoC,EAAS,KAAM5C,EA6BjB,EAnRAoB,EAAU2B,QAsRV,SAAiBlP,EAAM2H,GAErB,IAAIwB,EAEAgG,EAOJ,OALA5B,EAAUvB,IAAIhM,EAAM2H,EAAMgF,GAE1ByC,EAAW,UAAW,MAAOD,GAGtBhG,EAOP,SAASwD,EAAK1T,EAAOgW,GACnBzD,EAAKvS,GACLkQ,EAAS8F,EACTE,GAAW,CACb,CACF,EA3SA5B,EAAU8B,QAkTV,SAAiBb,EAAKrC,GAKpB,GAJAoB,EAAUK,SACVc,EAAa,UAAWnB,EAAUG,QAClCkB,EAAe,UAAWrB,EAAUI,WAE/BxB,EACH,OAAO,IAAIS,QAAQmC,GAUrB,SAASA,EAASjI,EAASkI,GACzB,MAAMrH,EAAO8G,EAAMD,GA0BnB,SAAS7B,EAAK1T,EAAO0O,GACf1O,IAAU0O,EACZqH,EAAO/V,GACE6N,EACTA,EAAQa,GAGRwE,EAAS,KAAMxE,EAEnB,CAjCA4F,EAAUvB,IAAIuB,EAAUgB,MAAM5G,GAAOA,GAAM,CAAC1O,EAAOgW,EAAMtH,KACvD,IAAI1O,GAAUgW,GAAStH,EAEhB,CAEL,MAAMwB,EAASoE,EAAU5D,UAAUsF,EAAMtH,GAErCwB,UAsMY,iBADIjN,EAnMYiN,IAoMJ,IAASjN,GAnMnCyL,EAAKzL,MAAQiN,EAEbxB,EAAKwB,OAASA,GAGhBwD,EAAK1T,EAAO0O,EACd,MAdEgF,EAAK1T,GA0Mf,IAA8BiD,CA5LtB,GAkBJ,CA5CA6S,EAAS,KAAM5C,EA6CjB,EAvWAoB,EAAU+B,YA0WV,SAAqBd,GAEnB,IAAIW,EAEJ5B,EAAUK,SACVc,EAAa,cAAenB,EAAUG,QACtCkB,EAAe,cAAerB,EAAUI,UAExC,MAAMhG,EAAO8G,EAAMD,GAMnB,OAJAjB,EAAU8B,QAAQ1H,EAAMgF,GAExByC,EAAW,cAAe,UAAWD,GAE9BxH,EAMP,SAASgF,EAAK1T,GACZkW,GAAW,EACX3D,EAAKvS,EACP,CACF,EA/XOsU,EAIP,SAASA,IACP,MAAMgC,EAAc1J,IACpB,IAAIV,GAAS,EAEb,OAASA,EAAQgI,EAAU3Q,QACzB+S,EAAYxC,OAAOI,EAAUhI,IAK/B,OAFAoK,EAAY3E,KAAK,KAAO,EAAM,CAAC,EAAGyC,IAE3BkC,CACT,CAiXF,CA3auB1J,GAAO+H,SAExBH,EAAM,CAAC,EAAE9Q,eAkbf,SAASgS,EAAQzS,EAAOlG,GACtB,MACmB,mBAAVkG,GAGPA,EAAMQ,YAeV,SAAcR,GAEZ,IAAImB,EAEJ,IAAKA,KAAOnB,EACV,GAAIuR,EAAIvQ,KAAKhB,EAAOmB,GAClB,OAAO,EAIX,OAAO,CACT,CArBK3B,CAAKQ,EAAMQ,YAAc1G,KAAQkG,EAAMQ,UAE5C,CA4BA,SAASgS,EAAa1Y,EAAMkG,GAC1B,GAAqB,mBAAVA,EACT,MAAM,IAAIqD,UAAU,WAAavJ,EAAO,qBAE5C,CASA,SAAS4Y,EAAe5Y,EAAMkG,GAC5B,GAAqB,mBAAVA,EACT,MAAM,IAAIqD,UAAU,WAAavJ,EAAO,uBAE5C,CASA,SAASwX,EAAexX,EAAMoX,GAC5B,GAAIA,EACF,MAAM,IAAI1M,MACR,gBACE1K,EACA,mHAGR,CAQA,SAAS6Y,EAAW7O,GAGlB,IAAK,EAAWA,IAA8B,iBAAdA,EAAKyB,KACnC,MAAM,IAAIlC,UAAU,uBAAyBS,EAAO,IAGxD,CAUA,SAASoP,EAAWpZ,EAAMwZ,EAAWL,GACnC,IAAKA,EACH,MAAM,IAAIzO,MACR,IAAM1K,EAAO,0BAA4BwZ,EAAY,YAG3D,CAMA,SAASf,EAAMvS,GACb,OAOF,SAAyBA,GACvB,OAAOuT,QACLvT,GACmB,iBAAVA,GACP,YAAaA,GACb,aAAcA,EAEpB,CAdSwT,CAAgBxT,GAASA,EAAQ,IAAIwO,EAAMxO,EACpD,CCzhBA,SAASyT,EAAIzT,EAAO0T,GAClB,OAwCF,SAAc1T,GACZ,OAAOuT,QAAQvT,GAA0B,iBAAVA,EACjC,CAzCK8D,CAAK9D,KACF,UAAWA,GAASA,EAAMA,OACzB0T,GAAmB,QAAS1T,GAASA,EAAM2T,KAC3C,aAAc3T,GAAS,EAAIA,EAAMhE,SAAU0X,KAC/ChU,MAAMC,QAAQK,IAAU,EAAIA,EAAO0T,IACpC,EAEJ,CAYA,SAAS,EAAI3D,EAAQ2D,GAEnB,MAAMzG,EAAS,GACf,IAAIhE,GAAS,EAEb,OAASA,EAAQ8G,EAAOzP,QACtB2M,EAAOhE,GAASwK,EAAI1D,EAAO9G,GAAQyK,GAGrC,OAAOzG,EAAON,KAAK,GACrB,sCC7DO,MAAMvI,EAAU,CACrB8B,SAIF,SAA2BC,GACzB,MAAMyN,EAAezN,EAAQ0N,QAC3B5P,KAAK6P,OAAOxK,WAAWyK,gBAUzB,SAAoCxN,GAClC,GAAa,OAATA,EAEF,YADAJ,EAAQc,QAAQV,GAOlB,OAHAJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,eACN,IAAAZ,GAAaH,EAASyN,EAAc,aAC7C,IAGA,SAA0BrN,GAExB,OADAJ,EAAQY,MAAM,aACPiN,EAAUzN,EACnB,IApBA,IAAI0N,EACJ,OAAOL,EAsBP,SAASI,EAAUzN,GACjB,MAAM2N,EAAQ/N,EAAQY,MAAM,YAAa,CACvCoN,YAAa,OACbF,aAQF,OALIA,IACFA,EAAS9D,KAAO+D,GAGlBD,EAAWC,EACJxF,EAAKnI,EACd,CAGA,SAASmI,EAAKnI,GACZ,OAAa,OAATA,GACFJ,EAAQe,KAAK,aACbf,EAAQe,KAAK,kBACbf,EAAQc,QAAQV,KAId,QAAmBA,IACrBJ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,aACN8M,IAGT7N,EAAQc,QAAQV,GACTmI,EACT,CACF,kBC1DO,MAAM,EAAW,CACtBxI,SASF,SAA4BC,GAC1B,MAAMiO,EAAOnQ,KAGPqH,EAAQ,GACd,IAGI+I,EAGAC,EAGAC,EATAC,EAAY,EAUhB,OAAO5Q,EAGP,SAASA,EAAM2C,GAWb,GAAIiO,EAAYlJ,EAAMhL,OAAQ,CAC5B,MAAMmU,EAAOnJ,EAAMkJ,GAEnB,OADAJ,EAAKM,eAAiBD,EAAK,GACpBtO,EAAQ0N,QACbY,EAAK,GAAGE,aACRC,EACAC,EAHK1O,CAILI,EACJ,CAEA,OAAOsO,EAAmBtO,EAC5B,CAGA,SAASqO,EAAiBrO,GAKxB,GAJAiO,IAIIJ,EAAKM,eAAeI,WAAY,CAClCV,EAAKM,eAAeI,gBAAazL,EAE7BgL,GACFU,IAIF,MAAMC,EAAmBZ,EAAK3J,OAAOnK,OACrC,IAGIwK,EAHAmK,EAAkBD,EAKtB,KAAOC,KACL,GACsC,SAApCb,EAAK3J,OAAOwK,GAAiB,IACY,cAAzCb,EAAK3J,OAAOwK,GAAiB,GAAG1P,KAChC,CACAuF,EAAQsJ,EAAK3J,OAAOwK,GAAiB,GAAG/Q,IACxC,KACF,CAGFgR,EAAeV,GAEf,IAAIvL,EAAQ+L,EAEZ,KAAO/L,EAAQmL,EAAK3J,OAAOnK,QACzB8T,EAAK3J,OAAOxB,GAAO,GAAG/E,IAAM3E,OAAO0S,OAAO,CAAC,EAAGnH,GAC9C7B,IAWF,OARA,OACEmL,EAAK3J,OACLwK,EAAkB,EAClB,EACAb,EAAK3J,OAAOzF,MAAMgQ,IAGpBZ,EAAK3J,OAAOnK,OAAS2I,EACd4L,EAAmBtO,EAC5B,CAEA,OAAO3C,EAAM2C,EACf,CAGA,SAASsO,EAAmBtO,GAM1B,GAAIiO,IAAclJ,EAAMhL,OAAQ,CAI9B,IAAK+T,EACH,OAAOc,EAAkB5O,GAK3B,GAAI8N,EAAUe,kBAAoBf,EAAUe,iBAAiBC,SAC3D,OAAOC,EAAU/O,GAKnB6N,EAAKmB,UAAYhC,QACfc,EAAUe,mBAAqBf,EAAUmB,8BAE7C,CAGA,OADApB,EAAKM,eAAiB,CAAC,EAChBvO,EAAQsP,MACbC,EACAC,EACAC,EAHKzP,CAILI,EACJ,CAGA,SAASoP,EAAqBpP,GAG5B,OAFI8N,GAAWU,IACfG,EAAeV,GACRW,EAAkB5O,EAC3B,CAGA,SAASqP,EAAsBrP,GAG7B,OAFA6N,EAAKN,OAAO+B,KAAKzB,EAAK0B,MAAMjS,MAAQ2Q,IAAclJ,EAAMhL,OACxDiU,EAAkBH,EAAK0B,MAAMC,OACtBT,EAAU/O,EACnB,CAGA,SAAS4O,EAAkB5O,GAGzB,OADA6N,EAAKM,eAAiB,CAAC,EAChBvO,EAAQ0N,QACb6B,EACAM,EACAV,EAHKnP,CAILI,EACJ,CAGA,SAASyP,EAAkBzP,GAIzB,OAHAiO,IACAlJ,EAAM1G,KAAK,CAACwP,EAAKgB,iBAAkBhB,EAAKM,iBAEjCS,EAAkB5O,EAC3B,CAGA,SAAS+O,EAAU/O,GACjB,OAAa,OAATA,GACE8N,GAAWU,IACfG,EAAe,QACf/O,EAAQc,QAAQV,KAIlB8N,EAAYA,GAAaD,EAAKN,OAAOmC,KAAK7B,EAAK0B,OAC/C3P,EAAQY,MAAM,YAAa,CACzBoN,YAAa,OACbF,SAAUK,EACV4B,WAAY7B,IAEP8B,EAAa5P,GACtB,CAGA,SAAS4P,EAAa5P,GACpB,OAAa,OAATA,GACF6P,EAAajQ,EAAQe,KAAK,cAAc,GACxCgO,EAAe,QACf/O,EAAQc,QAAQV,KAId,QAAmBA,IACrBJ,EAAQc,QAAQV,GAChB6P,EAAajQ,EAAQe,KAAK,cAE1BsN,EAAY,EACZJ,EAAKmB,eAAYlM,EACVzF,IAGTuC,EAAQc,QAAQV,GACT4P,EACT,CAOA,SAASC,EAAalC,EAAOmC,GAC3B,MAAMC,EAASlC,EAAKmC,YAAYrC,GAwChC,GAvCImC,GAAKC,EAAO1R,KAAK,MACrBsP,EAAMD,SAAWK,EACbA,IAAYA,EAAWnE,KAAO+D,GAClCI,EAAaJ,EACbG,EAAUmC,WAAWtC,EAAMtQ,OAC3ByQ,EAAUoC,MAAMH,GAkCZlC,EAAKN,OAAO+B,KAAK3B,EAAMtQ,MAAMC,MAAO,CACtC,IAAIoF,EAAQoL,EAAU5J,OAAOnK,OAE7B,KAAO2I,KACL,GAEEoL,EAAU5J,OAAOxB,GAAO,GAAGrF,MAAMmS,OAASxB,KACxCF,EAAU5J,OAAOxB,GAAO,GAAG/E,KAC3BmQ,EAAU5J,OAAOxB,GAAO,GAAG/E,IAAI6R,OAASxB,GAI1C,OAKJ,MAAMS,EAAmBZ,EAAK3J,OAAOnK,OACrC,IAGIoW,EAGA5L,EANAmK,EAAkBD,EAQtB,KAAOC,KACL,GACsC,SAApCb,EAAK3J,OAAOwK,GAAiB,IACY,cAAzCb,EAAK3J,OAAOwK,GAAiB,GAAG1P,KAChC,CACA,GAAImR,EAAM,CACR5L,EAAQsJ,EAAK3J,OAAOwK,GAAiB,GAAG/Q,IACxC,KACF,CAEAwS,GAAO,CACT,CAOF,IAJAxB,EAAeV,GAEfvL,EAAQ+L,EAED/L,EAAQmL,EAAK3J,OAAOnK,QACzB8T,EAAK3J,OAAOxB,GAAO,GAAG/E,IAAM3E,OAAO0S,OAAO,CAAC,EAAGnH,GAC9C7B,KAGF,OACEmL,EAAK3J,OACLwK,EAAkB,EAClB,EACAb,EAAK3J,OAAOzF,MAAMgQ,IAGpBZ,EAAK3J,OAAOnK,OAAS2I,CACvB,CACF,CAMA,SAASiM,EAAepO,GACtB,IAAImC,EAAQqC,EAAMhL,OAElB,KAAO2I,KAAUnC,GAAM,CACrB,MAAMsL,EAAQ9G,EAAMrC,GACpBmL,EAAKM,eAAiBtC,EAAM,GAC5BA,EAAM,GAAGlL,KAAKlG,KAAKoT,EAAMjO,EAC3B,CAEAmF,EAAMhL,OAASwG,CACjB,CAEA,SAASiO,IACPV,EAAUoC,MAAM,CAAC,OACjBnC,OAAajL,EACbgL,OAAYhL,EACZ+K,EAAKM,eAAeI,gBAAazL,CACnC,CACF,GAjVMqM,EAAqB,CACzBxP,SAmVF,SAA2BC,EAASC,EAAIC,GACtC,OAAO,IAAAC,GACLH,EACAA,EAAQ0N,QAAQ5P,KAAK6P,OAAOxK,WAAWzJ,SAAUuG,EAAIC,GACrD,aACApC,KAAK6P,OAAOxK,WAAWqN,QAAQC,KAAKnX,SAAS,qBAAkB4J,EAAY,EAE/E,kBCvWO,SAASwN,EAAYpM,GAE1B,MAAMqM,EAAQ,CAAC,EACf,IAGIzX,EAGA0X,EAGAC,EAGAC,EAGAzO,EAGA0O,EAGAC,EArBAlO,GAAS,EAuBb,OAASA,EAAQwB,EAAOnK,QAAQ,CAC9B,KAAO2I,KAAS6N,GACd7N,EAAQ6N,EAAM7N,GAMhB,GAHA5J,EAAQoL,EAAOxB,GAIbA,GACkB,cAAlB5J,EAAM,GAAGkG,MACqB,mBAA9BkF,EAAOxB,EAAQ,GAAG,GAAG1D,OAErB2R,EAAY7X,EAAM,GAAG6W,WAAWzL,OAChCuM,EAAa,EAGXA,EAAaE,EAAU5W,QACW,oBAAlC4W,EAAUF,GAAY,GAAGzR,OAEzByR,GAAc,GAIdA,EAAaE,EAAU5W,QACW,YAAlC4W,EAAUF,GAAY,GAAGzR,MAEzB,OAASyR,EAAaE,EAAU5W,QACQ,YAAlC4W,EAAUF,GAAY,GAAGzR,MAIS,cAAlC2R,EAAUF,GAAY,GAAGzR,OAC3B2R,EAAUF,GAAY,GAAGI,6BAA8B,EACvDJ,KAMR,GAAiB,UAAb3X,EAAM,GACJA,EAAM,GAAG8U,cACX5U,OAAO0S,OAAO6E,EAAOO,EAAW5M,EAAQxB,IACxCA,EAAQ6N,EAAM7N,GACdkO,GAAO,QAGN,GAAI9X,EAAM,GAAGiY,WAAY,CAI5B,IAHAN,EAAa/N,EACb8N,OAAY1N,EAEL2N,MACLC,EAAaxM,EAAOuM,GAGK,eAAvBC,EAAW,GAAG1R,MACS,oBAAvB0R,EAAW,GAAG1R,OAEQ,UAAlB0R,EAAW,KACTF,IACFtM,EAAOsM,GAAW,GAAGxR,KAAO,mBAG9B0R,EAAW,GAAG1R,KAAO,aACrBwR,EAAYC,GAOdD,IAEF1X,EAAM,GAAG6E,IAAM3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAOsM,GAAW,GAAGnT,OAEtD4E,EAAaiC,EAAOzF,MAAM+R,EAAW9N,GACrCT,EAAWG,QAAQtJ,IACnB,OAAOoL,EAAQsM,EAAW9N,EAAQ8N,EAAY,EAAGvO,GAErD,CACF,CAEA,OAAQ2O,CACV,CASA,SAASE,EAAW5M,EAAQ8M,GAC1B,MAAMrD,EAAQzJ,EAAO8M,GAAY,GAC3B7M,EAAUD,EAAO8M,GAAY,GACnC,IAAIC,EAAgBD,EAAa,EAGjC,MAAME,EAAiB,GACjBC,EACJxD,EAAMgC,YAAcxL,EAAQoJ,OAAOI,EAAMC,aAAaD,EAAMtQ,OACxD+T,EAAcD,EAAUjN,OAGxBqM,EAAQ,GAGRc,EAAO,CAAC,EAGd,IAAItB,EAGArC,EACAhL,GAAS,EAGT3J,EAAU4U,EACV2D,EAAS,EACTjU,EAAQ,EACZ,MAAMkU,EAAS,CAAClU,GAGhB,KAAOtE,GAAS,CAEd,KAAOmL,IAAS+M,GAAe,KAAOlY,IAItCmY,EAAe7S,KAAK4S,GAEflY,EAAQ4W,aACXI,EAAS5L,EAAQ6L,YAAYjX,GAExBA,EAAQ6Q,MACXmG,EAAO1R,KAAK,MAGVqP,GACFyD,EAAUlB,WAAWlX,EAAQsE,OAG3BtE,EAAQ8X,8BACVM,EAAUK,oCAAqC,GAGjDL,EAAUjB,MAAMH,GAEZhX,EAAQ8X,8BACVM,EAAUK,wCAAqC1O,IAInD4K,EAAW3U,EACXA,EAAUA,EAAQ6Q,IACpB,CAKA,IAFA7Q,EAAU4U,IAEDjL,EAAQ0O,EAAYrX,QAGC,SAA1BqX,EAAY1O,GAAO,IACW,UAA9B0O,EAAY1O,EAAQ,GAAG,IACvB0O,EAAY1O,GAAO,GAAG1D,OAASoS,EAAY1O,EAAQ,GAAG,GAAG1D,MACzDoS,EAAY1O,GAAO,GAAGrF,MAAMC,OAAS8T,EAAY1O,GAAO,GAAG/E,IAAIL,OAE/DD,EAAQqF,EAAQ,EAChB6O,EAAOlT,KAAKhB,GAEZtE,EAAQ4W,gBAAa7M,EACrB/J,EAAQ2U,cAAW5K,EACnB/J,EAAUA,EAAQ6Q,MAmBtB,IAfAuH,EAAUjN,OAAS,GAIfnL,GAEFA,EAAQ4W,gBAAa7M,EACrB/J,EAAQ2U,cAAW5K,GAEnByO,EAAO5H,MAITjH,EAAQ6O,EAAOxX,OAER2I,KAAS,CACd,MAAMjE,EAAQ2S,EAAY3S,MAAM8S,EAAO7O,GAAQ6O,EAAO7O,EAAQ,IACxDrF,EAAQ6T,EAAevH,MAC7B4G,EAAMnO,QAAQ,CAAC/E,EAAOA,EAAQoB,EAAM1E,OAAS,KAC7C,OAAOmK,EAAQ7G,EAAO,EAAGoB,EAC3B,CAIA,IAFAiE,GAAS,IAEAA,EAAQ6N,EAAMxW,QACrBsX,EAAKC,EAASf,EAAM7N,GAAO,IAAM4O,EAASf,EAAM7N,GAAO,GACvD4O,GAAUf,EAAM7N,GAAO,GAAK6N,EAAM7N,GAAO,GAAK,EAGhD,OAAO2O,CACT,CCvOO,MAAM,EAAU,CACrB1R,SAsBF,SAAyBC,EAASC,GAEhC,IAAI6N,EACJ,OAGA,SAAe1N,GAKb,OAJAJ,EAAQY,MAAM,WACdkN,EAAW9N,EAAQY,MAAM,eAAgB,CACvCoN,YAAa,YAERzF,EAAKnI,EACd,EAGA,SAASmI,EAAKnI,GACZ,OAAa,OAATA,EACKyR,EAAWzR,IAGhB,QAAmBA,GACdJ,EAAQsP,MACbwC,EACAC,EACAF,EAHK7R,CAILI,IAGJJ,EAAQc,QAAQV,GACTmI,EACT,CAGA,SAASsJ,EAAWzR,GAGlB,OAFAJ,EAAQe,KAAK,gBACbf,EAAQe,KAAK,WACNd,EAAGG,EACZ,CAGA,SAAS2R,EAAgB3R,GAQvB,OAPAJ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,gBACb+M,EAAS9D,KAAOhK,EAAQY,MAAM,eAAgB,CAC5CoN,YAAa,UACbF,aAEFA,EAAWA,EAAS9D,KACbzB,CACT,CACF,EAvEE9D,QAeF,SAAwBH,GAEtB,OADAoM,EAAYpM,GACLA,CACT,GAdMwN,EAAwB,CAC5B/R,SAqEF,SAA8BC,EAASC,EAAIC,GACzC,MAAM+N,EAAOnQ,KACb,OAGA,SAAwBsC,GAKtB,OAJAJ,EAAQe,KAAK,gBACbf,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,eACN,IAAAZ,GAAaH,EAASgS,EAAU,aACzC,EAGA,SAASA,EAAS5R,GAChB,GAAa,OAATA,IAAiB,QAAmBA,GACtC,OAAOF,EAAIE,GAGb,MAAM6R,EAAOhE,EAAK3J,OAAO2J,EAAK3J,OAAOnK,OAAS,GAE9C,OACG8T,EAAKN,OAAOxK,WAAWqN,QAAQC,KAAKnX,SAAS,iBAC9C2Y,GACiB,eAAjBA,EAAK,GAAG7S,MACR6S,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9X,QAAU,EAEzC8F,EAAGG,GAGLJ,EAAQoP,UAAUnB,EAAKN,OAAOxK,WAAW2M,KAAM5P,EAAKD,EAApDD,CAAwDI,EACjE,CACF,EApGEC,SAAS,GCbJ,MAAMyP,EAAO,CAClB/P,SAIF,SAAwBC,GACtB,MAAMiO,EAAOnQ,KACPqU,EAAUnS,EAAQ0N,QAEtB,KAmBF,SAAuBtN,GACrB,GAAa,OAATA,EAEF,YADAJ,EAAQc,QAAQV,GAQlB,OAJAJ,EAAQY,MAAM,mBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,mBACbkN,EAAKgB,sBAAmB/L,EACjBiP,CACT,GA5BEnS,EAAQ0N,QACN5P,KAAK6P,OAAOxK,WAAWiP,YACvBC,GACA,IAAAlS,GACEH,EACAA,EAAQ0N,QACN5P,KAAK6P,OAAOxK,WAAW2M,KACvBuC,EACArS,EAAQ0N,QAAQ,EAAS2E,IAE3B,gBAIN,OAAOF,EAiBP,SAASE,EAAejS,GACtB,GAAa,OAATA,EASJ,OAJAJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,cACbkN,EAAKgB,sBAAmB/L,EACjBiP,EARLnS,EAAQc,QAAQV,EASpB,CACF,GCxDO,MAAMkS,EAAW,CACtBjO,WAAYkO,MAEDC,EAASC,GAAkB,UAC3B,GAAOA,GAAkB,QAMtC,SAASA,GAAkBC,GACzB,MAAO,CACL3S,SAOF,SAAwBC,GACtB,MAAMiO,EAAOnQ,KACPqF,EAAarF,KAAK6P,OAAOxK,WAAWuP,GACpCC,EAAO3S,EAAQ0N,QAAQvK,EAAY1F,EAAOmV,GAChD,OAAOnV,EAGP,SAASA,EAAM2C,GACb,OAAOyS,EAAQzS,GAAQuS,EAAKvS,GAAQwS,EAAQxS,EAC9C,CAGA,SAASwS,EAAQxS,GACf,GAAa,OAATA,EAOJ,OAFAJ,EAAQY,MAAM,QACdZ,EAAQc,QAAQV,GACTmI,EANLvI,EAAQc,QAAQV,EAOpB,CAGA,SAASmI,EAAKnI,GACZ,OAAIyS,EAAQzS,IACVJ,EAAQe,KAAK,QACN4R,EAAKvS,KAGdJ,EAAQc,QAAQV,GACTmI,EACT,CAMA,SAASsK,EAAQzS,GACf,GAAa,OAATA,EACF,OAAO,EAGT,MAAM8B,EAAOiB,EAAW/C,GACxB,IAAI0C,GAAS,EAEb,GAAIZ,EACF,OAASY,EAAQZ,EAAK/H,QAAQ,CAC5B,MAAMmU,EAAOpM,EAAKY,GAElB,IAAKwL,EAAKR,UAAYQ,EAAKR,SAASjT,KAAKoT,EAAMA,EAAKH,UAClD,OAAO,CAEX,CAGF,OAAO,CACT,CACF,EAhEEzJ,WAAYkO,GACA,SAAVG,EAAmBI,QAAyB5P,GAgElD,CAMA,SAASqP,GAAeQ,GACtB,OAGA,SAAwBzO,EAAQC,GAC9B,IAGI3D,EAHAkC,GAAS,EAMb,OAASA,GAASwB,EAAOnK,aACT+I,IAAVtC,EACE0D,EAAOxB,IAAoC,SAA1BwB,EAAOxB,GAAO,GAAG1D,OACpCwB,EAAQkC,EACRA,KAEQwB,EAAOxB,IAAoC,SAA1BwB,EAAOxB,GAAO,GAAG1D,OAExC0D,IAAUlC,EAAQ,IACpB0D,EAAO1D,GAAO,GAAG7C,IAAMuG,EAAOxB,EAAQ,GAAG,GAAG/E,IAC5CuG,EAAOrC,OAAOrB,EAAQ,EAAGkC,EAAQlC,EAAQ,GACzCkC,EAAQlC,EAAQ,GAGlBA,OAAQsC,GAIZ,OAAO6P,EAAgBA,EAAczO,EAAQC,GAAWD,CAC1D,CACF,CAaA,SAASwO,GAAuBxO,EAAQC,GACtC,IAAI6M,EAAa,EAEjB,OAASA,GAAc9M,EAAOnK,QAC5B,IACGiX,IAAe9M,EAAOnK,QACU,eAA/BmK,EAAO8M,GAAY,GAAGhS,OACW,SAAnCkF,EAAO8M,EAAa,GAAG,GAAGhS,KAC1B,CACA,MAAMmJ,EAAOjE,EAAO8M,EAAa,GAAG,GAC9B4B,EAASzO,EAAQ6L,YAAY7H,GACnC,IAKI0K,EALAnQ,EAAQkQ,EAAO7Y,OACf+Y,GAAe,EACfvS,EAAO,EAKX,KAAOmC,KAAS,CACd,MAAMqQ,EAAQH,EAAOlQ,GAErB,GAAqB,iBAAVqQ,EAAoB,CAG7B,IAFAD,EAAcC,EAAMhZ,OAEyB,KAAtCgZ,EAAMjZ,WAAWgZ,EAAc,IACpCvS,IACAuS,IAGF,GAAIA,EAAa,MACjBA,GAAe,CACjB,MACK,IAAe,IAAXC,EACPF,GAAO,EACPtS,SACK,IAAe,IAAXwS,EAEJ,CAELrQ,IACA,KACF,CACF,CAEA,GAAInC,EAAM,CACR,MAAMoN,EAAQ,CACZ3O,KACEgS,IAAe9M,EAAOnK,QAAU8Y,GAAQtS,EAAO,EAC3C,aACA,oBACNlD,MAAO,CACLC,KAAM6K,EAAKxK,IAAIL,KACfN,OAAQmL,EAAKxK,IAAIX,OAASuD,EAC1BiP,OAAQrH,EAAKxK,IAAI6R,OAASjP,EAC1ByS,OAAQ7K,EAAK9K,MAAM2V,OAAStQ,EAC5BuQ,aAAcvQ,EACVoQ,EACA3K,EAAK9K,MAAM4V,aAAeH,GAEhCnV,IAAK3E,OAAO0S,OAAO,CAAC,EAAGvD,EAAKxK,MAE9BwK,EAAKxK,IAAM3E,OAAO0S,OAAO,CAAC,EAAGiC,EAAMtQ,OAE/B8K,EAAK9K,MAAMmS,SAAWrH,EAAKxK,IAAI6R,OACjCxW,OAAO0S,OAAOvD,EAAMwF,IAEpBzJ,EAAOrC,OACLmP,EACA,EACA,CAAC,QAASrD,EAAOxJ,GACjB,CAAC,OAAQwJ,EAAOxJ,IAElB6M,GAAc,EAElB,CAEAA,GACF,CAGF,OAAO9M,CACT,iBC9KO,SAASgP,GAAgB3F,EAAQ4F,EAAYhR,GAElD,IAAIoC,EAAQvL,OAAO0S,OACjBvJ,EACInJ,OAAO0S,OAAO,CAAC,EAAGvJ,GAClB,CACE7E,KAAM,EACNN,OAAQ,EACRwS,OAAQ,GAEd,CACEwD,OAAQ,EACRC,cAAe,IAKnB,MAAMG,EAAc,CAAC,EAGfC,EAAuB,GAG7B,IAAIT,EAAS,GAGT7N,EAAQ,GAGRuO,GAAW,EAOf,MAAM1T,EAAU,CACdc,QA2IF,SAAiBV,IACX,QAAmBA,IACrBuE,EAAMjH,OACNiH,EAAMvH,OAAS,EACfuH,EAAMiL,SAAoB,IAAVxP,EAAc,EAAI,EAClCuT,MACmB,IAAVvT,IACTuE,EAAMvH,SACNuH,EAAMiL,UAGJjL,EAAM0O,aAAe,EACvB1O,EAAMyO,UAENzO,EAAM0O,eAIF1O,EAAM0O,eAAiBL,EAAOrO,EAAMyO,QAAQjZ,SAC9CwK,EAAM0O,cAAgB,EACtB1O,EAAMyO,WAIV7O,EAAQuJ,SAAW1N,EAEnBsT,GAAW,CACb,EArKE9S,MAwKF,SAAexB,EAAMwU,GAGnB,MAAM7F,EAAQ6F,GAAU,CAAC,EAKzB,OAJA7F,EAAM3O,KAAOA,EACb2O,EAAMtQ,MAAQkS,IACdpL,EAAQD,OAAO7F,KAAK,CAAC,QAASsP,EAAOxJ,IACrCY,EAAM1G,KAAKsP,GACJA,CACT,EAhLEhN,KAmLF,SAAc3B,GACZ,MAAM2O,EAAQ5I,EAAM4E,MAGpB,OAFAgE,EAAMhQ,IAAM4R,IACZpL,EAAQD,OAAO7F,KAAK,CAAC,OAAQsP,EAAOxJ,IAC7BwJ,CACT,EAvLEL,QAASmG,GA8LX,SAA+BC,EAAW9K,GACxC+K,EAAUD,EAAW9K,EAAKzG,KAC5B,IA/LE+M,MAAOuE,EAAiBG,GACxB5E,UAAWyE,EAAiBG,EAAmB,CAC7C5E,WAAW,KAST7K,EAAU,CACduJ,SAAU,KACV1N,KAAM,KACNmO,eAAgB,CAAC,EACjBjK,OAAQ,GACRqJ,SACAyC,cACA8B,eA6CF,SAAwBnE,EAAOkG,GAC7B,OAsYJ,SAAyBjB,EAAQiB,GAC/B,IAAInR,GAAS,EAGb,MAAMgE,EAAS,GAGf,IAAIoN,EAEJ,OAASpR,EAAQkQ,EAAO7Y,QAAQ,CAC9B,MAAMgZ,EAAQH,EAAOlQ,GAGrB,IAAIjJ,EAEJ,GAAqB,iBAAVsZ,EACTtZ,EAAQsZ,OAER,OAAQA,GACN,KAAM,EACJtZ,EAAQ,KACR,MAGF,KAAM,EACJA,EAAQ,KACR,MAGF,KAAM,EACJA,EAAQ,OACR,MAGF,KAAM,EACJA,EAAQoa,EAAa,IAAM,KAC3B,MAGF,KAAM,EACJ,IAAKA,GAAcC,EAAO,SAC1Bra,EAAQ,IACR,MAGF,QAEEA,EAAQkI,OAAOC,aAAamR,GAIlCe,GAAmB,IAAXf,EACRrM,EAAOrI,KAAK5E,EACd,CAEA,OAAOiN,EAAON,KAAK,GACrB,CA9bW2N,CAAgB/D,EAAYrC,GAAQkG,EAC7C,EA9CEtE,MACAU,WA0DF,SAAoBxW,GAClB2Z,EAAY3Z,EAAM6D,MAAQ7D,EAAMuD,OAChCuW,GACF,EA5DErD,MAwBF,SAAezR,GAIb,GAHAmU,GAAS,OAAKA,EAAQnU,GACtBuV,IAEkC,OAA9BpB,EAAOA,EAAO7Y,OAAS,GACzB,MAAO,GAMT,OAHA4Z,EAAUR,EAAY,GAEtBhP,EAAQD,QAAS,QAAWmP,EAAsBlP,EAAQD,OAAQC,GAC3DA,EAAQD,MACjB,GA5BA,IAOI+P,EAPAC,EAAQf,EAAWxT,SAASlF,KAAK0J,EAASvE,GAa9C,OAJIuT,EAAWlP,YACboP,EAAqBhV,KAAK8U,GAGrBhP,EA0BP,SAAS6L,EAAYrC,GACnB,OA6VJ,SAAqBiF,EAAQjF,GAC3B,MAAMwG,EAAaxG,EAAMtQ,MAAM2V,OACzBoB,EAAmBzG,EAAMtQ,MAAM4V,aAC/BoB,EAAW1G,EAAMhQ,IAAIqV,OACrBsB,EAAiB3G,EAAMhQ,IAAIsV,aAGjC,IAAIsB,EAEAJ,IAAeE,EAEjBE,EAAO,CAAC3B,EAAOuB,GAAY1V,MAAM2V,EAAkBE,KAEnDC,EAAO3B,EAAOnU,MAAM0V,EAAYE,GAE5BD,GAAoB,IAEtBG,EAAK,GAAKA,EAAK,GAAG9V,MAAM2V,IAGtBE,EAAiB,GAEnBC,EAAKlW,KAAKuU,EAAOyB,GAAU5V,MAAM,EAAG6V,KAIxC,OAAOC,CACT,CAxXWC,CAAY5B,EAAQjF,EAC7B,CAGA,SAAS4B,IACP,OAAOvW,OAAO0S,OAAO,CAAC,EAAGnH,EAC3B,CAqBA,SAASyP,IAEP,IAAIS,EAEJ,KAAOlQ,EAAMyO,OAASJ,EAAO7Y,QAAQ,CACnC,MAAMgZ,EAAQH,EAAOrO,EAAMyO,QAE3B,GAAqB,iBAAVD,EAOT,IANA0B,EAAalQ,EAAMyO,OAEfzO,EAAM0O,aAAe,IACvB1O,EAAM0O,aAAe,GAIrB1O,EAAMyO,SAAWyB,GACjBlQ,EAAM0O,aAAeF,EAAMhZ,QAE3B2a,EAAG3B,EAAMjZ,WAAWyK,EAAM0O,oBAG5ByB,EAAG3B,EAEP,CACF,CAQA,SAAS2B,EAAG1U,GACVsT,OAAWxQ,EACXmR,EAAejU,EACfkU,EAAQA,EAAMlU,EAChB,CAkEA,SAAS4T,EAAkBe,EAAG/L,GAC5BA,EAAKgM,SACP,CAQA,SAASnB,EAAiBoB,EAAUrB,GAClC,OAWA,SAAczQ,EAAY+R,EAAaC,GAErC,IAAIC,EAGAC,EAGApG,EAGAjG,EACJ,OAAOzP,MAAMC,QAAQ2J,GAEjBmS,EAAuBnS,GACvB,aAAcA,EACdmS,EAAuB,CAACnS,IAS5B,SAA+BwF,GAC7B,OAAOlL,EAGP,SAASA,EAAM2C,GACb,MAAMmV,EAAe,OAATnV,GAAiBuI,EAAIvI,GAC3ByC,EAAe,OAATzC,GAAiBuI,EAAI8H,KAQjC,OAAO6E,EAPM,IAIP/b,MAAMC,QAAQ+b,GAAOA,EAAMA,EAAM,CAACA,GAAO,MACzChc,MAAMC,QAAQqJ,GAAOA,EAAMA,EAAM,CAACA,GAAO,IAExCyS,CAA6BlV,EACtC,CACF,CAxBIoV,CAAsBrS,GAgC1B,SAASmS,EAAuBpT,GAI9B,OAHAkT,EAAmBlT,EACnBmT,EAAiB,EAEG,IAAhBnT,EAAK/H,OACAgb,EAGFM,EAAgBvT,EAAKmT,GAC9B,CAQA,SAASI,EAAgB3B,GACvB,OAGA,SAAe1T,GAKb4I,EA4ER,WACE,MAAM0M,EAAa/F,IACbgG,EAAgBpR,EAAQuJ,SACxB8H,EAAwBrR,EAAQ0K,iBAChC4G,EAAmBtR,EAAQD,OAAOnK,OAClC2b,EAAavc,MAAMgJ,KAAK4C,GAC9B,MAAO,CACL6P,UACAzS,KAAMsT,GAQR,SAASb,IACPrQ,EAAQ+Q,EACRnR,EAAQuJ,SAAW6H,EACnBpR,EAAQ0K,iBAAmB2G,EAC3BrR,EAAQD,OAAOnK,OAAS0b,EACxB1Q,EAAQ2Q,EACRnC,GACF,CACF,CApGeoC,GACP9G,EAAmB6E,EAEdA,EAAUzT,UACbkE,EAAQ0K,iBAAmB6E,GAG7B,GACEA,EAAUngB,MACV4Q,EAAQoJ,OAAOxK,WAAWqN,QAAQC,KAAKnX,SAASwa,EAAUngB,MAE1D,OAAOuM,EAAIE,GAGb,OAAO0T,EAAU/T,SAASlF,KAIxB+Y,EAASxa,OAAO0S,OAAO1S,OAAO7D,OAAOgP,GAAUqP,GAAUrP,EACzDvE,EACAC,EACAC,EAPK4T,CAQL1T,EACJ,CACF,CAGA,SAASH,EAAGG,GAGV,OAFAsT,GAAW,EACXuB,EAAShG,EAAkBjG,GACpBkM,CACT,CAGA,SAAShV,EAAIE,GAIX,OAHAsT,GAAW,EACX1K,EAAKgM,YAECK,EAAiBD,EAAiBjb,OAC/Bsb,EAAgBL,EAAiBC,IAGnCF,CACT,CACF,CACF,CAOA,SAASpB,EAAUD,EAAWvR,GACxBuR,EAAUzP,aAAeoP,EAAqBna,SAASwa,IACzDL,EAAqBhV,KAAKqV,GAGxBA,EAAUrP,UACZ,OACEF,EAAQD,OACR/B,EACAgC,EAAQD,OAAOnK,OAASoI,EACxBuR,EAAUrP,QAAQF,EAAQD,OAAOzF,MAAM0D,GAAOgC,IAI9CuP,EAAUkC,YACZzR,EAAQD,OAASwP,EAAUkC,UAAUzR,EAAQD,OAAQC,GAEzD,CAuCA,SAASoP,IACHhP,EAAMjH,QAAQ8V,GAAe7O,EAAMvH,OAAS,IAC9CuH,EAAMvH,OAASoW,EAAY7O,EAAMjH,MACjCiH,EAAMiL,QAAU4D,EAAY7O,EAAMjH,MAAQ,EAE9C,CACF,CCneO,MAAMuY,GAAgB,CAC3BtiB,KAAM,gBACNoM,SAIF,SAA+BC,EAASC,EAAIC,GAC1C,IAGIgW,EAHAvV,EAAO,EAIX,OAGA,SAAeP,GAGb,OAFAJ,EAAQY,MAAM,iBACdsV,EAAS9V,EACFyS,EAAQzS,EACjB,EAGA,SAASyS,EAAQzS,GACf,OAAIA,IAAS8V,GACXlW,EAAQY,MAAM,yBACPuV,EAAS/V,KAGd,QAAcA,IACT,IAAAD,GAAaH,EAAS6S,EAAS,aAA/B,CAA6CzS,GAGlDO,EAAO,GAAe,OAATP,KAAkB,QAAmBA,GAC7CF,EAAIE,IAGbJ,EAAQe,KAAK,iBACNd,EAAGG,GACZ,CAGA,SAAS+V,EAAS/V,GAChB,OAAIA,IAAS8V,GACXlW,EAAQc,QAAQV,GAChBO,IACOwV,IAGTnW,EAAQe,KAAK,yBACN8R,EAAQzS,GACjB,CACF,GCzCO,MAAM8B,GAAO,CAClBvO,KAAM,OACNoM,SAuBF,SAA2BC,EAASC,EAAIC,GACtC,MAAM+N,EAAOnQ,KACPmU,EAAOhE,EAAK3J,OAAO2J,EAAK3J,OAAOnK,OAAS,GAC9C,IAAIic,EACFnE,GAAyB,eAAjBA,EAAK,GAAG7S,KACZ6S,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9X,OACtC,EACFwG,EAAO,EACX,OAGA,SAAeP,GACb,MAAMiW,EACJpI,EAAKM,eAAenP,OACV,KAATgB,GAAwB,KAATA,GAAwB,KAATA,EAC3B,gBACA,eAEN,GACW,kBAATiW,GACKpI,EAAKM,eAAe2H,QAAU9V,IAAS6N,EAAKM,eAAe2H,QAC5D,QAAW9V,GACf,CAQA,GAPK6N,EAAKM,eAAenP,OACvB6O,EAAKM,eAAenP,KAAOiX,EAC3BrW,EAAQY,MAAMyV,EAAM,CAClBlF,YAAY,KAIH,kBAATkF,EAEF,OADArW,EAAQY,MAAM,kBACE,KAATR,GAAwB,KAATA,EAClBJ,EAAQsP,MAAM2G,GAAe/V,EAAKoW,EAAlCtW,CAA4CI,GAC5CkW,EAASlW,GAGf,IAAK6N,EAAKmB,WAAsB,KAAThP,EAGrB,OAFAJ,EAAQY,MAAM,kBACdZ,EAAQY,MAAM,iBACP2V,EAAOnW,EAElB,CAEA,OAAOF,EAAIE,EACb,EAGA,SAASmW,EAAOnW,GACd,OAAI,QAAWA,MAAWO,EAAO,IAC/BX,EAAQc,QAAQV,GACTmW,KAILtI,EAAKmB,WAAazO,EAAO,KAC1BsN,EAAKM,eAAe2H,OACjB9V,IAAS6N,EAAKM,eAAe2H,OACpB,KAAT9V,GAAwB,KAATA,IAEnBJ,EAAQe,KAAK,iBACNuV,EAASlW,IAGXF,EAAIE,EACb,CAKA,SAASkW,EAASlW,GAKhB,OAJAJ,EAAQY,MAAM,kBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,kBACbkN,EAAKM,eAAe2H,OAASjI,EAAKM,eAAe2H,QAAU9V,EACpDJ,EAAQsP,MACb,IACArB,EAAKmB,UAAYlP,EAAMsW,EACvBxW,EAAQ0N,QACN+I,GACAC,EACAC,GAGN,CAGA,SAASH,EAAQpW,GAGf,OAFA6N,EAAKM,eAAeqI,kBAAmB,EACvCR,IACOM,EAAYtW,EACrB,CAGA,SAASuW,EAAYvW,GACnB,OAAI,QAAcA,IAChBJ,EAAQY,MAAM,4BACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,4BACN2V,GAGFxW,EAAIE,EACb,CAGA,SAASsW,EAAYtW,GAInB,OAHA6N,EAAKM,eAAe5N,KAClByV,EACAnI,EAAKiE,eAAelS,EAAQe,KAAK,mBAAmB,GAAM5G,OACrD8F,EAAGG,EACZ,CACF,EAtIEoO,aAAc,CACZzO,SA2IJ,SAAkCC,EAASC,EAAIC,GAC7C,MAAM+N,EAAOnQ,KAEb,OADAmQ,EAAKM,eAAeI,gBAAazL,EAC1BlD,EAAQsP,MAAM,KAGrB,SAAiBlP,GAMf,OALA6N,EAAKM,eAAesI,kBAClB5I,EAAKM,eAAesI,mBACpB5I,EAAKM,eAAeqI,kBAGf,IAAAzW,GACLH,EACAC,EACA,iBACAgO,EAAKM,eAAe5N,KAAO,EAJtB,CAKLP,EACJ,IAGA,SAAkBA,GAChB,GAAI6N,EAAKM,eAAesI,qBAAsB,QAAczW,GAG1D,OAFA6N,EAAKM,eAAesI,uBAAoB3T,EACxC+K,EAAKM,eAAeqI,sBAAmB1T,EAChC4T,EAAiB1W,GAK1B,OAFA6N,EAAKM,eAAesI,uBAAoB3T,EACxC+K,EAAKM,eAAeqI,sBAAmB1T,EAChClD,EAAQ0N,QAAQqJ,GAAiB9W,EAAI6W,EAArC9W,CAAuDI,EAChE,IAGA,SAAS0W,EAAiB1W,GAKxB,OAHA6N,EAAKM,eAAeI,YAAa,EAEjCV,EAAKmB,eAAYlM,GACV,IAAA/C,GACLH,EACAA,EAAQ0N,QAAQxL,GAAMjC,EAAIC,GAC1B,aACA+N,EAAKN,OAAOxK,WAAWqN,QAAQC,KAAKnX,SAAS,qBACzC4J,EACA,EANC,CAOL9C,EACJ,CACF,GAzLEW,KAuNF,SAAyBf,GACvBA,EAAQe,KAAKjD,KAAKyQ,eAAenP,KACnC,GArNMqX,GAAoC,CACxC1W,SA0NF,SAA0CC,EAASC,EAAIC,GACrD,MAAM+N,EAAOnQ,KACb,OAAO,IAAAqC,GACLH,GASF,SAAqBI,GACnB,MAAM6R,EAAOhE,EAAK3J,OAAO2J,EAAK3J,OAAOnK,OAAS,GAC9C,QAAQ,QAAciG,IACpB6R,GACiB,6BAAjBA,EAAK,GAAG7S,KACNa,EAAGG,GACHF,EAAIE,EACV,GAdE,2BACA6N,EAAKN,OAAOxK,WAAWqN,QAAQC,KAAKnX,SAAS,qBACzC4J,EACA,EAYR,EA7OE7C,SAAS,GAIL0W,GAAkB,CACtBhX,SAoLF,SAAwBC,EAASC,EAAIC,GACnC,MAAM+N,EAAOnQ,KACb,OAAO,IAAAqC,GACLH,GAOF,SAAqBI,GACnB,MAAM6R,EAAOhE,EAAK3J,OAAO2J,EAAK3J,OAAOnK,OAAS,GAC9C,OAAO8X,GACY,mBAAjBA,EAAK,GAAG7S,MACR6S,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9X,SAAW8T,EAAKM,eAAe5N,KACnEV,EAAGG,GACHF,EAAIE,EACV,GAZE,iBACA6N,EAAKM,eAAe5N,KAAO,EAY/B,EArMEN,SAAS,GC3BJ,MAAM2W,GAAa,CACxBrjB,KAAM,aACNoM,SAQF,SAAiCC,EAASC,EAAIC,GAC5C,MAAM+N,EAAOnQ,KACb,OAGA,SAAesC,GACb,GAAa,KAATA,EAAa,CACf,MAAMkU,EAAQrG,EAAKM,eAanB,OAXK+F,EAAM2C,OACTjX,EAAQY,MAAM,aAAc,CAC1BuQ,YAAY,IAEdmD,EAAM2C,MAAO,GAGfjX,EAAQY,MAAM,oBACdZ,EAAQY,MAAM,oBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,oBACNmW,CACT,CAEA,OAAOhX,EAAIE,EACb,EAGA,SAAS8W,EAAM9W,GACb,OAAI,QAAcA,IAChBJ,EAAQY,MAAM,8BACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,8BACbf,EAAQe,KAAK,oBACNd,IAGTD,EAAQe,KAAK,oBACNd,EAAGG,GACZ,CACF,EA9CEoO,aAAc,CACZzO,SAgDJ,SAAwCC,EAASC,EAAIC,GACnD,OAAO,IAAAC,GACLH,EACAA,EAAQ0N,QAAQsJ,GAAY/W,EAAIC,GAChC,aACApC,KAAK6P,OAAOxK,WAAWqN,QAAQC,KAAKnX,SAAS,qBAAkB4J,EAAY,EAE/E,GArDEnC,KAwDF,SAAcf,GACZA,EAAQe,KAAK,aACf,GCnDO,SAASoW,GACdnX,EACAC,EACAC,EACAd,EACAgY,EACAC,EACAC,EACAC,EACAhX,GAEA,MAAMC,EAAQD,GAAOE,OAAOC,kBAC5B,IAAI8W,EAAU,EACd,OAGA,SAAepX,GACb,GAAa,KAATA,EAMF,OALAJ,EAAQY,MAAMxB,GACdY,EAAQY,MAAMwW,GACdpX,EAAQY,MAAMyW,GACdrX,EAAQc,QAAQV,GAChBJ,EAAQe,KAAKsW,GACNI,EAGT,GAAa,OAATrX,GAA0B,KAATA,IAAe,QAAaA,GAC/C,OAAOF,EAAIE,GASb,OANAJ,EAAQY,MAAMxB,GACdY,EAAQY,MAAM0W,GACdtX,EAAQY,MAAM2W,GACdvX,EAAQY,MAAM,cAAe,CAC3BoN,YAAa,WAER0J,EAAetX,EACxB,EAGA,SAASqX,EAA0BrX,GACjC,OAAa,KAATA,GACFJ,EAAQY,MAAMyW,GACdrX,EAAQc,QAAQV,GAChBJ,EAAQe,KAAKsW,GACbrX,EAAQe,KAAKqW,GACbpX,EAAQe,KAAK3B,GACNa,IAGTD,EAAQY,MAAM2W,GACdvX,EAAQY,MAAM,cAAe,CAC3BoN,YAAa,WAER2J,EAAoBvX,GAC7B,CAGA,SAASuX,EAAoBvX,GAC3B,OAAa,KAATA,GACFJ,EAAQe,KAAK,eACbf,EAAQe,KAAKwW,GACNE,EAA0BrX,IAGtB,OAATA,GAA0B,KAATA,IAAe,QAAmBA,GAC9CF,EAAIE,IAGbJ,EAAQc,QAAQV,GACA,KAATA,EAAcwX,EAA4BD,EACnD,CAGA,SAASC,EAA0BxX,GACjC,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCJ,EAAQc,QAAQV,GACTuX,GAGFA,EAAoBvX,EAC7B,CAGA,SAASsX,EAAetX,GACtB,OAAa,KAATA,IACIoX,EAAUhX,EAAcN,EAAIE,IAClCJ,EAAQc,QAAQV,GACTsX,GAGI,KAATtX,EACGoX,KAQLxX,EAAQc,QAAQV,GACTsX,IARL1X,EAAQe,KAAK,eACbf,EAAQe,KAAKwW,GACbvX,EAAQe,KAAKuW,GACbtX,EAAQe,KAAK3B,GACNa,EAAGG,IAOD,OAATA,IAAiB,QAA0BA,GACzCoX,EAAgBtX,EAAIE,IACxBJ,EAAQe,KAAK,eACbf,EAAQe,KAAKwW,GACbvX,EAAQe,KAAKuW,GACbtX,EAAQe,KAAK3B,GACNa,EAAGG,KAGR,QAAaA,GAAcF,EAAIE,IACnCJ,EAAQc,QAAQV,GACA,KAATA,EAAcyX,EAAuBH,EAC9C,CAGA,SAASG,EAAqBzX,GAC5B,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCJ,EAAQc,QAAQV,GACTsX,GAGFA,EAAetX,EACxB,CACF,CCpIO,SAAS0X,GAAa9X,EAASC,EAAIC,EAAKd,EAAM2Y,EAAYR,GAC/D,MAAMtJ,EAAOnQ,KACb,IAGIyK,EAHA5H,EAAO,EAIX,OAGA,SAAeP,GAMb,OALAJ,EAAQY,MAAMxB,GACdY,EAAQY,MAAMmX,GACd/X,EAAQc,QAAQV,GAChBJ,EAAQe,KAAKgX,GACb/X,EAAQY,MAAM2W,GACP1E,CACT,EAGA,SAASA,EAAQzS,GACf,OACW,OAATA,GACS,KAATA,GACU,KAATA,IAAgBmI,GAQP,KAATnI,IACEO,GACD,2BAA4BsN,EAAKN,OAAOxK,YAC1CxC,EAAO,IAEAT,EAAIE,GAGA,KAATA,GACFJ,EAAQe,KAAKwW,GACbvX,EAAQY,MAAMmX,GACd/X,EAAQc,QAAQV,GAChBJ,EAAQe,KAAKgX,GACb/X,EAAQe,KAAK3B,GACNa,IAGL,QAAmBG,IACrBJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,cACN8R,IAGT7S,EAAQY,MAAM,cAAe,CAC3BoN,YAAa,WAERgK,EAAM5X,GACf,CAGA,SAAS4X,EAAM5X,GACb,OACW,OAATA,GACS,KAATA,GACS,KAATA,IACA,QAAmBA,IACnBO,IAAS,KAETX,EAAQe,KAAK,eACN8R,EAAQzS,KAGjBJ,EAAQc,QAAQV,GAChBmI,EAAOA,KAAS,QAAcnI,GACd,KAATA,EAAc6X,EAAcD,EACrC,CAGA,SAASC,EAAY7X,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCJ,EAAQc,QAAQV,GAChBO,IACOqX,GAGFA,EAAM5X,EACf,CACF,CCzFO,SAAS8X,GAAalY,EAASC,EAAIC,EAAKd,EAAM2Y,EAAYR,GAE/D,IAAIrB,EACJ,OAGA,SAAe9V,GAMb,OALAJ,EAAQY,MAAMxB,GACdY,EAAQY,MAAMmX,GACd/X,EAAQc,QAAQV,GAChBJ,EAAQe,KAAKgX,GACb7B,EAAkB,KAAT9V,EAAc,GAAKA,EACrB+X,CACT,EAGA,SAASA,EAAkB/X,GACzB,OAAIA,IAAS8V,GACXlW,EAAQY,MAAMmX,GACd/X,EAAQc,QAAQV,GAChBJ,EAAQe,KAAKgX,GACb/X,EAAQe,KAAK3B,GACNa,IAGTD,EAAQY,MAAM2W,GACPa,EAAahY,GACtB,CAGA,SAASgY,EAAahY,GACpB,OAAIA,IAAS8V,GACXlW,EAAQe,KAAKwW,GACNY,EAAkBjC,IAGd,OAAT9V,EACKF,EAAIE,IAGT,QAAmBA,IACrBJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,eACN,IAAAZ,GAAaH,EAASoY,EAAc,gBAG7CpY,EAAQY,MAAM,cAAe,CAC3BoN,YAAa,WAERqK,EAAMjY,GACf,CAGA,SAASiY,EAAMjY,GACb,OAAIA,IAAS8V,GAAmB,OAAT9V,IAAiB,QAAmBA,IACzDJ,EAAQe,KAAK,eACNqX,EAAahY,KAGtBJ,EAAQc,QAAQV,GACA,KAATA,EAAckY,EAAcD,EACrC,CAGA,SAASC,EAAYlY,GACnB,OAAIA,IAAS8V,GAAmB,KAAT9V,GACrBJ,EAAQc,QAAQV,GACTiY,GAGFA,EAAMjY,EACf,CACF,CChFO,SAASmY,GAAkBvY,EAASC,GAEzC,IAAIsQ,EACJ,OAGA,SAAS9S,EAAM2C,GACb,IAAI,QAAmBA,GAKrB,OAJAJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,cACbwP,GAAO,EACA9S,EAGT,IAAI,QAAc2C,GAChB,OAAO,IAAAD,GACLH,EACAvC,EACA8S,EAAO,aAAe,aAHjB,CAILnQ,GAGJ,OAAOH,EAAGG,EACZ,CACF,iBCnBO,MAAMoY,GAAa,CACxB7kB,KAAM,aACNoM,SAUF,SAA4BC,EAASC,EAAIC,GACvC,MAAM+N,EAAOnQ,KAGb,IAAI2a,EACJ,OAGA,SAAerY,GAEb,OADAJ,EAAQY,MAAM,cACPkX,GAAajd,KAClBoT,EACAjO,EACA0Y,EACAxY,EACA,kBACA,wBACA,wBAPK4X,CAQL1X,EACJ,EAGA,SAASsY,EAAWtY,GAKlB,OAJAqY,GAAa,QACXxK,EAAKiE,eAAejE,EAAK3J,OAAO2J,EAAK3J,OAAOnK,OAAS,GAAG,IAAI0E,MAAM,GAAI,IAG3D,KAATuB,GACFJ,EAAQY,MAAM,oBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,oBAENwX,GACLvY,EACAmX,GACEnX,EACAA,EAAQ0N,QACNiL,IACA,IAAAxY,GAAaH,EAASkX,EAAO,eAC7B,IAAA/W,GAAaH,EAASkX,EAAO,eAE/BhX,EACA,wBACA,+BACA,qCACA,2BACA,iCAKCA,EAAIE,EACb,CAGA,SAAS8W,EAAM9W,GACb,OAAa,OAATA,IAAiB,QAAmBA,IACtCJ,EAAQe,KAAK,cAERkN,EAAKN,OAAOiL,QAAQtf,SAASmf,IAChCxK,EAAKN,OAAOiL,QAAQna,KAAKga,GAGpBxY,EAAGG,IAGLF,EAAIE,EACb,CACF,GA1EMuY,GAAiB,CACrB5Y,SA4EF,SAAuBC,EAASC,EAAIC,GAClC,OAGA,SAAeE,GACb,OAAO,QAA0BA,GAC7BmY,GAAkBvY,EAASqD,EAA3BkV,CAAmCnY,GACnCF,EAAIE,EACV,EAGA,SAASiD,EAAOjD,GACd,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzB8X,GACLlY,GACA,IAAAG,GAAaH,EAASkX,EAAO,cAC7BhX,EACA,kBACA,wBACA,wBANKgY,CAOL9X,GAGGF,EAAIE,EACb,CAGA,SAAS8W,EAAM9W,GACb,OAAgB,OAATA,IAAiB,QAAmBA,GAAQH,EAAGG,GAAQF,EAAIE,EACpE,CACF,EAzGEC,SAAS,GCdJ,MAAMwY,GAAe,CAC1BllB,KAAM,eACNoM,SAUF,SAA8BC,EAASC,EAAIC,GACzC,MAAM+N,EAAOnQ,KACb,OAGA,SAAesC,GAEb,OADAJ,EAAQY,MAAM,iBACP,IAAAT,GAAaH,EAAS8Y,EAAkB,aAAc,EAAtD,CAA6D1Y,EACtE,EAGA,SAAS0Y,EAAiB1Y,GACxB,MAAM6R,EAAOhE,EAAK3J,OAAO2J,EAAK3J,OAAOnK,OAAS,GAC9C,OAAO8X,GACY,eAAjBA,EAAK,GAAG7S,MACR6S,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9X,QAAU,EAC9C4e,EAAY3Y,GACZF,EAAIE,EACV,CAGA,SAAS2Y,EAAY3Y,GACnB,OAAa,OAATA,EACK8W,EAAM9W,IAGX,QAAmBA,GACdJ,EAAQ0N,QAAQsL,GAAiBD,EAAa7B,EAA9ClX,CAAqDI,IAG9DJ,EAAQY,MAAM,iBACP3C,EAAQmC,GACjB,CAGA,SAASnC,EAAQmC,GACf,OAAa,OAATA,IAAiB,QAAmBA,IACtCJ,EAAQe,KAAK,iBACNgY,EAAY3Y,KAGrBJ,EAAQc,QAAQV,GACTnC,EACT,CAGA,SAASiZ,EAAM9W,GAEb,OADAJ,EAAQe,KAAK,gBACNd,EAAGG,EACZ,CACF,GAxDM4Y,GAAkB,CACtBjZ,SA0DF,SAAiCC,EAASC,EAAIC,GAC5C,MAAM+N,EAAOnQ,KACb,OAAOL,EAGP,SAASA,EAAM2C,GAEb,OAAI6N,EAAKN,OAAO+B,KAAKzB,EAAK0B,MAAMjS,MACvBwC,EAAIE,IAGT,QAAmBA,IACrBJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,cACNtD,IAGF,IAAA0C,GAAaH,EAAS+Y,EAAa,aAAc,EAAjD,CAAwD3Y,EACjE,CAGA,SAAS2Y,EAAY3Y,GACnB,MAAM6R,EAAOhE,EAAK3J,OAAO2J,EAAK3J,OAAOnK,OAAS,GAC9C,OAAO8X,GACY,eAAjBA,EAAK,GAAG7S,MACR6S,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9X,QAAU,EAC9C8F,EAAGG,IACH,QAAmBA,GACnB3C,EAAM2C,GACNF,EAAIE,EACV,CACF,EAzFEC,SAAS,GCHJ,MAAM4Y,GAAa,CACxBtlB,KAAM,aACNoM,SA4DF,SAA4BC,EAASC,EAAIC,GACvC,MAAM+N,EAAOnQ,KACb,IAAI6C,EAAO,EACX,OAGA,SAAeP,GAGb,OAFAJ,EAAQY,MAAM,cACdZ,EAAQY,MAAM,sBACPsY,EAAgB9Y,EACzB,EAGA,SAAS8Y,EAAgB9Y,GACvB,OAAa,KAATA,GAAeO,IAAS,GAC1BX,EAAQc,QAAQV,GACT8Y,GAGI,OAAT9Y,IAAiB,QAA0BA,IAC7CJ,EAAQe,KAAK,sBACNkN,EAAKmB,UAAYnP,EAAGG,GAAQ+Y,EAAa/Y,IAG3CF,EAAIE,EACb,CAGA,SAAS+Y,EAAa/Y,GACpB,OAAa,KAATA,GACFJ,EAAQY,MAAM,sBACPuV,EAAS/V,IAGL,OAATA,IAAiB,QAAmBA,IACtCJ,EAAQe,KAAK,cACNd,EAAGG,KAGR,QAAcA,IACT,IAAAD,GAAaH,EAASmZ,EAAc,aAApC,CAAkD/Y,IAG3DJ,EAAQY,MAAM,kBACP2H,EAAKnI,GACd,CAGA,SAAS+V,EAAS/V,GAChB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACT+V,IAGTnW,EAAQe,KAAK,sBACNoY,EAAa/Y,GACtB,CAGA,SAASmI,EAAKnI,GACZ,OAAa,OAATA,GAA0B,KAATA,IAAe,QAA0BA,IAC5DJ,EAAQe,KAAK,kBACNoY,EAAa/Y,KAGtBJ,EAAQc,QAAQV,GACTmI,EACT,CACF,EA/HE9D,QAIF,SAA2BH,EAAQC,GACjC,IAIItG,EAGA0U,EAPAd,EAAavN,EAAOnK,OAAS,EAC7BsT,EAAe,EAQkB,eAAjCnJ,EAAOmJ,GAAc,GAAGrO,OAC1BqO,GAAgB,GAIhBoE,EAAa,EAAIpE,GACc,eAA/BnJ,EAAOuN,GAAY,GAAGzS,OAEtByS,GAAc,GAIiB,uBAA/BvN,EAAOuN,GAAY,GAAGzS,OACrBqO,IAAiBoE,EAAa,GAC5BA,EAAa,EAAIpE,GACmB,eAAnCnJ,EAAOuN,EAAa,GAAG,GAAGzS,QAE9ByS,GAAcpE,EAAe,IAAMoE,EAAa,EAAI,GAGlDA,EAAapE,IACfxP,EAAU,CACRmB,KAAM,iBACN3B,MAAO6G,EAAOmJ,GAAc,GAAGhQ,MAC/BM,IAAKuG,EAAOuN,GAAY,GAAG9T,KAE7B4U,EAAO,CACLvT,KAAM,YACN3B,MAAO6G,EAAOmJ,GAAc,GAAGhQ,MAC/BM,IAAKuG,EAAOuN,GAAY,GAAG9T,IAE3BiQ,YAAa,SAEf,OAAO1J,EAAQmJ,EAAcoE,EAAapE,EAAe,EAAG,CAC1D,CAAC,QAASxP,EAASsG,GACnB,CAAC,QAASoO,EAAMpO,GAChB,CAAC,OAAQoO,EAAMpO,GACf,CAAC,OAAQtG,EAASsG,MAItB,OAAOD,CACT,GChEO,MAAM8U,GAAkB,CAC7BzlB,KAAM,kBACNoM,SA+DF,SAAiCC,EAASC,EAAIC,GAC5C,MAAM+N,EAAOnQ,KACb,IAGIoY,EAGAmD,EANAvW,EAAQmL,EAAK3J,OAAOnK,OAQxB,KAAO2I,KAGL,GACiC,eAA/BmL,EAAK3J,OAAOxB,GAAO,GAAG1D,MACS,eAA/B6O,EAAK3J,OAAOxB,GAAO,GAAG1D,MACS,YAA/B6O,EAAK3J,OAAOxB,GAAO,GAAG1D,KACtB,CACAia,EAA2C,cAA/BpL,EAAK3J,OAAOxB,GAAO,GAAG1D,KAClC,KACF,CAGF,OAGA,SAAegB,GACb,IAAK6N,EAAKN,OAAO+B,KAAKzB,EAAK0B,MAAMjS,QAAUuQ,EAAKmB,WAAaiK,GAI3D,OAHArZ,EAAQY,MAAM,qBACdZ,EAAQY,MAAM,6BACdsV,EAAS9V,EACFkZ,EAAgBlZ,GAGzB,OAAOF,EAAIE,EACb,EAGA,SAASkZ,EAAgBlZ,GACvB,OAAIA,IAAS8V,GACXlW,EAAQc,QAAQV,GACTkZ,IAGTtZ,EAAQe,KAAK,8BACN,IAAAZ,GAAaH,EAASuZ,EAAoB,aAA1C,CAAwDnZ,GACjE,CAGA,SAASmZ,EAAmBnZ,GAC1B,OAAa,OAATA,IAAiB,QAAmBA,IACtCJ,EAAQe,KAAK,qBACNd,EAAGG,IAGLF,EAAIE,EACb,CACF,EAvHE4V,UAIF,SAAkC1R,EAAQC,GACxC,IAGItG,EAGA0U,EAGA6F,EATA1V,EAAQwB,EAAOnK,OAYnB,KAAO2I,KACL,GAAyB,UAArBwB,EAAOxB,GAAO,GAAgB,CAChC,GAA8B,YAA1BwB,EAAOxB,GAAO,GAAG1D,KAAoB,CACvCnB,EAAU6E,EACV,KACF,CAE8B,cAA1BwB,EAAOxB,GAAO,GAAG1D,OACnBuT,EAAO7P,EAEX,KAEgC,YAA1BwB,EAAOxB,GAAO,GAAG1D,MAEnBkF,EAAOrC,OAAOa,EAAO,GAGlB0V,GAAwC,eAA1BlU,EAAOxB,GAAO,GAAG1D,OAClCoZ,EAAa1V,GAKnB,MAAM0W,EAAU,CACdpa,KAAM,gBACN3B,MAAOrE,OAAO0S,OAAO,CAAC,EAAGxH,EAAOqO,GAAM,GAAGlV,OACzCM,IAAK3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAOA,EAAOnK,OAAS,GAAG,GAAG4D,MAGtDuG,EAAOqO,GAAM,GAAGvT,KAAO,oBAGnBoZ,GACFlU,EAAOrC,OAAO0Q,EAAM,EAAG,CAAC,QAAS6G,EAASjV,IAC1CD,EAAOrC,OAAOuW,EAAa,EAAG,EAAG,CAAC,OAAQlU,EAAOrG,GAAS,GAAIsG,IAC9DD,EAAOrG,GAAS,GAAGF,IAAM3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAOkU,GAAY,GAAGza,MAEjEuG,EAAOrG,GAAS,GAAKub,EAIvB,OADAlV,EAAO7F,KAAK,CAAC,OAAQ+a,EAASjV,IACvBD,CACT,GC/DO,MAAMmV,GAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,MAaWC,GAAe,CAAC,MAAO,SAAU,QAAS,YClE1CC,GAAW,CACtBhmB,KAAM,WACNoM,SAkCF,SAA0BC,EAASC,EAAIC,GACrC,MAAM+N,EAAOnQ,KAGb,IAAIuY,EAGAuD,EAGAtR,EAGAxF,EAGAoT,EACJ,OAGA,SAAe9V,GAIb,OAHAJ,EAAQY,MAAM,YACdZ,EAAQY,MAAM,gBACdZ,EAAQc,QAAQV,GACT6W,CACT,EAGA,SAASA,EAAK7W,GACZ,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACTyZ,GAGI,KAATzZ,GACFJ,EAAQc,QAAQV,GACT0Z,GAGI,KAAT1Z,GACFJ,EAAQc,QAAQV,GAChBiW,EAAO,EAGApI,EAAKmB,UAAYnP,EAAK8Z,IAG3B,QAAW3Z,IACbJ,EAAQc,QAAQV,GAChBkI,EAASvG,OAAOC,aAAa5B,GAC7BwZ,GAAW,EACJI,GAGF9Z,EAAIE,EACb,CAGA,SAASyZ,EAAiBzZ,GACxB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GAChBiW,EAAO,EACA4D,GAGI,KAAT7Z,GACFJ,EAAQc,QAAQV,GAChBiW,EAAO,EACP/N,EAAS,SACTxF,EAAQ,EACDoX,IAGL,QAAW9Z,IACbJ,EAAQc,QAAQV,GAChBiW,EAAO,EACApI,EAAKmB,UAAYnP,EAAK8Z,GAGxB7Z,EAAIE,EACb,CAGA,SAAS6Z,EAAkB7Z,GACzB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACT6N,EAAKmB,UAAYnP,EAAK8Z,GAGxB7Z,EAAIE,EACb,CAGA,SAAS8Z,EAAgB9Z,GACvB,OAAIA,IAASkI,EAAOpO,WAAW4I,MAC7B9C,EAAQc,QAAQV,GACT0C,IAAUwF,EAAOnO,OACpB8T,EAAKmB,UACHnP,EACAuO,EACF0L,GAGCha,EAAIE,EACb,CAGA,SAAS0Z,EAAc1Z,GACrB,OAAI,QAAWA,IACbJ,EAAQc,QAAQV,GAChBkI,EAASvG,OAAOC,aAAa5B,GACtB4Z,GAGF9Z,EAAIE,EACb,CAGA,SAAS4Z,EAAQ5Z,GACf,OACW,OAATA,GACS,KAATA,GACS,KAATA,IACA,QAA0BA,GAGf,KAATA,GACAwZ,GACAF,GAAapgB,SAASgP,EAAOnE,gBAE7BkS,EAAO,EACApI,EAAKmB,UAAYnP,EAAGG,GAAQoO,EAAapO,IAG9CqZ,GAAengB,SAASgP,EAAOnE,gBACjCkS,EAAO,EAEM,KAATjW,GACFJ,EAAQc,QAAQV,GACT+Z,GAGFlM,EAAKmB,UAAYnP,EAAGG,GAAQoO,EAAapO,KAGlDiW,EAAO,EAEApI,EAAKmB,YAAcnB,EAAKN,OAAO+B,KAAKzB,EAAK0B,MAAMjS,MAClDwC,EAAIE,GACJwZ,EACAQ,EAA4Bha,GAC5Bia,EAAwBja,IAGjB,KAATA,IAAe,QAAkBA,IACnCJ,EAAQc,QAAQV,GAChBkI,GAAUvG,OAAOC,aAAa5B,GACvB4Z,GAGF9Z,EAAIE,EACb,CAGA,SAAS+Z,EAAiB/Z,GACxB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACT6N,EAAKmB,UAAYnP,EAAKuO,GAGxBtO,EAAIE,EACb,CAGA,SAASia,EAAwBja,GAC/B,OAAI,QAAcA,IAChBJ,EAAQc,QAAQV,GACTia,GAGFC,EAAYla,EACrB,CAGA,SAASga,EAA4Bha,GACnC,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACTka,GAGI,KAATla,GAAwB,KAATA,IAAe,QAAWA,IAC3CJ,EAAQc,QAAQV,GACTma,IAGL,QAAcna,IAChBJ,EAAQc,QAAQV,GACTga,GAGFE,EAAYla,EACrB,CAGA,SAASma,EAAsBna,GAC7B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,IACA,QAAkBA,IAElBJ,EAAQc,QAAQV,GACTma,GAGFC,EAA2Bpa,EACpC,CAGA,SAASoa,EAA2Bpa,GAClC,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACTqa,IAGL,QAAcra,IAChBJ,EAAQc,QAAQV,GACToa,GAGFJ,EAA4Bha,EACrC,CAGA,SAASqa,EAA6Bra,GACpC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOF,EAAIE,GAGA,KAATA,GAAwB,KAATA,GACjBJ,EAAQc,QAAQV,GAChB8V,EAAS9V,EACFsa,IAGL,QAActa,IAChBJ,EAAQc,QAAQV,GACTqa,IAGTvE,EAAS,KACFyE,EAA+Bva,GACxC,CAGA,SAASsa,EAA6Bta,GACpC,OAAa,OAATA,IAAiB,QAAmBA,GAC/BF,EAAIE,GAGTA,IAAS8V,GACXlW,EAAQc,QAAQV,GACTwa,IAGT5a,EAAQc,QAAQV,GACTsa,EACT,CAGA,SAASC,EAA+Bva,GACtC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,IACA,QAA0BA,GAEnBoa,EAA2Bpa,IAGpCJ,EAAQc,QAAQV,GACTua,EACT,CAGA,SAASC,EAAkCxa,GACzC,OAAa,KAATA,GAAwB,KAATA,IAAe,QAAcA,GACvCga,EAA4Bha,GAG9BF,EAAIE,EACb,CAGA,SAASka,EAAYla,GACnB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACTya,GAGF3a,EAAIE,EACb,CAGA,SAASya,EAAcza,GACrB,OAAI,QAAcA,IAChBJ,EAAQc,QAAQV,GACTya,GAGO,OAATza,IAAiB,QAAmBA,GACvCoO,EAAapO,GACbF,EAAIE,EACV,CAGA,SAASoO,EAAapO,GACpB,OAAa,KAATA,GAAwB,IAATiW,GACjBrW,EAAQc,QAAQV,GACT0a,GAGI,KAAT1a,GAAwB,IAATiW,GACjBrW,EAAQc,QAAQV,GACT2a,GAGI,KAAT3a,GAAwB,IAATiW,GACjBrW,EAAQc,QAAQV,GACT4a,GAGI,KAAT5a,GAAwB,IAATiW,GACjBrW,EAAQc,QAAQV,GACT2Z,GAGI,KAAT3Z,GAAwB,IAATiW,GACjBrW,EAAQc,QAAQV,GACT6a,KAGL,QAAmB7a,IAAmB,IAATiW,GAAuB,IAATA,EAQlC,OAATjW,IAAiB,QAAmBA,GAC/B8a,EAAyB9a,IAGlCJ,EAAQc,QAAQV,GACToO,GAZExO,EAAQsP,MACb6L,GACAH,EACAE,EAHKlb,CAILI,EASN,CAGA,SAAS8a,EAAyB9a,GAEhC,OADAJ,EAAQe,KAAK,gBACNqa,EAAkBhb,EAC3B,CAGA,SAASgb,EAAkBhb,GACzB,OAAa,OAATA,EACKkK,EAAKlK,IAGV,QAAmBA,GACdJ,EAAQ0N,QACb,CACE3N,SAAUsb,EACVhb,SAAS,GAEX+a,EACA9Q,EANKtK,CAOLI,IAGJJ,EAAQY,MAAM,gBACP4N,EAAapO,GACtB,CAGA,SAASib,EAAYrb,EAASC,EAAIC,GAChC,OAGA,SAAeE,GAIb,OAHAJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,cACN8M,CACT,EAGA,SAASA,EAAUzN,GACjB,OAAO6N,EAAKN,OAAO+B,KAAKzB,EAAK0B,MAAMjS,MAAQwC,EAAIE,GAAQH,EAAGG,EAC5D,CACF,CAGA,SAAS0a,EAA0B1a,GACjC,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACT2Z,GAGFvL,EAAapO,EACtB,CAGA,SAAS2a,EAAuB3a,GAC9B,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GAChBkI,EAAS,GACFgT,GAGF9M,EAAapO,EACtB,CAGA,SAASkb,EAAsBlb,GAC7B,OAAa,KAATA,GAAesZ,GAAapgB,SAASgP,EAAOnE,gBAC9CnE,EAAQc,QAAQV,GACT4a,IAGL,QAAW5a,IAASkI,EAAOnO,OAAS,GACtC6F,EAAQc,QAAQV,GAChBkI,GAAUvG,OAAOC,aAAa5B,GACvBkb,GAGF9M,EAAapO,EACtB,CAGA,SAAS6a,EAAgC7a,GACvC,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACT2Z,GAGFvL,EAAapO,EACtB,CAGA,SAAS2Z,EAA8B3Z,GACrC,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACT4a,GAGI,KAAT5a,GAAwB,IAATiW,GACjBrW,EAAQc,QAAQV,GACT2Z,GAGFvL,EAAapO,EACtB,CAGA,SAAS4a,EAAkB5a,GACzB,OAAa,OAATA,IAAiB,QAAmBA,IACtCJ,EAAQe,KAAK,gBACNuJ,EAAKlK,KAGdJ,EAAQc,QAAQV,GACT4a,EACT,CAGA,SAAS1Q,EAAKlK,GAEZ,OADAJ,EAAQe,KAAK,YACNd,EAAGG,EACZ,CACF,EA7gBE4V,UAWF,SAA2B1R,GACzB,IAAIxB,EAAQwB,EAAOnK,OAEnB,KAAO2I,MACoB,UAArBwB,EAAOxB,GAAO,IAA4C,aAA1BwB,EAAOxB,GAAO,GAAG1D,QAKnD0D,EAAQ,GAAmC,eAA9BwB,EAAOxB,EAAQ,GAAG,GAAG1D,OAEpCkF,EAAOxB,GAAO,GAAGrF,MAAQ6G,EAAOxB,EAAQ,GAAG,GAAGrF,MAE9C6G,EAAOxB,EAAQ,GAAG,GAAGrF,MAAQ6G,EAAOxB,EAAQ,GAAG,GAAGrF,MAElD6G,EAAOrC,OAAOa,EAAQ,EAAG,IAG3B,OAAOwB,CACT,EA7BE4K,UAAU,GAINiM,GAAqB,CACzBpb,SA0gBF,SAA2BC,EAASC,EAAIC,GACtC,OAGA,SAAeE,GAKb,OAJAJ,EAAQe,KAAK,gBACbf,EAAQY,MAAM,mBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,mBACNf,EAAQ0N,QAAQ,IAAWzN,EAAIC,EACxC,CACF,EAphBEG,SAAS,GCfJ,MAAMkb,GAAa,CACxB5nB,KAAM,aACNoM,SAKF,SAA4BC,EAASC,EAAIC,GACvC,MAAM+N,EAAOnQ,KAGP0d,EAAwB,CAC5Bzb,SAuKF,SAA8BC,EAASC,EAAIC,GACzC,IAAIS,EAAO,EACX,OAAO,IAAAR,GACLH,EACAyb,EACA,aACA3d,KAAK6P,OAAOxK,WAAWqN,QAAQC,KAAKnX,SAAS,qBACzC4J,EACA,GAIN,SAASuY,EAAqBrb,GAG5B,OAFAJ,EAAQY,MAAM,mBACdZ,EAAQY,MAAM,2BACP0Y,EAAgBlZ,EACzB,CAGA,SAASkZ,EAAgBlZ,GACvB,OAAIA,IAAS8V,GACXlW,EAAQc,QAAQV,GAChBO,IACO2Y,GAGL3Y,EAAO+a,EAAiBxb,EAAIE,IAChCJ,EAAQe,KAAK,4BACN,IAAAZ,GAAaH,EAASuZ,EAAoB,aAA1C,CAAwDnZ,GACjE,CAGA,SAASmZ,EAAmBnZ,GAC1B,OAAa,OAATA,IAAiB,QAAmBA,IACtCJ,EAAQe,KAAK,mBACNd,EAAGG,IAGLF,EAAIE,EACb,CACF,EA9MEC,SAAS,GAILsb,EAAc,CAClB5b,SA8IF,SAA6BC,EAASC,EAAIC,GACxC,MAAM+N,EAAOnQ,KACb,OAAOL,EAGP,SAASA,EAAM2C,GAIb,OAHAJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,cACN8M,CACT,CAGA,SAASA,EAAUzN,GACjB,OAAO6N,EAAKN,OAAO+B,KAAKzB,EAAK0B,MAAMjS,MAAQwC,EAAIE,GAAQH,EAAGG,EAC5D,CACF,EA7JEC,SAAS,GAEL4R,EAAOnU,KAAKwG,OAAOxG,KAAKwG,OAAOnK,OAAS,GACxCyhB,EACJ3J,GAAyB,eAAjBA,EAAK,GAAG7S,KACZ6S,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9X,OACtC,EACN,IAGI+b,EAHAwF,EAAW,EAIf,OAGA,SAAetb,GAKb,OAJAJ,EAAQY,MAAM,cACdZ,EAAQY,MAAM,mBACdZ,EAAQY,MAAM,2BACdsV,EAAS9V,EACFyb,EAAazb,EACtB,EAGA,SAASyb,EAAazb,GACpB,OAAIA,IAAS8V,GACXlW,EAAQc,QAAQV,GAChBsb,IACOG,IAGT7b,EAAQe,KAAK,2BACN2a,EAAW,EACdxb,EAAIE,IACJ,IAAAD,GAAaH,EAAS8b,EAAU,aAAhC,CAA8C1b,GACpD,CAGA,SAAS0b,EAAS1b,GAChB,OAAa,OAATA,IAAiB,QAAmBA,GAC/B2b,EAAU3b,IAGnBJ,EAAQY,MAAM,uBACdZ,EAAQY,MAAM,cAAe,CAC3BoN,YAAa,WAERhF,EAAK5I,GACd,CAGA,SAAS4I,EAAK5I,GACZ,OAAa,OAATA,IAAiB,QAA0BA,IAC7CJ,EAAQe,KAAK,eACbf,EAAQe,KAAK,wBACN,IAAAZ,GAAaH,EAASgc,EAAW,aAAjC,CAA+C5b,IAG3C,KAATA,GAAeA,IAAS8V,EAAehW,EAAIE,IAC/CJ,EAAQc,QAAQV,GACT4I,EACT,CAGA,SAASgT,EAAU5b,GACjB,OAAa,OAATA,IAAiB,QAAmBA,GAC/B2b,EAAU3b,IAGnBJ,EAAQY,MAAM,uBACdZ,EAAQY,MAAM,cAAe,CAC3BoN,YAAa,WAERiO,EAAK7b,GACd,CAGA,SAAS6b,EAAK7b,GACZ,OAAa,OAATA,IAAiB,QAAmBA,IACtCJ,EAAQe,KAAK,eACbf,EAAQe,KAAK,uBACNgb,EAAU3b,IAGN,KAATA,GAAeA,IAAS8V,EAAehW,EAAIE,IAC/CJ,EAAQc,QAAQV,GACT6b,EACT,CAGA,SAASF,EAAU3b,GAEjB,OADAJ,EAAQe,KAAK,mBACNkN,EAAKmB,UAAYnP,EAAGG,GAAQqN,EAAarN,EAClD,CAGA,SAASqN,EAAarN,GACpB,OAAa,OAATA,EACK8W,EAAM9W,IAGX,QAAmBA,GACdJ,EAAQ0N,QACbiO,EACA3b,EAAQ0N,QACN8N,EACAtE,EACA0E,GACI,IAAAzb,GACEH,EACAyN,EACA,aACAmO,EAAgB,GAElBnO,GAENyJ,EAdKlX,CAeLI,IAGJJ,EAAQY,MAAM,iBACPmR,EAAgB3R,GACzB,CAGA,SAAS2R,EAAgB3R,GACvB,OAAa,OAATA,IAAiB,QAAmBA,IACtCJ,EAAQe,KAAK,iBACN0M,EAAarN,KAGtBJ,EAAQc,QAAQV,GACT2R,EACT,CAGA,SAASmF,EAAM9W,GAEb,OADAJ,EAAQe,KAAK,cACNd,EAAGG,EACZ,CA+DF,EAzNE8O,UAAU,mBCDL,MAAMpV,GAAqB,CAChCnG,KAAM,qBACNoM,SAIF,SAAoCC,EAASC,EAAIC,GAC/C,MAAM+N,EAAOnQ,KACb,IAGIyC,EAGAuB,EANAnB,EAAO,EAOX,OAGA,SAAeP,GAKb,OAJAJ,EAAQY,MAAM,sBACdZ,EAAQY,MAAM,4BACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,4BACNkW,CACT,EAGA,SAASA,EAAK7W,GACZ,OAAa,KAATA,GACFJ,EAAQY,MAAM,mCACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,mCACNmb,IAGTlc,EAAQY,MAAM,2BACdL,EAAM,GACNuB,EAAO,KACAjI,EAAMuG,GACf,CAGA,SAAS8b,EAAQ9b,GACf,OAAa,KAATA,GAAwB,MAATA,GACjBJ,EAAQY,MAAM,uCACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,uCACbf,EAAQY,MAAM,2BACdL,EAAM,EACNuB,EAAO,KACAjI,IAGTmG,EAAQY,MAAM,2BACdL,EAAM,EACNuB,EAAO,KACAjI,EAAMuG,GACf,CAGA,SAASvG,EAAMuG,GAEb,IAAI2N,EAEJ,OAAa,KAAT3N,GAAeO,GACjBoN,EAAQ/N,EAAQe,KAAK,2BAGnBe,IAAS,OACR,QAA8BmM,EAAKiE,eAAenE,KAKrD/N,EAAQY,MAAM,4BACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,4BACbf,EAAQe,KAAK,sBACNd,GAPEC,EAAIE,IAUX0B,EAAK1B,IAASO,IAASJ,GACzBP,EAAQc,QAAQV,GACTvG,GAGFqG,EAAIE,EACb,CACF,GC/FO,MAAM+b,GAAkB,CAC7BxoB,KAAM,kBACNoM,SAIF,SAAiCC,EAASC,EAAIC,GAC5C,OAGA,SAAeE,GAKb,OAJAJ,EAAQY,MAAM,mBACdZ,EAAQY,MAAM,gBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,gBACNkW,CACT,EAGA,SAASA,EAAK7W,GACZ,OAAI,QAAiBA,IACnBJ,EAAQY,MAAM,wBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,wBACbf,EAAQe,KAAK,mBACNd,GAGFC,EAAIE,EACb,CACF,GC7BO,MAAMgc,GAAa,CACxBzoB,KAAM,aACNoM,SAIF,SAA4BC,EAASC,GACnC,OAGA,SAAeG,GAIb,OAHAJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,eACN,IAAAZ,GAAaH,EAASC,EAAI,aACnC,CACF,GCNO,MAAMoc,GAAW,CACtB1oB,KAAM,WACNoM,SAgJF,SAA0BC,EAASC,EAAIC,GACrC,MAAM+N,EAAOnQ,KACb,IAGIwe,EAGA1D,EANA9V,EAAQmL,EAAK3J,OAAOnK,OAQxB,KAAO2I,KACL,IACkC,eAA/BmL,EAAK3J,OAAOxB,GAAO,GAAG1D,MACU,cAA/B6O,EAAK3J,OAAOxB,GAAO,GAAG1D,QACvB6O,EAAK3J,OAAOxB,GAAO,GAAGyZ,UACvB,CACAD,EAAarO,EAAK3J,OAAOxB,GAAO,GAChC,KACF,CAGF,OAGA,SAAe1C,GACb,IAAKkc,EACH,OAAOpc,EAAIE,GAGb,OAAIkc,EAAWE,UAAkBC,EAASrc,IAC1CwY,EAAU3K,EAAKN,OAAOiL,QAAQtf,UAC5B,QACE2U,EAAKiE,eAAe,CAClBzU,MAAO6e,EAAWve,IAClBA,IAAKkQ,EAAK0B,UAIhB3P,EAAQY,MAAM,YACdZ,EAAQY,MAAM,eACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,eACbf,EAAQe,KAAK,YACN2b,EACT,EAGA,SAASA,EAActc,GAErB,OAAa,KAATA,EACKJ,EAAQ0N,QACbiP,GACA1c,EACA2Y,EAAU3Y,EAAKwc,EAHVzc,CAILI,GAGS,KAATA,EACKJ,EAAQ0N,QACbkP,GACA3c,EACA2Y,EACI5Y,EAAQ0N,QAAQmP,GAA6B5c,EAAIwc,GACjDA,EALCzc,CAMLI,GAGGwY,EAAU3Y,EAAGG,GAAQqc,EAASrc,EACvC,CAGA,SAASqc,EAASrc,GAEhB,OADAkc,EAAWC,WAAY,EAChBrc,EAAIE,EACb,CACF,EA1NE4V,UA6CF,SAA2B1R,EAAQC,GACjC,IAIIwJ,EAGAkJ,EAGA6F,EAGAC,EAbAja,EAAQwB,EAAOnK,OACfyV,EAAS,EAcb,KAAO9M,KAGL,GAFAiL,EAAQzJ,EAAOxB,GAAO,GAElBmU,EAAM,CAER,GACiB,SAAflJ,EAAM3O,MACU,cAAf2O,EAAM3O,MAAwB2O,EAAMyO,UAErC,MAIuB,UAArBlY,EAAOxB,GAAO,IAAiC,cAAfiL,EAAM3O,OACxC2O,EAAMyO,WAAY,EAEtB,MAAO,GAAIM,GACT,GACuB,UAArBxY,EAAOxB,GAAO,KACE,eAAfiL,EAAM3O,MAAwC,cAAf2O,EAAM3O,QACrC2O,EAAMwO,YAEPtF,EAAOnU,EAEY,cAAfiL,EAAM3O,MAAsB,CAC9BwQ,EAAS,EACT,KACF,MAEsB,aAAf7B,EAAM3O,OACf0d,EAAQha,GAIZ,MAAMka,EAAQ,CACZ5d,KAA+B,cAAzBkF,EAAO2S,GAAM,GAAG7X,KAAuB,OAAS,QACtD3B,MAAOrE,OAAO0S,OAAO,CAAC,EAAGxH,EAAO2S,GAAM,GAAGxZ,OACzCM,IAAK3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAOA,EAAOnK,OAAS,GAAG,GAAG4D,MAEhDia,EAAQ,CACZ5Y,KAAM,QACN3B,MAAOrE,OAAO0S,OAAO,CAAC,EAAGxH,EAAO2S,GAAM,GAAGxZ,OACzCM,IAAK3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAOwY,GAAO,GAAG/e,MAEpC4U,EAAO,CACXvT,KAAM,YACN3B,MAAOrE,OAAO0S,OAAO,CAAC,EAAGxH,EAAO2S,EAAOrH,EAAS,GAAG,GAAG7R,KACtDA,IAAK3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAOwY,EAAQ,GAAG,GAAGrf,QA+B9C,OA7BAsf,EAAQ,CACN,CAAC,QAASC,EAAOzY,GACjB,CAAC,QAASyT,EAAOzT,IAGnBwY,GAAQ,OAAKA,EAAOzY,EAAOzF,MAAMoY,EAAO,EAAGA,EAAOrH,EAAS,IAE3DmN,GAAQ,OAAKA,EAAO,CAAC,CAAC,QAASpK,EAAMpO,KAErCwY,GAAQ,OACNA,GACA,QACExY,EAAQoJ,OAAOxK,WAAW8Z,WAAWxM,KACrCnM,EAAOzF,MAAMoY,EAAOrH,EAAS,EAAGkN,EAAQ,GACxCvY,IAIJwY,GAAQ,OAAKA,EAAO,CAClB,CAAC,OAAQpK,EAAMpO,GACfD,EAAOwY,EAAQ,GACfxY,EAAOwY,EAAQ,GACf,CAAC,OAAQ9E,EAAOzT,KAGlBwY,GAAQ,OAAKA,EAAOzY,EAAOzF,MAAMie,EAAQ,IAEzCC,GAAQ,OAAKA,EAAO,CAAC,CAAC,OAAQC,EAAOzY,MACrC,OAAOD,EAAQ2S,EAAM3S,EAAOnK,OAAQ4iB,GAC7BzY,CACT,EA3IED,WAmBF,SAA4BC,GAC1B,IAGIyJ,EAHAjL,GAAS,EAKb,OAASA,EAAQwB,EAAOnK,QACtB4T,EAAQzJ,EAAOxB,GAAO,GAGL,eAAfiL,EAAM3O,MACS,cAAf2O,EAAM3O,MACS,aAAf2O,EAAM3O,OAGNkF,EAAOrC,OAAOa,EAAQ,EAAkB,eAAfiL,EAAM3O,KAAwB,EAAI,GAC3D2O,EAAM3O,KAAO,OACb0D,KAIJ,OAAOwB,CACT,GArCMqY,GAAoB,CACxB5c,SAuNF,SAA0BC,EAASC,EAAIC,GACrC,OAGA,SAAeE,GAKb,OAJAJ,EAAQY,MAAM,YACdZ,EAAQY,MAAM,kBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,kBACNwX,GAAkBvY,EAASiX,EACpC,EAGA,SAASA,EAAK7W,GACZ,OAAa,KAATA,EACKrC,EAAIqC,GAGN+W,GACLnX,EACAkd,EACAhd,EACA,sBACA,6BACA,mCACA,yBACA,4BACA,GATKiX,CAUL/W,EACJ,CAGA,SAAS8c,EAAiB9c,GACxB,OAAO,QAA0BA,GAC7BmY,GAAkBvY,EAASmd,EAA3B5E,CAAoCnY,GACpCrC,EAAIqC,EACV,CAGA,SAAS+c,EAAQ/c,GACf,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzB8X,GACLlY,EACAuY,GAAkBvY,EAASjC,GAC3BmC,EACA,gBACA,sBACA,sBANKgY,CAOL9X,GAGGrC,EAAIqC,EACb,CAGA,SAASrC,EAAIqC,GACX,OAAa,KAATA,GACFJ,EAAQY,MAAM,kBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,kBACbf,EAAQe,KAAK,YACNd,GAGFC,EAAIE,EACb,CACF,GArRMwc,GAAyB,CAC7B7c,SAuRF,SAA+BC,EAASC,EAAIC,GAC1C,MAAM+N,EAAOnQ,KACb,OAGA,SAAesC,GACb,OAAO0X,GAAajd,KAClBoT,EACAjO,EACAod,EACAld,EACA,YACA,kBACA,kBAPK4X,CAQL1X,EACJ,EAGA,SAASgd,EAAWhd,GAClB,OAAO6N,EAAKN,OAAOiL,QAAQtf,UACzB,QACE2U,EAAKiE,eAAejE,EAAK3J,OAAO2J,EAAK3J,OAAOnK,OAAS,GAAG,IAAI0E,MAAM,GAAI,KAGtEoB,EAAGG,GACHF,EAAIE,EACV,CACF,GA9SMyc,GAA8B,CAClC9c,SAgTF,SAAoCC,EAASC,EAAIC,GAC/C,OAGA,SAAeE,GAKb,OAJAJ,EAAQY,MAAM,aACdZ,EAAQY,MAAM,mBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,mBACNkW,CACT,EAGA,SAASA,EAAK7W,GACZ,OAAa,KAATA,GACFJ,EAAQY,MAAM,mBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,mBACbf,EAAQe,KAAK,aACNd,GAGFC,EAAIE,EACb,CACF,GCtWO,MAAMid,GAAkB,CAC7B1pB,KAAM,kBACNoM,SAKF,SAAiCC,EAASC,EAAIC,GAC5C,MAAM+N,EAAOnQ,KACb,OAGA,SAAesC,GAKb,OAJAJ,EAAQY,MAAM,cACdZ,EAAQY,MAAM,oBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,oBACNkW,CACT,EAGA,SAASA,EAAK7W,GACZ,OAAa,KAATA,GACFJ,EAAQY,MAAM,eACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,eACbf,EAAQe,KAAK,cACNmW,GAGFhX,EAAIE,EACb,CAGA,SAAS8W,EAAM9W,GAQb,OAAgB,KAATA,GAAe,2BAA4B6N,EAAKN,OAAOxK,WAC1DjD,EAAIE,GACJH,EAAGG,EACT,CACF,EA3CEiE,WAAYgY,GAAShY,2BCIhB,MAAMiZ,GAAY,CACvB3pB,KAAM,YACNoM,SAwKF,SAA2BC,EAASC,GAClC,MAAMsd,EAAmBzf,KAAK6P,OAAOxK,WAAWoa,iBAAiB9M,KAC3D3C,EAAWhQ,KAAKgQ,SAChBzK,GAAS,QAAkByK,GAGjC,IAAIoI,EACJ,OAGA,SAAe9V,GAGb,OAFAJ,EAAQY,MAAM,qBACdsV,EAAS9V,EACF+V,EAAS/V,EAClB,EAGA,SAAS+V,EAAS/V,GAChB,GAAIA,IAAS8V,EAEX,OADAlW,EAAQc,QAAQV,GACT+V,EAGT,MAAMpI,EAAQ/N,EAAQe,KAAK,qBACrBmW,GAAQ,QAAkB9W,GAC1B6W,GACHC,GAAoB,IAAVA,GAAe7T,GAAWka,EAAiBjkB,SAAS8G,GAC3D0c,GACHzZ,GAAsB,IAAXA,GAAgB6T,GAAUqG,EAAiBjkB,SAASwU,GAGlE,OAFAC,EAAMyP,MAAQpQ,QAAmB,KAAX8I,EAAgBe,EAAOA,IAAS5T,IAAWyZ,IACjE/O,EAAM0P,OAASrQ,QAAmB,KAAX8I,EAAgB4G,EAAQA,IAAU5F,IAAUD,IAC5DhX,EAAGG,EACZ,CACF,EAxMEiE,WAQF,SAA6BC,EAAQC,GACnC,IAGI0S,EAGA+F,EAGArK,EAGA+K,EAGApE,EAGA5O,EAGAiT,EAGA/N,EAxBA9M,GAAS,EA6Bb,OAASA,EAAQwB,EAAOnK,QAEtB,GACuB,UAArBmK,EAAOxB,GAAO,IACY,sBAA1BwB,EAAOxB,GAAO,GAAG1D,MACjBkF,EAAOxB,GAAO,GAAG2a,OAIjB,IAFAxG,EAAOnU,EAEAmU,KAEL,GACsB,SAApB3S,EAAO2S,GAAM,IACY,sBAAzB3S,EAAO2S,GAAM,GAAG7X,MAChBkF,EAAO2S,GAAM,GAAGuG,OAChBjZ,EAAQ2N,eAAe5N,EAAO2S,GAAM,IAAI/c,WAAW,KACjDqK,EAAQ2N,eAAe5N,EAAOxB,GAAO,IAAI5I,WAAW,GACtD,CAKA,IACGoK,EAAO2S,GAAM,GAAGwG,QAAUnZ,EAAOxB,GAAO,GAAG0a,SAC3ClZ,EAAOxB,GAAO,GAAG/E,IAAI6R,OAAStL,EAAOxB,GAAO,GAAGrF,MAAMmS,QAAU,MAE7DtL,EAAO2S,GAAM,GAAGlZ,IAAI6R,OACnBtL,EAAO2S,GAAM,GAAGxZ,MAAMmS,OACtBtL,EAAOxB,GAAO,GAAG/E,IAAI6R,OACrBtL,EAAOxB,GAAO,GAAGrF,MAAMmS,QACzB,GAGF,SAGFlF,EACEpG,EAAO2S,GAAM,GAAGlZ,IAAI6R,OAAStL,EAAO2S,GAAM,GAAGxZ,MAAMmS,OAAS,GAC5DtL,EAAOxB,GAAO,GAAG/E,IAAI6R,OAAStL,EAAOxB,GAAO,GAAGrF,MAAMmS,OAAS,EAC1D,EACA,EACN,MAAMnS,EAAQrE,OAAO0S,OAAO,CAAC,EAAGxH,EAAO2S,GAAM,GAAGlZ,KAC1CA,EAAM3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAOxB,GAAO,GAAGrF,OAC/CmgB,GAAUngB,GAAQiN,GAClBkT,GAAU7f,EAAK2M,GACfgT,EAAkB,CAChBte,KAAMsL,EAAM,EAAI,iBAAmB,mBACnCjN,QACAM,IAAK3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAO2S,GAAM,GAAGlZ,MAEzCub,EAAkB,CAChBla,KAAMsL,EAAM,EAAI,iBAAmB,mBACnCjN,MAAOrE,OAAO0S,OAAO,CAAC,EAAGxH,EAAOxB,GAAO,GAAGrF,OAC1CM,OAEF4U,EAAO,CACLvT,KAAMsL,EAAM,EAAI,aAAe,eAC/BjN,MAAOrE,OAAO0S,OAAO,CAAC,EAAGxH,EAAO2S,GAAM,GAAGlZ,KACzCA,IAAK3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAOxB,GAAO,GAAGrF,QAE1Cuf,EAAQ,CACN5d,KAAMsL,EAAM,EAAI,SAAW,WAC3BjN,MAAOrE,OAAO0S,OAAO,CAAC,EAAG4R,EAAgBjgB,OACzCM,IAAK3E,OAAO0S,OAAO,CAAC,EAAGwN,EAAgBvb,MAEzCuG,EAAO2S,GAAM,GAAGlZ,IAAM3E,OAAO0S,OAAO,CAAC,EAAG4R,EAAgBjgB,OACxD6G,EAAOxB,GAAO,GAAGrF,MAAQrE,OAAO0S,OAAO,CAAC,EAAGwN,EAAgBvb,KAC3D4f,EAAa,GAETrZ,EAAO2S,GAAM,GAAGlZ,IAAI6R,OAAStL,EAAO2S,GAAM,GAAGxZ,MAAMmS,SACrD+N,GAAa,OAAKA,EAAY,CAC5B,CAAC,QAASrZ,EAAO2S,GAAM,GAAI1S,GAC3B,CAAC,OAAQD,EAAO2S,GAAM,GAAI1S,MAI9BoZ,GAAa,OAAKA,EAAY,CAC5B,CAAC,QAASX,EAAOzY,GACjB,CAAC,QAASmZ,EAAiBnZ,GAC3B,CAAC,OAAQmZ,EAAiBnZ,GAC1B,CAAC,QAASoO,EAAMpO,KAGlBoZ,GAAa,OACXA,GACA,QACEpZ,EAAQoJ,OAAOxK,WAAW8Z,WAAWxM,KACrCnM,EAAOzF,MAAMoY,EAAO,EAAGnU,GACvByB,IAIJoZ,GAAa,OAAKA,EAAY,CAC5B,CAAC,OAAQhL,EAAMpO,GACf,CAAC,QAAS+U,EAAiB/U,GAC3B,CAAC,OAAQ+U,EAAiB/U,GAC1B,CAAC,OAAQyY,EAAOzY,KAGdD,EAAOxB,GAAO,GAAG/E,IAAI6R,OAAStL,EAAOxB,GAAO,GAAGrF,MAAMmS,QACvDA,EAAS,EACT+N,GAAa,OAAKA,EAAY,CAC5B,CAAC,QAASrZ,EAAOxB,GAAO,GAAIyB,GAC5B,CAAC,OAAQD,EAAOxB,GAAO,GAAIyB,MAG7BqL,EAAS,GAGX,OAAOtL,EAAQ2S,EAAO,EAAGnU,EAAQmU,EAAO,EAAG0G,GAC3C7a,EAAQmU,EAAO0G,EAAWxjB,OAASyV,EAAS,EAC5C,KACF,CAKN9M,GAAS,EAET,OAASA,EAAQwB,EAAOnK,QACQ,sBAA1BmK,EAAOxB,GAAO,GAAG1D,OACnBkF,EAAOxB,GAAO,GAAG1D,KAAO,QAI5B,OAAOkF,CACT,GAgDA,SAASsZ,GAAUjZ,EAAOiL,GACxBjL,EAAMvH,QAAUwS,EAChBjL,EAAMiL,QAAUA,EAChBjL,EAAM0O,cAAgBzD,CACxB,CC7NO,MAAMiO,GAAW,CACtBlqB,KAAM,WACNoM,SAIF,SAA0BC,EAASC,EAAIC,GACrC,IAAIS,EAAO,EACX,OAGA,SAAeP,GAMb,OALAJ,EAAQY,MAAM,YACdZ,EAAQY,MAAM,kBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,kBACbf,EAAQY,MAAM,oBACPqW,CACT,EAGA,SAASA,EAAK7W,GACZ,OAAI,QAAWA,IACbJ,EAAQc,QAAQV,GACT0d,IAGF,QAAW1d,GAAQ2d,EAAW3d,GAAQF,EAAIE,EACnD,CAGA,SAAS0d,EAAmB1d,GAC1B,OAAgB,KAATA,GAAwB,KAATA,GAAwB,KAATA,IAAe,QAAkBA,GAClE4d,EAAyB5d,GACzB2d,EAAW3d,EACjB,CAGA,SAAS4d,EAAyB5d,GAChC,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACT6d,IAIG,KAAT7d,GAAwB,KAATA,GAAwB,KAATA,IAAe,QAAkBA,KAChEO,IAAS,IAETX,EAAQc,QAAQV,GACT4d,GAGFD,EAAW3d,EACpB,CAGA,SAAS6d,EAAU7d,GACjB,OAAa,KAATA,GACFJ,EAAQe,KAAK,oBACNhD,EAAIqC,IAGA,OAATA,GAA0B,KAATA,GAAwB,KAATA,IAAe,QAAaA,GACvDF,EAAIE,IAGbJ,EAAQc,QAAQV,GACT6d,EACT,CAGA,SAASF,EAAW3d,GAClB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GAChBO,EAAO,EACAud,IAGL,QAAW9d,IACbJ,EAAQc,QAAQV,GACT2d,GAGF7d,EAAIE,EACb,CAGA,SAAS8d,EAAiB9d,GACxB,OAAO,QAAkBA,GAAQ+d,EAAW/d,GAAQF,EAAIE,EAC1D,CAGA,SAAS+d,EAAW/d,GAClB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GAChBO,EAAO,EACAud,GAGI,KAAT9d,GAEFJ,EAAQe,KAAK,oBAAoB3B,KAAO,gBACjCrB,EAAIqC,IAGNge,EAAWhe,EACpB,CAGA,SAASge,EAAWhe,GAClB,OAAc,KAATA,IAAe,QAAkBA,KAAUO,IAAS,IACvDX,EAAQc,QAAQV,GACA,KAATA,EAAcge,EAAaD,GAG7Bje,EAAIE,EACb,CAGA,SAASrC,EAAIqC,GAKX,OAJAJ,EAAQY,MAAM,kBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,kBACbf,EAAQe,KAAK,YACNd,CACT,CACF,GC3HO,MAAMoe,GAAW,CACtB1qB,KAAM,WACNoM,SAIF,SAA0BC,EAASC,EAAIC,GACrC,MAAM+N,EAAOnQ,KAGb,IAAIoY,EAGA5N,EAGAxF,EAGAoS,EACJ,OAGA,SAAe9U,GAIb,OAHAJ,EAAQY,MAAM,YACdZ,EAAQY,MAAM,gBACdZ,EAAQc,QAAQV,GACT6W,CACT,EAGA,SAASA,EAAK7W,GACZ,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACTke,GAGI,KAATle,GACFJ,EAAQc,QAAQV,GACT0Z,GAGI,KAAT1Z,GACFJ,EAAQc,QAAQV,GACTme,IAGL,QAAWne,IACbJ,EAAQc,QAAQV,GACToe,GAGFte,EAAIE,EACb,CAGA,SAASke,EAAgBle,GACvB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACTqe,GAGI,KAATre,GACFJ,EAAQc,QAAQV,GAChBkI,EAAS,SACTxF,EAAQ,EACD4b,IAGL,QAAWte,IACbJ,EAAQc,QAAQV,GACTf,GAGFa,EAAIE,EACb,CAGA,SAASqe,EAAYre,GACnB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACTue,GAGFze,EAAIE,EACb,CAGA,SAASue,EAAave,GACpB,OAAa,OAATA,GAA0B,KAATA,EACZF,EAAIE,GAGA,KAATA,GACFJ,EAAQc,QAAQV,GACTwe,GAGF3f,EAAQmB,EACjB,CAGA,SAASwe,EAAiBxe,GACxB,OAAa,OAATA,GAA0B,KAATA,EACZF,EAAIE,GAGNnB,EAAQmB,EACjB,CAGA,SAASnB,EAAQmB,GACf,OAAa,OAATA,EACKF,EAAIE,GAGA,KAATA,GACFJ,EAAQc,QAAQV,GACTye,IAGL,QAAmBze,IACrB8U,EAAcjW,EACP6f,EAAa1e,KAGtBJ,EAAQc,QAAQV,GACTnB,EACT,CAGA,SAAS4f,EAAaze,GACpB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACTrC,GAGFkB,EAAQmB,EACjB,CAGA,SAASse,EAAUte,GACjB,OAAIA,IAASkI,EAAOpO,WAAW4I,MAC7B9C,EAAQc,QAAQV,GACT0C,IAAUwF,EAAOnO,OAAS4kB,EAAQL,GAGpCxe,EAAIE,EACb,CAGA,SAAS2e,EAAM3e,GACb,OAAa,OAATA,EACKF,EAAIE,GAGA,KAATA,GACFJ,EAAQc,QAAQV,GACT4e,IAGL,QAAmB5e,IACrB8U,EAAc6J,EACPD,EAAa1e,KAGtBJ,EAAQc,QAAQV,GACT2e,EACT,CAGA,SAASC,EAAW5e,GAClB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACT6e,GAGFF,EAAM3e,EACf,CAGA,SAAS6e,EAAS7e,GAChB,OAAa,KAATA,EACKrC,EAAIqC,GAGA,KAATA,GACFJ,EAAQc,QAAQV,GACT6e,GAGFF,EAAM3e,EACf,CAGA,SAASf,EAAYe,GACnB,OAAa,OAATA,GAA0B,KAATA,EACZrC,EAAIqC,IAGT,QAAmBA,IACrB8U,EAAc7V,EACPyf,EAAa1e,KAGtBJ,EAAQc,QAAQV,GACTf,EACT,CAGA,SAASkf,EAAYne,GACnB,OAAa,OAATA,EACKF,EAAIE,GAGA,KAATA,GACFJ,EAAQc,QAAQV,GACT8e,IAGL,QAAmB9e,IACrB8U,EAAcqJ,EACPO,EAAa1e,KAGtBJ,EAAQc,QAAQV,GACTme,EACT,CAGA,SAASW,EAAiB9e,GACxB,OAAgB,KAATA,EAAcrC,EAAIqC,GAAQme,EAAYne,EAC/C,CAGA,SAAS0Z,EAAc1Z,GACrB,OAAI,QAAWA,IACbJ,EAAQc,QAAQV,GACT+e,GAGFjf,EAAIE,EACb,CAGA,SAAS+e,EAAS/e,GAChB,OAAa,KAATA,IAAe,QAAkBA,IACnCJ,EAAQc,QAAQV,GACT+e,GAGFC,EAAgBhf,EACzB,CAGA,SAASgf,EAAgBhf,GACvB,OAAI,QAAmBA,IACrB8U,EAAckK,EACPN,EAAa1e,KAGlB,QAAcA,IAChBJ,EAAQc,QAAQV,GACTgf,GAGFrhB,EAAIqC,EACb,CAGA,SAASoe,EAAQpe,GACf,OAAa,KAATA,IAAe,QAAkBA,IACnCJ,EAAQc,QAAQV,GACToe,GAGI,KAATpe,GAAwB,KAATA,IAAe,QAA0BA,GACnDif,EAAejf,GAGjBF,EAAIE,EACb,CAGA,SAASif,EAAejf,GACtB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACTrC,GAGI,KAATqC,GAAwB,KAATA,IAAe,QAAWA,IAC3CJ,EAAQc,QAAQV,GACTkf,IAGL,QAAmBlf,IACrB8U,EAAcmK,EACPP,EAAa1e,KAGlB,QAAcA,IAChBJ,EAAQc,QAAQV,GACTif,GAGFthB,EAAIqC,EACb,CAGA,SAASkf,EAAqBlf,GAC5B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,IACA,QAAkBA,IAElBJ,EAAQc,QAAQV,GACTkf,GAGFC,EAA0Bnf,EACnC,CAGA,SAASmf,EAA0Bnf,GACjC,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACTof,IAGL,QAAmBpf,IACrB8U,EAAcqK,EACPT,EAAa1e,KAGlB,QAAcA,IAChBJ,EAAQc,QAAQV,GACTmf,GAGFF,EAAejf,EACxB,CAGA,SAASof,EAA4Bpf,GACnC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOF,EAAIE,GAGA,KAATA,GAAwB,KAATA,GACjBJ,EAAQc,QAAQV,GAChB8V,EAAS9V,EACFqf,IAGL,QAAmBrf,IACrB8U,EAAcsK,EACPV,EAAa1e,KAGlB,QAAcA,IAChBJ,EAAQc,QAAQV,GACTof,IAGTxf,EAAQc,QAAQV,GAChB8V,OAAShT,EACFwc,EACT,CAGA,SAASD,EAA4Brf,GACnC,OAAIA,IAAS8V,GACXlW,EAAQc,QAAQV,GACTuf,GAGI,OAATvf,EACKF,EAAIE,IAGT,QAAmBA,IACrB8U,EAAcuK,EACPX,EAAa1e,KAGtBJ,EAAQc,QAAQV,GACTqf,EACT,CAGA,SAASE,EAAiCvf,GACxC,OAAa,KAATA,GAAwB,KAATA,IAAe,QAA0BA,GACnDif,EAAejf,GAGjBF,EAAIE,EACb,CAGA,SAASsf,EAA8Btf,GACrC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEOF,EAAIE,GAGA,KAATA,IAAe,QAA0BA,GACpCif,EAAejf,IAGxBJ,EAAQc,QAAQV,GACTsf,EACT,CAKA,SAASZ,EAAa1e,GAKpB,OAJAJ,EAAQe,KAAK,gBACbf,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,eACN,IAAAZ,GACLH,EACA+Y,EACA,aACA9K,EAAKN,OAAOxK,WAAWqN,QAAQC,KAAKnX,SAAS,qBACzC4J,EACA,EAER,CAGA,SAAS6V,EAAY3Y,GAEnB,OADAJ,EAAQY,MAAM,gBACPsU,EAAY9U,EACrB,CAGA,SAASrC,EAAIqC,GACX,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,gBACbf,EAAQe,KAAK,YACNd,GAGFC,EAAIE,EACb,CACF,GCtdO,MAAMwf,GAAiB,CAC5BjsB,KAAM,iBACNoM,SAKF,SAAgCC,EAASC,EAAIC,GAC3C,MAAM+N,EAAOnQ,KACb,OAGA,SAAesC,GAMb,OALAJ,EAAQY,MAAM,aACdZ,EAAQY,MAAM,eACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,eACbf,EAAQe,KAAK,aACNmW,CACT,EAGA,SAASA,EAAM9W,GAQb,OAAgB,KAATA,GAAe,2BAA4B6N,EAAKN,OAAOxK,WAC1DjD,EAAIE,GACJH,EAAGG,EACT,CACF,EA/BEiE,WAAYgY,GAAShY,YCHhB,MAAMwb,GAAkB,CAC7BlsB,KAAM,kBACNoM,SAIF,SAAiCC,EAASC,EAAIC,GAC5C,OAGA,SAAeE,GAIb,OAHAJ,EAAQY,MAAM,mBACdZ,EAAQY,MAAM,gBACdZ,EAAQc,QAAQV,GACT6W,CACT,EAGA,SAASA,EAAK7W,GACZ,OAAI,QAAmBA,IACrBJ,EAAQe,KAAK,gBACbf,EAAQe,KAAK,mBACNd,EAAGG,IAGLF,EAAIE,EACb,CACF,GCxBO,MAAM0f,GAAW,CACtBnsB,KAAM,WACNoM,SA0EF,SAA0BC,EAASC,EAAIC,GAErC,IAGIS,EAGAoN,EANA2N,EAAW,EAOf,OAGA,SAAetb,GAGb,OAFAJ,EAAQY,MAAM,YACdZ,EAAQY,MAAM,oBACP8c,EAAgBtd,EACzB,EAGA,SAASsd,EAAgBtd,GACvB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GAChBsb,IACOgC,IAGT1d,EAAQe,KAAK,oBACNgf,EAAI3f,GACb,CAGA,SAAS2f,EAAI3f,GAEX,OAAa,OAATA,EACKF,EAAIE,GAIA,KAATA,GACF2N,EAAQ/N,EAAQY,MAAM,oBACtBD,EAAO,EACA2Y,EAAgBlZ,IAGZ,KAATA,GACFJ,EAAQY,MAAM,SACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,SACNgf,IAGL,QAAmB3f,IACrBJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,cACNgf,IAGT/f,EAAQY,MAAM,gBACP2H,EAAKnI,GACd,CAIA,SAASmI,EAAKnI,GACZ,OACW,OAATA,GACS,KAATA,GACS,KAATA,IACA,QAAmBA,IAEnBJ,EAAQe,KAAK,gBACNgf,EAAI3f,KAGbJ,EAAQc,QAAQV,GACTmI,EACT,CAIA,SAAS+Q,EAAgBlZ,GAEvB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GAChBO,IACO2Y,GAGL3Y,IAAS+a,GACX1b,EAAQe,KAAK,oBACbf,EAAQe,KAAK,YACNd,EAAGG,KAGZ2N,EAAM3O,KAAO,eACNmJ,EAAKnI,GACd,CACF,EA3KEqE,QAKF,SAAyBH,GACvB,IAIIxB,EAGAlC,EAPAof,EAAgB1b,EAAOnK,OAAS,EAChC8lB,EAAiB,EAQrB,KACsC,eAAnC3b,EAAO2b,GAAgB,GAAG7gB,MACU,UAAnCkF,EAAO2b,GAAgB,GAAG7gB,MACO,eAAlCkF,EAAO0b,GAAe,GAAG5gB,MACU,UAAlCkF,EAAO0b,GAAe,GAAG5gB,MAI3B,IAFA0D,EAAQmd,IAECnd,EAAQkd,GACf,GAA8B,iBAA1B1b,EAAOxB,GAAO,GAAG1D,KAAyB,CAE5CkF,EAAO2b,GAAgB,GAAG7gB,KAAO,kBACjCkF,EAAO0b,GAAe,GAAG5gB,KAAO,kBAChC6gB,GAAkB,EAClBD,GAAiB,EACjB,KACF,CAIJld,EAAQmd,EAAiB,EACzBD,IAEA,OAASld,GAASkd,QACF9c,IAAVtC,EACEkC,IAAUkd,GAA2C,eAA1B1b,EAAOxB,GAAO,GAAG1D,OAC9CwB,EAAQkC,GAGVA,IAAUkd,GACgB,eAA1B1b,EAAOxB,GAAO,GAAG1D,OAEjBkF,EAAO1D,GAAO,GAAGxB,KAAO,eAEpB0D,IAAUlC,EAAQ,IACpB0D,EAAO1D,GAAO,GAAG7C,IAAMuG,EAAOxB,EAAQ,GAAG,GAAG/E,IAC5CuG,EAAOrC,OAAOrB,EAAQ,EAAGkC,EAAQlC,EAAQ,GACzCof,GAAiBld,EAAQlC,EAAQ,EACjCkC,EAAQlC,EAAQ,GAGlBA,OAAQsC,GAIZ,OAAOoB,CACT,EA5DEwJ,SA+DF,SAAkB1N,GAEhB,OACW,KAATA,GACgD,oBAAhDtC,KAAKwG,OAAOxG,KAAKwG,OAAOnK,OAAS,GAAG,GAAGiF,IAE3C,GCxDO,MAAM,GAAW,CACtB,GAAM8C,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAMA,GACN,GAAM8U,IAIKpJ,GAAiB,CAC5B,GAAM4K,IAIKpG,GAAc,CACzB,EAAE,GAAIyG,GACN,EAAE,GAAIA,GACN,GAAMA,IAIK,GAAO,CAClB,GAAMI,GACN,GAAMhD,GACN,GAAM,CAACmD,GAAiBnD,IACxB,GAAM0D,GACN,GAAMP,GACN,GAAMnD,GACN,GAAMsF,GACN,IAAOA,IAII,GAAS,CACpB,GAAMzhB,GACN,GAAMqiB,IAIK,GAAO,CAClB,EAAE,GAAIC,GACN,EAAE,GAAIA,GACN,EAAE,GAAIA,GACN,GAAMiB,GACN,GAAMvjB,GACN,GAAMwjB,GACN,GAAM,CAACO,GAAUQ,IACjB,GAAMuB,GACN,GAAM,CAACC,GAAiB1D,IACxB,GAAME,GACN,GAAMiB,GACN,GAAMwC,IAIK7C,GAAa,CACxBxM,KAAM,CAAC6M,GAAW,IAIPC,GAAmB,CAC9B9M,KAAM,CAAC,GAAI,KAIAD,GAAU,CACrBC,KAAM,ICzFR,MAAMyP,GAAS,0CC6If,MAAM,GAAM,CAAC,EAAE5lB,eAYF6lB,GAcX,SAAUtmB,EAAOkP,EAAUzN,GAKzB,MAJwB,iBAAbyN,IACTzN,EAAUyN,EACVA,OAAW7F,GAejB,SAAkB5H,GAEhB,MAAM8kB,EAAS,CACbC,WAAY,GACZC,eAAgB,CAAC,WAAY,WAAY,UAAW,YAAa,UACjE1f,MAAO,CACLid,SAAU0C,EAAOC,IACjBC,iBAAkBC,EAClBC,cAAeD,EACfE,WAAYL,EAAO/G,IACnBxC,WAAYuJ,EAAOvJ,GACnBmF,gBAAiBuE,EACjB5mB,mBAAoB4mB,EACpBnF,WAAYgF,EAAOM,GACnBC,oBAAqBxY,EACrByY,oBAAqBzY,EACrBuQ,aAAc0H,EAAOM,EAAUvY,GAC/BwX,SAAUS,EAAOT,EAAUxX,GAC3B0Y,aAAcN,EACdnY,KAAMmY,EACNO,cAAeP,EACflI,WAAY+H,EAAO/H,GACnB0I,4BAA6B5Y,EAC7B6Y,sBAAuB7Y,EACvB8Y,sBAAuB9Y,EACvB+Y,SAAUd,EAAOc,GACjBxB,gBAAiBU,EAAOe,IACxBC,kBAAmBhB,EAAOe,IAC1B3H,SAAU4G,EAAOiB,GAAMlZ,GACvBmZ,aAAcf,EACdrC,SAAUkC,EAAOiB,GAAMlZ,GACvBoZ,aAAchB,EACdiB,MAAOpB,EAAOoB,IACd3J,MAAO1P,EACPkY,KAAMD,EAAOC,IACboB,SAAUrB,EAAOqB,IACjBC,cAAeC,EACfC,YAAaxB,EAAOre,GAAM8f,GAC1BC,cAAe1B,EAAOre,IACtBmX,UAAWkH,EAAOlH,IAClB6I,UAAWC,EACXC,gBAAiB9Z,EACjB+Z,0BAA2B/Z,EAC3Bga,oBAAqBha,EACrBia,cAAehC,EAAO/G,IACtBgJ,OAAQjC,EAAOiC,IACfvM,cAAesK,EAAOtK,KAExBlV,KAAM,CACJ6f,WAAY6B,IACZC,mBAAoBC,EACpB9E,SAAU4E,IACV9B,cAAeiC,EACfnC,iBAAkBoC,EAClB7L,WAAYyL,IACZK,qBAAsBC,EACtBC,oCAAqCC,EACrCC,gCAAiCD,EACjCE,wBAAyBC,EACzB7H,WAAYkH,EAAOY,GACnBC,gBAAiBC,EACjBzC,oBAAqB0C,EACrBzC,oBAAqB0C,EACrBxC,cAAe8B,EACflK,aAAc4J,EAAOiB,GACrB5D,SAAU2C,EAAOkB,GACjB3C,aAAc+B,EACdxa,KAAMwa,EACNvK,WAAYiK,IACZvB,4BAA6B0C,EAC7BzC,sBAAuB0C,EACvBzC,sBAAuB0C,EACvBzC,SAAUoB,IACV5C,gBAAiB4C,EAAOsB,GACxBxC,kBAAmBkB,EAAOsB,GAC1BpK,SAAU8I,EAAOuB,GACjBvC,aAAcsB,EACd1E,SAAUoE,EAAOwB,GACjBvC,aAAcqB,EACdpB,MAAOc,EAAOyB,GACdlM,MAAOmM,EACPC,UAAWC,EACXjI,WAAYkI,EACZ9D,KAAMiC,EAAO8B,GACb3C,SAAUa,IACVV,YAAaU,IACbR,cAAeQ,IACfpJ,UAAWoJ,IACXL,gBAAiBoC,EACjBnC,0BAA2BoC,EAC3BnC,oBAAqBoC,EACrBC,SAAUC,EACVrC,cAAeE,EAAOoC,GACtBC,0BAA2BC,EAC3BC,kBAAmBC,EACnBzC,OAAQC,IACRxM,cAAewM,MAGnByC,GAAU9E,GAAS9kB,GAAW,CAAC,GAAG6pB,iBAAmB,IAGrD,MAAM5c,EAAO,CAAC,EACd,OAAOkE,EAUP,SAASA,EAAQnI,GAEf,IAAIsI,EAAO,CACTxN,KAAM,OACNvJ,SAAU,IAGZ,MAAM0O,EAAU,CACdY,MAAO,CAACyH,GACRwY,WAAY,GACZhF,SACAxf,QACAG,OACAuH,SACA+c,SACAC,UACAC,WAGIC,EAAY,GAClB,IAAI1iB,GAAS,EACb,OAASA,EAAQwB,EAAOnK,QAGtB,GAC4B,gBAA1BmK,EAAOxB,GAAO,GAAG1D,MACS,kBAA1BkF,EAAOxB,GAAO,GAAG1D,KAEjB,GAAyB,UAArBkF,EAAOxB,GAAO,GAChB0iB,EAAU/mB,KAAKqE,OACV,CAELA,EAAQ2iB,EAAYnhB,EADPkhB,EAAUzb,MACWjH,EACpC,CAIJ,IADAA,GAAS,IACAA,EAAQwB,EAAOnK,QAAQ,CAC9B,MAAMurB,EAAUtF,EAAO9b,EAAOxB,GAAO,IACjC,GAAIjI,KAAK6qB,EAASphB,EAAOxB,GAAO,GAAG1D,OACrCsmB,EAAQphB,EAAOxB,GAAO,GAAG1D,MAAMvE,KAC7BzB,OAAO0S,OACL,CACEoG,eAAgB5N,EAAOxB,GAAO,GAAGoP,gBAEnC3N,GAEFD,EAAOxB,GAAO,GAGpB,CAGA,GAAIyB,EAAQ6gB,WAAWjrB,OAAS,EAAG,CACjC,MAAM8X,EAAO1N,EAAQ6gB,WAAW7gB,EAAQ6gB,WAAWjrB,OAAS,IAC5C8X,EAAK,IAAM0T,IACnB9qB,KAAK0J,OAASrB,EAAW+O,EAAK,GACxC,CA0BA,IAvBArF,EAAK9X,SAAW,CACd2I,MAAO,GACL6G,EAAOnK,OAAS,EACZmK,EAAO,GAAG,GAAG7G,MACb,CACEC,KAAM,EACNN,OAAQ,EACRwS,OAAQ,IAGhB7R,IAAK,GACHuG,EAAOnK,OAAS,EACZmK,EAAOA,EAAOnK,OAAS,GAAG,GAAG4D,IAC7B,CACEL,KAAM,EACNN,OAAQ,EACRwS,OAAQ,KAMlB9M,GAAS,IACAA,EAAQsd,EAAOC,WAAWlmB,QACjCyS,EAAOwT,EAAOC,WAAWvd,GAAO8J,IAASA,EAE3C,OAAOA,CACT,CAQA,SAAS6Y,EAAYnhB,EAAQ7G,EAAOtD,GAClC,IAIIynB,EAEAhR,EAEAgV,EAEAtP,EAVAxT,EAAQrF,EAAQ,EAChBooB,GAAoB,EACpBC,GAAa,EASjB,OAAShjB,GAAS3I,GAAQ,CACxB,MAAMjB,EAAQoL,EAAOxB,GAmCrB,GAjCoB,kBAAlB5J,EAAM,GAAGkG,MACS,gBAAlBlG,EAAM,GAAGkG,MACS,eAAlBlG,EAAM,GAAGkG,MAEQ,UAAblG,EAAM,GACR2sB,IAEAA,IAEFvP,OAAWpT,GACgB,oBAAlBhK,EAAM,GAAGkG,KACD,UAAblG,EAAM,MAEN0oB,GACCtL,GACAuP,GACAD,IAEDA,EAAsB9iB,GAExBwT,OAAWpT,GAGK,eAAlBhK,EAAM,GAAGkG,MACS,kBAAlBlG,EAAM,GAAGkG,MACS,mBAAlBlG,EAAM,GAAGkG,MACS,mBAAlBlG,EAAM,GAAGkG,MACS,6BAAlBlG,EAAM,GAAGkG,OAITkX,OAAWpT,IAGT2iB,GACa,UAAb3sB,EAAM,IACY,mBAAlBA,EAAM,GAAGkG,OACY,IAAtBymB,GACc,SAAb3sB,EAAM,KACa,kBAAlBA,EAAM,GAAGkG,MACU,gBAAlBlG,EAAM,GAAGkG,MACb,CACA,GAAIwiB,EAAU,CACZ,IAAImE,EAAYjjB,EAEhB,IADA8N,OAAY1N,EACL6iB,KAAa,CAClB,MAAMC,EAAY1hB,EAAOyhB,GACzB,GACwB,eAAtBC,EAAU,GAAG5mB,MACS,oBAAtB4mB,EAAU,GAAG5mB,KACb,CACA,GAAqB,SAAjB4mB,EAAU,GAAe,SACzBpV,IACFtM,EAAOsM,GAAW,GAAGxR,KAAO,kBAC5B0mB,GAAa,GAEfE,EAAU,GAAG5mB,KAAO,aACpBwR,EAAYmV,CACd,MAAO,GACiB,eAAtBC,EAAU,GAAG5mB,MACS,qBAAtB4mB,EAAU,GAAG5mB,MACS,+BAAtB4mB,EAAU,GAAG5mB,MACS,qBAAtB4mB,EAAU,GAAG5mB,MACS,mBAAtB4mB,EAAU,GAAG5mB,KAIb,KAEJ,CAEEwmB,KACEhV,GAAagV,EAAsBhV,KAGrCgR,EAASqE,SAAU,GAIrBrE,EAAS7jB,IAAM3E,OAAO0S,OACpB,CAAC,EACD8E,EAAYtM,EAAOsM,GAAW,GAAGnT,MAAQvE,EAAM,GAAG6E,KAEpDuG,EAAOrC,OAAO2O,GAAa9N,EAAO,EAAG,CAAC,OAAQ8e,EAAU1oB,EAAM,KAC9D4J,IACA3I,GACF,CAGsB,mBAAlBjB,EAAM,GAAGkG,OACXwiB,EAAW,CACTxiB,KAAM,WAEN6mB,SAAS,EACTxoB,MAAOrE,OAAO0S,OAAO,CAAC,EAAG5S,EAAM,GAAGuE,QAGpC6G,EAAOrC,OAAOa,EAAO,EAAG,CAAC,QAAS8e,EAAU1oB,EAAM,KAClD4J,IACA3I,IACAyrB,OAAsB1iB,EACtBoT,GAAW,EAEf,CACF,CAIA,OADAhS,EAAO7G,GAAO,GAAGwoB,QAAUH,EACpB3rB,CACT,CAcA,SAASmrB,EAAQtqB,EAAKnB,GACpB0O,EAAKvN,GAAOnB,CACd,CAYA,SAAS0rB,EAAQvqB,GACf,OAAOuN,EAAKvN,EACd,CAYA,SAASulB,EAAOhrB,EAAQ2wB,GACtB,OAAOjP,EAOP,SAASA,EAAKlJ,GACZnN,EAAM/F,KAAKiD,KAAMvI,EAAOwY,GAAQA,GAC5BmY,GAAKA,EAAIrrB,KAAKiD,KAAMiQ,EAC1B,CACF,CAMA,SAASzF,IACPxK,KAAKqH,MAAM1G,KAAK,CACdW,KAAM,WACNvJ,SAAU,IAEd,CAgBA,SAAS+K,EAAMjD,EAAMoQ,EAAOoY,GAU1B,OATeroB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAEvCtE,SAAS4I,KAAKd,GACrBG,KAAKqH,MAAM1G,KAAKd,GAChBG,KAAKsnB,WAAW3mB,KAAK,CAACsP,EAAOoY,IAE7BxoB,EAAK7I,SAAW,CACd2I,MAAO,GAAMsQ,EAAMtQ,QAEdE,CACT,CAUA,SAAS8kB,EAAOyD,GACd,OAAOpJ,EAOP,SAASA,EAAM/O,GACTmY,GAAKA,EAAIrrB,KAAKiD,KAAMiQ,GACxBhN,EAAKlG,KAAKiD,KAAMiQ,EAClB,CACF,CAYA,SAAShN,EAAKgN,EAAOqY,GACnB,MAAMzoB,EAAOG,KAAKqH,MAAM4E,MAClBkN,EAAOnZ,KAAKsnB,WAAWrb,MAC7B,IAAKkN,EACH,MAAM,IAAI5Y,MACR,iBACE0P,EAAM3O,KACN,MACAsF,EAAkB,CAChBjH,MAAOsQ,EAAMtQ,MACbM,IAAKgQ,EAAMhQ,MAEb,oBAEC,GAAIkZ,EAAK,GAAG7X,OAAS2O,EAAM3O,KAChC,GAAIgnB,EACFA,EAAYvrB,KAAKiD,KAAMiQ,EAAOkJ,EAAK,QAC9B,EACWA,EAAK,IAAM0O,IACnB9qB,KAAKiD,KAAMiQ,EAAOkJ,EAAK,GACjC,CAGF,OADAtZ,EAAK7I,SAASiJ,IAAM,GAAMgQ,EAAMhQ,KACzBJ,CACT,CAMA,SAAS0nB,IACP,OnC1pBG,SAAkBxrB,EAAOyB,GAC9B,MAAMiS,GAAmBjS,GAAW,CAAC,GAAGiS,gBACxC,OAAOD,EACLzT,EAC2B,kBAApB0T,GAAgCA,EAE3C,CmCopBW,CAASzP,KAAKqH,MAAM4E,MAC7B,CAUA,SAASiY,IACPsD,EAAQ,+BAA+B,EACzC,CAMA,SAASxD,EAAqB/T,GAC5B,GAAIwX,EAAQ,+BAAgC,CACzBznB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCsD,MAAQgD,OAAOgD,SAAS3F,KAAKoU,eAAenE,GAAQ,IAC7DuX,EAAQ,8BACV,CACF,CAMA,SAAS9B,IACP,MAAMjb,EAAOzK,KAAKunB,SACLvnB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCksB,KAAO9d,CACd,CAMA,SAASkb,IACP,MAAMlb,EAAOzK,KAAKunB,SACLvnB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvC8hB,KAAO1T,CACd,CAMA,SAASgb,IAEHgC,EAAQ,oBACZznB,KAAKwK,SACLgd,EAAQ,kBAAkB,GAC5B,CAMA,SAASjC,IACP,MAAM9a,EAAOzK,KAAKunB,SACLvnB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCN,MAAQ0O,EAAKvL,QAAQ,2BAA4B,IACtDsoB,EAAQ,iBACV,CAMA,SAAS5B,IACP,MAAMnb,EAAOzK,KAAKunB,SACLvnB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCN,MAAQ0O,EAAKvL,QAAQ,eAAgB,GAC5C,CAMA,SAAS6mB,EAA4B9V,GACnC,MAAMiK,EAAQla,KAAKunB,SACb1nB,EAAOG,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAC5CwD,EAAKqa,MAAQA,EACbra,EAAK8a,YAAa,QAChB3a,KAAKoU,eAAenE,IACpB5J,aACJ,CAMA,SAAS2f,IACP,MAAMvb,EAAOzK,KAAKunB,SACLvnB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCke,MAAQ9P,CACf,CAMA,SAASqb,IACP,MAAMrb,EAAOzK,KAAKunB,SACLvnB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCsL,IAAM8C,CACb,CAMA,SAASoa,EAAyB5U,GAChC,MAAMpQ,EAAOG,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAC5C,IAAKwD,EAAK2oB,MAAO,CACf,MAAMA,EAAQxoB,KAAKoU,eAAenE,GAAO5T,OACzCwD,EAAK2oB,MAAQA,CACf,CACF,CAMA,SAASrB,IACPK,EAAQ,gCAAgC,EAC1C,CAMA,SAASP,EAAgChX,GAC1BjQ,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCmsB,MAAqD,KAA7CxoB,KAAKoU,eAAenE,GAAO7T,WAAW,GAAY,EAAI,CACrE,CAMA,SAAS2qB,IACPS,EAAQ,+BACV,CAOA,SAAS5E,EAAY3S,GACnB,MAAMpQ,EAAOG,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAC5C,IAAI8X,EAAOtU,EAAK9H,SAAS8H,EAAK9H,SAASsE,OAAS,GAC3C8X,GAAsB,SAAdA,EAAK7S,OAEhB6S,EAAOU,KAEPV,EAAKnd,SAAW,CACd2I,MAAO,GAAMsQ,EAAMtQ,QAGrBE,EAAK9H,SAAS4I,KAAKwT,IAErBnU,KAAKqH,MAAM1G,KAAKwT,EAClB,CAOA,SAAS8Q,EAAWhV,GAClB,MAAMkE,EAAOnU,KAAKqH,MAAM4E,MACxBkI,EAAKpY,OAASiE,KAAKoU,eAAenE,GAClCkE,EAAKnd,SAASiJ,IAAM,GAAMgQ,EAAMhQ,IAClC,CAOA,SAASumB,EAAiBvW,GACxB,MAAMxJ,EAAUzG,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAE/C,GAAIorB,EAAQ,eAAgB,CAI1B,OAHahhB,EAAQ1O,SAAS0O,EAAQ1O,SAASsE,OAAS,GACnDrF,SAASiJ,IAAM,GAAMgQ,EAAMhQ,UAChCunB,EAAQ,cAEV,EAEGC,EAAQ,iCACTnF,EAAOE,eAAehnB,SAASiL,EAAQnF,QAEvCshB,EAAY7lB,KAAKiD,KAAMiQ,GACvBgV,EAAWloB,KAAKiD,KAAMiQ,GAE1B,CAOA,SAASgW,IACPuB,EAAQ,eAAe,EACzB,CAOA,SAAStB,IACP,MAAMzb,EAAOzK,KAAKunB,SACLvnB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCN,MAAQ0O,CACf,CAOA,SAAS0b,IACP,MAAM1b,EAAOzK,KAAKunB,SACLvnB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCN,MAAQ0O,CACf,CAOA,SAASob,IACP,MAAMpb,EAAOzK,KAAKunB,SACLvnB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCN,MAAQ0O,CACf,CAOA,SAASgc,IACP,MAAM5mB,EAAOG,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAK5C,GAAIorB,EAAQ,eAAgB,CAE1B,MAAMgB,EAAgBhB,EAAQ,kBAAoB,WAClD5nB,EAAKyB,MAAQ,YAEbzB,EAAK4oB,cAAgBA,SAEd5oB,EAAK8H,WACL9H,EAAK0a,KACd,aAES1a,EAAK8a,kBAEL9a,EAAKqa,MAEdsN,EAAQ,gBACV,CAOA,SAASpB,IACP,MAAMvmB,EAAOG,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAK5C,GAAIorB,EAAQ,eAAgB,CAE1B,MAAMgB,EAAgBhB,EAAQ,kBAAoB,WAClD5nB,EAAKyB,MAAQ,YAEbzB,EAAK4oB,cAAgBA,SAEd5oB,EAAK8H,WACL9H,EAAK0a,KACd,aAES1a,EAAK8a,kBAEL9a,EAAKqa,MAEdsN,EAAQ,gBACV,CAOA,SAASjB,EAAgBtW,GACvB,MAAMyE,EAAS1U,KAAKoU,eAAenE,GAC7ByY,EAAW1oB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAGhDqsB,EAASxO,OAAQ,QAAaxF,GAE9BgU,EAAS/N,YAAa,QAAoBjG,GAAQrO,aACpD,CAOA,SAASggB,IACP,MAAMsC,EAAW3oB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAC1CN,EAAQiE,KAAKunB,SACb1nB,EAAOG,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAG5C,GADAmrB,EAAQ,eAAe,GACL,SAAd3nB,EAAKyB,KAAiB,CAGxB,MAAMvJ,EAAW4wB,EAAS5wB,SAC1B8H,EAAK9H,SAAWA,CAClB,MACE8H,EAAK6P,IAAM3T,CAEf,CAOA,SAAS4qB,IACP,MAAMlc,EAAOzK,KAAKunB,SACLvnB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCsL,IAAM8C,CACb,CAOA,SAASmc,IACP,MAAMnc,EAAOzK,KAAKunB,SACLvnB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCke,MAAQ9P,CACf,CAOA,SAASqc,IACPU,EAAQ,cACV,CAOA,SAASnD,IACPmD,EAAQ,gBAAiB,YAC3B,CAOA,SAASd,EAAsBzW,GAC7B,MAAMiK,EAAQla,KAAKunB,SACb1nB,EAAOG,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAG5CwD,EAAKqa,MAAQA,EAEbra,EAAK8a,YAAa,QAChB3a,KAAKoU,eAAenE,IACpB5J,cACFmhB,EAAQ,gBAAiB,OAC3B,CAOA,SAASrC,EAA+BlV,GACtCuX,EAAQ,yBAA0BvX,EAAM3O,KAC1C,CAMA,SAASgkB,EAA8BrV,GACrC,MAAMxF,EAAOzK,KAAKoU,eAAenE,GAC3B3O,EAAOmmB,EAAQ,0BAErB,IAAI1rB,EACJ,GAAIuF,EACFvF,GAAQ,QACN0O,EACS,oCAATnJ,EAA6C,GAAK,IAEpDkmB,EAAQ,8BACH,CAELzrB,GADe,QAA8B0O,EAE/C,CACA,MAAM0J,EAAOnU,KAAKqH,MAAM4E,MACxBkI,EAAKpY,OAASA,EACdoY,EAAKnd,SAASiJ,IAAM,GAAMgQ,EAAMhQ,IAClC,CAMA,SAAS8kB,EAAuB9U,GAC9BgV,EAAWloB,KAAKiD,KAAMiQ,GACTjQ,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCsL,IAAM3H,KAAKoU,eAAenE,EACjC,CAMA,SAAS6U,EAAoB7U,GAC3BgV,EAAWloB,KAAKiD,KAAMiQ,GACTjQ,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GACvCsL,IAAM,UAAY3H,KAAKoU,eAAenE,EAC7C,CAOA,SAASiJ,IACP,MAAO,CACL5X,KAAM,aACNvJ,SAAU,GAEd,CAGA,SAASgrB,IACP,MAAO,CACLzhB,KAAM,OACNinB,KAAM,KACNpK,KAAM,KACNpiB,MAAO,GAEX,CAGA,SAASimB,IACP,MAAO,CACL1gB,KAAM,aACNvF,MAAO,GAEX,CAGA,SAAS2e,IACP,MAAO,CACLpZ,KAAM,aACNqZ,WAAY,GACZT,MAAO,KACPK,MAAO,KACP5S,IAAK,GAET,CAGA,SAAS4b,IACP,MAAO,CACLjiB,KAAM,WACNvJ,SAAU,GAEd,CAGA,SAAS2jB,KAEP,MAAO,CACLpa,KAAM,UACNknB,WAAOpjB,EACPrN,SAAU,GAEd,CAGA,SAASyrB,KACP,MAAO,CACLliB,KAAM,QAEV,CAGA,SAASoiB,KACP,MAAO,CACLpiB,KAAM,OACNvF,MAAO,GAEX,CAGA,SAAS8nB,KACP,MAAO,CACLviB,KAAM,QACNiZ,MAAO,KACP5S,IAAK,GACL+H,IAAK,KAET,CAGA,SAASgT,KACP,MAAO,CACLphB,KAAM,OACNiZ,MAAO,KACP5S,IAAK,GACL5P,SAAU,GAEd,CAMA,SAASqM,GAAK6L,GACZ,MAAO,CACL3O,KAAM,OACNsnB,QAAwB,gBAAf3Y,EAAM3O,KACf3B,MAAO,KAEPkpB,OAAQ5Y,EAAMkY,QACdpwB,SAAU,GAEd,CAMA,SAAS+rB,GAAS7T,GAChB,MAAO,CACL3O,KAAM,WAENunB,OAAQ5Y,EAAMkY,QACdW,QAAS,KACT/wB,SAAU,GAEd,CAGA,SAASwjB,KACP,MAAO,CACLja,KAAM,YACNvJ,SAAU,GAEd,CAGA,SAAS2sB,KACP,MAAO,CACLpjB,KAAM,SACNvJ,SAAU,GAEd,CAGA,SAAS8c,KACP,MAAO,CACLvT,KAAM,OACNvF,MAAO,GAEX,CAGA,SAASoc,KACP,MAAO,CACL7W,KAAM,gBAEV,CACF,CAllCWynB,CAASvrB,EAATurB,CCjLJ,SAAqBviB,GAC1B,MAAQoM,EAAYpM,KAIpB,OAAOA,CACT,CD4KMwiB,CExKC,SAAexrB,EAAU,CAAC,GAG/B,MAMMqS,EAAS,CACbiL,QAAS,GACTlJ,KAAM,CAAC,EACPvM,YATiB,OAEjB,CAAC,GAAmB4jB,OAAOzrB,EAAQsH,YAAc,KAQjD3E,QAAS1I,EAAO0I,GAChBvE,SAAUnE,EAAO,GACjBua,KAAMva,EAAOua,GACb0C,OAAQjd,EAAOid,GACfG,KAAMpd,EAAO,KAEf,OAAOoY,EAKP,SAASpY,EAAO4c,GACd,OAGA,SAAiB5P,GACf,OAAO+Q,GAAgB3F,EAAQwE,EAAS5P,EAC1C,CACF,CACF,CF0IQ2J,CAAM5Q,GAAS5B,WAAW4W,MD1K3B,WACL,IAOI0W,EAPA5pB,EAAS,EACTkL,EAAS,GAGT7K,GAAQ,EAIZ,OAGA,SAAsB5D,EAAOkP,EAAUhL,GAErC,MAAMiV,EAAS,GAGf,IAAIzV,EAGAyM,EAGAqH,EAGA4V,EAGA7mB,EAcJ,IAZAvG,EAAQyO,EAASzO,EAAMW,SAASuO,GAChCsI,EAAgB,EAChB/I,EAAS,GAEL7K,IAC0B,QAAxB5D,EAAMK,WAAW,IACnBmX,IAGF5T,OAAQyF,GAGHmO,EAAgBxX,EAAMM,QAAQ,CAOnC,GANA+lB,GAAOgH,UAAY7V,EACnB9T,EAAQ2iB,GAAOthB,KAAK/E,GACpBotB,EACE1pB,QAAyB2F,IAAhB3F,EAAMuF,MAAsBvF,EAAMuF,MAAQjJ,EAAMM,OAC3DiG,EAAOvG,EAAMK,WAAW+sB,IAEnB1pB,EAAO,CACV+K,EAASzO,EAAMgF,MAAMwS,GACrB,KACF,CAEA,GAAa,KAATjR,GAAeiR,IAAkB4V,GAAeD,EAClDhU,EAAOvU,MAAM,GACbuoB,OAAmB9jB,OAYnB,OAVI8jB,IACFhU,EAAOvU,MAAM,GACbuoB,OAAmB9jB,GAGjBmO,EAAgB4V,IAClBjU,EAAOvU,KAAK5E,EAAMgF,MAAMwS,EAAe4V,IACvC7pB,GAAU6pB,EAAc5V,GAGlBjR,GACN,KAAK,EACH4S,EAAOvU,KAAK,OACZrB,IACA,MAGF,KAAK,EAIH,IAHA4M,EAA+B,EAAxBmd,KAAKC,KAAKhqB,EAAS,GAC1B4V,EAAOvU,MAAM,GAENrB,IAAW4M,GAAMgJ,EAAOvU,MAAM,GAErC,MAGF,KAAK,GACHuU,EAAOvU,MAAM,GACbrB,EAAS,EACT,MAGF,QACE4pB,GAAmB,EACnB5pB,EAAS,EAKfiU,EAAgB4V,EAAc,CAChC,CAQA,OANIlpB,IACEipB,GAAkBhU,EAAOvU,MAAM,GAC/B6J,GAAQ0K,EAAOvU,KAAK6J,GACxB0K,EAAOvU,KAAK,OAGPuU,CACT,CACF,CC6DwCqU,GAAaxtB,EAAOkP,GAAU,KAGpE,EAslCF,SAAS,GAAM7V,GACb,MAAO,CACLwK,KAAMxK,EAAEwK,KACRN,OAAQlK,EAAEkK,OACVwS,OAAQ1c,EAAE0c,OAEd,CAOA,SAASsV,GAAUoC,EAAU1kB,GAC3B,IAAIE,GAAS,EACb,OAASA,EAAQF,EAAWzI,QAAQ,CAClC,MAAMN,EAAQ+I,EAAWE,GACrBvJ,MAAMC,QAAQK,GAChBqrB,GAAUoC,EAAUztB,GAEpBmJ,GAAUskB,EAAUztB,EAExB,CACF,CAOA,SAASmJ,GAAUskB,EAAUtkB,GAE3B,IAAIhI,EACJ,IAAKA,KAAOgI,EACV,GAAI,GAAInI,KAAKmI,EAAWhI,GACtB,GAAY,mBAARA,EAA0B,CAC5B,MAAMhG,EAAQgO,EAAUhI,GACpBhG,GACFsyB,EAAStsB,GAAKyD,QAAQzJ,EAE1B,MAAO,GAAY,eAARgG,EAAsB,CAC/B,MAAMhG,EAAQgO,EAAUhI,GACpBhG,GACFsyB,EAAStsB,GAAKyD,QAAQzJ,EAE1B,MAAO,GAAY,UAARgG,GAA2B,SAARA,EAAgB,CAC5C,MAAMhG,EAAQgO,EAAUhI,GACpBhG,GACFoE,OAAO0S,OAAOwb,EAAStsB,GAAMhG,EAEjC,CAGN,CAGA,SAAS2wB,GAAezwB,EAAMF,GAC5B,MAAIE,EACI,IAAImJ,MACR,iBACEnJ,EAAKkK,KACL,MACAsF,EAAkB,CAChBjH,MAAOvI,EAAKuI,MACZM,IAAK7I,EAAK6I,MAEZ,0BACA/I,EAAMoK,KACN,MACAsF,EAAkB,CAChBjH,MAAOzI,EAAMyI,MACbM,IAAK/I,EAAM+I,MAEb,aAGE,IAAIM,MACR,oCACErJ,EAAMoK,KACN,MACAsF,EAAkB,CAChBjH,MAAOzI,EAAMyI,MACbM,IAAK/I,EAAM+I,MAEb,kBAGR,CG32CA,SCMe,SAAqBzC,GAkBlClC,OAAO0S,OAAOhO,KAAM,CAACuN,OAhBLc,IAEd,MAAMT,EAAmC5N,KAAKyK,KAAK,YAEnD,OAAO4X,GACLhU,EACA/S,OAAO0S,OAAO,CAAC,EAAGJ,EAAUpQ,EAAS,CAInCsH,WAAY9E,KAAKyK,KAAK,wBAA0B,GAChD4c,gBAAiBrnB,KAAKyK,KAAK,2BAA6B,KAE5D,GAIJ,EC8BO,SAASgf,GAAa1tB,GAE3B,MAAMiN,EAAS,GACf,IAAIhE,GAAS,EACTrF,EAAQ,EACR+pB,EAAO,EAEX,OAAS1kB,EAAQjJ,EAAMM,QAAQ,CAC7B,MAAMiG,EAAOvG,EAAMK,WAAW4I,GAG9B,IAAI9F,EAAU,GAEd,GACW,KAAToD,IACA,QAAkBvG,EAAMK,WAAW4I,EAAQ,MAC3C,QAAkBjJ,EAAMK,WAAW4I,EAAQ,IAE3C0kB,EAAO,OAEJ,GAAIpnB,EAAO,IACT,oBAAoB0B,KAAKC,OAAOC,aAAa5B,MAChDpD,EAAU+E,OAAOC,aAAa5B,SAG7B,GAAIA,EAAO,OAASA,EAAO,MAAO,CACrC,MAAM4J,EAAOnQ,EAAMK,WAAW4I,EAAQ,GAElC1C,EAAO,OAAS4J,EAAO,OAASA,EAAO,OACzChN,EAAU+E,OAAOC,aAAa5B,EAAM4J,GACpCwd,EAAO,GAGPxqB,EAAU,GAEd,MAEEA,EAAU+E,OAAOC,aAAa5B,GAG5BpD,IACF8J,EAAOrI,KAAK5E,EAAMgF,MAAMpB,EAAOqF,GAAQ2kB,mBAAmBzqB,IAC1DS,EAAQqF,EAAQ0kB,EAAO,EACvBxqB,EAAU,IAGRwqB,IACF1kB,GAAS0kB,EACTA,EAAO,EAEX,CAEA,OAAO1gB,EAAON,KAAK,IAAM3M,EAAMgF,MAAMpB,EACvC,iBCgCO,MAAMiqB,GAOX,SAQY9a,EAAM9K,EAAM6lB,EAASC,GACT,mBAAT9lB,GAA0C,mBAAZ6lB,IACvCC,EAAUD,EACVA,EAAU7lB,EACVA,EAAO,OAGT,SAAa8K,EAAM9K,GAMnB,SAAkBnE,EAAMkqB,GACtB,MAAMC,EAASD,EAAQA,EAAQ1tB,OAAS,GACxC,OAAOwtB,EACLhqB,EACAmqB,EAASA,EAAOjyB,SAASoP,QAAQtH,GAAQ,KACzCmqB,EAEJ,GAbmCF,EAevC,ECtJWG,GAAa,GAAM,SAUnBC,GAAW,GAAM,OAsB9B,SAAS,GAAM5oB,GACb,OAQA,SAAezB,GACb,MAAMgH,EAAShH,GAAQA,EAAK7I,UAAY6I,EAAK7I,SAASsK,IAAU,CAAC,EAGjE,MAAO,CAEL1B,KAAMiH,EAAMjH,MAAQ,KAEpBN,OAAQuH,EAAMvH,QAAU,KAExBwS,OAAQjL,EAAMiL,QAAU,EAAIjL,EAAMiL,OAAS,KAE/C,CACF,CChEA,MAAM,GAAM,CAAC,EAAEtV,eA0Cf,SAAS2tB,GAAMpuB,GACb,OAAOkI,OAAOlI,GAAS,IAAIuK,aAC7B,CC7CO,SAAS8jB,GAAkB5T,EAAO3W,GACvC,MAAMwqB,EAAKpmB,OAAOpE,EAAK8a,YAAYrU,cAC7BgkB,EAASb,GAAaY,EAAGhkB,eACzBrB,EAAQwR,EAAM+T,cAAcpjB,QAAQkjB,GAE1C,IAAIG,GAEW,IAAXxlB,GACFwR,EAAM+T,cAAc5pB,KAAK0pB,GACzB7T,EAAMiU,eAAeJ,GAAM,EAC3BG,EAAUhU,EAAM+T,cAAcluB,SAE9Bma,EAAMiU,eAAeJ,KACrBG,EAAUxlB,EAAQ,GAGpB,MAAM0lB,EAAelU,EAAMiU,eAAeJ,GAGpC3H,EAAO,CACXphB,KAAM,UACN4a,QAAS,IACTyO,WAAY,CACV9gB,KAAM,IAAM2M,EAAMoU,cAAgB,MAAQN,EAC1CD,GACE7T,EAAMoU,cACN,SACAN,GACCI,EAAe,EAAI,IAAMA,EAAe,IAC3CG,iBAAiB,EACjBC,gBAAiB,CAAC,mBAEpB/yB,SAAU,CAAC,CAACuJ,KAAM,OAAQvF,MAAOkI,OAAOumB,MAE1ChU,EAAMuU,MAAMlrB,EAAM6iB,GAGlB,MAAMsI,EAAM,CACV1pB,KAAM,UACN4a,QAAS,MACTyO,WAAY,CAAC,EACb5yB,SAAU,CAAC2qB,IAGb,OADAlM,EAAMuU,MAAMlrB,EAAMmrB,GACXxU,EAAMyU,UAAUprB,EAAMmrB,EAC/B,CCpCO,SAASE,GAAO1U,EAAO3W,GAC5B,MAAMsrB,EAAUtrB,EAAK4oB,cACrB,IAAI2C,EAAS,IAQb,GANgB,cAAZD,EACFC,GAAU,KACW,SAAZD,IACTC,GAAU,KAAOvrB,EAAKqa,OAASra,EAAK8a,YAAc,KAGlC,mBAAd9a,EAAKyB,KACP,MAAO,CAACA,KAAM,OAAQvF,MAAO,KAAO8D,EAAK6P,IAAM0b,GAGjD,MAAMC,EAAW7U,EAAMzR,IAAIlF,GACrBqG,EAAOmlB,EAAS,GAElBnlB,GAAsB,SAAdA,EAAK5E,KACf4E,EAAKnK,MAAQ,IAAMmK,EAAKnK,MAExBsvB,EAAS3mB,QAAQ,CAACpD,KAAM,OAAQvF,MAAO,MAGzC,MAAMoY,EAAOkX,EAASA,EAAShvB,OAAS,GAQxC,OANI8X,GAAsB,SAAdA,EAAK7S,KACf6S,EAAKpY,OAASqvB,EAEdC,EAAS1qB,KAAK,CAACW,KAAM,OAAQvF,MAAOqvB,IAG/BC,CACT,CC+DA,SAASC,GAAczrB,GACrB,MAAMgpB,EAAShpB,EAAKgpB,OAEpB,OAAOA,QACHhpB,EAAK9H,SAASsE,OAAS,EACvBwsB,CACN,CCpHO,SAAS0C,GAAUxvB,GACxB,MAAMmE,EAAS+D,OAAOlI,GAChBqmB,EAAS,YACf,IAAI3iB,EAAQ2iB,EAAOthB,KAAKZ,GACpBsrB,EAAO,EAEX,MAAMhsB,EAAQ,GAEd,KAAOC,GACLD,EAAMmB,KACJ8qB,GAASvrB,EAAOa,MAAMyqB,EAAM/rB,EAAMuF,OAAQwmB,EAAO,GAAG,GACpD/rB,EAAM,IAGR+rB,EAAO/rB,EAAMuF,MAAQvF,EAAM,GAAGpD,OAC9BoD,EAAQ2iB,EAAOthB,KAAKZ,GAKtB,OAFAV,EAAMmB,KAAK8qB,GAASvrB,EAAOa,MAAMyqB,GAAOA,EAAO,GAAG,IAE3ChsB,EAAMkJ,KAAK,GACpB,CAYA,SAAS+iB,GAAS1vB,EAAO4D,EAAOM,GAC9B,IAAIwW,EAAa,EACbE,EAAW5a,EAAMM,OAErB,GAAIsD,EAAO,CACT,IAAI2C,EAAOvG,EAAM2vB,YAAYjV,GAE7B,KApDQ,IAoDDnU,GAnDG,KAmDaA,GACrBmU,IACAnU,EAAOvG,EAAM2vB,YAAYjV,EAE7B,CAEA,GAAIxW,EAAK,CACP,IAAIqC,EAAOvG,EAAM2vB,YAAY/U,EAAW,GAExC,KA7DQ,IA6DDrU,GA5DG,KA4DaA,GACrBqU,IACArU,EAAOvG,EAAM2vB,YAAY/U,EAAW,EAExC,CAEA,OAAOA,EAAWF,EAAa1a,EAAMgF,MAAM0V,EAAYE,GAAY,EACrE,CCxCO,MAAMgV,GAAW,CACtBC,WCbK,SAAoBpV,EAAO3W,GAEhC,MAAMmJ,EAAS,CACb1H,KAAM,UACN4a,QAAS,aACTyO,WAAY,CAAC,EACb5yB,SAAUye,EAAM7J,KAAK6J,EAAMzR,IAAIlF,IAAO,IAGxC,OADA2W,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EDIE6iB,MEbK,SAAmBrV,EAAO3W,GAE/B,MAAMmJ,EAAS,CAAC1H,KAAM,UAAW4a,QAAS,KAAMyO,WAAY,CAAC,EAAG5yB,SAAU,IAE1E,OADAye,EAAMuU,MAAMlrB,EAAMmJ,GACX,CAACwN,EAAMyU,UAAUprB,EAAMmJ,GAAS,CAAC1H,KAAM,OAAQvF,MAAO,MAC/D,EFSEuG,KGbK,SAAckU,EAAO3W,GAC1B,MAAM9D,EAAQ8D,EAAK9D,MAAQ8D,EAAK9D,MAAQ,KAAO,GAGzCwsB,EAAO1oB,EAAK0oB,KAAO1oB,EAAK0oB,KAAK9oB,MAAM,uBAAyB,KAE5DkrB,EAAa,CAAC,EAEhBpC,IACFoC,EAAW3yB,UAAY,CAAC,YAAcuwB,IAKxC,IAAIvf,EAAS,CACX1H,KAAM,UACN4a,QAAS,OACTyO,aACA5yB,SAAU,CAAC,CAACuJ,KAAM,OAAQvF,WAa5B,OAVI8D,EAAKse,OACPnV,EAAOyB,KAAO,CAAC0T,KAAMte,EAAKse,OAG5B3H,EAAMuU,MAAMlrB,EAAMmJ,GAClBA,EAASwN,EAAMyU,UAAUprB,EAAMmJ,GAG/BA,EAAS,CAAC1H,KAAM,UAAW4a,QAAS,MAAOyO,WAAY,CAAC,EAAG5yB,SAAU,CAACiR,IACtEwN,EAAMuU,MAAMlrB,EAAMmJ,GACXA,CACT,EHlBE8iB,OIfK,SAAuBtV,EAAO3W,GAEnC,MAAMmJ,EAAS,CACb1H,KAAM,UACN4a,QAAS,MACTyO,WAAY,CAAC,EACb5yB,SAAUye,EAAMzR,IAAIlF,IAGtB,OADA2W,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EJMEua,SKjBK,SAAkB/M,EAAO3W,GAE9B,MAAMmJ,EAAS,CACb1H,KAAM,UACN4a,QAAS,KACTyO,WAAY,CAAC,EACb5yB,SAAUye,EAAMzR,IAAIlF,IAGtB,OADA2W,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,ELQEohB,kBAAiB,GACjB2B,SMXK,SAAkBvV,EAAO3W,GAC9B,MAAMmsB,EAAexV,EAAMwV,aAC3B,IAAIC,EAAK,EAET,KAAOA,KAAMD,GAAcC,IAE3B,MAAMtR,EAAa1W,OAAOgoB,GAS1B,OAPAD,EAAarR,GAAc,CACzBrZ,KAAM,qBACNqZ,aACA5iB,SAAU,CAAC,CAACuJ,KAAM,YAAavJ,SAAU8H,EAAK9H,WAC9Cf,SAAU6I,EAAK7I,UAGVozB,GAAkB5T,EAAO,CAC9BlV,KAAM,oBACNqZ,aACA3jB,SAAU6I,EAAK7I,UAEnB,ENRE0kB,QOpBK,SAAiBlF,EAAO3W,GAE7B,MAAMmJ,EAAS,CACb1H,KAAM,UACN4a,QAAS,IAAMrc,EAAK2oB,MACpBmC,WAAY,CAAC,EACb5yB,SAAUye,EAAMzR,IAAIlF,IAGtB,OADA2W,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EPWE0a,KQnBK,SAAclN,EAAO3W,GAC1B,GAAI2W,EAAM0V,UAAW,CAEnB,MAAMljB,EAAS,CAAC1H,KAAM,MAAOvF,MAAO8D,EAAK9D,OAEzC,OADAya,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,CAGA,OAAO,IACT,ERUEmjB,eSjBK,SAAwB3V,EAAO3W,GACpC,MAAM4X,EAAMjB,EAAMkE,WAAW7a,EAAK8a,YAElC,IAAKlD,EACH,OAAOyT,GAAO1U,EAAO3W,GAIvB,MAAM8qB,EAAa,CAAC3sB,IAAKyrB,GAAahS,EAAI9P,KAAO,IAAK+H,IAAK7P,EAAK6P,KAE9C,OAAd+H,EAAI8C,YAAgCnV,IAAdqS,EAAI8C,QAC5BoQ,EAAWpQ,MAAQ9C,EAAI8C,OAIzB,MAAMvR,EAAS,CAAC1H,KAAM,UAAW4a,QAAS,MAAOyO,aAAY5yB,SAAU,IAEvE,OADAye,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,ETAE6a,MUpBK,SAAerN,EAAO3W,GAE3B,MAAM8qB,EAAa,CAAC3sB,IAAKyrB,GAAa5pB,EAAK8H,MAE1B,OAAb9H,EAAK6P,UAA6BtK,IAAbvF,EAAK6P,MAC5Bib,EAAWjb,IAAM7P,EAAK6P,KAGL,OAAf7P,EAAK0a,YAAiCnV,IAAfvF,EAAK0a,QAC9BoQ,EAAWpQ,MAAQ1a,EAAK0a,OAI1B,MAAMvR,EAAS,CAAC1H,KAAM,UAAW4a,QAAS,MAAOyO,aAAY5yB,SAAU,IAEvE,OADAye,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EVKEojB,WWvBK,SAAoB5V,EAAO3W,GAEhC,MAAMgV,EAAO,CAACvT,KAAM,OAAQvF,MAAO8D,EAAK9D,MAAMmD,QAAQ,YAAa,MACnEsX,EAAMuU,MAAMlrB,EAAMgV,GAGlB,MAAM7L,EAAS,CACb1H,KAAM,UACN4a,QAAS,OACTyO,WAAY,CAAC,EACb5yB,SAAU,CAAC8c,IAGb,OADA2B,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EXUEqjB,cYpBK,SAAuB7V,EAAO3W,GACnC,MAAM4X,EAAMjB,EAAMkE,WAAW7a,EAAK8a,YAElC,IAAKlD,EACH,OAAOyT,GAAO1U,EAAO3W,GAIvB,MAAM8qB,EAAa,CAAC9gB,KAAM4f,GAAahS,EAAI9P,KAAO,KAEhC,OAAd8P,EAAI8C,YAAgCnV,IAAdqS,EAAI8C,QAC5BoQ,EAAWpQ,MAAQ9C,EAAI8C,OAIzB,MAAMvR,EAAS,CACb1H,KAAM,UACN4a,QAAS,IACTyO,aACA5yB,SAAUye,EAAMzR,IAAIlF,IAGtB,OADA2W,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EZFE0Z,KavBK,SAAclM,EAAO3W,GAE1B,MAAM8qB,EAAa,CAAC9gB,KAAM4f,GAAa5pB,EAAK8H,MAEzB,OAAf9H,EAAK0a,YAAiCnV,IAAfvF,EAAK0a,QAC9BoQ,EAAWpQ,MAAQ1a,EAAK0a,OAI1B,MAAMvR,EAAS,CACb1H,KAAM,UACN4a,QAAS,IACTyO,aACA5yB,SAAUye,EAAMzR,IAAIlF,IAGtB,OADA2W,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EbOE8a,SFfK,SAAkBtN,EAAO3W,EAAMmqB,GACpC,MAAMsC,EAAU9V,EAAMzR,IAAIlF,GACpB0sB,EAAQvC,EAyEhB,SAAmBnqB,GACjB,IAAI0sB,GAAQ,EACZ,GAAkB,SAAd1sB,EAAKyB,KAAiB,CACxBirB,EAAQ1sB,EAAKgpB,SAAU,EACvB,MAAM9wB,EAAW8H,EAAK9H,SACtB,IAAIiN,GAAS,EAEb,MAAQunB,KAAWvnB,EAAQjN,EAASsE,QAClCkwB,EAAQjB,GAAcvzB,EAASiN,GAEnC,CAEA,OAAOunB,CACT,CAtFyBC,CAAUxC,GAAUsB,GAAczrB,GAEnD8qB,EAAa,CAAC,EAEd5yB,EAAW,GAEjB,GAA4B,kBAAjB8H,EAAKipB,QAAuB,CACrC,MAAM5iB,EAAOomB,EAAQ,GAErB,IAAI/Q,EAEArV,GAAsB,YAAdA,EAAK5E,MAAuC,MAAjB4E,EAAKgW,QAC1CX,EAAYrV,GAEZqV,EAAY,CAACja,KAAM,UAAW4a,QAAS,IAAKyO,WAAY,CAAC,EAAG5yB,SAAU,IACtEu0B,EAAQ5nB,QAAQ6W,IAGdA,EAAUxjB,SAASsE,OAAS,GAC9Bkf,EAAUxjB,SAAS2M,QAAQ,CAACpD,KAAM,OAAQvF,MAAO,MAGnDwf,EAAUxjB,SAAS2M,QAAQ,CACzBpD,KAAM,UACN4a,QAAS,QACTyO,WAAY,CAACrpB,KAAM,WAAYwnB,QAASjpB,EAAKipB,QAAS2D,UAAU,GAChE10B,SAAU,KAKZ4yB,EAAW3yB,UAAY,CAAC,iBAC1B,CAEA,IAAIgN,GAAS,EAEb,OAASA,EAAQsnB,EAAQjwB,QAAQ,CAC/B,MAAMqwB,EAAQJ,EAAQtnB,IAIpBunB,GACU,IAAVvnB,GACe,YAAf0nB,EAAMprB,MACY,MAAlBorB,EAAMxQ,UAENnkB,EAAS4I,KAAK,CAACW,KAAM,OAAQvF,MAAO,OAGnB,YAAf2wB,EAAMprB,MAAwC,MAAlBorB,EAAMxQ,SAAoBqQ,EAGxDx0B,EAAS4I,KAAK+rB,GAFd30B,EAAS4I,QAAQ+rB,EAAM30B,SAI3B,CAEA,MAAMoc,EAAOmY,EAAQA,EAAQjwB,OAAS,GAGlC8X,IAASoY,GAAuB,YAAdpY,EAAK7S,MAAuC,MAAjB6S,EAAK+H,UACpDnkB,EAAS4I,KAAK,CAACW,KAAM,OAAQvF,MAAO,OAItC,MAAMiN,EAAS,CAAC1H,KAAM,UAAW4a,QAAS,KAAMyO,aAAY5yB,YAE5D,OADAye,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EErDE5E,Kc3BK,SAAcoS,EAAO3W,GAE1B,MAAM8qB,EAAa,CAAC,EACd2B,EAAU9V,EAAMzR,IAAIlF,GAC1B,IAAImF,GAAS,EAOb,IAL0B,iBAAfnF,EAAKF,OAAqC,IAAfE,EAAKF,QACzCgrB,EAAWhrB,MAAQE,EAAKF,SAIjBqF,EAAQsnB,EAAQjwB,QAAQ,CAC/B,MAAMqwB,EAAQJ,EAAQtnB,GAEtB,GACiB,YAAf0nB,EAAMprB,MACY,OAAlBorB,EAAMxQ,SACNwQ,EAAM/B,YACNlvB,MAAMC,QAAQgxB,EAAM/B,WAAW3yB,YAC/B00B,EAAM/B,WAAW3yB,UAAUwD,SAAS,kBACpC,CACAmvB,EAAW3yB,UAAY,CAAC,sBACxB,KACF,CACF,CAGA,MAAMgR,EAAS,CACb1H,KAAM,UACN4a,QAASrc,EAAK+oB,QAAU,KAAO,KAC/B+B,aACA5yB,SAAUye,EAAM7J,KAAK2f,GAAS,IAGhC,OADA9V,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EdPEuS,Ue7BK,SAAmB/E,EAAO3W,GAE/B,MAAMmJ,EAAS,CACb1H,KAAM,UACN4a,QAAS,IACTyO,WAAY,CAAC,EACb5yB,SAAUye,EAAMzR,IAAIlF,IAGtB,OADA2W,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EfoBE/S,KgB7BK,SAAcugB,EAAO3W,GAE1B,MAAMmJ,EAAS,CAAC1H,KAAM,OAAQvJ,SAAUye,EAAM7J,KAAK6J,EAAMzR,IAAIlF,KAE7D,OADA2W,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EhByBE0b,OiB/BK,SAAgBlO,EAAO3W,GAE5B,MAAMmJ,EAAS,CACb1H,KAAM,UACN4a,QAAS,SACTyO,WAAY,CAAC,EACb5yB,SAAUye,EAAMzR,IAAIlF,IAGtB,OADA2W,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EjBsBE2jB,MkB9BK,SAAenW,EAAO3W,GAC3B,MAAM+sB,EAAOpW,EAAMzR,IAAIlF,GACjBgtB,EAAWD,EAAKE,QAEhBC,EAAe,GAErB,GAAIF,EAAU,CAEZ,MAAM3mB,EAAO,CACX5E,KAAM,UACN4a,QAAS,QACTyO,WAAY,CAAC,EACb5yB,SAAUye,EAAM7J,KAAK,CAACkgB,IAAW,IAEnCrW,EAAMuU,MAAMlrB,EAAK9H,SAAS,GAAImO,GAC9B6mB,EAAapsB,KAAKuF,EACpB,CAEA,GAAI0mB,EAAKvwB,OAAS,EAAG,CAEnB,MAAM2wB,EAAO,CACX1rB,KAAM,UACN4a,QAAS,QACTyO,WAAY,CAAC,EACb5yB,SAAUye,EAAM7J,KAAKigB,GAAM,IAGvBjtB,EAAQsqB,GAAWpqB,EAAK9H,SAAS,IACjCkI,EAAMiqB,GAASrqB,EAAK9H,SAAS8H,EAAK9H,SAASsE,OAAS,IACtDsD,EAAMC,MAAQK,EAAIL,OAAMotB,EAAKh2B,SAAW,CAAC2I,QAAOM,QACpD8sB,EAAapsB,KAAKqsB,EACpB,CAGA,MAAMhkB,EAAS,CACb1H,KAAM,UACN4a,QAAS,QACTyO,WAAY,CAAC,EACb5yB,SAAUye,EAAM7J,KAAKogB,GAAc,IAGrC,OADAvW,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,ElBXEikB,UmBjCK,SAAmBzW,EAAO3W,GAI/B,MAAMmJ,EAAS,CACb1H,KAAM,UACN4a,QAAS,KACTyO,WAAY,CAAC,EACb5yB,SAAUye,EAAMzR,IAAIlF,IAGtB,OADA2W,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EnBsBEkkB,SoBtBK,SAAkB1W,EAAO3W,EAAMmqB,GACpC,MAAMmD,EAAWnD,EAASA,EAAOjyB,cAAWqN,EAGtC8W,EAAuB,KADZiR,EAAWA,EAAShmB,QAAQtH,GAAQ,GACpB,KAAO,KAClCutB,EAAQpD,GAA0B,UAAhBA,EAAO1oB,KAAmB0oB,EAAOoD,WAAQhoB,EAC3D/I,EAAS+wB,EAAQA,EAAM/wB,OAASwD,EAAK9H,SAASsE,OACpD,IAAIgxB,GAAa,EAEjB,MAAMC,EAAQ,GAEd,OAASD,EAAYhxB,GAAQ,CAE3B,MAAMkxB,EAAO1tB,EAAK9H,SAASs1B,GAErB1C,EAAa,CAAC,EACd6C,EAAaJ,EAAQA,EAAMC,QAAajoB,EAE1CooB,IACF7C,EAAWyC,MAAQI,GAIrB,IAAIxkB,EAAS,CAAC1H,KAAM,UAAW4a,UAASyO,aAAY5yB,SAAU,IAE1Dw1B,IACFvkB,EAAOjR,SAAWye,EAAMzR,IAAIwoB,GAC5B/W,EAAMuU,MAAMwC,EAAMvkB,GAClBA,EAASwN,EAAMyU,UAAUprB,EAAMmJ,IAGjCskB,EAAM3sB,KAAKqI,EACb,CAGA,MAAMA,EAAS,CACb1H,KAAM,UACN4a,QAAS,KACTyO,WAAY,CAAC,EACb5yB,SAAUye,EAAM7J,KAAK2gB,GAAO,IAG9B,OADA9W,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EpBpBE6L,KqBhCK,SAAc2B,EAAO3W,GAE1B,MAAMmJ,EAAS,CAAC1H,KAAM,OAAQvF,MAAOwvB,GAAUtnB,OAAOpE,EAAK9D,SAE3D,OADAya,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,ErB4BEmP,csBpCK,SAAuB3B,EAAO3W,GAEnC,MAAMmJ,EAAS,CACb1H,KAAM,UACN4a,QAAS,KACTyO,WAAY,CAAC,EACb5yB,SAAU,IAGZ,OADAye,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,EtB2BEykB,KAAMC,GACNC,KAAMD,GACNhT,WAAYgT,GACZE,mBAAoBF,IAItB,SAASA,KAEP,OAAO,IACT,CuBwGA,MAAM,GAAM,CAAC,EAAElxB,eAYR,SAASqxB,GAAY/e,EAAMtR,GAChC,MAAMoQ,EAAWpQ,GAAW,CAAC,EACvB0uB,EAAYte,EAASkgB,qBAAsB,EAE3C9B,EAAe,CAAC,EA2DtB,OAnDAxV,EAAM0V,UAAYA,EAElB1V,EAAMoU,mBACuBxlB,IAA3BwI,EAASgd,eAA0D,OAA3Bhd,EAASgd,cAC7C,gBACAhd,EAASgd,cAEfpU,EAAMuX,cAAgBngB,EAASmgB,eAAiB,YAEhDvX,EAAMwX,qBAAuBpgB,EAASogB,sBAAwB,KAE9DxX,EAAMyX,wBAA0BrgB,EAASqgB,yBAA2B,CAClEj2B,UAAW,CAAC,YAGdwe,EAAM0X,kBAAoBtgB,EAASsgB,mBAAqB,kBAExD1X,EAAM2X,eAAiBvgB,EAASugB,eAEhC3X,EAAM4X,YAAcxgB,EAASwgB,YAE7B5X,EAAMmV,SAAW,IAAIA,MAAa/d,EAAS+d,UAI3CnV,EAAMkE,W5BxLD,SAAqB5L,GAE1B,MAAMuf,EAAQ/yB,OAAO7D,OAAO,MAE5B,IAAKqX,IAASA,EAAKxN,KACjB,MAAM,IAAIf,MAAM,wCAUlB,OAPAqpB,GAAM9a,EAAM,cAAe4L,IACzB,MAAM2P,EAAKF,GAAMzP,EAAWC,YACxB0P,IAAO,GAAIttB,KAAKsxB,EAAOhE,KACzBgE,EAAMhE,GAAM3P,EACd,IAMF,SAAoBC,GAClB,MAAM0P,EAAKF,GAAMxP,GAEjB,OAAO0P,GAAM,GAAIttB,KAAKsxB,EAAOhE,GAAMgE,EAAMhE,GAAM,IACjD,CACF,C4BiKqBiE,CAAYxf,GAC/B0H,EAAMwV,aAAeA,EAErBxV,EAAM+T,cAAgB,GAEtB/T,EAAMiU,eAAiB,CAAC,EAExBjU,EAAMuU,MAAQA,GACdvU,EAAMyU,UAAYA,GAClBzU,EAAMhH,IAsGN,SAAkB3P,EAAMmqB,GAEtB,OAAO,GAAIxT,EAAO3W,EAAMmqB,EAC1B,EAxGAxT,EAAMzR,IAkHN,SAAkBilB,GAEhB,OAAO,GAAIxT,EAAOwT,EACpB,EApHAxT,EAAM7J,KAAO,GAEb6J,EAAM+X,QAAUA,EAEhB3E,GAAM9a,EAAM,sBAAuB4L,IACjC,MAAM2P,EAAKpmB,OAAOyW,EAAWC,YAAYrU,cAIpC,GAAIvJ,KAAKivB,EAAc3B,KAC1B2B,EAAa3B,GAAM3P,EACrB,IAIKlE,EAWP,SAAS+X,EAAQn3B,EAAMF,GAErB,GAAIE,GAAQ,SAAUA,GAAQA,EAAKqT,KAAM,CAEvC,MAAMA,EAAOrT,EAAKqT,KAEdA,EAAK+jB,QACY,YAAft3B,EAAMoK,OACRpK,EAAQ,CACNoK,KAAM,UACN4a,QAAS,GACTyO,WAAY,CAAC,EACb5yB,SAAU,KAIdb,EAAMglB,QAAUzR,EAAK+jB,OAGJ,YAAft3B,EAAMoK,MAAsBmJ,EAAKgkB,cACnCv3B,EAAMyzB,WAAa,IAAIzzB,EAAMyzB,cAAelgB,EAAKgkB,cAG/C,aAAcv3B,GAASA,EAAMa,UAAY0S,EAAKikB,YAChDx3B,EAAMa,SAAW0S,EAAKikB,UAE1B,CAEA,GAAIt3B,EAAM,CACR,MAAMu3B,EAAM,SAAUv3B,EAAOA,EAAO,CAACJ,SAAUI,ICpQ9C,SAAmByI,GACxB,QACGA,GACAA,EAAK7I,UACL6I,EAAK7I,SAAS2I,OACdE,EAAK7I,SAAS2I,MAAMC,MACpBC,EAAK7I,SAAS2I,MAAML,QACpBO,EAAK7I,SAASiJ,KACdJ,EAAK7I,SAASiJ,IAAIL,MAClBC,EAAK7I,SAASiJ,IAAIX,OAEvB,ED2PWsvB,CAAUD,KAEbz3B,EAAMF,SAAW,CAAC2I,MAAOsqB,GAAW0E,GAAM1uB,IAAKiqB,GAASyE,IAE5D,CAEA,OAAOz3B,CACT,CAUA,SAASsf,EAAM3W,EAAMqc,EAASnmB,EAAOgC,GAOnC,OANI0D,MAAMC,QAAQ3F,KAChBgC,EAAWhC,EACXA,EAAQ,CAAC,GAIJw4B,EAAQ1uB,EAAM,CACnByB,KAAM,UACN4a,UACAyO,WAAY50B,GAAS,CAAC,EACtBgC,SAAUA,GAAY,IAE1B,CA8BF,CAYA,SAASgzB,GAAMtmB,EAAMoqB,GACfpqB,EAAKzN,WAAU63B,EAAG73B,S7BpTjB,SAAkB6I,GACvB,MAAO,CAACF,MAAOsqB,GAAWpqB,GAAOI,IAAKiqB,GAASrqB,GACjD,C6BkTmC,CAAS4E,GAC5C,CAcA,SAASwmB,GAAUxmB,EAAMoqB,GAEvB,IAAI7lB,EAAS6lB,EAGb,GAAIpqB,GAAQA,EAAKgG,KAAM,CACrB,MAAM+jB,EAAQ/pB,EAAKgG,KAAK+jB,MAClBE,EAAYjqB,EAAKgG,KAAKikB,UACtBD,EAAchqB,EAAKgG,KAAKgkB,YAET,iBAAVD,IAGW,YAAhBxlB,EAAO1H,KACT0H,EAAOkT,QAAUsS,EAOjBxlB,EAAS,CACP1H,KAAM,UACN4a,QAASsS,EACT7D,WAAY,CAAC,EACb5yB,SAAU,KAeI,YAAhBiR,EAAO1H,MAAsBmtB,IAC/BzlB,EAAO2hB,WAAa,IAAI3hB,EAAO2hB,cAAe8D,IAI9C,aAAczlB,GACdA,EAAOjR,UADP,MAEA22B,IAIA1lB,EAAOjR,SAAW22B,EAEtB,CAEA,OAAO1lB,CACT,CAeO,SAAS,GAAIwN,EAAO3W,EAAMmqB,GAC/B,MAAM1oB,EAAOzB,GAAQA,EAAKyB,KAG1B,IAAKA,EACH,MAAM,IAAIf,MAAM,uBAAyBV,EAAO,KAGlD,OAAI,GAAI9C,KAAKyZ,EAAMmV,SAAUrqB,GACpBkV,EAAMmV,SAASrqB,GAAMkV,EAAO3W,EAAMmqB,GAGvCxT,EAAM4X,aAAe5X,EAAM4X,YAAY5yB,SAAS8F,GAG3C,aAAczB,EAAO,IAAIA,EAAM9H,SAAU,GAAIye,EAAO3W,IAASA,EAGlE2W,EAAM2X,eACD3X,EAAM2X,eAAe3X,EAAO3W,EAAMmqB,GAiE7C,SAA+BxT,EAAO3W,GACpC,MAAM4K,EAAO5K,EAAK4K,MAAQ,CAAC,EAErBzB,IACJ,UAAWnJ,IACT,GAAI9C,KAAK0N,EAAM,gBAAkB,GAAI1N,KAAK0N,EAAM,aAE9C,CACEnJ,KAAM,UACN4a,QAAS,MACTyO,WAAY,CAAC,EACb5yB,SAAU,GAAIye,EAAO3W,IALvB,CAACyB,KAAM,OAAQvF,MAAO8D,EAAK9D,OASjC,OADAya,EAAMuU,MAAMlrB,EAAMmJ,GACXwN,EAAMyU,UAAUprB,EAAMmJ,EAC/B,CA9ES8lB,CAAsBtY,EAAO3W,EACtC,CAaO,SAAS,GAAI2W,EAAOwT,GAEzB,MAAMle,EAAS,GAEf,GAAI,aAAcke,EAAQ,CACxB,MAAM+E,EAAQ/E,EAAOjyB,SACrB,IAAIiN,GAAS,EACb,OAASA,EAAQ+pB,EAAM1yB,QAAQ,CAC7B,MAAM2M,EAAS,GAAIwN,EAAOuY,EAAM/pB,GAAQglB,GAGxC,GAAIhhB,EAAQ,CACV,GAAIhE,GAAmC,UAA1B+pB,EAAM/pB,EAAQ,GAAG1D,OACvB7F,MAAMC,QAAQsN,IAA2B,SAAhBA,EAAO1H,OACnC0H,EAAOjN,MAAQiN,EAAOjN,MAAMmD,QAAQ,OAAQ,MAGzCzD,MAAMC,QAAQsN,IAA2B,YAAhBA,EAAO1H,MAAoB,CACvD,MAAM4E,EAAO8C,EAAOjR,SAAS,GAEzBmO,GAAsB,SAAdA,EAAK5E,OACf4E,EAAKnK,MAAQmK,EAAKnK,MAAMmD,QAAQ,OAAQ,IAE5C,CAGEzD,MAAMC,QAAQsN,GAChB8C,EAAOnL,QAAQqI,GAEf8C,EAAOnL,KAAKqI,EAEhB,CACF,CACF,CAEA,OAAO8C,CACT,CA0CO,SAAS,GAAKijB,EAAOxC,GAE1B,MAAMvjB,EAAS,GACf,IAAIhE,GAAS,EAMb,IAJIunB,GACFvjB,EAAOrI,KAAK,CAACW,KAAM,OAAQvF,MAAO,SAG3BiJ,EAAQ+pB,EAAM1yB,QACjB2I,GAAOgE,EAAOrI,KAAK,CAACW,KAAM,OAAQvF,MAAO,OAC7CiN,EAAOrI,KAAKouB,EAAM/pB,IAOpB,OAJIunB,GAASwC,EAAM1yB,OAAS,GAC1B2M,EAAOrI,KAAK,CAACW,KAAM,OAAQvF,MAAO,OAG7BiN,CACT,CEheO,SAASgmB,GAAOlgB,EAAMtR,GAC3B,MAAMgZ,EAAQqX,GAAY/e,EAAMtR,GAC1BqC,EAAO2W,EAAMhH,IAAIV,EAAM,MACvBmgB,EClFD,SAAgBzY,GAErB,MAAM0Y,EAAY,GAClB,IAAIlqB,GAAS,EAEb,OAASA,EAAQwR,EAAM+T,cAAcluB,QAAQ,CAC3C,MAAMob,EAAMjB,EAAMwV,aAAaxV,EAAM+T,cAAcvlB,IAEnD,IAAKyS,EACH,SAGF,MAAMtX,EAAUqW,EAAMzR,IAAI0S,GACpB4S,EAAKpmB,OAAOwT,EAAIkD,YAAYrU,cAC5BgkB,EAASb,GAAaY,EAAGhkB,eAC/B,IAAI8oB,EAAiB,EAErB,MAAMC,EAAiB,GAEvB,OAASD,GAAkB3Y,EAAMiU,eAAeJ,IAAK,CAEnD,MAAMgF,EAAgB,CACpB/tB,KAAM,UACN4a,QAAS,IACTyO,WAAY,CACV9gB,KACE,IACA2M,EAAMoU,cACN,SACAN,GACC6E,EAAiB,EAAI,IAAMA,EAAiB,IAC/CG,qBAAqB,EACrBt3B,UAAW,CAAC,yBACZu3B,UAAW/Y,EAAM0X,mBAEnBn2B,SAAU,CAAC,CAACuJ,KAAM,OAAQvF,MAAO,OAG/BozB,EAAiB,GACnBE,EAAct3B,SAAS4I,KAAK,CAC1BW,KAAM,UACN4a,QAAS,MACTnkB,SAAU,CAAC,CAACuJ,KAAM,OAAQvF,MAAOkI,OAAOkrB,OAIxCC,EAAe/yB,OAAS,GAC1B+yB,EAAezuB,KAAK,CAACW,KAAM,OAAQvF,MAAO,MAG5CqzB,EAAezuB,KAAK0uB,EACtB,CAEA,MAAMlb,EAAOhU,EAAQA,EAAQ9D,OAAS,GAEtC,GAAI8X,GAAsB,YAAdA,EAAK7S,MAAuC,MAAjB6S,EAAK+H,QAAiB,CAC3D,MAAMsT,EAAWrb,EAAKpc,SAASoc,EAAKpc,SAASsE,OAAS,GAClDmzB,GAA8B,SAAlBA,EAASluB,KACvBkuB,EAASzzB,OAAS,IAElBoY,EAAKpc,SAAS4I,KAAK,CAACW,KAAM,OAAQvF,MAAO,MAG3CoY,EAAKpc,SAAS4I,QAAQyuB,EACxB,MACEjvB,EAAQQ,QAAQyuB,GAIlB,MAAMtL,EAAW,CACfxiB,KAAM,UACN4a,QAAS,KACTyO,WAAY,CAACN,GAAI7T,EAAMoU,cAAgB,MAAQN,GAC/CvyB,SAAUye,EAAM7J,KAAKxM,GAAS,IAGhCqW,EAAMuU,MAAMtT,EAAKqM,GAEjBoL,EAAUvuB,KAAKmjB,EACjB,CAEA,GAAyB,IAArBoL,EAAU7yB,OAId,MAAO,CACLiF,KAAM,UACN4a,QAAS,UACTyO,WAAY,CAAC8E,eAAe,EAAMz3B,UAAW,CAAC,cAC9CD,SAAU,CACR,CACEuJ,KAAM,UACN4a,QAAS1F,EAAMwX,qBACfrD,WAAY,IAEPphB,KAAK6E,MAAM7E,KAAKC,UAAUgN,EAAMyX,0BACnC5D,GAAI,kBAENtyB,SAAU,CAAC,CAACuJ,KAAM,OAAQvF,MAAOya,EAAMuX,iBAEzC,CAACzsB,KAAM,OAAQvF,MAAO,MACtB,CACEuF,KAAM,UACN4a,QAAS,KACTyO,WAAY,CAAC,EACb5yB,SAAUye,EAAM7J,KAAKuiB,GAAW,IAElC,CAAC5tB,KAAM,OAAQvF,MAAO,OAG5B,CD5Be2zB,CAAOlZ,GAUpB,OARIyY,GAIFpvB,EAAK9H,SAAS4I,KAAK,CAACW,KAAM,OAAQvF,MAAO,MAAOkzB,GAI3CxzB,MAAMC,QAAQmE,GAAQ,CAACyB,KAAM,OAAQvJ,SAAU8H,GAAQA,CAChE,CE3EA,MAUA,GARE,SACYuP,EAAa5R,GACrB,OAAO4R,GAAe,QAASA,EAcrC,SAAgBA,EAAa5R,GAC3B,MAAO,CAACqC,EAAM2H,EAAM0E,KAClBkD,EAAYvD,IAAImjB,GAAOnvB,EAAMrC,GAAUgK,GAAO1O,IAC5CoT,EAAKpT,EAAK,GACX,CAEL,CAnBU62B,CAAOvgB,EAAa5R,GA2B9B,SAAgBA,GAEd,OAAQqC,GAASmvB,GAAOnvB,EAAMrC,EAChC,CA7BUoyB,CAAOxgB,GAAe5R,EAE9B,6BCrCK,MAAMqyB,GAOXxyB,YAAYsE,EAAUmuB,EAAQC,GAC5B/vB,KAAK2B,SAAWA,EAChB3B,KAAK8vB,OAASA,EACVC,IACF/vB,KAAK+vB,MAAQA,EAEjB,ECPK,SAASC,GAAM1B,EAAayB,GAEjC,MAAMpuB,EAAW,CAAC,EAEZmuB,EAAS,CAAC,EAChB,IAAI9qB,GAAS,EAEb,OAASA,EAAQspB,EAAYjyB,QAC3Bf,OAAO0S,OAAOrM,EAAU2sB,EAAYtpB,GAAOrD,UAC3CrG,OAAO0S,OAAO8hB,EAAQxB,EAAYtpB,GAAO8qB,QAG3C,OAAO,IAAID,GAAOluB,EAAUmuB,EAAQC,EACtC,CCrBO,SAAS,GAAUh0B,GACxB,OAAOA,EAAMsK,aACf,CFiBAwpB,GAAOtzB,UAAUoF,SAAW,CAAC,EAE7BkuB,GAAOtzB,UAAUuzB,OAAS,CAAC,EAE3BD,GAAOtzB,UAAUwzB,MAAQ,KG3BlB,MAAME,GAMX5yB,YAAYsE,EAAUuuB,GAEpBlwB,KAAK2B,SAAWA,EAEhB3B,KAAKkwB,UAAYA,CACnB,EAIFD,GAAK1zB,UAAUwzB,MAAQ,KACvBE,GAAK1zB,UAAU4zB,SAAU,EACzBF,GAAK1zB,UAAU6zB,YAAa,EAC5BH,GAAK1zB,UAAU8zB,mBAAoB,EACnCJ,GAAK1zB,UAAU+zB,QAAS,EACxBL,GAAK1zB,UAAUg0B,gBAAiB,EAChCN,GAAK1zB,UAAUi0B,gBAAiB,EAChCP,GAAK1zB,UAAUk0B,uBAAwB,EACvCR,GAAK1zB,UAAUm0B,iBAAkB,EACjCT,GAAK1zB,UAAUue,SAAU,ECxBzB,IAAI6V,GAAS,EAEN,MAAM,GAAUC,KACVR,GAAaQ,KACbP,GAAoBO,KACpBN,GAASM,KACTJ,GAAiBI,KACjBL,GAAiBK,KACjBH,GAAwBG,KAErC,SAASA,KACP,OAAO,KAAOD,EAChB,CCPA,MAAME,GAASv1B,OAAOC,KAAK,GAEpB,MAAMu1B,WAAoBb,GAQ/B5yB,YAAYsE,EAAUuuB,EAAWa,EAAMhB,GACrC,IAAI/qB,GAAS,EAMb,GAJAkC,MAAMvF,EAAUuuB,GAEhBc,GAAKhxB,KAAM,QAAS+vB,GAEA,iBAATgB,EACT,OAAS/rB,EAAQ6rB,GAAOx0B,QAAQ,CAC9B,MAAMmV,EAAQqf,GAAO7rB,GACrBgsB,GAAKhxB,KAAM6wB,GAAO7rB,IAAS+rB,EAAO,EAAMvf,MAAY,EAAMA,GAC5D,CAEJ,EAUF,SAASwf,GAAKllB,EAAQ5O,EAAKnB,GACrBA,IAEF+P,EAAO5O,GAAOnB,EAElB,CAZA+0B,GAAYv0B,UAAUue,SAAU,ECbhC,MAAM,GAAM,CAAC,EAAEte,eAMR,SAAS/E,GAAOijB,GAErB,MAAM/Y,EAAW,CAAC,EAEZmuB,EAAS,CAAC,EAEhB,IAAItuB,EAEJ,IAAKA,KAAQkZ,EAAWiQ,WACtB,GAAI,GAAI5tB,KAAK2d,EAAWiQ,WAAYnpB,GAAO,CACzC,MAAMzF,EAAQ2e,EAAWiQ,WAAWnpB,GAC9B0J,EAAO,IAAI4lB,GACftvB,EACAkZ,EAAWuW,UAAUvW,EAAWwW,YAAc,CAAC,EAAG1vB,GAClDzF,EACA2e,EAAWqV,OAIXrV,EAAWgW,iBACXhW,EAAWgW,gBAAgBl1B,SAASgG,KAEpC0J,EAAKwlB,iBAAkB,GAGzB/uB,EAASH,GAAQ0J,EAEjB4kB,EAAO,GAAUtuB,IAASA,EAC1BsuB,EAAO,GAAU5kB,EAAKglB,YAAc1uB,CACtC,CAGF,OAAO,IAAIquB,GAAOluB,EAAUmuB,EAAQpV,EAAWqV,MACjD,CCvDO,MAAMoB,GAAQ15B,GAAO,CAC1Bs4B,MAAO,QACPkB,UAAS,CAACha,EAAGzV,IACJ,SAAWA,EAAKT,MAAM,GAAGsF,cAElCskB,WAAY,CACVyG,aAAc,KACdC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,UAAW,QCZFC,GAAMl6B,GAAO,CACxBs4B,MAAO,MACPkB,UAAS,CAACha,EAAGzV,IACJ,OAASA,EAAKT,MAAM,GAAGsF,cAEhCskB,WAAY,CAACiH,QAAS,KAAMC,QAAS,KAAMC,SAAU,QCFhD,SAASC,GAAuBb,EAAYhB,GACjD,OAAOA,KAAagB,EAAaA,EAAWhB,GAAaA,CAC3D,CCAO,SAAS8B,GAAyBd,EAAYvvB,GACnD,OAAOowB,GAAuBb,EAAYvvB,EAAS0E,cACrD,CCNO,MAAM4rB,GAAQx6B,GAAO,CAC1Bs4B,MAAO,QACPmB,WAAY,CAACgB,WAAY,eACzBjB,UAAWe,GACXrH,WAAY,CAACsH,MAAO,KAAME,WAAY,QCJ3BC,GAAO36B,GAAO,CACzBw5B,UAAS,CAACha,EAAGzV,IACK,SAATA,EAAkBA,EAAO,QAAUA,EAAKT,MAAM,GAAGsF,cAE1DskB,WAAY,CACV0H,qBAAsB,KACtBC,WAAYlC,GACZmC,iBAAkB,KAClBC,SAAUpC,GACVqC,YAAarC,GACbsC,aAAcpC,GACdqC,aAAcrC,GACdsC,YAAatC,GACbuC,aAAcrC,GACdsC,YAAa,KACbhI,gBAAiB0F,GACjBuC,YAAa,KACbC,aAAc5C,GACd6C,eAAgBzC,GAChB0C,iBAAkB,KAClBC,aAAc/C,GACdgD,WAAY5C,GACZ6C,YAAajD,GACbkD,aAAc,KACdC,WAAYnD,GACZoD,YAAa,KACbC,iBAAkB,KAClBlE,UAAW,KACXmE,eAAgBlD,GAChBmD,UAAWrD,GACXsD,SAAU,KACVC,UAAWzD,GACX0D,cAAe1D,GACf2D,oBAAqB3D,GACrB4D,gBAAiB,KACjBC,SAAUzD,GACV0D,gBAAiB,KACjBC,aAAc7D,GACd8D,YAAahE,GACbiE,aAAcjE,GACdkE,aAAc,KACdC,aAAcnE,GACdoE,oBAAqBhE,GACrBiE,aAAcnE,GACdoE,aAAcpE,GACdqE,YAAarE,GACbsE,aAAcxE,GACdyE,YAAavE,GACbwE,SAAU,KACVC,aAAczE,GACd0E,aAAc1E,GACd2E,aAAc3E,GACd4E,cAAe,KACfC,KAAM,QC7CG,GAAO19B,GAAO,CACzBs4B,MAAO,OACPmB,WAAY,CACVkE,cAAe,iBACfC,UAAW,QACXC,QAAS,MACTC,UAAW,cAEbtE,UAAWe,GACXtB,gBAAiB,CAAC,UAAW,WAAY,QAAS,YAClD/F,WAAY,CAEV6K,KAAM,KACNC,OAAQlF,GACRmF,cAAelF,GACfmF,UAAWnF,GACX/5B,OAAQ,KACRm/B,MAAO,KACPC,gBAAiB,GACjBC,oBAAqB,GACrBC,eAAgB,GAChBrmB,IAAK,KACLsmB,GAAI,KACJC,MAAO,GACPC,eAAgB,KAChBC,aAAc3F,GACd4F,UAAW,GACXC,SAAU,GACVC,QAAS,GACTC,QAAS,KACTzN,QAAS,GACT0N,KAAM,KACNx+B,UAAWw4B,GACXiG,KAAMnG,GACNoG,QAAS,KACTv2B,QAAS,KACTw2B,gBAAiBvG,GACjBwG,SAAU,GACVC,aAAcrG,GACdsG,OAAQxG,GAASC,GACjBwG,YAAa,KACbtsB,KAAM,KACNusB,SAAU,KACVC,SAAU,KACV/hC,QAAS,GACTgiC,MAAO,GACPC,IAAK,KACLC,QAAS,KACT3K,SAAU,GACV4K,SAAUhH,GACViH,UAAWlH,GACXmH,QAAS,KACTC,aAAc,KACdC,KAAM,KACNC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,eAAgB,GAChBC,WAAY,KACZC,QAASvH,GACTwH,OAAQ1H,GACR2H,OAAQ,GACRC,KAAM5H,GACNzmB,KAAM,KACNsuB,SAAU,KACVC,QAAS5H,GACT6H,UAAW7H,GACXnG,GAAI,KACJiO,WAAY,KACZC,YAAa,KACbC,UAAW,KACXC,UAAW,KACXC,GAAI,KACJC,MAAO,GACPC,OAAQ,KACRC,SAAUrI,GACVsI,QAAStI,GACTuI,UAAW,GACXC,SAAUxI,GACVjY,KAAM,KACN2B,MAAO,KACPqO,KAAM,KACN0Q,SAAU,KACV70B,KAAM,KACN80B,QAAS,KACTC,KAAM,GACNC,IAAK9I,GACL+I,SAAU,KACV52B,IAAK,KACL62B,UAAWhJ,GACXrR,MAAO,KACPsa,OAAQ,KACRC,IAAK,KACLC,UAAWnJ,GACXoJ,SAAU,GACVC,MAAO,GACP9jC,KAAM,KACN+jC,MAAO,KACPC,SAAU,GACVC,WAAY,GACZC,QAAS,KACTC,aAAc,KACdC,WAAY,KACZC,cAAe,KACfC,cAAe,KACfC,eAAgB,KAChB9/B,OAAQ,KACR+/B,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTC,cAAe,KACfC,cAAe,KACfC,kBAAmB,KACnBC,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACXC,QAAS,KACTC,QAAS,KACTthC,QAAS,KACTuhC,WAAY,KACZC,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTC,iBAAkB,KAClBC,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBC,UAAW,KACXC,YAAa,KACbC,UAAW,KACXC,eAAgB,KAChBC,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACdC,mBAAoB,KACpBC,QAAS,KACTC,SAAU,KACVC,SAAU,KACVC,YAAa,KACbC,0BAA2B,KAC3BC,SAAU,KACVC,UAAW,KACXC,SAAU,KACVC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVC,qBAAsB,KACtBC,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACXC,QAAS,KACThmB,KAAM,GACNimB,QAAS9O,GACT+O,QAAS,KACTC,KAAM9O,GACN+O,YAAa,KACbC,YAAa,GACbC,OAAQ,KACRC,QAAS,KACTC,SAAU,GACVC,eAAgB,KAChBC,IAAKrP,GACLsP,SAAU,GACVC,SAAU,GACVnT,KAAM0D,GACN0P,QAAS1P,GACT2P,QAASzP,GACT0P,MAAO,KACPC,OAAQ,GACRC,SAAU,GACVC,SAAU,GACVC,MAAO,KACPz9B,KAAMytB,GACNiQ,MAAO,KACPjrC,KAAM,KACNkrC,KAAMlQ,GACNmQ,WAAYrQ,GACZpyB,IAAK,KACL0iC,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACRjhC,MAAO2wB,GACPuQ,KAAM,KACN1hC,MAAO,KACP2hC,SAAUxQ,GACV/yB,OAAQ,KACRgd,MAAO,KACPwmB,UAAW,KACXz/B,KAAM,KACN0/B,cAAe,GACfC,OAAQ,KACRllC,MAAOq0B,GACP/5B,MAAOi6B,GACP3jB,KAAM,KAINygB,MAAO,KACP8T,MAAO,KACPC,QAAS3Q,GACT4Q,KAAM,KACNC,WAAY,KACZC,QAAS,KACTznC,OAAQy2B,GACRiR,YAAa,KACbC,aAAclR,GACdmR,YAAa,KACbC,YAAa,KACbxlC,KAAM,KACNylC,QAAS,KACTC,QAAS,KACTC,MAAO,KACPv/B,KAAM,KACNw/B,SAAU,KACVC,SAAU,KACV/oC,MAAO,KACPgpC,QAAS,GACTC,QAAS,GACT7mC,MAAO,KACP8mC,KAAM,KACNC,MAAO,KACPC,YAAa,KACbC,OAAQ/R,GACRgS,WAAYhS,GACZ5N,KAAM,KACN6f,SAAU,KACVC,OAAQ,KACRC,aAAcnS,GACdoS,YAAapS,GACbqS,SAAU,GACVC,OAAQ,GACRC,QAAS,GACTC,OAAQ,GACRC,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACRC,IAAK,KACLC,YAAa7S,GACbrvB,MAAO,KACPmiC,OAAQ,KACRC,UAAWjT,GACXkT,QAAS,KACTC,QAAS,KACT1uB,KAAM,KACN2uB,UAAWlT,GACXmT,UAAW,KACXC,QAAS,KACTC,OAAQ,KACRC,MAAO,KACPC,OAAQvT,GAGRwT,kBAAmB,KACnBC,YAAa,KACbC,SAAU,KACVC,wBAAyB,GACzBC,sBAAuB,GACvBnhC,OAAQ,KACRpB,SAAU,KACV2qB,QAASgE,GACT6T,SAAU,KACVC,aAAc,QC1SLC,GAAM5sC,GAAO,CACxBs4B,MAAO,MACPmB,WAAY,CACVoT,aAAc,gBACdC,kBAAmB,qBACnBC,WAAY,cACZC,cAAe,iBACfC,UAAW,aACX1sC,UAAW,QACX2sC,SAAU,YACVC,SAAU,YACVC,mBAAoB,sBACpBC,0BAA2B,8BAC3BC,aAAc,gBACdC,eAAgB,kBAChBjO,YAAa,cACbkO,SAAU,WACVC,iBAAkB,oBAClBC,iBAAkB,oBAClBC,YAAa,eACbC,SAAU,YACVC,WAAY,cACZC,aAAc,gBACdC,WAAY,cACZC,SAAU,YACVC,eAAgB,mBAChBC,YAAa,eACbC,UAAW,aACXC,YAAa,eACbC,WAAY,cACZC,UAAW,aACXC,2BAA4B,+BAC5BC,yBAA0B,6BAC1B9N,SAAU,WACV+N,UAAW,cACXC,aAAc,iBACdC,aAAc,iBACdC,eAAgB,kBAChBC,cAAe,iBACfC,cAAe,iBACfC,UAAW,aACXC,UAAW,aACXC,YAAa,eACbC,QAAS,WACTC,YAAa,gBACbC,aAAc,iBACdC,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,SAAU,YACVC,MAAO,SACPC,UAAW,cACXC,WAAY,eACZrN,QAAS,UACTsN,WAAY,aACZrN,aAAc,eACdG,cAAe,gBACfmN,QAAS,UACTjN,SAAU,WACVC,UAAW,YACXC,iBAAkB,mBAClBC,SAAU,WACVC,QAAS,UACTC,QAAS,UACTI,OAAQ,SACRC,YAAa,cACbC,MAAO,QACPC,WAAY,aACZC,OAAQ,SACRC,UAAW,YACXC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,OAAQ,SACRC,iBAAkB,mBAClBC,UAAW,YACX4L,MAAO,QACP3L,QAAS,UACTC,QAAS,UACTthC,QAAS,UACTitC,UAAW,YACXC,WAAY,aACZ1L,aAAc,eACdC,QAAS,UACTC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,QAAS,UACTE,OAAQ,SACRC,aAAc,eACdC,iBAAkB,mBAClBE,YAAa,cACbC,UAAW,YACXE,YAAa,cACbC,aAAc,eACdC,aAAc,eACdC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,UAAW,YACXuK,aAAc,eACdtK,UAAW,YACXC,SAAU,WACVC,WAAY,aACZC,WAAY,aACZC,QAAS,UACTC,QAAS,UACTC,OAAQ,SACRC,UAAW,YACXC,WAAY,aACZC,WAAY,aACZC,aAAc,eACd6J,SAAU,WACV3J,QAAS,UACTC,SAAU,WACVC,SAAU,WACVG,SAAU,WACVC,UAAW,YACXC,SAAU,WACVqJ,OAAQ,SACRnJ,UAAW,YACXC,UAAW,YACXC,SAAU,WACVC,UAAW,YACXC,aAAc,eACdC,SAAU,WACVE,SAAU,WACVC,eAAgB,iBAChBC,UAAW,YACX2I,OAAQ,SACRC,iBAAkB,oBAClBC,kBAAmB,qBACnBC,WAAY,cACZC,QAAS,WACTlxC,cAAe,iBACf6oC,eAAgB,iBAChBsI,gBAAiB,mBACjBC,eAAgB,kBAChBC,UAAW,aACXC,YAAa,eACbC,sBAAuB,yBACvBC,uBAAwB,0BACxBC,gBAAiB,mBACjBC,iBAAkB,oBAClBC,cAAe,iBACfC,eAAgB,kBAChBC,iBAAkB,oBAClBC,cAAe,iBACfC,YAAa,eACbhI,SAAU,WACViI,WAAY,cACZtvC,eAAgB,kBAChBuvC,cAAe,iBACfC,OAAQ,SACRC,kBAAmB,qBACnBC,mBAAoB,sBACpBC,YAAa,eACbC,aAAc,gBACdC,WAAY,eACZC,YAAa,eACbC,SAAU,YACVC,aAAc,gBACdC,cAAe,iBACfC,aAAc,gBACdC,SAAU,aACVC,YAAa,gBACbC,YAAa,gBACbC,YAAa,eACbC,YAAa,eACbC,QAAS,WAETC,cAAe,gBACfC,cAAe,iBAEjBlZ,UAAWc,GACXpH,WAAY,CACVyf,MAAO3Z,GACP6T,aAAchU,GACd+Z,WAAY,KACZC,SAAU,KACV/F,kBAAmB,KACnBgG,WAAYja,GACZka,UAAWla,GACXkU,WAAY,KACZiG,OAAQna,GACRoa,cAAe,KACfC,cAAe,KACfC,QAASta,GACTua,UAAW,KACXpG,cAAe,KACfqG,cAAe,KACfC,YAAa,KACbC,KAAM,KACNC,MAAO,KACPC,KAAM5a,GACN6a,GAAI,KACJC,SAAU,KACV1G,UAAWpU,GACXt4B,UAAWw4B,GACX6a,KAAM,KACN1G,SAAU,KACV2G,cAAe,KACf1G,SAAU,KACV5rC,MAAO,KACP6rC,mBAAoB,KACpBC,0BAA2B,KAC3BC,aAAc,KACdC,eAAgB,KAChB7kC,QAAS,KACTorC,kBAAmB,KACnBC,iBAAkB,KAClBzU,YAAa,KACb/8B,OAAQ,KACRyxC,GAAI,KACJC,GAAI,KACJt2C,EAAG,KACH6vC,SAAU,KACV0G,cAAe,KACfC,QAAStb,GACTub,gBAAiBvb,GACjBwb,UAAW,KACX31C,QAAS,KACT41C,IAAK,KACLC,QAAS1b,GACT4U,iBAAkB,KAClB7N,SAAU,GACV4U,GAAI,KACJC,GAAI,KACJC,SAAU,KACVC,SAAU,KACVC,UAAW/b,GACX6U,iBAAkB,KAClBllC,IAAK,KACL7E,MAAO,KACPkxC,SAAUhc,GACVic,0BAA2B,KAC3BC,KAAM,KACNpH,YAAa9U,GACb+U,SAAU,KACVoH,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbrH,WAAY,KACZC,aAAc,KACdqH,UAAW,KACX/1C,eAAgB,KAChB2uC,WAAY,KACZC,SAAU,KACVC,eAAgB,KAChBC,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZ+G,OAAQ,KACRC,GAAI,KACJroC,KAAM,KACNsoC,GAAI,KACJC,GAAI,KACJC,GAAI1c,GACJ2c,GAAI3c,GACJwV,UAAWxV,GACXyV,2BAA4B,KAC5BC,yBAA0B,KAC1BkH,SAAU,KACVC,kBAAmB,KACnBC,cAAe,KACfzlB,QAAS,KACT0lB,QAAShd,GACTid,kBAAmB,KACnBC,WAAY,KACZxV,OAAQ,KACRnuB,KAAM,KACNsuB,SAAU,KACV+N,UAAW5V,GACX6V,aAAc7V,GACd8V,aAAc9V,GACdjG,GAAI,KACJojB,YAAand,GACb+V,eAAgB,KAChBqH,kBAAmB,KACnBC,GAAI,KACJC,IAAK,KACLC,UAAWvd,GACXwd,EAAGxd,GACHyd,GAAIzd,GACJ0d,GAAI1d,GACJ2d,GAAI3d,GACJ4d,GAAI5d,GACJ6d,aAAc1d,GACd2d,iBAAkB,KAClBC,UAAW,KACXC,WAAY,KACZC,SAAU,KACVC,QAAS,KACTjmB,KAAM,KACNkmB,aAAc,KACdnI,cAAe,KACfC,cAAe,KACfmI,kBAAmBpe,GACnBqe,MAAO,KACPnI,UAAW,KACXC,UAAW,KACXC,YAAa,KACbkI,aAAc,KACdC,YAAa,KACbC,YAAa,KACb/d,KAAM,KACNge,iBAAkB,KAClBC,UAAW,KACXC,aAAc,KACdxsC,IAAK,KACLwc,MAAO,KACPiwB,uBAAwB,KACxBC,sBAAuB,KACvBC,UAAW9e,GACX+e,UAAW,KACX9V,OAAQ,KACRC,IAAK,KACL8V,KAAM,KACNz5C,KAAM,KACN8wC,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,MAAO,KACPC,UAAW,KACXC,WAAY,KACZmI,WAAY,KACZC,SAAU,KACV19B,OAAQ,KACRioB,QAAS,KACTsN,WAAY,KACZrN,aAAc,KACdG,cAAe,KACfmN,QAAS,KACTjN,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTI,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACX4L,MAAO,KACP3L,QAAS,KACTC,QAAS,KACTthC,QAAS,KACTitC,UAAW,KACXC,WAAY,KACZ1L,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTE,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBE,YAAa,KACbC,UAAW,KACXE,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACXuK,aAAc,KACdtK,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACd6J,SAAU,KACV3J,QAAS,KACTC,SAAU,KACVC,SAAU,KACVG,SAAU,KACVC,UAAW,KACXC,SAAU,KACVqJ,OAAQ,KACRnJ,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVE,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACX2I,OAAQ,KACRvxC,QAAS,KACTm5C,SAAU,KACVnlC,MAAO,KACPolC,OAAQ,KACRC,YAAa,KACb3oC,OAAQ,KACRlQ,SAAU,KACV84C,QAAS,KACT9H,iBAAkBxX,GAClByX,kBAAmBzX,GACnB0X,WAAY,KACZC,QAAS,KACTpgC,KAAM,KACNgoC,WAAYvf,GACZwf,oBAAqB,KACrBC,iBAAkB,KAClBC,aAAc,KACdC,MAAO,KACP3Q,KAAM9O,GACN0f,MAAO,KACPhG,cAAe,KACfnzC,cAAe,KACfo5C,OAAQ,KACRC,UAAW9f,GACX+f,UAAW/f,GACXggB,UAAWhgB,GACXigB,cAAe,KACfC,oBAAqB,KACrBC,eAAgB,KAChBC,UAAW,KACX/uC,SAAU8uB,GACVkgB,EAAG,KACHC,OAAQ,KACRhR,eAAgB,KAChBiR,KAAM,KACNC,KAAM,KACNjR,IAAKpP,GACLyS,IAAKzS,GACLyX,gBAAiB,KACjB6I,YAAa,KACbC,UAAW,KACXC,mBAAoBxgB,GACpBygB,iBAAkBzgB,GAClB0gB,cAAe1gB,GACf2gB,gBAAiB3gB,GACjB5J,SAAU,KACVwqB,QAAS,KACTroC,OAAQ,KACRsoC,OAAQ,KACRC,GAAI,KACJC,GAAI,KACJC,MAAO,KACPC,KAAM,KACNvJ,eAAgB,KAChBwJ,KAAM,KACNC,MAAO,KACPC,aAAc,KACdC,iBAAkBxhB,GAClByhB,iBAAkBzhB,GAClB0hB,aAAc,KACdC,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,MAAO,KACPC,MAAO,KACPC,YAAa,KACblK,UAAW,KACXC,YAAa,KACbC,sBAAuBhY,GACvBiY,uBAAwBjY,GACxB5b,OAAQ,KACR69B,OAAQ,KACR/J,gBAAiB/X,GACjBgY,iBAAkB,KAClBC,cAAe,KACfC,eAAgB,KAChBC,iBAAkBtY,GAClBuY,cAAevY,GACfwY,YAAa,KACb3pC,MAAO,KACPqzC,aAAcliB,GACdmiB,aAAc,KACdC,oBAAqB,KACrBC,WAAY,KACZC,cAAe,KACfC,qBAAsB,KACtBC,eAAgBriB,GAChBqQ,SAAUxQ,GACVyiB,YAAa,KACbx1C,OAAQ,KACRy1C,QAAS1iB,GACT2iB,QAAS3iB,GACTyY,WAAY,KACZtvC,eAAgB,KAChBuvC,cAAe,KACfkK,WAAY,KACZ/I,cAAe,KACf5vB,MAAO,KACP44B,kBAAmB,KACnB7xC,KAAM,KACN2nC,OAAQxY,GACR5B,GAAI,KACJoC,UAAW,KACXmiB,GAAI,KACJC,GAAI,KACJnK,kBAAmB5Y,GACnB6Y,mBAAoB7Y,GACpBgjB,QAAS,KACTlK,YAAa,KACbC,aAAc,KACdC,WAAYhZ,GACZxkB,OAAQ,KACRy9B,YAAajZ,GACboZ,cAAepZ,GACfqZ,aAAc,KACdH,SAAUlZ,GACVmZ,aAAcnZ,GACdoT,QAAS,KACTkG,SAAUtZ,GACVuZ,YAAavZ,GACbwZ,YAAaxZ,GACbijB,QAAS,KACTC,WAAY,KACZC,WAAY,KACZp9C,MAAO,KACPq9C,OAAQ,KACR3J,YAAa,KACbC,YAAa,KACb2J,EAAG,KACHC,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClB7J,QAAS3Z,GACTyjB,EAAG,KACHC,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClBC,EAAG,KACHC,WAAY,QCliBH,GAAOpkB,GAAM,CAAC2B,GAAKR,GAAOc,GAAOG,GAAM,IAAW,QAClD,GAAMpC,GAAM,CAAC2B,GAAKR,GAAOc,GAAOG,GAAMiS,IAAU,OCM9C,SAASgQ,GAAa72C,GACnC,GAAIA,EAAQ82C,iBAAmB92C,EAAQ+2C,mBACrC,MAAM,IAAIn1C,UACR,4EAIJ,GACE5B,EAAQ82C,iBACR92C,EAAQ+2C,oBACR/2C,EAAQg3C,aAER,OAAQ1lC,IACN8a,GAAM9a,EAAM,WAAW,CAACjP,EAAMmF,EAAOyvC,KACnC,MAAMzqB,EAAqC,EAE3C,IAAI3lB,EAYJ,GAVI7G,EAAQ82C,gBACVjwC,GAAU7G,EAAQ82C,gBAAgB94C,SAASqE,EAAKqc,SACvC1e,EAAQ+2C,qBACjBlwC,EAAS7G,EAAQ+2C,mBAAmB/4C,SAASqE,EAAKqc,WAG/C7X,GAAU7G,EAAQg3C,cAAiC,iBAAVxvC,IAC5CX,GAAU7G,EAAQg3C,aAAa30C,EAAMmF,EAAOglB,IAG1C3lB,GAA2B,iBAAVW,EAOnB,OANIxH,EAAQk3C,kBAAoB70C,EAAK9H,SACnCiyB,EAAOjyB,SAASoM,OAAOa,EAAO,KAAMnF,EAAK9H,UAEzCiyB,EAAOjyB,SAASoM,OAAOa,EAAO,GAGzBA,CAGFI,GACR,CAGP,gBCrDO,SAASrF,GAAW40C,GAEzB,MAAM54C,EAEJ44C,GAA0B,iBAAVA,GAAqC,SAAfA,EAAMrzC,KAExCqzC,EAAM54C,OAAS,GACf44C,EAIN,MAAwB,iBAAV54C,GAA4D,KAAtCA,EAAMmD,QAAQ,eAAgB,GACpE,CChBA,MAAM01C,GAAQ,kBACRC,GAAO,UACPC,GAAM,SA+CZ,SAASC,GAAMhvC,GACb,MAAO,IAAMA,EAAGM,aAClB,CAMA,SAAS2uC,GAAUjvC,GACjB,OAAOA,EAAG1E,OAAO,GAAGiF,aACtB,CC1DO,MAAM2uC,GAAc,CACzBrT,QAAS,UACTqD,SAAU,WACVrM,OAAQ,SACR4P,gBAAiB,kBACjBC,iBAAkB,mBAClBC,cAAe,gBACfC,eAAgB,iBAChBC,iBAAkB,mBAClBK,OAAQ,SACR7X,aAAc,eACdC,aAAc,eACdC,UAAW,YACXC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,UAAW,YACXS,WAAY,cCxBd,kBCFM+iB,GAAY,CAAC,OAAQ,QAAS,SAAU,OAMvC,SAASC,GAAeC,GAC7B,MAAMztC,GAAOytC,GAAO,IAAIp2C,OAClBq2C,EAAQ1tC,EAAItG,OAAO,GAEzB,GAAc,MAAVg0C,GAA2B,MAAVA,EACnB,OAAO1tC,EAGT,MAAM2tC,EAAQ3tC,EAAIR,QAAQ,KAC1B,IAAe,IAAXmuC,EACF,OAAO3tC,EAGT,IAAI3C,GAAS,EAEb,OAASA,EAAQkwC,GAAU74C,QAAQ,CACjC,MAAM2N,EAAWkrC,GAAUlwC,GAE3B,GACEswC,IAAUtrC,EAAS3N,QACnBsL,EAAI5G,MAAM,EAAGiJ,EAAS3N,QAAQgK,gBAAkB2D,EAEhD,OAAOrC,CAEX,CAGA,OADA3C,EAAQ2C,EAAIR,QAAQ,MACL,IAAXnC,GAAgBswC,EAAQtwC,EACnB2C,GAGT3C,EAAQ2C,EAAIR,QAAQ,MACL,IAAXnC,GAAgBswC,EAAQtwC,EACnB2C,EAIF,qBACT,CCmEA,MAAM,GAAM,CAAC,EAAEnL,eAIT+4C,GAAgB,IAAIC,IAAI,CAAC,QAAS,QAAS,QAAS,QAAS,OAM5D,SAASC,GAAgBhvC,EAAS5G,GAEvC,MAAM9H,EAAW,GACjB,IAEI20B,EAFAgpB,GAAc,EAIlB,OAASA,EAAa71C,EAAK9H,SAASsE,QAClCqwB,EAAQ7sB,EAAK9H,SAAS29C,GAEH,YAAfhpB,EAAMprB,KACRvJ,EAAS4I,KAAKg1C,GAAQlvC,EAASimB,EAAOgpB,EAAY71C,IAC1B,SAAf6sB,EAAMprB,KASC,YAAdzB,EAAKyB,MACJi0C,GAAcK,IAAI/1C,EAAKqc,UACvBnc,GAAW2sB,IAEZ30B,EAAS4I,KAAK+rB,EAAM3wB,OAEE,QAAf2wB,EAAMprB,MAAmBmF,EAAQjJ,QAAQq4C,UAElD99C,EAAS4I,KAAK+rB,EAAM3wB,OAIxB,OAAOhE,CACT,CAQA,SAAS49C,GAAQlvC,EAAS5G,EAAMmF,EAAOglB,GACrC,MAAMxsB,EAAUiJ,EAAQjJ,QAClByzB,OACyB7rB,IAA7B5H,EAAQs4C,iBACJX,GACA33C,EAAQs4C,iBACRC,EAAetvC,EAAQuvC,OAGvBngD,EAAOgK,EAAKqc,QAEZyO,EAAa,CAAC,EACpB,IAEIhpB,EAFAq0C,EAASD,EASb,GAL2B,SAAvBA,EAAahmB,OAA6B,QAATl6B,IACnCmgD,EAAS,GACTvvC,EAAQuvC,OAASA,GAGfn2C,EAAK8qB,WACP,IAAKhpB,KAAY9B,EAAK8qB,WAChB,GAAI5tB,KAAK8C,EAAK8qB,WAAYhpB,IAC5Bs0C,GAAYtrB,EAAYhpB,EAAU9B,EAAK8qB,WAAWhpB,GAAW8E,GAKtD,OAAT5Q,GAA0B,OAATA,GACnB4Q,EAAQyvC,YAGV,MAAMn+C,EAAW09C,GAAgBhvC,EAAS5G,GAE7B,OAAThK,GAA0B,OAATA,GACnB4Q,EAAQyvC,YAIVzvC,EAAQuvC,OAASD,EAIjB,MAAM/+C,EAAW6I,EAAK7I,UAAY,CAChC2I,MAAO,CAACC,KAAM,KAAMN,OAAQ,KAAMwS,OAAQ,MAC1C7R,IAAK,CAACL,KAAM,KAAMN,OAAQ,KAAMwS,OAAQ,OAEpCvY,EACJiE,EAAQ24C,YAAc,GAAIp5C,KAAKS,EAAQ24C,WAAYtgD,GAC/C2H,EAAQ24C,WAAWtgD,GACnBA,EACAugD,EAA6B,iBAAd78C,GAA0BA,IAAc,WAE7D,IAAK,sBAA2BA,GAC9B,MAAM,IAAI6F,UACR,wBAAwBvJ,wCA2D5B,GAvDA80B,EAAWztB,IAAM,CACfrH,EACAmB,EAAS2I,MAAMC,KACf5I,EAAS2I,MAAML,OACf0F,GACA0D,KAAK,KAEM,MAAT7S,GAAgB2H,EAAQ64C,aAC1B1rB,EAAWptB,OACqB,mBAAvBC,EAAQ64C,WACX74C,EAAQ64C,WACNpyC,OAAO0mB,EAAW9gB,MAAQ,IAC1BhK,EAAK9H,SACuB,iBAArB4yB,EAAWpQ,MAAqBoQ,EAAWpQ,MAAQ,MAE5D/c,EAAQ64C,YAGH,MAATxgD,GAAgBo7B,IAClBtG,EAAW9gB,KAAOonB,EAChBhtB,OAAO0mB,EAAW9gB,MAAQ,IAC1BhK,EAAK9H,SACuB,iBAArB4yB,EAAWpQ,MAAqBoQ,EAAWpQ,MAAQ,OAK3D67B,GACQ,SAATvgD,GACgB,YAAhBm0B,EAAO1oB,MACY,QAAnB0oB,EAAO9N,UAEPyO,EAAW2rB,QAAS,GAInBF,GACS,OAATvgD,GACU,OAATA,GACS,OAATA,GACS,OAATA,GACS,OAATA,GACS,OAATA,IAEF80B,EAAW4rB,MAAQ5zC,OAAOgD,SAAS9P,EAAKwL,OAAO,GAAI,KAGxC,QAATxL,GAAkB2H,EAAQg5C,oBAC5B7rB,EAAW3sB,IAAMR,EAAQg5C,kBACvBvyC,OAAO0mB,EAAW3sB,KAAO,IACzBiG,OAAO0mB,EAAWjb,KAAO,IACG,iBAArBib,EAAWpQ,MAAqBoQ,EAAWpQ,MAAQ,QAIzD67B,GAAkB,OAATvgD,GAAiC,YAAhBm0B,EAAO1oB,KAAoB,CACxD,MAAMm1C,EA0DV,SAAyB52C,GACvB,IAAImF,GAAS,EAEb,OAASA,EAAQnF,EAAK9H,SAASsE,QAAQ,CACrC,MAAMqwB,EAAQ7sB,EAAK9H,SAASiN,GAE5B,GAAmB,YAAf0nB,EAAMprB,MAAwC,UAAlBorB,EAAMxQ,QACpC,OAAOwQ,CAEX,CAEA,OAAO,IACT,CAtEkBgqB,CAAgB72C,GAC9B8qB,EAAW7B,QACT2tB,GAASA,EAAM9rB,WAAarb,QAAQmnC,EAAM9rB,WAAW7B,SAAW,KAClE6B,EAAW3lB,MAAQ2xC,GAAuB3sB,EAAQnqB,GAClD8qB,EAAW/B,QAA6B,OAAnBoB,EAAO9N,OAC9B,CA+JF,IAAyB9a,EAnHvB,OA1CKg1C,GAAmB,OAATvgD,GAA0B,OAATA,IAC9B80B,EAAW/B,QAAmB,OAAT/yB,EACrB80B,EAAWnC,MAAQ/hB,EAAQyvC,WAGhB,OAATrgD,GAA0B,OAATA,IACf80B,EAAWyC,QACRzC,EAAWxrB,QAAOwrB,EAAWxrB,MAAQ,CAAC,GAE3CwrB,EAAWxrB,MAAM/I,UAAYu0B,EAAWyC,aACjCzC,EAAWyC,OAGfgpB,IACHzrB,EAAWisB,SAAoB,OAAT/gD,IAIrBugD,GAAkB,OAATvgD,GAAiC,YAAhBm0B,EAAO1oB,OACpCqpB,EAAWisB,SAAWtnC,QAA2B,UAAnB0a,EAAO9N,UAInC1e,EAAQq5C,YACVlsB,EAAW,kBAsIN,EADgBvpB,EArI0BpK,GAuI3C2I,MAAMC,KACV,IACAwB,EAAIzB,MAAML,OACV,IACA8B,EAAInB,IAAIL,KACR,IACAwB,EAAInB,IAAIX,QAEPuL,IAAI5G,QACJyE,KAAK,MA7IH0tC,GAAS54C,EAAQs5C,eACpBnsB,EAAWosB,eAAiBl3C,EAAK7I,WAI9Bo/C,GAAS54C,EAAQw5C,sBACpBrsB,EAAW3lB,MAAQ2xC,GAAuB3sB,EAAQnqB,GAClD8qB,EAAWssB,aAAeN,GAAuB3sB,IAG9CosB,IACHzrB,EAAW9qB,KAAOA,GAIb9H,EAASsE,OAAS,EACrB,gBAAoB9C,EAAWoxB,EAAY5yB,GAC3C,gBAAoBwB,EAAWoxB,EACrC,CAyBA,SAASgsB,GAAuB3sB,EAAQnqB,GACtC,IAAImF,GAAS,EACTkyC,EAAQ,EAEZ,OAASlyC,EAAQglB,EAAOjyB,SAASsE,QAC3B2tB,EAAOjyB,SAASiN,KAAWnF,GACK,YAAhCmqB,EAAOjyB,SAASiN,GAAO1D,MAAoB41C,IAGjD,OAAOA,CACT,CAQA,SAASjB,GAAYlgD,EAAOyL,EAAMzF,EAAO4yB,GACvC,MAAMzjB,EJtWD,SAAc8qC,EAAQj6C,GAC3B,MAAM+zB,EAAS,GAAU/zB,GACzB,IAAIyF,EAAOzF,EACPo7C,EAAOlnB,GAEX,GAAIH,KAAUkmB,EAAOlmB,OACnB,OAAOkmB,EAAOr0C,SAASq0C,EAAOlmB,OAAOA,IAGvC,GAAIA,EAAOzzB,OAAS,GAA4B,SAAvByzB,EAAO/uB,MAAM,EAAG,IAAiB6zC,GAAM5wC,KAAKjI,GAAQ,CAE3E,GAAwB,MAApBA,EAAMsF,OAAO,GAAY,CAE3B,MAAM+1C,EAAOr7C,EAAMgF,MAAM,GAAG7B,QAAQ21C,GAAMG,IAC1CxzC,EAAO,OAAS41C,EAAK/1C,OAAO,GAAGiF,cAAgB8wC,EAAKr2C,MAAM,EAC5D,KAAO,CAEL,MAAMq2C,EAAOr7C,EAAMgF,MAAM,GAEzB,IAAK8zC,GAAK7wC,KAAKozC,GAAO,CACpB,IAAIC,EAASD,EAAKl4C,QAAQ41C,GAAKC,IAEN,MAArBsC,EAAOh2C,OAAO,KAChBg2C,EAAS,IAAMA,GAGjBt7C,EAAQ,OAASs7C,CACnB,CACF,CAEAF,EAAOrmB,EACT,CAEA,OAAO,IAAIqmB,EAAK31C,EAAMzF,EACxB,CIoUeu7C,CAAK3oB,EAAIqnB,OAAQx0C,GAC9B,IAAIwH,EAASjN,EAITiN,SAA2CA,GAAWA,IAMtDvN,MAAMC,QAAQsN,KAChBA,EAASkC,EAAKqlB,eCvUX,SAAmBzkB,EAAQtO,GAChC,MAAMoQ,EAAWpQ,GAAW,CAAC,EAK7B,OAF4C,KAA9BsO,EAAOA,EAAOzP,OAAS,GAAY,IAAIyP,EAAQ,IAAMA,GAGhEpD,MACEkF,EAAS2pC,SAAW,IAAM,IACzB,MACsB,IAArB3pC,EAAS4pC,QAAoB,GAAK,MAEtCx4C,MACL,CD0TmC,CAAOgK,GAAiBA,EE7W3CN,KAAK,KAAK1J,QFgXF,UAAlBkM,EAAKvJ,UAA0C,iBAAXqH,IACtCA,EAkBJ,SAAoBjN,GAElB,MAAMiN,EAAS,CAAC,EAEhB,IACE,GAAMjN,EAAO0P,EAGf,CAFE,MAEF,CAEA,OAAOzC,EAMP,SAASyC,EAAS5V,EAAM4hD,GACtB,MAAM3J,EAAyB,SAArBj4C,EAAKkL,MAAM,EAAG,GAAgB,MAAMlL,EAAKkL,MAAM,KAAOlL,EAChEmT,EAAO8kC,EAAE5uC,QAAQ,YAAaw4C,KAAkBD,CAClD,CACF,CAtCaE,CAAW3uC,IAGlBkC,EAAK6kB,OAAS7kB,EAAKvJ,SACrB5L,EACE,GAAIgH,KAAKk4C,GAAa/pC,EAAKvJ,UACvBszC,GAAY/pC,EAAKvJ,UACjBuJ,EAAKvJ,UACPqH,EACKkC,EAAKglB,YACdn6B,EAAMmV,EAAKglB,WAAalnB,GAE5B,CAgCA,SAAS0uC,GAAczgC,EAAGjR,GACxB,OAAOA,EAAGM,aACZ,CGjZA,MAAM,GAAM,CAAC,EAAE9J,eAKTo7C,GAAa,CACjB1pC,QAAS,CAAC2gB,GAAI,gBAAiBxE,GAAI,mCACnCwtB,UAAW,CAAChpB,GAAI,aAAcxE,GAAI,kCAClCytB,WAAY,CAACztB,GAAI,wCACjByD,mBAAoB,CAACzD,GAAI,wCACzB0tB,WAAY,CAAC1tB,GAAI,wCACjBnqB,OAAQ,CAAC2uB,GAAI,WAAYxE,GAAI,6BAC7B2tB,UAAW,CACTnpB,GAAI,eACJxE,GAAI,sDAEN4tB,aAAc,CACZppB,GAAI,kBACJxE,GAAI,sDAEN6tB,gBAAiB,CACfrpB,GAAI,qBACJxE,GAAI,sDAEN8tB,iBAAkB,CAChBtpB,GAAI,sBACJxE,GAAI,mDAUD,SAAS+tB,GAAc56C,GAC5B,IAAK,MAAMN,KAAO06C,GAChB,GAAI,GAAI76C,KAAK66C,GAAY16C,IAAQ,GAAIH,KAAKS,EAASN,GAAM,CACvD,MAAMm7C,EAAcT,GAAW16C,GAC/Bo7C,QAAQC,KACN,oCACEF,EAAYxpB,GAAK,SAASwpB,EAAYxpB,kBAAoB,cACtD3xB,+EAA4Bm7C,EAAYhuB,6BAEzCutB,GAAW16C,EACpB,CAGF,MAAMkQ,EAAYN,IACfF,IAAI,IACJA,IAAIpP,EAAQg7C,eAAiB,IAC7B5rC,IAAI,GAAc,IACdpP,EAAQi7C,oBACX3qB,oBAAoB,IAErBlhB,IAAIpP,EAAQk7C,eAAiB,IAC7B9rC,IAAIynC,GAAc72C,GAEfgK,EAAO,IAAI+C,EAEe,iBAArB/M,EAAQzF,SACjByP,EAAKzL,MAAQyB,EAAQzF,cACSqN,IAArB5H,EAAQzF,UAA+C,OAArByF,EAAQzF,UACnDugD,QAAQC,KACN,0EAA0E/6C,EAAQzF,eAItF,MAAM4gD,EAAWvrC,EAAU2B,QAAQ3B,EAAUgB,MAAM5G,GAAOA,GAE1D,GAAsB,SAAlBmxC,EAASr3C,KACX,MAAM,IAAIlC,UAAU,0BAItB,IAAI4J,EAAS,gBACX,WACA,CAAC,EACDysC,GAAgB,CAACj4C,UAASw4C,OAAQ,GAAME,UAAW,GAAIyC,IAOzD,OAJIn7C,EAAQxF,YACVgR,EAAS,gBAAoB,MAAO,CAAChR,UAAWwF,EAAQxF,WAAYgR,IAG/DA,CACT,CAEAovC,GAAcQ,UAAY,CAExB7gD,SAAU,YAEVC,UAAW,YAEXw8C,aAAc,UACdF,gBAAiB,aAAkB,aACnCC,mBAAoB,aAAkB,aACtCG,iBAAkB,UAElB8D,cAAe,aACb,eAAoB,CAClB,YACA,UACA,aACE,eAAoB,CAClB,UACA,YACA,YACA,UACA,aAGE,gBAMVE,cAAe,aACb,eAAoB,CAClB,YACA,UACA,aACE,eAAoB,CAClB,UACA,YACA,YACA,UACA,aAGE,gBAOV7B,UAAW,UACXC,aAAc,UACdjB,SAAU,UACVmB,oBAAqB,UACrBlB,iBAAkB,eAAoB,CAAC,UAAgB,YACvDO,WAAY,eAAoB,CAAC,UAAgB,cACjDG,kBAAmB,UACnBL,WAAY,uFCnKd,MAAM0C,EAAM,CACV52C,SA4SF,SAAqBC,EAASC,EAAIC,GAChC,OAGA,SAAeE,GAEb,OADAJ,EAAQc,QAAQV,GACTw2C,CACT,EAGA,SAASA,EAAGx2C,GACV,OAAa,KAATA,GAAwB,MAATA,GACjBJ,EAAQc,QAAQV,GACTy2C,GAGF32C,EAAIE,EACb,CAGA,SAASy2C,EAAGz2C,GACV,OAAa,KAATA,GAAwB,MAATA,GACjBJ,EAAQc,QAAQV,GACT02C,GAGF52C,EAAIE,EACb,CAGA,SAAS02C,EAAI12C,GACX,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACT8W,GAGFhX,EAAIE,EACb,CAGA,SAAS8W,EAAM9W,GACb,OAAgB,OAATA,IAAiB,QAAmBA,GAAQF,EAAIE,GAAQH,EAAGG,EACpE,CACF,EAtVEC,SAAS,GAEL02C,EAAS,CACbh3C,SAsVF,SAAwBC,EAASC,EAAIC,GAEnC,IAAI82C,EAGAC,EACJ,OAAOF,EAGP,SAASA,EAAO32C,GACd,OAAa,KAATA,EACKJ,EAAQsP,MACb4nC,EACA5sC,EACA6sC,EAHKn3C,CAILI,GAGS,KAATA,GAAwB,KAATA,EACVJ,EAAQsP,MAAM8nC,EAAa9sC,EAAM6sC,EAAjCn3C,CAA0DI,GAQxD,OAATA,IACA,QAAaA,KACb,QAAkBA,IACR,KAATA,IAAe,QAAmBA,GAE5BkK,EAAKlK,IAGdJ,EAAQc,QAAQV,GACT22C,EACT,CAGA,SAASI,EAAwB/2C,GAC/B,OAAa,KAATA,GACF62C,EAAiCD,EACjCA,OAA6B9zC,EAC7BlD,EAAQc,QAAQV,GACT22C,IAGI,KAAT32C,IAAa42C,GAA6B,GAC9Ch3C,EAAQc,QAAQV,GACT22C,EACT,CAGA,SAASzsC,EAAKlK,GACZ,OAAK62C,GAAmCD,EAIjC92C,EAAIE,GAHFH,EAAGG,EAId,CACF,EAlZEC,SAAS,GAELsF,EAAO,CACX5F,SAkZF,SAAsBC,EAASC,GAC7B,IAAIuX,EAAU,EACd,OAAO6/B,EAGP,SAASA,EAAOj3C,GACd,OAAa,KAATA,EACKJ,EAAQsP,MACb4nC,EACAj3C,EACAq3C,EAHKt3C,CAILI,IAGS,KAATA,GACFoX,IAGW,KAATpX,EACKJ,EAAQsP,MACb8nC,EACAG,EACAD,EAHKt3C,CAILI,GAGAo3C,EAAQp3C,GACHH,EAAGG,GAGRq3C,EAAoBr3C,GACfJ,EAAQsP,MAAM8nC,EAAan3C,EAAIq3C,EAA/Bt3C,CAAqDI,IAG9DJ,EAAQc,QAAQV,GACTi3C,GACT,CAGA,SAASC,EAAqBl3C,GAE5B,OADAJ,EAAQc,QAAQV,GACTi3C,CACT,CAGA,SAASE,EAAen3C,GAEtB,OADAoX,IACOA,EAAU,EAAIvX,EAAGG,GAAQk3C,EAAqBl3C,EACvD,CACF,EAlcEC,SAAS,GAEL+2C,EAAc,CAClBr3C,SAmeF,SAA6BC,EAASC,EAAIC,GACxC,OAGA,SAAeE,GAEb,OADAJ,EAAQc,QAAQV,GACT8W,CACT,EAGA,SAASA,EAAM9W,GAEb,OAAIq3C,EAAoBr3C,IACtBJ,EAAQc,QAAQV,GACT8W,GAIFsgC,EAAQp3C,GAAQH,EAAGG,GAAQF,EAAIE,EACxC,CACF,EAtfEC,SAAS,GAEL62C,EAA0B,CAC9Bn3C,SA8bF,SAAyCC,EAASC,EAAIC,GACpD,OAGA,SAAeE,GAEb,OADAJ,EAAQc,QAAQV,GACTmW,CACT,EAGA,SAASA,EAAOnW,GACd,OAAI,QAAWA,IACbJ,EAAQc,QAAQV,GACTmW,GAGI,KAATnW,GACFJ,EAAQc,QAAQV,GACT8W,GAGFhX,EAAIE,EACb,CAGA,SAAS8W,EAAM9W,GAGb,OAAOo3C,EAAQp3C,GAAQH,EAAGG,GAAQF,EAAIE,EACxC,CACF,EA3dEC,SAAS,GAELq3C,EAAc,CAClB33C,SAwIF,SAA6BC,EAASC,EAAIC,GACxC,MAAM+N,EAAOnQ,KACb,OAGA,SAAesC,GACb,GACY,KAATA,GAAwB,MAATA,IACfu3C,EAAY1pC,EAAKH,WAClB8pC,EAAmB3pC,EAAK3J,QAExB,OAAOpE,EAAIE,GAQb,OALAJ,EAAQY,MAAM,mBACdZ,EAAQY,MAAM,sBAIPZ,EAAQsP,MACbqnC,EACA32C,EAAQ0N,QAAQqpC,EAAQ/2C,EAAQ0N,QAAQ/H,EAAM2E,GAAOpK,GACrDA,EAHKF,CAILI,EACJ,EAGA,SAASkK,EAAKlK,GAGZ,OAFAJ,EAAQe,KAAK,sBACbf,EAAQe,KAAK,mBACNd,EAAGG,EACZ,CACF,EAvKE0N,SAAU6pC,GAENE,EAAe,CACnB93C,SAuKF,SAA8BC,EAASC,EAAIC,GACzC,MAAM+N,EAAOnQ,KACb,OAGA,SAAesC,GACb,GACY,KAATA,GAAwB,MAATA,IACf03C,EAAa7pC,EAAKH,WACnB8pC,EAAmB3pC,EAAK3J,QAExB,OAAOpE,EAAIE,GAMb,OAHAJ,EAAQY,MAAM,mBACdZ,EAAQY,MAAM,uBACdZ,EAAQc,QAAQV,GACT23C,CACT,EAGA,SAASA,EAAG33C,GACV,OAAa,KAATA,GAAwB,MAATA,GACjBJ,EAAQc,QAAQV,GACT43C,GAGF93C,EAAIE,EACb,CAGA,SAAS43C,EAAG53C,GACV,OAAa,KAATA,GAAwB,MAATA,GACjBJ,EAAQc,QAAQV,GACT63C,GAGF/3C,EAAIE,EACb,CAGA,SAAS63C,EAAE73C,GACT,OAAa,KAATA,GAAwB,MAATA,GACjBJ,EAAQc,QAAQV,GACT83C,GAGFh4C,EAAIE,EACb,CAGA,SAAS83C,EAAE93C,GACT,OAAa,KAATA,GAAwB,MAATA,GACjBJ,EAAQc,QAAQV,GACTgzC,GAGFA,EAAMhzC,EACf,CAGA,SAASgzC,EAAMhzC,GACb,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACT+3C,GAGFj4C,EAAIE,EACb,CAGA,SAAS+3C,EAAO/3C,GACd,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACTg4C,GAGFl4C,EAAIE,EACb,CAGA,SAASg4C,EAAOh4C,GACd,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACT8W,GAGFhX,EAAIE,EACb,CAGA,SAAS8W,EAAM9W,GACb,OAAgB,OAATA,IACL,QAAaA,KACb,QAAkBA,KAClB,QAAmBA,GACjBF,EAAIE,GACJJ,EAAQ0N,QAAQqpC,EAAQ/2C,EAAQ0N,QAAQ/H,EAAM2E,GAAOpK,EAArDF,CAA0DI,EAChE,CAGA,SAASkK,EAAKlK,GAGZ,OAFAJ,EAAQe,KAAK,uBACbf,EAAQe,KAAK,mBACNd,EAAGG,EACZ,CACF,EAhRE0N,SAAUgqC,GAENO,EAAgB,CACpBt4C,SA8BF,SAA+BC,EAASC,EAAIC,GAC1C,MAAM+N,EAAOnQ,KAGb,IAAIw6C,EAGAC,EACJ,OAGA,SAAen4C,GACb,IACGo4C,EAASp4C,KACTq4C,EAAcxqC,EAAKH,WACpB8pC,EAAmB3pC,EAAK3J,QAExB,OAAOpE,EAAIE,GAKb,OAFAJ,EAAQY,MAAM,mBACdZ,EAAQY,MAAM,wBACP83C,EAAMt4C,EACf,EAGA,SAASs4C,EAAMt4C,GACb,OAAIo4C,EAASp4C,IACXJ,EAAQc,QAAQV,GACTs4C,GAGI,KAATt4C,GACFJ,EAAQc,QAAQV,GACT4X,GAGF9X,EAAIE,EACb,CAGA,SAAS4X,EAAM5X,GACb,OAAa,KAATA,EACKJ,EAAQsP,MAAM8nC,EAAa9sC,EAAMquC,EAAjC34C,CAAkDI,GAG9C,KAATA,GAAwB,KAATA,EACVJ,EAAQsP,MAAM8nC,EAAal3C,EAAK04C,EAAhC54C,CAA8DI,IAGnE,QAAkBA,KACfm4C,IAAyB,QAAWn4C,KACvCm4C,GAAwB,GAG1Bv4C,EAAQc,QAAQV,GACT4X,GAGF1N,EAAKlK,EACd,CAGA,SAASu4C,EAAgBv4C,GAIvB,OAHAJ,EAAQc,QAAQV,GAChBk4C,GAAS,EACTC,OAAwBr1C,EACjB8U,CACT,CAGA,SAAS4gC,EAA6Bx4C,GAEpC,OADAJ,EAAQc,QAAQV,GACTy4C,CACT,CAGA,SAASA,EAAsBz4C,GAC7B,OAAa,KAATA,EACKJ,EAAQsP,MAAM8nC,EAAal3C,EAAKy4C,EAAhC34C,CAAiDI,GAGnD4X,EAAM5X,EACf,CAGA,SAASkK,EAAKlK,GACZ,OAAIk4C,IAAWC,GACbv4C,EAAQe,KAAK,wBACbf,EAAQe,KAAK,mBACNd,EAAGG,IAGLF,EAAIE,EACb,CACF,EA5HE0N,SAAU2qC,GAIN,EAAO,CAAC,EAGDK,EAAqB,CAChCnmC,KAAI,GAEN,IAAIvS,EAAO,GAEX,KAAOA,EAAO,KACZ,EAAKA,GAAQi4C,EACbj4C,IACa,KAATA,EAAaA,EAAO,GACN,KAATA,IAAaA,EAAO,IA4d/B,SAASq3C,EAAoBr3C,GAC3B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,MAATA,CAEJ,CAMA,SAASo3C,EAAQp3C,GACf,OAAgB,OAATA,GAA0B,KAATA,IAAe,QAA0BA,EACnE,CAMA,SAASo4C,EAASp4C,GAChB,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,IACA,QAAkBA,EAEtB,CAGA,SAASu3C,EAAYv3C,GACnB,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,MAATA,IACA,QAA0BA,EAE9B,CAGA,SAAS03C,EAAa13C,GACpB,OAAgB,OAATA,KAAkB,QAAWA,EACtC,CAGA,SAASq4C,EAAcr4C,GACrB,OAAgB,KAATA,GAAe03C,EAAa13C,EACrC,CAMA,SAASw3C,EAAmBtzC,GAC1B,IAAIxB,EAAQwB,EAAOnK,OACf2M,GAAS,EAEb,KAAOhE,KAAS,CACd,MAAMiL,EAAQzJ,EAAOxB,GAAO,GAE5B,IACkB,cAAfiL,EAAM3O,MAAuC,eAAf2O,EAAM3O,QACpC2O,EAAMwO,UACP,CACAzV,GAAS,EACT,KACF,CAGA,GAAIiH,EAAMgrC,8BAA+B,CACvCjyC,GAAS,EACT,KACF,CACF,CAQA,OANIxC,EAAOnK,OAAS,IAAM2M,IAGxBxC,EAAOA,EAAOnK,OAAS,GAAG,GAAG4+C,+BAAgC,GAGxDjyC,CACT,CAxjBA,EAAK,IAAMuxC,EACX,EAAK,IAAMA,EACX,EAAK,IAAMA,EACX,EAAK,IAAMA,EACX,EAAK,IAAM,CAACA,EAAeR,GAC3B,EAAK,KAAO,CAACQ,EAAeR,GAC5B,EAAK,IAAM,CAACQ,EAAeX,GAC3B,EAAK,KAAO,CAACW,EAAeX,wCC3D5B,MAAMsB,EAAS,CACbj5C,SAmYF,SAAwBC,EAASC,EAAIC,GACnC,MAAM+N,EAAOnQ,KACb,OAAO,IAAAqC,GACLH,GAOF,SAAqBI,GACnB,MAAM6R,EAAOhE,EAAK3J,OAAO2J,EAAK3J,OAAOnK,OAAS,GAC9C,OAAO8X,GACY,gCAAjBA,EAAK,GAAG7S,MACyC,IAAjD6S,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9X,OACpC8F,EAAGG,GACHF,EAAIE,EACV,GAZE,8BACA,EAYJ,EApZEC,SAAS,GAgCX,SAAS44C,EAAiCj5C,EAASC,EAAIC,GACrD,MAAM+N,EAAOnQ,KACb,IAAIgF,EAAQmL,EAAK3J,OAAOnK,OAIxB,MAAMye,EAAU3K,EAAKN,OAAOurC,eAAiBjrC,EAAKN,OAAOurC,aAAe,IAGxE,IAAI58B,EAEJ,KAAOxZ,KAAS,CACd,MAAMiL,EAAQE,EAAK3J,OAAOxB,GAAO,GAEjC,GAAmB,eAAfiL,EAAM3O,KAAuB,CAC/Bkd,EAAavO,EACb,KACF,CAEA,GACiB,oBAAfA,EAAM3O,MACS,cAAf2O,EAAM3O,MACS,UAAf2O,EAAM3O,MACS,UAAf2O,EAAM3O,MACS,SAAf2O,EAAM3O,KAEN,KAEJ,CAEA,OAGA,SAAegB,GACb,IAAKkc,IAAeA,EAAWC,UAC7B,OAAOrc,EAAIE,GAGb,MAAM+nB,GAAK,OACTla,EAAKiE,eAAe,CAClBzU,MAAO6e,EAAWve,IAClBA,IAAKkQ,EAAK0B,SAId,GAAyB,KAArBwY,EAAGjuB,WAAW,KAAc0e,EAAQtf,SAAS6uB,EAAGtpB,MAAM,IACxD,OAAOqB,EAAIE,GAMb,OAHAJ,EAAQY,MAAM,8BACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,8BACNd,EAAGG,EACZ,CACF,CAGA,SAAS+4C,EAAkC70C,EAAQC,GACjD,IAGI+X,EAHAxZ,EAAQwB,EAAOnK,OAKnB,KAAO2I,KACL,GAC4B,eAA1BwB,EAAOxB,GAAO,GAAG1D,MACI,UAArBkF,EAAOxB,GAAO,GACd,CACAwZ,EAAahY,EAAOxB,GAAO,GAC3B,KACF,CAIFwB,EAAOxB,EAAQ,GAAG,GAAG1D,KAAO,OAC5BkF,EAAOxB,EAAQ,GAAG,GAAG1D,KAAO,6BAE5B,MAAMvE,EAAO,CACXuE,KAAM,kBACN3B,MAAOrE,OAAO0S,OAAO,CAAC,EAAGxH,EAAOxB,EAAQ,GAAG,GAAGrF,OAC9CM,IAAK3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAOA,EAAOnK,OAAS,GAAG,GAAG4D,MAGhDmY,EAAS,CACb9W,KAAM,wBACN3B,MAAOrE,OAAO0S,OAAO,CAAC,EAAGxH,EAAOxB,EAAQ,GAAG,GAAG/E,KAC9CA,IAAK3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAOxB,EAAQ,GAAG,GAAG/E,MAG9CmY,EAAOnY,IAAIX,SACX8Y,EAAOnY,IAAI6R,SACXsG,EAAOnY,IAAIsV,eACX,MAAMb,EAAS,CACbpT,KAAM,wBACN3B,MAAOrE,OAAO0S,OAAO,CAAC,EAAGoK,EAAOnY,KAChCA,IAAK3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAOA,EAAOnK,OAAS,GAAG,GAAGsD,QAEhD0V,EAAQ,CACZ/T,KAAM,cACN4O,YAAa,SACbvQ,MAAOrE,OAAO0S,OAAO,CAAC,EAAG0G,EAAO/U,OAChCM,IAAK3E,OAAO0S,OAAO,CAAC,EAAG0G,EAAOzU,MAI1Bq7C,EAAc,CAElB90C,EAAOxB,EAAQ,GACfwB,EAAOxB,EAAQ,GACf,CAAC,QAASjI,EAAM0J,GAChBD,EAAOxB,EAAQ,GACfwB,EAAOxB,EAAQ,GACf,CAAC,QAASoT,EAAQ3R,GAClB,CAAC,OAAQ2R,EAAQ3R,GACjB,CAAC,QAASiO,EAAQjO,GAClB,CAAC,QAAS4O,EAAO5O,GACjB,CAAC,OAAQ4O,EAAO5O,GAChB,CAAC,OAAQiO,EAAQjO,GACjBD,EAAOA,EAAOnK,OAAS,GACvBmK,EAAOA,EAAOnK,OAAS,GACvB,CAAC,OAAQU,EAAM0J,IAGjB,OADAD,EAAOrC,OAAOa,EAAOwB,EAAOnK,OAAS2I,EAAQ,KAAMs2C,GAC5C90C,CACT,CAGA,SAAS+0C,EAAwBr5C,EAASC,EAAIC,GAC5C,MAAM+N,EAAOnQ,KAIP8a,EAAU3K,EAAKN,OAAOurC,eAAiBjrC,EAAKN,OAAOurC,aAAe,IACxE,IAGI3wC,EAHA5H,EAAO,EAIX,OAGA,SAAeP,GAKb,OAJAJ,EAAQY,MAAM,mBACdZ,EAAQY,MAAM,8BACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,8BACNu4C,CACT,EAGA,SAASA,EAAUl5C,GACjB,OAAa,KAATA,EAAoBF,EAAIE,IAC5BJ,EAAQY,MAAM,yBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,yBACbf,EAAQY,MAAM,yBACdZ,EAAQY,MAAM,eAAeoN,YAAc,SACpCurC,EACT,CAGA,SAASA,EAASn5C,GAEhB,IAAI2N,EAEJ,OAAa,OAAT3N,GAA0B,KAATA,GAAeO,IAAS,IACpCT,EAAIE,GAGA,KAATA,EACGmI,GAILvI,EAAQe,KAAK,eACbgN,EAAQ/N,EAAQe,KAAK,yBACd6X,EAAQtf,UAAS,OAAoB2U,EAAKiE,eAAenE,KA0BpE,SAAa3N,GAKX,OAJAJ,EAAQY,MAAM,8BACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,8BACbf,EAAQe,KAAK,mBACNd,CACT,CA/BQlC,CAAIqC,GACJF,EAAIE,IAPCF,EAAIE,IAUfJ,EAAQc,QAAQV,IAEX,QAA0BA,KAC7BmI,GAAO,GAGO,KAATnI,EAAco5C,EAAaD,EACpC,CAGA,SAASC,EAAWp5C,GAClB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCJ,EAAQc,QAAQV,GAChBO,IACO44C,GAGFA,EAASn5C,EAClB,CAUF,CAGA,SAASq5C,EAAwBz5C,EAASC,EAAIC,GAC5C,MAAM+N,EAAOnQ,KAIP8a,EAAU3K,EAAKN,OAAOurC,eAAiBjrC,EAAKN,OAAOurC,aAAe,IAGxE,IAAIzgC,EAIAlQ,EAHA5H,EAAO,EAIX,OAGA,SAAeP,GAMb,OALAJ,EAAQY,MAAM,yBAAyBuQ,YAAa,EACpDnR,EAAQY,MAAM,8BACdZ,EAAQY,MAAM,oCACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,oCACNub,CACT,EAGA,SAASA,EAAWlc,GAClB,OAAa,KAATA,GACFJ,EAAQY,MAAM,+BACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,+BACbf,EAAQY,MAAM,oCACPiS,GAGF3S,EAAIE,EACb,CAGA,SAASyS,EAAQzS,GAEf,IAAI2N,EAEJ,OAAa,OAAT3N,GAA0B,KAATA,GAAeO,EAAO,IAClCT,EAAIE,GAGA,KAATA,EACGmI,GAILwF,EAAQ/N,EAAQe,KAAK,oCACrB0X,GAAa,OAAoBxK,EAAKiE,eAAenE,IACrD/N,EAAQY,MAAM,oCACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,oCACbf,EAAQe,KAAK,8BACN2X,GATExY,EAAIE,IAYX,QAAmBA,IACrBJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,cACbJ,IACOkS,IAGT7S,EAAQY,MAAM,eAAeoN,YAAc,SACpCgK,EAAM5X,GACf,CAGA,SAAS4X,EAAM5X,GACb,OACW,OAATA,IACA,QAAmBA,IACV,KAATA,GACS,KAATA,GACAO,EAAO,KAEPX,EAAQe,KAAK,eACN8R,EAAQzS,MAGZ,QAA0BA,KAC7BmI,GAAO,GAGT5H,IACAX,EAAQc,QAAQV,GACA,KAATA,EAAc6X,EAAcD,EACrC,CAGA,SAASC,EAAY7X,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChCJ,EAAQc,QAAQV,GAChBO,IACOqX,GAGFA,EAAM5X,EACf,CAGA,SAASsY,EAAWtY,GAClB,OAAa,KAATA,GACFJ,EAAQY,MAAM,oBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,qBAIN,IAAAZ,GAAaH,EAASsK,EAAM,oCAG9BpK,EAAIE,EACb,CAGA,SAASkK,EAAKlK,GAKZ,OAJKwY,EAAQtf,SAASmf,IACpBG,EAAQna,KAAKga,GAGRxY,EAAGG,EACZ,CACF,CAGA,SAASs5C,EAA+B15C,EAASC,EAAIC,GAEnD,OAAOF,EAAQsP,MAAM,IAAWrP,EAAID,EAAQ0N,QAAQsrC,EAAQ/4C,EAAIC,GAClE,CAGA,SAASy5C,EAAyB35C,GAChCA,EAAQe,KAAK,wBACf,qCCvXO,SAAS64C,EAAiBt+C,EAAU,CAAC,GAC1C,IAAIu+C,EAASv+C,EAAQw+C,YACrB,MAAMvoC,EAAY,CAChBxR,SAuGF,SAA+BC,EAASC,EAAIC,GAC1C,MAAM4N,EAAWhQ,KAAKgQ,SAChBxJ,EAASxG,KAAKwG,OACpB,IAAI3D,EAAO,EACX,OAGA,SAAeP,GACb,GACe,MAAb0N,GACsC,oBAAtCxJ,EAAOA,EAAOnK,OAAS,GAAG,GAAGiF,KAE7B,OAAOc,EAAIE,GAIb,OADAJ,EAAQY,MAAM,kCACPoQ,EAAK5Q,EACd,EAGA,SAAS4Q,EAAK5Q,GACZ,MAAMiD,GAAS,OAAkByK,GAEjC,GAAa,MAAT1N,EAEF,OAAIO,EAAO,EAAUT,EAAIE,IACzBJ,EAAQc,QAAQV,GAChBO,IACOqQ,GAGT,GAAIrQ,EAAO,IAAMk5C,EAAQ,OAAO35C,EAAIE,GACpC,MAAM2N,EAAQ/N,EAAQe,KAAK,kCACrBmW,GAAQ,OAAkB9W,GAGhC,OAFA2N,EAAMyP,OAAStG,GAAoB,IAAVA,GAAe9J,QAAQ/J,GAChD0K,EAAM0P,QAAUpa,GAAsB,IAAXA,GAAgB+J,QAAQ8J,GAC5CjX,EAAGG,EACZ,CACF,EA5IEiE,WAwBF,SAAiCC,EAAQC,GACvC,IAAIzB,GAAS,EAEb,OAASA,EAAQwB,EAAOnK,QAEtB,GACuB,UAArBmK,EAAOxB,GAAO,IACY,mCAA1BwB,EAAOxB,GAAO,GAAG1D,MACjBkF,EAAOxB,GAAO,GAAG2a,OACjB,CACA,IAAIxG,EAAOnU,EAEX,KAAOmU,KAEL,GACsB,SAApB3S,EAAO2S,GAAM,IACY,mCAAzB3S,EAAO2S,GAAM,GAAG7X,MAChBkF,EAAO2S,GAAM,GAAGuG,OAChBlZ,EAAOxB,GAAO,GAAG/E,IAAI6R,OAAStL,EAAOxB,GAAO,GAAGrF,MAAMmS,QACnDtL,EAAO2S,GAAM,GAAGlZ,IAAI6R,OAAStL,EAAO2S,GAAM,GAAGxZ,MAAMmS,OACrD,CACAtL,EAAOxB,GAAO,GAAG1D,KAAO,wBACxBkF,EAAO2S,GAAM,GAAG7X,KAAO,wBACvB,MAAM26C,EAAgB,CACpB36C,KAAM,gBACN3B,MAAOrE,OAAO0S,OAAO,CAAC,EAAGxH,EAAO2S,GAAM,GAAGxZ,OACzCM,IAAK3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAOxB,GAAO,GAAG/E,MAEpC4U,EAAO,CACXvT,KAAM,oBACN3B,MAAOrE,OAAO0S,OAAO,CAAC,EAAGxH,EAAO2S,GAAM,GAAGlZ,KACzCA,IAAK3E,OAAO0S,OAAO,CAAC,EAAGxH,EAAOxB,GAAO,GAAGrF,QAGpCkgB,EAAa,CACjB,CAAC,QAASo8B,EAAex1C,GACzB,CAAC,QAASD,EAAO2S,GAAM,GAAI1S,GAC3B,CAAC,OAAQD,EAAO2S,GAAM,GAAI1S,GAC1B,CAAC,QAASoO,EAAMpO,KAGlB,OACEoZ,EACAA,EAAWxjB,OACX,GACA,OACEoK,EAAQoJ,OAAOxK,WAAW8Z,WAAWxM,KACrCnM,EAAOzF,MAAMoY,EAAO,EAAGnU,GACvByB,KAIJ,OAAOoZ,EAAYA,EAAWxjB,OAAQ,EAAG,CACvC,CAAC,OAAQwY,EAAMpO,GACf,CAAC,QAASD,EAAOxB,GAAO,GAAIyB,GAC5B,CAAC,OAAQD,EAAOxB,GAAO,GAAIyB,GAC3B,CAAC,OAAQw1C,EAAex1C,MAE1B,OAAOD,EAAQ2S,EAAO,EAAGnU,EAAQmU,EAAO,EAAG0G,GAC3C7a,EAAQmU,EAAO0G,EAAWxjB,OAAS,EACnC,KACF,CAEJ,CAGF2I,GAAS,EAET,OAASA,EAAQwB,EAAOnK,QACQ,mCAA1BmK,EAAOxB,GAAO,GAAG1D,OACnBkF,EAAOxB,GAAO,GAAG1D,KAAO,QAI5B,OAAOkF,CACT,GA5FA,OAJIu1C,UACFA,GAAS,GAGJ,CACLlnC,KAAM,CACJ,IAAOpB,GAET0L,WAAY,CACVxM,KAAM,CAACc,IAETgM,iBAAkB,CAChB9M,KAAM,CAAC,MA8Hb,CCxJO,MAAMupC,EAAW,CACtBlqC,KAAM,CACJW,KAAM,CACJ1Q,SAqIN,SAAuBC,EAASC,EAAIC,GAClC,MAAM+N,EAAOnQ,KAGPotB,EAAQ,GACd,IAGI+uB,EAGAC,EANAC,EAAmB,EAOvB,OAGA,SAAe/5C,GAMb,GAJAJ,EAAQY,MAAM,SAASw5C,OAASlvB,EAChClrB,EAAQY,MAAM,aACdZ,EAAQY,MAAM,YAED,MAATR,EACF,OAAOi6C,EAAgBj6C,GAMzB,OAHA+5C,IACAn6C,EAAQY,MAAM,6BAEP05C,EAAkBl6C,EAC3B,EAGA,SAASi6C,EAAgBj6C,GAKvB,OAJAJ,EAAQY,MAAM,oBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,oBACbk5C,GAAgB,EACTM,CACT,CAGA,SAASA,EAAcn6C,GACrB,OAAa,OAATA,IAAiB,QAAmBA,GAyD1C,SAAsBA,GACpB,GAAa,OAATA,EACF,OAAOF,EAAIE,GAGbJ,EAAQe,KAAK,YACbf,EAAQe,KAAK,aACb,MAAMy5C,EAAoBvsC,EAAKmB,UAE/B,OADAnB,EAAKmB,WAAY,EACVpP,EAAQ0N,QACb,CACE3N,SAAU06C,EACVp6C,SAAS,IAEX,SAAUD,GAGR,OAFA6N,EAAKmB,UAAYorC,EACjBx6C,EAAQY,MAAM,qBACP85C,EAAoBt6C,EAC7B,IACA,SAAUA,GAER,OADA6N,EAAKmB,UAAYorC,EACVt6C,EAAIE,EACb,GAbKJ,CAcLI,EACJ,CAhFWu6C,CAAav6C,IAGlB,QAAcA,IAChBJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GACTw6C,IAGLX,IACFA,OAAgB/2C,EAChBi3C,KAGW,MAAT/5C,EACKi6C,EAAgBj6C,IAGzBJ,EAAQY,MAAM,6BACP05C,EAAkBl6C,IAC3B,CAGA,SAASw6C,EAAiBx6C,GACxB,OAAI,QAAcA,IAChBJ,EAAQc,QAAQV,GACTw6C,IAGT56C,EAAQe,KAAK,cACNw5C,EAAcn6C,GACvB,CAGA,SAASk6C,EAAkBl6C,GAEzB,OAAa,OAATA,GAA0B,MAATA,IAAgB,QAA0BA,IAC7DJ,EAAQe,KAAK,6BACNw5C,EAAcn6C,KAGvBJ,EAAQc,QAAQV,GACA,KAATA,EAAcy6C,EAA0BP,EACjD,CAGA,SAASO,EAAwBz6C,GAC/B,OAAa,KAATA,GAAwB,MAATA,GACjBJ,EAAQc,QAAQV,GACTk6C,GAGFA,EAAkBl6C,EAC3B,CA8BA,SAASs6C,EAAoBt6C,GAC3B,OAAa,OAATA,IAAiB,QAAmBA,GAC/B06C,EAAgB16C,IAGrB,QAAcA,IAChBJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GACT26C,GAGI,KAAT36C,GACFJ,EAAQY,MAAM,wBACdZ,EAAQc,QAAQV,GAChB85C,GAAU,EACVhvB,EAAMzsB,KAAK,QACJu8C,GAGI,KAAT56C,GACFJ,EAAQY,MAAM,2BACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,2BACbmqB,EAAMzsB,KAAK,QACJw8C,GAGI,MAAT76C,GACFJ,EAAQY,MAAM,oBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,oBACN25C,GAGFx6C,EAAIE,EACb,CAGA,SAAS26C,EAAsB36C,GAC7B,OAAI,QAAcA,IAChBJ,EAAQc,QAAQV,GACT26C,IAGT/6C,EAAQe,KAAK,cACN25C,EAAoBt6C,GAC7B,CAGA,SAAS46C,EAAkB56C,GACzB,OAAa,KAATA,GACFJ,EAAQc,QAAQV,GACT46C,IAGTh7C,EAAQe,KAAK,wBAEA,KAATX,GACFJ,EAAQY,MAAM,2BACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,2BACbmqB,EAAMA,EAAM/wB,OAAS,GACS,SAA5B+wB,EAAMA,EAAM/wB,OAAS,GAAgB,SAAW,QAC3C+gD,GAGFR,EAAoBt6C,GAC7B,CAGA,SAAS66C,EAAmB76C,GAC1B,OAAa,KAATA,GACFJ,EAAQY,MAAM,wBACdZ,EAAQc,QAAQV,GAChB85C,GAAU,EACHc,GAGF96C,EAAIE,EACb,CAGA,SAAS86C,EAAoB96C,GAC3B,OAAa,OAATA,IAAiB,QAAmBA,GAC/B06C,EAAgB16C,IAGrB,QAAcA,IAChBJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GACT26C,GAGI,MAAT36C,GACFJ,EAAQY,MAAM,oBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,oBACN25C,GAGFx6C,EAAIE,EACb,CAGA,SAAS06C,EAAgB16C,GAIvB,OAHAJ,EAAQe,KAAK,qBAGRm5C,GAAWC,IAAqBjvB,EAAM/wB,OAI9B,OAATiG,EACK+6C,EAAW/6C,GAGbJ,EAAQsP,MACb8rC,EACAD,EACAn7C,EAAQ0N,QACN,CACE3N,SAAU06C,EACVp6C,SAAS,IAEX,IAAAF,GAAaH,EAASq7C,EAAW,aAAc,GAC/CF,GATGn7C,CAWLI,GAlBOF,EAAIE,EAmBf,CAGA,SAAS+6C,EAAW/6C,GAElB,OADAJ,EAAQe,KAAK,SACNd,EAAGG,EACZ,CAGA,SAASi7C,EAAUj7C,GAEjB,OADAJ,EAAQY,MAAM,aACP06C,EAAal7C,EACtB,CAGA,SAASk7C,EAAal7C,GAGpB,OAFAJ,EAAQY,MAAM,YAED,MAATR,EACKm7C,EAAgBn7C,IAGzBJ,EAAQY,MAAM,6BAEP46C,EAAkBp7C,GAC3B,CAGA,SAASm7C,EAAgBn7C,GAIvB,OAHAJ,EAAQY,MAAM,oBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,oBACN06C,CACT,CAGA,SAASA,EAAcr7C,GACrB,OAAa,OAATA,IAAiB,QAAmBA,GAoD1C,SAAsBA,GAGpB,GAFAJ,EAAQe,KAAK,YAEA,OAATX,EACF,OAAOs7C,EAAet7C,GAGxB,OAAOJ,EAAQsP,MACb8rC,EACAM,EACA17C,EAAQ0N,QACN,CACE3N,SAAU06C,EACVp6C,SAAS,IAEX,IAAAF,GAAaH,EAASs7C,EAAc,aAAc,GAClDI,GATG17C,CAWLI,EACJ,CAtEWu7C,CAAav7C,IAGlB,QAAcA,IAChBJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GACTw7C,GAGI,MAATx7C,EACKm7C,EAAgBn7C,IAGzBJ,EAAQY,MAAM,6BACP46C,EAAkBp7C,GAC3B,CAGA,SAASw7C,EAAiBx7C,GACxB,OAAI,QAAcA,IAChBJ,EAAQc,QAAQV,GACTw7C,IAGT57C,EAAQe,KAAK,cACN06C,EAAcr7C,GACvB,CAGA,SAASo7C,EAAkBp7C,GAEzB,OAAa,OAATA,GAA0B,MAATA,IAAgB,QAA0BA,IAC7DJ,EAAQe,KAAK,6BACN06C,EAAcr7C,KAGvBJ,EAAQc,QAAQV,GACA,KAATA,EAAcy7C,EAA0BL,EACjD,CAGA,SAASK,EAAwBz7C,GAC/B,OAAa,KAATA,GAAwB,MAATA,GACjBJ,EAAQc,QAAQV,GACTo7C,GAGFA,EAAkBp7C,EAC3B,CAyBA,SAASs7C,EAAet7C,GAEtB,OADAJ,EAAQe,KAAK,aACNo6C,EAAW/6C,EACpB,CAGA,SAASq6C,EAAez6C,EAASC,EAAIC,GACnC,OAGA,SAAeE,GAIb,OAHAJ,EAAQY,MAAM,cACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,eACN,IAAAZ,GAAaH,EAASgS,EAAU,aACzC,EAGA,SAASA,EAAS5R,GAEhB,GACE6N,EAAKN,OAAO+B,KAAKzB,EAAK0B,MAAMjS,OACnB,OAAT0C,IACA,QAAmBA,GAEnB,OAAOF,EAAIE,GAGb,MAAM6R,EAAOhE,EAAK3J,OAAO2J,EAAK3J,OAAOnK,OAAS,GAE9C,OACG8T,EAAKN,OAAOxK,WAAWqN,QAAQC,KAAKnX,SAAS,iBAC9C2Y,GACiB,eAAjBA,EAAK,GAAG7S,MACR6S,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9X,QAAU,EAEzC+F,EAAIE,IAGb6N,EAAKoB,+BAAgC,EAC9BrP,EAAQsP,MACbrB,EAAKN,OAAOxK,WAAW2M,MACvB,SAAU1P,GAER,OADA6N,EAAKoB,+BAAgC,EAC9BnP,EAAIE,EACb,IACA,SAAUA,GAER,OADA6N,EAAKoB,+BAAgC,EAC9BpP,EAAGG,EACZ,GATKJ,CAULI,GACJ,CACF,CACF,EAtiBMqE,QAUN,SAAsBH,EAAQC,GAC5B,IAGIu3C,EAGAC,EAGAC,EAGAvuC,EAGAoE,EAGAoqC,EAGAC,EArBAp5C,GAAS,EAuBb,OAASA,EAAQwB,EAAOnK,QAAQ,CAC9B,MAAM4T,EAAQzJ,EAAOxB,GAAO,GAE5B,GAAIk5C,IACiB,8BAAfjuC,EAAM3O,OACRqO,EAAeA,GAAgB3K,EAC/B+O,EAAa/O,IAKG,qBAAfiL,EAAM3O,MAA8C,aAAf2O,EAAM3O,OAC5CyS,GACA,CACA,MAAM5T,EAAU,CACdmB,KAAM,eACN3B,MAAO6G,EAAOmJ,GAAc,GAAGhQ,MAC/BM,IAAKuG,EAAOuN,GAAY,GAAG9T,KAIvB4U,EAAO,CACXvT,KAAM,YACN3B,MAAOQ,EAAQR,MACfM,IAAKE,EAAQF,IAEbiQ,YAAa,QAEf1J,EAAOrC,OACLwL,EACAoE,EAAapE,EAAe,EAC5B,CAAC,QAASxP,EAASsG,GACnB,CAAC,QAASoO,EAAMpO,GAChB,CAAC,OAAQoO,EAAMpO,GACf,CAAC,OAAQtG,EAASsG,IAEpBzB,GAAS+O,EAAapE,EAAe,EACrCA,OAAevK,EACf2O,OAAa3O,CACf,CAGF,GACuB,SAArBoB,EAAOxB,GAAO,SACAI,IAAd+4C,GACAA,GAAaC,EAAgB,EAAI,GAAKp5C,IACtB,qBAAfiL,EAAM3O,MACW,aAAf2O,EAAM3O,OACJ68C,EAAY,EAAIn5C,GACe,eAA9BwB,EAAO23C,GAAW,GAAG78C,OAC3B,CACA,MAAMisB,EAAO,CACXjsB,KAAM28C,EACF,iBACAD,EACA,cACA,YACJr+C,MAAO6G,EAAO23C,GAAW,GAAGx+C,MAC5BM,IAAKuG,EAAOxB,GAAO,GAAG/E,KAExBuG,EAAOrC,OAAOa,GAAwB,qBAAfiL,EAAM3O,KAA8B,EAAI,GAAI,EAAG,CACpE,OACAisB,EACA9mB,IAEFD,EAAOrC,OAAOg6C,EAAW,EAAG,CAAC,QAAS5wB,EAAM9mB,IAC5CzB,GAAS,EACTm5C,EAAYn5C,EAAQ,EACpBo5C,GAAgB,CAClB,CAEmB,aAAfnuC,EAAM3O,OACR48C,EAA6B,UAArB13C,EAAOxB,GAAO,GAElBk5C,IACFC,EAAYn5C,EAAQ,EACpBo5C,GAAgB,IAID,sBAAfnuC,EAAM3O,OACR28C,EAAsC,UAArBz3C,EAAOxB,GAAO,GAE3Bi5C,IACFE,EAAYn5C,EAAQ,EACpBo5C,GAAgB,IAID,cAAfnuC,EAAM3O,OACR08C,EAA8B,UAArBx3C,EAAOxB,GAAO,GAE3B,CAEA,OAAOwB,CACT,KA7HM82C,EAAsB,CAC1Br7C,SAoiBF,SAAqCC,EAASC,EAAIC,GAChD,IAAIS,EAAO,EACX,OAGA,SAAeP,GAMb,OAHAJ,EAAQY,MAAM,SAEdZ,EAAQc,QAAQV,GACTvC,CACT,EAGA,SAASA,EAAWuC,GAClB,OAAc,IAAVA,GAAwB,KAATA,GACjBJ,EAAQc,QAAQV,GAChBO,IACgB,IAATA,EAAaV,EAAKpC,GAGd,OAATuC,IAAiB,QAA0BA,GACtCH,EAAGG,GAGLF,EAAIE,EACb,CACF,EA/jBEC,SAAS,GCfX,MAAM87C,EAAgB,CACpBp8C,SASF,SAA+BC,EAASC,EAAIC,GAC1C,MAAM+N,EAAOnQ,KACb,OAGA,SAAcsC,GACZ,GAEoB,OAAlB6N,EAAKH,WAEJG,EAAK2D,mCAEN,OAAO1R,EAAIE,GAOb,OAJAJ,EAAQY,MAAM,iBACdZ,EAAQY,MAAM,uBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,uBACNwV,CACT,EAGA,SAASA,EAAOnW,GAGd,OAAI,QAA0BA,IAC5BJ,EAAQY,MAAM,+BACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,+BACN+b,GAGI,KAAT1c,GAAwB,MAATA,GACjBJ,EAAQY,MAAM,6BACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,6BACN+b,GAGF5c,EAAIE,EACb,CAGA,SAAS0c,EAAM1c,GACb,OAAa,KAATA,GACFJ,EAAQY,MAAM,uBACdZ,EAAQc,QAAQV,GAChBJ,EAAQe,KAAK,uBACbf,EAAQe,KAAK,iBACNf,EAAQsP,MACb,CACEvP,SAAUq8C,GAEZn8C,EACAC,IAIGA,EAAIE,EACb,CACF,GApEai8C,EAAkB,CAC7B1pC,KAAM,CACJ,GAAMwpC,IAqEV,SAASC,EAAkBp8C,EAASC,EAAIC,GACtC,MAAM+N,EAAOnQ,KACb,OAAO,IAAAqC,GAAaH,GAGpB,SAAeI,GACb,MAAM6R,EAAOhE,EAAK3J,OAAO2J,EAAK3J,OAAOnK,OAAS,GAC9C,OAEI8X,GAAyB,eAAjBA,EAAK,GAAG7S,OAGhB,QAAmBgB,KACV,OAATA,EACEH,EAAGG,GACHF,EAAIE,EAEZ,GAfoC,aAgBtC,CChGO,SAASk8C,EAAOziD,EAAO0iD,GAC5B,MAAMv+C,EAAS+D,OAAOlI,GAEtB,GAAyB,iBAAd0iD,EACT,MAAM,IAAIr/C,UAAU,sBAGtB,IAAI83C,EAAQ,EACRlyC,EAAQ9E,EAAOiH,QAAQs3C,GAE3B,MAAkB,IAAXz5C,GACLkyC,IACAlyC,EAAQ9E,EAAOiH,QAAQs3C,EAAWz5C,EAAQy5C,EAAUpiD,QAGtD,OAAO66C,CACT,0BC0CA,MAAM5pC,EAAM,CAAC,EAAE9Q,eAqBFkiD,EAOX,SASY5vC,EAAMwoC,EAAMp4C,EAAS1B,GAE7B,IAAIoQ,EAEAooC,EAEgB,iBAATsB,GAAqBA,aAAgBqH,QAE9C3I,EAAS,CAAC,CAACsB,EAAMp4C,IACjB0O,EAAWpQ,IAEXw4C,EAASsB,EAET1pC,EAAW1O,GAGR0O,IACHA,EAAW,CAAC,GAGd,MAAMgxC,GAAU,OAAQhxC,EAAS8f,QAAU,IACrCmxB,EA+HZ,SAAiB7I,GAEf,MAAMhtC,EAAS,GAEf,GAAsB,iBAAXgtC,EACT,MAAM,IAAI52C,UAAU,sCAGtB,GAAI3D,MAAMC,QAAQs6C,GAAS,CACzB,IAAIhxC,GAAS,EAEb,OAASA,EAAQgxC,EAAO35C,QACtB2M,EAAOrI,KAAK,CACVm+C,EAAa9I,EAAOhxC,GAAO,IAC3B+5C,EAAW/I,EAAOhxC,GAAO,KAG/B,KAAO,CAEL,IAAI9H,EAEJ,IAAKA,KAAO84C,EACN1oC,EAAIvQ,KAAKi5C,EAAQ94C,IACnB8L,EAAOrI,KAAK,CAACm+C,EAAa5hD,GAAM6hD,EAAW/I,EAAO94C,KAGxD,CAEA,OAAO8L,CACT,CA5JoBg2C,CAAQhJ,GACtB,IAAIiJ,GAAa,EAEjB,OAASA,EAAYJ,EAAMxiD,SACzB,QAAayS,EAAM,OAAQ+a,GAI7B,OAAO/a,EAGP,SAAS+a,EAAQhqB,EAAMkqB,GACrB,IAEIm1B,EAFAl6C,GAAS,EAIb,OAASA,EAAQ+kB,EAAQ1tB,QAAQ,CAC/B,MAAM2tB,EAASD,EAAQ/kB,GAEvB,GACE45C,EACE50B,EAEAk1B,EAAcA,EAAYnnD,SAASoP,QAAQ6iB,QAAU5kB,EACrD85C,GAGF,OAGFA,EAAcl1B,CAChB,CAEA,GAAIk1B,EACF,OAcJ,SAAiBr/C,EAAMkqB,GACrB,MAAMC,EAASD,EAAQA,EAAQ1tB,OAAS,GAClCi7C,EAAOuH,EAAMI,GAAW,GACxB//C,EAAU2/C,EAAMI,GAAW,GACjC,IAAIt/C,EAAQ,EAEZ,MAAMqF,EAAQglB,EAAOjyB,SAASoP,QAAQtH,GACtC,IAAIs/C,GAAS,EAETpwB,EAAQ,GAEZuoB,EAAKluB,UAAY,EAEjB,IAAI3pB,EAAQ63C,EAAKx2C,KAAKjB,EAAK9D,OAE3B,KAAO0D,GAAO,CACZ,MAAMzI,EAAWyI,EAAMuF,MAEjBo6C,EAAc,CAClBp6C,MAAOvF,EAAMuF,MACbyxC,MAAOh3C,EAAMg3C,MAEbpvC,MAAO,IAAI0iB,EAASlqB,IAEtB,IAAI9D,EAAQmD,KAAWO,EAAO2/C,GAyB9B,GAvBqB,iBAAVrjD,IACTA,EAAQA,EAAMM,OAAS,EAAI,CAACiF,KAAM,OAAQvF,cAASqJ,IAIvC,IAAVrJ,IACE4D,IAAU3I,GACZ+3B,EAAMpuB,KAAK,CACTW,KAAM,OACNvF,MAAO8D,EAAK9D,MAAMgF,MAAMpB,EAAO3I,KAI/ByE,MAAMC,QAAQK,GAChBgzB,EAAMpuB,QAAQ5E,GACLA,GACTgzB,EAAMpuB,KAAK5E,GAGb4D,EAAQ3I,EAAWyI,EAAM,GAAGpD,OAC5B8iD,GAAS,IAGN7H,EAAK+H,OACR,MAGF5/C,EAAQ63C,EAAKx2C,KAAKjB,EAAK9D,MACzB,CAEIojD,GACEx/C,EAAQE,EAAK9D,MAAMM,QACrB0yB,EAAMpuB,KAAK,CAACW,KAAM,OAAQvF,MAAO8D,EAAK9D,MAAMgF,MAAMpB,KAGpDqqB,EAAOjyB,SAASoM,OAAOa,EAAO,KAAM+pB,IAEpCA,EAAQ,CAAClvB,GAGX,OAAOmF,EAAQ+pB,EAAM1yB,MACvB,CAjFWurB,CAAQ/nB,EAAMkqB,EAEzB,CAiFJ,EAiDF,SAAS+0B,EAAaxH,GACpB,MAAuB,iBAATA,EAAoB,IAAIqH,OCrSzB,SAA4BjqC,GAC1C,GAAsB,iBAAXA,EACV,MAAM,IAAItV,UAAU,qBAKrB,OAAOsV,EACLxV,QAAQ,sBAAuB,QAC/BA,QAAQ,KAAM,QACjB,CD2R+C,CAAOo4C,GAAO,KAAOA,CACpE,CAUA,SAASyH,EAAW7/C,GAClB,MAA0B,mBAAZA,EAAyBA,EAAU,IAAMA,CACzD,CE7RA,MAAMogD,EAAc,WAEdC,EAAiB,CAAC,WAAY,OAAQ,QAAS,SASxCC,EAAiC,CAC5Cj9B,WAAY,CA2Fd,SAAsCzT,GACpC4vC,EACE5vC,EACA,CACE,CAAC,kDAAmD2wC,IACpD,CAAC,oCAAqCC,KAExC,CAAChyB,OAAQ,CAAC,OAAQ,kBAEtB,GAnGE5qB,MAAO,CACL68C,gBA0CJ,SAA8B1vC,GAC5BjQ,KAAK8C,MAAM,CAACxB,KAAM,OAAQiZ,MAAO,KAAM5S,IAAK,GAAI5P,SAAU,IAAKkY,EACjE,EA3CI2vC,qBAAsBC,EACtBC,oBAAqBD,EACrBE,mBAAoBF,GAEtB58C,KAAM,CACJ08C,gBA8EJ,SAA6B1vC,GAC3BjQ,KAAKiD,KAAKgN,EACZ,EA/EI2vC,qBAqEJ,SAAkC3vC,GAChCjQ,KAAKsiB,OAAOrf,KAAK4f,cAAc9lB,KAAKiD,KAAMiQ,EAC5C,EAtEI6vC,oBAkDJ,SAAiC7vC,GAC/BjQ,KAAKsiB,OAAOrf,KAAK0f,iBAAiB5lB,KAAKiD,KAAMiQ,EAC/C,EAnDI8vC,mBAyDJ,SAAgC9vC,GAC9BjQ,KAAKsiB,OAAOrf,KAAKwH,KAAK1N,KAAKiD,KAAMiQ,GACCjQ,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAC5DsL,IAAM,UAAY3H,KAAKoU,eAAenE,EAC7C,IApDa+vC,EAA+B,CAC1CC,OAAQ,CACN,CACExB,UAAW,IACXl5C,OAAQ,aACR6T,MAAO,YACPkmC,cACAC,kBAEF,CACEd,UAAW,IACXl5C,OAAQ,OACR6T,MAAO,YACPkmC,cACAC,kBAEF,CAACd,UAAW,IAAKl5C,OAAQ,OAAQ6T,MAAO,MAAOkmC,cAAaC,oBAgBhE,SAASM,EAA0B5vC,GACjCjQ,KAAKsiB,OAAOxf,MAAM6f,iBAAiB5lB,KAAKiD,KAAMiQ,EAChD,CA0DA,SAASwvC,GAAQxoC,EAAGjN,EAAUivC,EAAQpxC,EAAMpI,GAC1C,IAAIsD,EAAS,GAGb,IAAKiN,GAASvQ,GACZ,OAAO,EAUT,GANI,MAAMuE,KAAKgG,KACbivC,EAASjvC,EAAWivC,EACpBjvC,EAAW,GACXjH,EAAS,YAwDb,SAAyBk2C,GACvB,MAAMhyC,EAAQgyC,EAAOiH,MAAM,KAE3B,GACEj5C,EAAM5K,OAAS,GACd4K,EAAMA,EAAM5K,OAAS,KACnB,IAAI2H,KAAKiD,EAAMA,EAAM5K,OAAS,MAC5B,aAAa2H,KAAKiD,EAAMA,EAAM5K,OAAS,MAC3C4K,EAAMA,EAAM5K,OAAS,KACnB,IAAI2H,KAAKiD,EAAMA,EAAM5K,OAAS,MAC5B,aAAa2H,KAAKiD,EAAMA,EAAM5K,OAAS,KAE5C,OAAO,EAGT,OAAO,CACT,CArEO8jD,CAAgBlH,GACnB,OAAO,EAGT,MAAMhyC,EAuER,SAAkBU,GAChB,MAAMy4C,EAAY,sBAAsBt/C,KAAK6G,GAE7C,IAAKy4C,EACH,MAAO,CAACz4C,OAAKvC,GAGfuC,EAAMA,EAAI5G,MAAM,EAAGq/C,EAAUp7C,OAE7B,IAAIq7C,EAAQD,EAAU,GAClBE,EAAoBD,EAAMl5C,QAAQ,KACtC,MAAMo5C,EAAgB/B,EAAO72C,EAAK,KAClC,IAAI64C,EAAgBhC,EAAO72C,EAAK,KAEhC,MAA8B,IAAvB24C,GAA4BC,EAAgBC,GACjD74C,GAAO04C,EAAMt/C,MAAM,EAAGu/C,EAAoB,GAC1CD,EAAQA,EAAMt/C,MAAMu/C,EAAoB,GACxCA,EAAoBD,EAAMl5C,QAAQ,KAClCq5C,IAGF,MAAO,CAAC74C,EAAK04C,EACf,CA7FgBI,CAASxH,EAASpxC,GAEhC,IAAKZ,EAAM,GAAI,OAAO,EAGtB,MAAM+B,EAAS,CACb1H,KAAM,OACNiZ,MAAO,KACP5S,IAAK5E,EAASiH,EAAW/C,EAAM,GAC/BlP,SAAU,CAAC,CAACuJ,KAAM,OAAQvF,MAAOiO,EAAW/C,EAAM,MAGpD,OAAIA,EAAM,GACD,CAAC+B,EAAQ,CAAC1H,KAAM,OAAQvF,MAAOkL,EAAM,KAGvC+B,CACT,CAUA,SAAS02C,GAAUzoC,EAAG2jC,EAAO1gC,EAAOza,GAClC,SAEGuQ,GAASvQ,GAAO,IAEjB,UAAUuE,KAAKkW,KAKV,CACL5Y,KAAM,OACNiZ,MAAO,KACP5S,IAAK,UAAYizC,EAAQ,IAAM1gC,EAC/BniB,SAAU,CAAC,CAACuJ,KAAM,OAAQvF,MAAO6+C,EAAQ,IAAM1gC,IAEnD,CAyDA,SAASlK,GAASvQ,EAAOihD,GACvB,MAAMp+C,EAAO7C,EAAMg3C,MAAMr6C,WAAWqD,EAAMuF,MAAQ,GAElD,OACmB,IAAhBvF,EAAMuF,QACL,QAAkB1C,KAClB,QAAmBA,OACnBo+C,GAAkB,KAATp+C,EAEf,iBCvPO,SAASq+C,GAAY9gD,GAC1B,OAAIA,EAAKqa,QAAUra,EAAK8a,WACf9a,EAAKqa,OAAS,IAGhB,QAAara,EAAK8a,WAC3B,CCkCA,SAAS0E,GAAQjoB,EAAMF,EAAO8yB,EAAQxT,GACpC,IAAIxR,EAAQwR,EAAM9N,KAAKrM,OAEvB,KAAO2I,KAAS,CACd,MAAMgE,EAASwN,EAAM9N,KAAK1D,GAAO5N,EAAMF,EAAO8yB,EAAQxT,GAEtD,IAAe,IAAXxN,GAA8B,IAAXA,EACrB,MAGF,GAAsB,iBAAXA,EACT,MAAO,KAAK43C,OAAO,EAAI53C,GAGzB,IAAe,IAAXA,EACF,MAAO,uBAEX,CAEA,MAAO,MACT,CClFA,MAAM63C,GAAM,YCIL,SAASC,GAAezhB,GAC7B,IAAKA,EAAQ0hB,UAAW,CACtB,MAAMx7C,GACH85B,EAAQtqB,QAAU,kBAAoB,KACtCsqB,EAAQ95B,OAAS,MAAQ85B,EAAQ95B,OAAS,IAAM,IAEnD85B,EAAQ0hB,UAAY,IAAIpC,QACrBp5C,EAAS,IAAMA,EAAS,IAAM,KAC5B,sBAAsBvB,KAAKq7B,EAAQof,WAAa,KAAO,IACxDpf,EAAQof,WACPpf,EAAQjmB,MAAQ,MAAQimB,EAAQjmB,MAAQ,IAAM,IACjD,IAEJ,CAEA,OAAOimB,EAAQ0hB,SACjB,CCdO,SAASC,GAAe35C,EAAOg4B,GACpC,OACE4hB,GAAY55C,EAAOg4B,EAAQigB,aAAa,KACvC2B,GAAY55C,EAAOg4B,EAAQkgB,gBAAgB,EAEhD,CAQA,SAAS0B,GAAY55C,EAAOjD,EAAM88C,GAKhC,GAJoB,iBAAT98C,IACTA,EAAO,CAACA,KAGLA,GAAwB,IAAhBA,EAAK/H,OAChB,OAAO6kD,EAGT,IAAIl8C,GAAS,EAEb,OAASA,EAAQZ,EAAK/H,QACpB,GAAIgL,EAAM7L,SAAS4I,EAAKY,IACtB,OAAO,EAIX,OAAO,CACT,CCRO,SAASm8C,GAAK3qC,EAAOigC,EAAOn0B,GACjC,MAAMvmB,GAASumB,EAAO/c,QAAU,KAAOkxC,GAAS,KAAOn0B,EAAOlJ,OAAS,IAEjEgoC,EAAY,GAEZp4C,EAAS,GAETq4C,EAAQ,CAAC,EACf,IAAIr8C,GAAS,EAEb,OAASA,EAAQwR,EAAMypC,OAAO5jD,QAAQ,CACpC,MAAMgjC,EAAU7oB,EAAMypC,OAAOj7C,GAE7B,IAAKg8C,GAAexqC,EAAMnP,MAAOg4B,GAC/B,SAGF,MAAMiiB,EAAaR,GAAezhB,GAElC,IAAI5/B,EAEJ,KAAQA,EAAQ6hD,EAAWxgD,KAAK/E,IAAS,CACvC,MAAMwJ,EAAS,WAAY85B,GAAW/vB,QAAQ+vB,EAAQtqB,SAChDqE,EAAQ,UAAWimB,EACnBroC,EAAWyI,EAAMuF,OAASO,EAAS9F,EAAM,GAAGpD,OAAS,GAEvD+kD,EAAU5lD,SAASxE,IACjBqqD,EAAMrqD,GAAUuO,SAAWA,IAC7B87C,EAAMrqD,GAAUuO,QAAS,GAGvB87C,EAAMrqD,GAAUoiB,QAAUA,IAC5BioC,EAAMrqD,GAAUoiB,OAAQ,KAG1BgoC,EAAUzgD,KAAK3J,GACfqqD,EAAMrqD,GAAY,CAACuO,SAAQ6T,SAE/B,CACF,CAEAgoC,EAAUG,KAAKC,IAEf,IAAI7hD,EAAQ2iB,EAAO/c,OAAS+c,EAAO/c,OAAOlJ,OAAS,EACnD,MAAM4D,EAAMlE,EAAMM,QAAUimB,EAAOlJ,MAAQkJ,EAAOlJ,MAAM/c,OAAS,GAGjE,IAFA2I,GAAS,IAEAA,EAAQo8C,EAAU/kD,QAAQ,CACjC,MAAMrF,EAAWoqD,EAAUp8C,GAGvBhO,EAAW2I,GAAS3I,GAAYiJ,IAQjCjJ,EAAW,EAAIiJ,GACdmhD,EAAUp8C,EAAQ,KAAOhO,EAAW,GACpCqqD,EAAMrqD,GAAUoiB,QACfioC,EAAMrqD,EAAW,GAAGuO,SACpB87C,EAAMrqD,EAAW,GAAGoiB,OACtBgoC,EAAUp8C,EAAQ,KAAOhO,EAAW,GACnCqqD,EAAMrqD,GAAUuO,SACf87C,EAAMrqD,EAAW,GAAGuO,SACpB87C,EAAMrqD,EAAW,GAAGoiB,QAKrBzZ,IAAU3I,GAIZgS,EAAOrI,KAAK8gD,GAAkB1lD,EAAMgF,MAAMpB,EAAO3I,GAAW,OAG9D2I,EAAQ3I,GAGN,iBAAiBgN,KAAKjI,EAAMsF,OAAOrK,KACjCsrB,EAAOo/B,QAAWp/B,EAAOo/B,OAAOlmD,SAASO,EAAMsF,OAAOrK,KAMxDgS,EAAOrI,KACL,MAAQ5E,EAAMK,WAAWpF,GAAU0F,SAAS,IAAI4J,cAAgB,KAElE3G,KANAqJ,EAAOrI,KAAK,OAQhB,CAIA,OAFAqI,EAAOrI,KAAK8gD,GAAkB1lD,EAAMgF,MAAMpB,EAAOM,GAAMqiB,EAAOlJ,QAEvDpQ,EAAON,KAAK,GACrB,CAOA,SAAS84C,GAAUG,EAAGC,GACpB,OAAOD,EAAIC,CACb,CAOA,SAASH,GAAkB1lD,EAAOqd,GAChC,MAAMkoC,EAAa,wBAEbF,EAAY,GAEZ90B,EAAU,GACVu1B,EAAQ9lD,EAAQqd,EACtB,IAGI3Z,EAHAuF,GAAS,EACTrF,EAAQ,EAIZ,KAAQF,EAAQ6hD,EAAWxgD,KAAK+gD,IAC9BT,EAAUzgD,KAAKlB,EAAMuF,OAGvB,OAASA,EAAQo8C,EAAU/kD,QACrBsD,IAAUyhD,EAAUp8C,IACtBsnB,EAAQ3rB,KAAK5E,EAAMgF,MAAMpB,EAAOyhD,EAAUp8C,KAG5CsnB,EAAQ3rB,KAAK,MACbhB,EAAQyhD,EAAUp8C,GAKpB,OAFAsnB,EAAQ3rB,KAAK5E,EAAMgF,MAAMpB,IAElB2sB,EAAQ5jB,KAAK,GACtB,CCpKO,SAASo5C,GAAMx/B,GAIpB,MAAM9kB,EAAU8kB,GAAU,CAAC,EACrBzQ,EAAMrU,EAAQqU,KAAO,CAAC,EAC5B,IAAIkwC,EAAYvkD,EAAQukD,WAAa,EACjCniD,EAAOiS,EAAIjS,MAAQ,EACnBN,EAASuS,EAAIvS,QAAU,EAE3B,MAAO,CAAC0iD,KAyBR,SAAcvL,GAEZ,MAAM16C,EAAQ06C,GAAS,GACjBvhC,EAASnZ,EAAMmkD,MAAM,aACrB/rC,EAAOe,EAAOA,EAAO7Y,OAAS,GAIpC,OAHAuD,GAAQsV,EAAO7Y,OAAS,EACxBiD,EACoB,IAAlB4V,EAAO7Y,OAAeiD,EAAS6U,EAAK9X,OAAS,EAAI8X,EAAK9X,OAAS0lD,EAC1DhmD,CACT,EAlCcV,QAOd,WACE,MAAO,CAACwW,IAAK,CAACjS,OAAMN,UAASyiD,YAC/B,EATuBj1B,MAgBvB,SAAe/wB,GACbgmD,GAAahmD,CACf,EAiBF,CCSA,SAASkmD,GAAwBhyC,GAC/BjQ,KAAK8C,MACH,CAACxB,KAAM,qBAAsBqZ,WAAY,GAAIT,MAAO,GAAIniB,SAAU,IAClEkY,EAEJ,CAMA,SAASiyC,KACPliD,KAAKwK,QACP,CAMA,SAAS23C,GAAkClyC,GACzC,MAAMiK,EAAQla,KAAKunB,SACb1nB,EACJG,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAEjCwD,EAAKqa,MAAQA,EACbra,EAAK8a,YAAa,OAChB3a,KAAKoU,eAAenE,IACpB5J,aACJ,CAMA,SAAS+7C,GAAuBnyC,GAC9BjQ,KAAKiD,KAAKgN,EACZ,CAMA,SAASoyC,GAAkBpyC,GACzBjQ,KAAK8C,MAAM,CAACxB,KAAM,oBAAqBqZ,WAAY,GAAIT,MAAO,IAAKjK,EACrE,CAMA,SAASqyC,KACPtiD,KAAKwK,QACP,CAMA,SAAS+3C,GAAuBtyC,GAC9B,MAAMiK,EAAQla,KAAKunB,SACb1nB,EACJG,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAEjCwD,EAAKqa,MAAQA,EACbra,EAAK8a,YAAa,OAChB3a,KAAKoU,eAAenE,IACpB5J,aACJ,CAMA,SAASm8C,GAAiBvyC,GACxBjQ,KAAKiD,KAAKgN,EACZ,CAMA,SAASma,GAAkBvqB,EAAMoX,EAAGxQ,EAASg8C,GAC3C,MAAMC,EAAUZ,GAAMW,GACtB,IAAI1mD,EAAQ2mD,EAAQV,KAAK,MACzB,MAAM/+C,EAAOwD,EAAQ3D,MAAM,qBACrB6/C,EAAUl8C,EAAQ3D,MAAM,aAW9B,OAVA/G,GAAS2mD,EAAQV,KACfb,GAAK16C,EAASk6C,GAAY9gD,GAAO,IAC5B6iD,EAAQrnD,UACXkK,OAAQxJ,EACRqd,MAAO,OAGXupC,IACA1/C,IACAlH,GAAS2mD,EAAQV,KAAK,KACfjmD,CACT,CAWA,SAAS6xB,GAAmB/tB,EAAMoX,EAAGxQ,EAASg8C,GAC5C,MAAMC,EAAUZ,GAAMW,GACtB,IAAI1mD,EAAQ2mD,EAAQV,KAAK,MACzB,MAAM/+C,EAAOwD,EAAQ3D,MAAM,sBACrB6/C,EAAUl8C,EAAQ3D,MAAM,SAkB9B,OAjBA/G,GAAS2mD,EAAQV,KACfb,GAAK16C,EAASk6C,GAAY9gD,GAAO,IAC5B6iD,EAAQrnD,UACXkK,OAAQxJ,EACRqd,MAAO,OAGXupC,IACA5mD,GAAS2mD,EAAQV,KACf,MAAQniD,EAAK9H,UAAY8H,EAAK9H,SAASsE,OAAS,EAAI,IAAM,KAE5DqmD,EAAQ51B,MAAM,GACd/wB,GAAS2mD,EAAQV,KLtLZ,SAAqBjmD,EAAO8O,GAEjC,MAAM7B,EAAS,GACf,IAGIvJ,EAHAE,EAAQ,EACRC,EAAO,EAIX,KAAQH,EAAQohD,GAAI//C,KAAK/E,IACvByT,EAAIzT,EAAMgF,MAAMpB,EAAOF,EAAMuF,QAC7BgE,EAAOrI,KAAKlB,EAAM,IAClBE,EAAQF,EAAMuF,MAAQvF,EAAM,GAAGpD,OAC/BuD,IAKF,OAFA4P,EAAIzT,EAAMgF,MAAMpB,IAETqJ,EAAON,KAAK,IAKnB,SAAS8G,EAAIzT,GACXiN,EAAOrI,KAAKkK,EAAI9O,EAAO6D,GAAO7D,GAChC,CACF,CK8JI6mD,CN9KG,SAAuB54B,EAAQxT,EAAOtL,GAC3C,MAAM23C,EAAarsC,EAAMqsC,WACnB9qD,EAAWiyB,EAAOjyB,UAAY,GAC9B2qD,EAAUlsC,EAAMssC,cAAc53C,GAE9BohB,EAAU,GAChB,IAAItnB,GAAS,EAIb,IAFA69C,EAAWliD,MAAM,KAERqE,EAAQjN,EAASsE,QAAQ,CAChC,MAAMqwB,EAAQ30B,EAASiN,GAEvB69C,EAAWA,EAAWxmD,OAAS,GAAK2I,EAEpCsnB,EAAQ3rB,KACN+hD,EAAQV,KACNxrC,EAAMusC,OAAOr2B,EAAO1C,EAAQxT,EAAO,CACjCjR,OAAQ,KACR6T,MAAO,QACJspC,EAAQrnD,cAKE,SAAfqxB,EAAMprB,OACRkV,EAAMwsC,oBAAiB59C,GAGrBJ,EAAQjN,EAASsE,OAAS,GAC5BiwB,EAAQ3rB,KACN+hD,EAAQV,KAAK3iC,GAAQqN,EAAO30B,EAASiN,EAAQ,GAAIglB,EAAQxT,IAG/D,CAIA,OAFAqsC,EAAW52C,MAEJqgB,EAAQ5jB,KAAK,GACtB,CMuIgBu6C,CAAcpjD,EAAM4G,EAASi8C,EAAQrnD,WAAYwP,KAE/D5H,IAEOlH,CACT,CAGA,SAAS8O,GAAIjL,EAAMoF,EAAOk+C,GACxB,OAAc,IAAVl+C,EACKpF,GAGDsjD,EAAQ,GAAK,QAAUtjD,CACjC,CCxLO,SAASujD,GAAkBn5B,EAAQxT,EAAOtL,GAC/C,MAAM23C,EAAarsC,EAAMqsC,WACnB9qD,EAAWiyB,EAAOjyB,UAAY,GAE9Bu0B,EAAU,GAChB,IAAItnB,GAAS,EACTO,EAAS2F,EAAK3F,OAElBs9C,EAAWliD,MAAM,GACjB,IAAI+hD,EAAUlsC,EAAMssC,cAAc53C,GAElC,OAASlG,EAAQjN,EAASsE,QAAQ,CAChC,MAAMqwB,EAAQ30B,EAASiN,GAEvB,IAAIoU,EAIJ,GAFAypC,EAAWA,EAAWxmD,OAAS,GAAK2I,EAEhCA,EAAQ,EAAIjN,EAASsE,OAAQ,CAG/B,IAAI0mD,EAASvsC,EAAMusC,OAAOp3B,SAAS5zB,EAASiN,EAAQ,GAAG1D,MAGnDyhD,GAAUA,EAAOK,OAAML,EAASA,EAAOK,MAC3ChqC,EAAQ2pC,EACJA,EAAOhrD,EAASiN,EAAQ,GAAIglB,EAAQxT,EAAO,CACzCjR,OAAQ,GACR6T,MAAO,MACJspC,EAAQrnD,YACVgG,OAAO,GACV,EACN,MACE+X,EAAQlO,EAAKkO,MAUbkT,EAAQjwB,OAAS,IACL,OAAXkJ,GAA8B,OAAXA,IACL,SAAfmnB,EAAMprB,OAENgrB,EAAQA,EAAQjwB,OAAS,GAAKiwB,EAAQA,EAAQjwB,OAAS,GAAG6C,QACxD,cACA,KAEFqG,EAAS,IAGTm9C,EAAUlsC,EAAMssC,cAAc53C,GAC9Bw3C,EAAQV,KAAK11B,EAAQ5jB,KAAK,MAG5B4jB,EAAQ3rB,KACN+hD,EAAQV,KACNxrC,EAAMusC,OAAOr2B,EAAO1C,EAAQxT,EAAO,IAC9BksC,EAAQrnD,UACXkK,SACA6T,YAKN7T,EAAS+mB,EAAQA,EAAQjwB,OAAS,GAAG0E,OAAO,EAC9C,CAIA,OAFA8hD,EAAW52C,MAEJqgB,EAAQ5jB,KAAK,GACtB,CD9EA0hB,GAAkBg5B,KAoJlB,WACE,MAAO,GACT,EEnIAC,GAAaD,KAgEb,WACE,MAAO,GACT,EA3DO,MAAME,GAA+B,CAC1C9gC,eAAgB,CAAC,UACjB1f,MAAO,CAACm5C,cAwBV,SAA4BhsC,GAC1BjQ,KAAK8C,MAAM,CAACxB,KAAM,SAAUvJ,SAAU,IAAKkY,EAC7C,GAzBEhN,KAAM,CAACg5C,cA+BT,SAA2BhsC,GACzBjQ,KAAKiD,KAAKgN,EACZ,IAzBaszC,GAA6B,CACxCtD,OAAQ,CACN,CACExB,UAAW,IACXa,YAAa,WACbC,eAhCiC,CACrC,WACA,qBACA,iBACA,YACA,aACA,qBA6BA5zB,SAAU,CAACG,OAAQu3B,KAuBrB,SAASA,GAAaxjD,EAAMoX,EAAGxQ,EAASg8C,GACtC,MAAMC,EAAUZ,GAAMW,GAChBx/C,EAAOwD,EAAQ3D,MAAM,iBAC3B,IAAI/G,EAAQ2mD,EAAQV,KAAK,MAQzB,OAPAjmD,GAASonD,GAAkBtjD,EAAM4G,EAAS,IACrCi8C,EAAQrnD,UACXkK,OAAQxJ,EACRqd,MAAO,MAETrd,GAAS2mD,EAAQV,KAAK,MACtB/+C,IACOlH,CACT,CClFO,SAASqwB,GAAWvsB,EAAMoX,EAAGT,GAClC,IAAIza,EAAQ8D,EAAK9D,OAAS,GACtBsc,EAAW,IACXrT,GAAS,EAKb,KAAO,IAAI25C,OAAO,WAAatmC,EAAW,YAAYrU,KAAKjI,IACzDsc,GAAY,IAmBd,IAbE,WAAWrU,KAAKjI,KACd,WAAWiI,KAAKjI,IAAU,WAAWiI,KAAKjI,IAAW,QAAQiI,KAAKjI,MAEpEA,EAAQ,IAAMA,EAAQ,OAUfiJ,EAAQwR,EAAMypC,OAAO5jD,QAAQ,CACpC,MAAMgjC,EAAU7oB,EAAMypC,OAAOj7C,GACvBs8C,EAAaR,GAAezhB,GAElC,IAAI5/B,EAKJ,GAAK4/B,EAAQtqB,QAEb,KAAQtV,EAAQ6hD,EAAWxgD,KAAK/E,IAAS,CACvC,IAAI/E,EAAWyI,EAAMuF,MAIY,KAA/BjJ,EAAMK,WAAWpF,IACkB,KAAnC+E,EAAMK,WAAWpF,EAAW,IAE5BA,IAGF+E,EAAQA,EAAMgF,MAAM,EAAG/J,GAAY,IAAM+E,EAAMgF,MAAMtB,EAAMuF,MAAQ,EACrE,CACF,CAEA,OAAOqT,EAAWtc,EAAQsc,CAC5B,CCkSA,SAASmrC,GAAoBznD,GAC3B,OAAOA,EAAMM,MACf,CAMA,SAASonD,GAAY1nD,GACnB,MAAMuG,EAAwB,iBAAVvG,EAAqBA,EAAM2vB,YAAY,GAAK,EAEhE,OAAgB,KAATppB,GAAkC,KAATA,EAC5B,GACS,KAATA,GAAkC,MAATA,EACzB,IACS,KAATA,GAAkC,MAATA,EACzB,IACA,CACN,CDnXA8pB,GAAWg3B,KAoEX,WACE,MAAO,GACT,EEnCO,MAAMM,GAAuB,CAClC5gD,MAAO,CACL6pB,MAkBJ,SAAoB1c,GAGlB,MAAMmd,EAAQnd,EAAMqsC,OACpBt8C,KAAK8C,MACH,CACExB,KAAM,QACN8rB,MAAOA,EAAMviB,KAAKzV,GAAa,SAANA,EAAe,KAAOA,IAC/C2C,SAAU,IAEZkY,GAEFjQ,KAAKwnB,QAAQ,WAAW,EAC1B,EA9BIm8B,UAAWC,GACXC,YAAaD,GACb12B,SA2CJ,SAAkBjd,GAChBjQ,KAAK8C,MAAM,CAACxB,KAAM,WAAYvJ,SAAU,IAAKkY,EAC/C,GA3CEhN,KAAM,CACJ+e,SAkEJ,SAAsB/R,GACpB,IAAIlU,EAAQiE,KAAKunB,SAEbvnB,KAAKynB,QAAQ,aACf1rB,EAAQA,EAAMmD,QAAQ,aAAcA,KAGEc,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAClEN,MAAQA,EACbiE,KAAKiD,KAAKgN,EACZ,EA3EI0c,MA8BJ,SAAmB1c,GACjBjQ,KAAKiD,KAAKgN,GACVjQ,KAAKwnB,QAAQ,UACf,EAhCIm8B,UAAW1gD,GACX4gD,YAAa5gD,GACbiqB,SAAUjqB,KA4Cd,SAASA,GAAKgN,GACZjQ,KAAKiD,KAAKgN,EACZ,CAMA,SAAS2zC,GAAU3zC,GACjBjQ,KAAK8C,MAAM,CAACxB,KAAM,YAAavJ,SAAU,IAAKkY,EAChD,CAyBA,SAAS/Q,GAAQ6G,EAAIC,GAEnB,MAAc,MAAPA,EAAaA,EAAKD,CAC3B,CAWO,SAAS+9C,GAAmBtmD,GACjC,MAAMoQ,EAAWpQ,GAAW,CAAC,EACvBzD,EAAU6T,EAASm2C,iBACnBC,EAAkBp2C,EAASq2C,eAC3BC,EAAet2C,EAASs2C,aACxBC,EAASpqD,EAAU,IAAM,IAE/B,MAAO,CACLkmD,OAAQ,CACN,CAACxB,UAAW,KAAMa,YAAa,aAC/B,CAACb,UAAW,KAAMa,YAAa,aAG/B,CAACvqC,SAAS,EAAM0pC,UAAW,IAAKrlC,MAAO,WAEvC,CAACqlC,UAAW,IAAKa,YAAa,aAG9B,CAACvqC,SAAS,EAAM0pC,UAAW,IAAKrlC,MAAO,KAMvC,CAACrE,SAAS,EAAM0pC,UAAW,IAAKrlC,MAAO,UAEzCuS,SAAU,CACRgB,MAWJ,SAAqB9sB,EAAMoX,EAAGxQ,EAASg8C,GACrC,OAAO2B,EA2DT,SAA2BvkD,EAAM4G,EAASg8C,GACxC,MAAM1qD,EAAW8H,EAAK9H,SACtB,IAAIiN,GAAS,EAEb,MAAMgE,EAAS,GACT25C,EAAUl8C,EAAQ3D,MAAM,SAE9B,OAASkC,EAAQjN,EAASsE,QACxB2M,EAAOhE,GAASq/C,EACdtsD,EAASiN,GACTyB,EACAg8C,GAMJ,OAFAE,IAEO35C,CACT,CA5EIs7C,CAAkBzkD,EAAM4G,EAASg8C,GACjC5iD,EAAKutB,MAET,EAfIF,SAyBJ,SAAwBrtB,EAAMoX,EAAGxQ,EAASg8C,GACxC,MACM1mD,EAAQqoD,EAAc,CADhBC,EAAqBxkD,EAAM4G,EAASg8C,KAGhD,OAAO1mD,EAAMgF,MAAM,EAAGhF,EAAMoL,QAAQ,MACtC,EA7BI8lB,UAAWs3B,EACXn4B,WAyHJ,SAA6BvsB,EAAMmqB,EAAQvjB,GACzC,IAAI1K,EAAQqwB,GAAWvsB,EAAMmqB,EAAQvjB,GAEjCA,EAAQY,MAAM7L,SAAS,eACzBO,EAAQA,EAAMmD,QAAQ,MAAO,SAG/B,OAAOnD,CACT,IA/FA,SAASwoD,EAAgB1kD,EAAMoX,EAAGxQ,EAASg8C,GACzC,MAAMx/C,EAAOwD,EAAQ3D,MAAM,aACrB6/C,EAAUl8C,EAAQ3D,MAAM,YACxB/G,EAAQonD,GAAkBtjD,EAAM4G,EAAS,IAC1Cg8C,EACHl9C,OAAQ4+C,EACR/qC,MAAO+qC,IAIT,OAFAxB,IACA1/C,IACOlH,CACT,CAMA,SAASqoD,EAAcI,EAAQp3B,GAC7B,OD5EG,SAAuBT,EAAOnvB,EAAU,CAAC,GAC9C,MAAM4vB,GAAS5vB,EAAQ4vB,OAAS,IAAInE,SAC9Bi7B,EAAe1mD,EAAQ0mD,cAAgBV,GAEvCiB,EAAa,GAEbC,EAAa,GAEbC,EAAa,GAEbC,EAAsB,GAC5B,IAAIC,EAAkB,EAClBC,GAAY,EAIhB,OAASA,EAAWn4B,EAAMtwB,QAAQ,CAEhC,MAAM0oD,EAAM,GAENxkB,EAAQ,GACd,IAAIykB,GAAe,EAMnB,IAJIr4B,EAAMm4B,GAAUzoD,OAASwoD,IAC3BA,EAAkBl4B,EAAMm4B,GAAUzoD,UAG3B2oD,EAAcr4B,EAAMm4B,GAAUzoD,QAAQ,CAC7C,MAAMkxB,EA4KHxxB,OADUA,EA3KU4wB,EAAMm4B,GAAUE,IA4KI,GAAK/gD,OAAOlI,GA1KvD,IAAgC,IAA5ByB,EAAQwmD,gBAA2B,CACrC,MAAMnhD,EAAOqhD,EAAa32B,GAC1BgT,EAAMykB,GAAeniD,QAGkBuC,IAArCw/C,EAAoBI,IACpBniD,EAAO+hD,EAAoBI,MAE3BJ,EAAoBI,GAAeniD,EAEvC,CAEAkiD,EAAIpkD,KAAK4sB,EACX,CAEAm3B,EAAWI,GAAYC,EACvBJ,EAAWG,GAAYvkB,CACzB,CAwJF,IAAmBxkC,EArJjB,IAAIipD,GAAe,EAEnB,GAAqB,iBAAV53B,GAAsB,WAAYA,EAC3C,OAAS43B,EAAcH,GACrBJ,EAAWO,GAAevB,GAAYr2B,EAAM43B,QAEzC,CACL,MAAM1iD,EAAOmhD,GAAYr2B,GAEzB,OAAS43B,EAAcH,GACrBJ,EAAWO,GAAe1iD,CAE9B,CAGA0iD,GAAe,EAEf,MAAMD,EAAM,GAENxkB,EAAQ,GAEd,OAASykB,EAAcH,GAAiB,CACtC,MAAMviD,EAAOmiD,EAAWO,GACxB,IAAIz/C,EAAS,GACT6T,EAAQ,GAEC,KAAT9W,GACFiD,EAAS,IACT6T,EAAQ,KACU,MAAT9W,EACTiD,EAAS,IACS,MAATjD,IACT8W,EAAQ,KAIV,IAAIvW,GAC0B,IAA5BrF,EAAQwmD,gBACJ,EACA36B,KAAK5mB,IACH,EACAmiD,EAAoBI,GAAez/C,EAAOlJ,OAAS+c,EAAM/c,QAGjE,MAAMkxB,EAAOhoB,EAAS,IAAIq7C,OAAO/9C,GAAQuW,GAET,IAA5B5b,EAAQwmD,kBACVnhD,EAAO0C,EAAOlJ,OAASwG,EAAOuW,EAAM/c,OAEhCwG,EAAO+hD,EAAoBI,KAC7BJ,EAAoBI,GAAeniD,GAGrC09B,EAAMykB,GAAeniD,GAGvBkiD,EAAIC,GAAez3B,CACrB,CAGAm3B,EAAWvgD,OAAO,EAAG,EAAG4gD,GACxBJ,EAAWxgD,OAAO,EAAG,EAAGo8B,GAExBukB,GAAY,EAEZ,MAAMtlD,EAAQ,GAEd,OAASslD,EAAWJ,EAAWroD,QAAQ,CACrC,MAAM0oD,EAAML,EAAWI,GACjBvkB,EAAQokB,EAAWG,GACzBE,GAAe,EAEf,MAAMplD,EAAO,GAEb,OAASolD,EAAcH,GAAiB,CACtC,MAAMt3B,EAAOw3B,EAAIC,IAAgB,GACjC,IAAIz/C,EAAS,GACT6T,EAAQ,GAEZ,IAAgC,IAA5B5b,EAAQwmD,gBAA2B,CACrC,MAAMnhD,EACJ+hD,EAAoBI,IAAgBzkB,EAAMykB,IAAgB,GACtD1iD,EAAOmiD,EAAWO,GAEX,MAAT1iD,EACFiD,EAAS,IAAIq7C,OAAO/9C,GACF,KAATP,EACLO,EAAO,GACT0C,EAAS,IAAIq7C,OAAO/9C,EAAO,EAAI,IAC/BuW,EAAQ,IAAIwnC,OAAO/9C,EAAO,EAAI,MAE9B0C,EAAS,IAAIq7C,OAAO/9C,EAAO,GAC3BuW,EAAQ7T,GAGV6T,EAAQ,IAAIwnC,OAAO/9C,EAEvB,EAE+B,IAA3BrF,EAAQynD,gBAA6BD,GACvCplD,EAAKe,KAAK,MAIU,IAApBnD,EAAQzD,UAGsB,IAA5ByD,EAAQwmD,iBAAsC,KAATz2B,IACX,IAA3B/vB,EAAQynD,iBAA4BD,GAErCplD,EAAKe,KAAK,MAGoB,IAA5BnD,EAAQwmD,iBACVpkD,EAAKe,KAAK4E,GAGZ3F,EAAKe,KAAK4sB,IAEsB,IAA5B/vB,EAAQwmD,iBACVpkD,EAAKe,KAAKyY,IAGY,IAApB5b,EAAQzD,SACV6F,EAAKe,KAAK,MAIe,IAAzBnD,EAAQ0nD,cACRF,IAAgBH,EAAkB,GAElCjlD,EAAKe,KAAK,IAEd,CAEAnB,EAAMmB,MACqB,IAAzBnD,EAAQ0nD,aACJtlD,EAAK8I,KAAK,IAAIxJ,QAAQ,MAAO,IAC7BU,EAAK8I,KAAK,IAElB,CAEA,OAAOlJ,EAAMkJ,KAAK,KACpB,CCrHWy8C,CAAcX,EAAQ,CAC3Bp3B,QAEA42B,kBAEAjqD,UAEAmqD,gBAEJ,CAgCA,SAASG,EAAqBxkD,EAAM4G,EAASg8C,GAC3C,MAAM1qD,EAAW8H,EAAK9H,SACtB,IAAIiN,GAAS,EAEb,MAAMgE,EAAS,GACT25C,EAAUl8C,EAAQ3D,MAAM,YAE9B,OAASkC,EAAQjN,EAASsE,QAIxB2M,EAAOhE,GAASu/C,EACdxsD,EAASiN,GACTnF,EACA4G,EACAg8C,GAMJ,OAFAE,IAEO35C,CACT,CAeF,CClSO,SAAS8a,GAASjkB,EAAMmqB,EAAQxT,EAAOtL,GAC5C,MAAMk6C,ECVD,SAA6B5uC,GAClC,MAAMrX,EAAQqX,EAAMhZ,QAAQ4nD,gBAAkB,MAI9C,GAAc,IAAVjmD,GAAyB,MAAVA,EACjB,MAAO,MAGT,GAAc,QAAVA,GAA6B,QAAVA,GAA6B,UAAVA,EACxC,MAAM,IAAIoB,MACR,gCACEpB,EACA,qEAIN,OAAOA,CACT,CDRyBkmD,CAAoB7uC,GAC3C,IAAI8uC,EAAS9uC,EAAM+uC,eEXd,SAAqB/uC,GAC1B,MAAM4B,EAAS5B,EAAMhZ,QAAQ8nD,QAAU,IAEvC,GAAe,MAAXltC,GAA6B,MAAXA,GAA6B,MAAXA,EACtC,MAAM,IAAI7X,MACR,gCACE6X,EACA,qDAIN,OAAOA,CACT,CFDsCotC,CAAYhvC,GAG5CwT,GAA0B,SAAhBA,EAAO1oB,MAAmB0oB,EAAOpB,UAC7C08B,GAC2B,iBAAjBt7B,EAAOrqB,OAAsBqqB,EAAOrqB,OAAS,EACjDqqB,EAAOrqB,MACP,KACmC,IAAtC6W,EAAMhZ,QAAQioD,oBACX,EACAz7B,EAAOjyB,SAASoP,QAAQtH,IAC5BylD,GAGJ,IAAIziD,EAAOyiD,EAAOjpD,OAAS,GAGN,QAAnB+oD,GACoB,UAAnBA,IACGp7B,GAA0B,SAAhBA,EAAO1oB,MAAmB0oB,EAAOnB,QAAWhpB,EAAKgpB,WAE/DhmB,EAA6B,EAAtBwmB,KAAKC,KAAKzmB,EAAO,IAG1B,MAAM6/C,EAAUlsC,EAAMssC,cAAc53C,GACpCw3C,EAAQV,KAAKsD,EAAS,IAAI1E,OAAO/9C,EAAOyiD,EAAOjpD,SAC/CqmD,EAAQ51B,MAAMjqB,GACd,MAAMI,EAAOuT,EAAM1T,MAAM,YACnB/G,EAAQya,EAAMosC,YAClBpsC,EAAMysC,cAAcpjD,EAAM6iD,EAAQrnD,YAQpC,SAAauE,EAAMoF,EAAOk+C,GACxB,GAAIl+C,EACF,OAAQk+C,EAAQ,GAAK,IAAItC,OAAO/9C,IAASjD,EAG3C,OAAQsjD,EAAQoC,EAASA,EAAS,IAAI1E,OAAO/9C,EAAOyiD,EAAOjpD,SAAWuD,CACxE,IATA,OAFAqD,IAEOlH,CAUT,CGlCO,MAAM2pD,GAA8B,CACzCziD,KAAM,CACJ0iD,0BAA2BC,GAC3BC,4BAA6BD,GAC7BrqC,UA4BJ,SAAuCtL,GACrC,MAAM+Z,EAAiChqB,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAEtE,GACE2tB,GACgB,aAAhBA,EAAO1oB,MACmB,kBAAnB0oB,EAAOlB,QACd,CACA,MAAMjpB,EAAiCG,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAChE6J,EAAOrG,EAAK9H,SAAS,GAE3B,GAAImO,GAAsB,SAAdA,EAAK5E,KAAiB,CAChC,MAAM6rB,EAAWnD,EAAOjyB,SACxB,IAEI+tD,EAFA9gD,GAAS,EAIb,OAASA,EAAQmoB,EAAS9wB,QAAQ,CAChC,MAAM0pD,EAAU54B,EAASnoB,GACzB,GAAqB,cAAjB+gD,EAAQzkD,KAAsB,CAChCwkD,EAAkBC,EAClB,KACF,CACF,CAEID,IAAoBjmD,IAEtBqG,EAAKnK,MAAQmK,EAAKnK,MAAMgF,MAAM,GAEJ,IAAtBmF,EAAKnK,MAAMM,OACbwD,EAAK9H,SAAS+0B,QAEdjtB,EAAK7I,UACLkP,EAAKlP,UACiC,iBAA/BkP,EAAKlP,SAAS2I,MAAMmS,SAE3B5L,EAAKlP,SAAS2I,MAAML,SACpB4G,EAAKlP,SAAS2I,MAAMmS,SACpBjS,EAAK7I,SAAS2I,MAAQrE,OAAO0S,OAAO,CAAC,EAAG9H,EAAKlP,SAAS2I,QAG5D,CACF,CAEAK,KAAKiD,KAAKgN,EACZ,IAhEa+1C,GAA4B,CACvC/F,OAAQ,CAAC,CAAClrC,SAAS,EAAM0pC,UAAW,IAAKrlC,MAAO,UAChDuS,SAAU,CAAC7H,SAoEb,SAAkCjkB,EAAMmqB,EAAQvjB,EAASg8C,GACvD,MAAMv8C,EAAOrG,EAAK9H,SAAS,GACrBkuD,EACoB,kBAAjBpmD,EAAKipB,SAAyB5iB,GAAsB,cAAdA,EAAK5E,KAC9C4kD,EAAW,KAAOrmD,EAAKipB,QAAU,IAAM,KAAO,KAC9C45B,EAAUZ,GAAMW,GAElBwD,GACFvD,EAAQV,KAAKkE,GAGf,IAAInqD,EAAQ+nB,GAASjkB,EAAMmqB,EAAQvjB,EAAS,IACvCg8C,KACAC,EAAQrnD,YAGT4qD,IACFlqD,EAAQA,EAAMmD,QAAQ,mCASxB,SAAe6G,GACb,OAAOA,EAAKmgD,CACd,KARA,OAAOnqD,CAST,IA1FA,SAAS6pD,GAAU31C,GACqBjQ,KAAKqH,MAAMrH,KAAKqH,MAAMhL,OAAS,GAEhEysB,QAAyB,8BAAf7Y,EAAM3O,IACvB,CC3Ce,SAAS6kD,GAAU3oD,EAAU,CAAC,GAC3C,MAAMiN,EAAOzK,KAAKyK,OAUlB,SAASjF,EAAIoP,EAAO7Y,IAIhB0O,EAAKmK,GAASnK,EAAKmK,GAAUnK,EAAKmK,GAAS,IAGxCjU,KAAK5E,EACZ,CAhBAyJ,EAAI,sBCiBC,SAAahI,GAClB,OAAO,OAAkB,CACvBw9C,E1BTK,CACLp/C,SAAU,CACR,GAAM,CACJqG,SAAU05C,EACVjrC,aAAc,CACZzO,SAAU25C,GAEZ34C,KAAM44C,IAGVhnC,KAAM,CACJ,GAAM,CACJ5S,SAAUs5C,GAEZ,GAAM,CACJ/1C,IAAK,QACLvD,SAAUk5C,EACVjjC,UAAWmjC,K0BNfS,EAAiBt+C,GACjB0+C,EACAqC,GAEJ,CDzB6B6H,CAAI5oD,IAC/BgI,EAAI,yBEoBG,CACLg6C,EZPK,CACL18C,MAAO,CACLujD,sBAAuBpE,GACvBqE,iCAAkCpE,GAClCqE,gBAAiBlE,GACjBmE,sBAAuBlE,IAEzBr/C,KAAM,CACJojD,sBAAuBjE,GACvBkE,iCAAkCnE,GAClCoE,gBAAiB/D,GACjBgE,sBAAuBjE,KYFzBe,GACAI,GACAgC,KFxBFlgD,EAAI,uBEsCC,SAAuBhI,GAC5B,MAAO,CACLsH,WAAY,CACVk7C,EZJG,CAELC,OAAQ,CAAC,CAACxB,UAAW,IAAKa,YAAa,CAAC,WAAY,QAAS,eAC7D3zB,SAAU,CAACiC,sBAAoBxD,uBYG7Bm5B,GACAO,GAAmBtmD,GACnBwoD,IAGN,CFhD8BS,CAAcjpD,GAe5C,mBGjCA,IAAI4Q,EAAQ,EAAQ,OAapB,SAASs4C,EAAcvnD,EAAOsM,GAC5B,IAKIlK,EALA4K,EAAS,KACb,IAAKhN,GAA0B,iBAAVA,EACnB,OAAOgN,EAST,IALA,IAEIxK,EACA5F,EAHA+F,EAAesM,EAAMjP,GACrBwnD,EAAkC,mBAAbl7C,EAIhBpN,EAAI,EAAGuoD,EAAM9kD,EAAazF,OAAQgC,EAAIuoD,EAAKvoD,IAElDsD,GADAJ,EAAcO,EAAazD,IACJsD,SACvB5F,EAAQwF,EAAYxF,MAEhB4qD,EACFl7C,EAAS9J,EAAU5F,EAAOwF,GACjBxF,IACToQ,IAAWA,EAAS,CAAC,GACrBA,EAAOxK,GAAY5F,GAIvB,OAAOoQ,CACT,CAEArO,EAAOhJ,QAAU4xD,EACjB5oD,EAAOhJ,QAAP,QAAyB4xD,gDCkDlB,MAyEMG,EAOX,SAKY7iD,GACR,GAAIA,QACF,OAAO7B,EAGT,GAAoB,iBAAT6B,EACT,OA8ER,SAAqBwN,GACnB,OAAOs1C,EAAYxlD,GAKnB,SAASA,EAAKzB,GACZ,OAAOA,GAAQA,EAAKyB,OAASkQ,CAC/B,CACF,CAvFeu1C,CAAY/iD,GAGrB,GAAoB,iBAATA,EACT,OAAOvI,MAAMC,QAAQsI,GAe7B,SAAoBgjD,GAElB,MAAMn2B,EAAS,GACf,IAAI7rB,GAAS,EAEb,OAASA,EAAQgiD,EAAM3qD,QACrBw0B,EAAO7rB,GAAS6hD,EAAQG,EAAMhiD,IAGhC,OAAO8hD,EAAYG,GAOnB,SAASA,KAAO1iD,GACd,IAAIS,GAAS,EAEb,OAASA,EAAQ6rB,EAAOx0B,QACtB,GAAIw0B,EAAO7rB,GAAOjI,KAAKiD,QAASuE,GAAa,OAAO,EAGtD,OAAO,CACT,CACF,CAxCqC2iD,CAAWljD,GAgDhD,SAAsBwN,GACpB,OAAOs1C,EAAY/hD,GAMnB,SAASA,EAAIlF,GAEX,IAAI3C,EAEJ,IAAKA,KAAOsU,EAEV,GAAI3R,EAAK3C,KAASsU,EAAMtU,GAAM,OAAO,EAGvC,OAAO,CACT,CACF,CAlEwDiqD,CAAanjD,GAG/D,GAAoB,mBAATA,EACT,OAAO8iD,EAAY9iD,GAGrB,MAAM,IAAIzD,MAAM,+CAEpB,EAkFF,SAASumD,EAAYt1C,GACnB,OAQA,SAAmB3R,KAAS0E,GAC1B,OAAO+K,QACLzP,GACkB,iBAATA,GACP,SAAUA,GAEVyP,QAAQkC,EAAMzU,KAAKiD,KAAMH,KAAS0E,IAExC,CACF,CAEA,SAASpC,IACP,OAAO,CACT,gEC5NO,MAyCMilD,EAOX,SAQYt4C,EAAM9K,EAAM6lB,EAASC,GACT,mBAAT9lB,GAA0C,mBAAZ6lB,IACvCC,EAAUD,EAEVA,EAAU7lB,EACVA,EAAO,MAGT,MAAM00B,GAAK,OAAQ10B,GACb68B,EAAO/W,GAAW,EAAI,GAS5B,SAASu9B,EAAQxnD,EAAMmF,EAAO+kB,GAG5B,MAAMhuB,EAAQ8D,GAAwB,iBAATA,EAAoBA,EAAO,CAAC,EAEzD,GAA0B,iBAAf9D,EAAMuF,KAAmB,CAClC,MAAMzL,EAEqB,iBAAlBkG,EAAMmgB,QACTngB,EAAMmgB,QAEc,iBAAfngB,EAAMlG,KACXkG,EAAMlG,UACNuP,EAEN9J,OAAOqB,eAAeitB,EAAO,OAAQ,CACnC7tB,MACE,SAAiB8D,EAAKyB,MAAQzL,EAAO,IAAMA,EAAO,IAAM,IAAO,KAErE,CAEA,OAAO+zB,EAEP,SAASA,IAEP,IAEI09B,EAEAx1C,EAEAy1C,EANAv+C,EAAS,GAQb,KAAKhF,GAAQ00B,EAAG74B,EAAMmF,EAAO+kB,EAAQA,EAAQ1tB,OAAS,IAAM,SAC1D2M,EA0CZ,SAAkBjN,GAChB,GAAIN,MAAMC,QAAQK,GAChB,OAAOA,EAGT,GAAqB,iBAAVA,EACT,MAAO,CA5Ja,KA4JFA,GAGpB,MAAO,CAACA,EACV,CApDqByrD,CAAS39B,EAAQhqB,EAAMkqB,IAvGxB,QAyGJ/gB,EAAO,IACT,OAAOA,EAKX,GAAInJ,EAAK9H,UA1GC,SA0GWiR,EAAO,GAO1B,IALA8I,GAAUgY,EAAUjqB,EAAK9H,SAASsE,QAAU,GAAKwkC,EAEjD0mB,EAAex9B,EAAQd,OAAOppB,GAGvBiS,GAAU,GAAKA,EAASjS,EAAK9H,SAASsE,QAAQ,CAInD,GAFAirD,EAAYD,EAAQxnD,EAAK9H,SAAS+Z,GAASA,EAAQy1C,EAAvCF,GAxHN,QA0HFC,EAAU,GACZ,OAAOA,EAGTx1C,EAC0B,iBAAjBw1C,EAAU,GAAkBA,EAAU,GAAKx1C,EAAS+uB,CAC/D,CAGF,OAAO73B,CACT,CACF,CAvEAq+C,CAAQv4C,OAAM1J,EAAW,GAAzBiiD,EAyEJ","sources":["webpack:///../../node_modules/@mui/icons-material/Description.js","webpack:///../../node_modules/@mui/icons-material/esm/AccessTimeFilled.js","webpack:///../../node_modules/@mui/icons-material/esm/BusinessCenter.js","webpack:///../../node_modules/@mui/icons-material/esm/Description.js","webpack:///../../node_modules/@mui/icons-material/esm/GitHub.js","webpack:///../../node_modules/@mui/icons-material/esm/Handshake.js","webpack:///../../node_modules/@mui/icons-material/esm/Twitter.js","webpack:///../../node_modules/@mui/material/CardActionArea/cardActionAreaClasses.js","webpack:///../../node_modules/@mui/material/CardActionArea/CardActionArea.js","webpack:///../../node_modules/@mui/material/Link/linkClasses.js","webpack:///../../node_modules/@mui/material/Link/getTextDecoration.js","webpack:///../../node_modules/@mui/material/Link/Link.js","webpack:///../../node_modules/decode-named-character-reference/index.dom.js","webpack:///../../node_modules/extend/index.js","webpack:///../../node_modules/inline-style-parser/index.js","webpack:///../../node_modules/is-buffer/index.js","webpack:///../../node_modules/micromark-core-commonmark/lib/blank-line.js","webpack:///../../node_modules/micromark-factory-space/index.js","webpack:///../../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","webpack:///../../node_modules/micromark-util-character/index.js","webpack:///../../node_modules/micromark-util-chunked/index.js","webpack:///../../node_modules/micromark-util-classify-character/index.js","webpack:///../../node_modules/micromark-util-combine-extensions/index.js","webpack:///../../node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack:///../../node_modules/micromark-util-decode-string/index.js","webpack:///../../node_modules/micromark-util-normalize-identifier/index.js","webpack:///../../node_modules/micromark-util-resolve-all/index.js","webpack:///../../node_modules/unist-util-stringify-position/lib/index.js","webpack:///../../node_modules/vfile-message/lib/index.js","webpack:///../../node_modules/vfile/lib/minpath.browser.js","webpack:///../../node_modules/vfile/lib/minproc.browser.js","webpack:///../../node_modules/vfile/lib/minurl.shared.js","webpack:///../../node_modules/vfile/lib/minurl.browser.js","webpack:///../../node_modules/vfile/lib/index.js","webpack:///../../node_modules/bail/index.js","webpack:///../../node_modules/unified/node_modules/is-plain-obj/index.js","webpack:///../../node_modules/trough/index.js","webpack:///../../node_modules/unified/lib/index.js","webpack:///../../node_modules/mdast-util-to-string/lib/index.js","webpack:///../../node_modules/micromark/lib/initialize/content.js","webpack:///../../node_modules/micromark/lib/initialize/document.js","webpack:///../../node_modules/micromark-util-subtokenize/index.js","webpack:///../../node_modules/micromark-core-commonmark/lib/content.js","webpack:///../../node_modules/micromark/lib/initialize/flow.js","webpack:///../../node_modules/micromark/lib/initialize/text.js","webpack:///../../node_modules/micromark/lib/create-tokenizer.js","webpack:///../../node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack:///../../node_modules/micromark-core-commonmark/lib/list.js","webpack:///../../node_modules/micromark-core-commonmark/lib/block-quote.js","webpack:///../../node_modules/micromark-factory-destination/index.js","webpack:///../../node_modules/micromark-factory-label/index.js","webpack:///../../node_modules/micromark-factory-title/index.js","webpack:///../../node_modules/micromark-factory-whitespace/index.js","webpack:///../../node_modules/micromark-core-commonmark/lib/definition.js","webpack:///../../node_modules/micromark-core-commonmark/lib/code-indented.js","webpack:///../../node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack:///../../node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack:///../../node_modules/micromark-util-html-tag-name/index.js","webpack:///../../node_modules/micromark-core-commonmark/lib/html-flow.js","webpack:///../../node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack:///../../node_modules/micromark-core-commonmark/lib/character-reference.js","webpack:///../../node_modules/micromark-core-commonmark/lib/character-escape.js","webpack:///../../node_modules/micromark-core-commonmark/lib/line-ending.js","webpack:///../../node_modules/micromark-core-commonmark/lib/label-end.js","webpack:///../../node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack:///../../node_modules/micromark-core-commonmark/lib/attention.js","webpack:///../../node_modules/micromark-core-commonmark/lib/autolink.js","webpack:///../../node_modules/micromark-core-commonmark/lib/html-text.js","webpack:///../../node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack:///../../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack:///../../node_modules/micromark-core-commonmark/lib/code-text.js","webpack:///../../node_modules/micromark/lib/constructs.js","webpack:///../../node_modules/micromark/lib/preprocess.js","webpack:///../../node_modules/mdast-util-from-markdown/lib/index.js","webpack:///../../node_modules/micromark/lib/postprocess.js","webpack:///../../node_modules/micromark/lib/parse.js","webpack:///../../node_modules/remark-parse/index.js","webpack:///../../node_modules/remark-parse/lib/index.js","webpack:///../../node_modules/micromark-util-sanitize-uri/index.js","webpack:///../../node_modules/unist-util-visit/lib/index.js","webpack:///../../node_modules/unist-util-position/lib/index.js","webpack:///../../node_modules/mdast-util-definitions/lib/index.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack:///../../node_modules/mdast-util-to-hast/lib/revert.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack:///../../node_modules/trim-lines/index.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack:///../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack:///../../node_modules/mdast-util-to-hast/lib/state.js","webpack:///../../node_modules/unist-util-generated/lib/index.js","webpack:///../../node_modules/mdast-util-to-hast/lib/index.js","webpack:///../../node_modules/mdast-util-to-hast/lib/footer.js","webpack:///../../node_modules/remark-rehype/lib/index.js","webpack:///../../node_modules/property-information/lib/util/schema.js","webpack:///../../node_modules/property-information/lib/util/merge.js","webpack:///../../node_modules/property-information/lib/normalize.js","webpack:///../../node_modules/property-information/lib/util/info.js","webpack:///../../node_modules/property-information/lib/util/types.js","webpack:///../../node_modules/property-information/lib/util/defined-info.js","webpack:///../../node_modules/property-information/lib/util/create.js","webpack:///../../node_modules/property-information/lib/xlink.js","webpack:///../../node_modules/property-information/lib/xml.js","webpack:///../../node_modules/property-information/lib/util/case-sensitive-transform.js","webpack:///../../node_modules/property-information/lib/util/case-insensitive-transform.js","webpack:///../../node_modules/property-information/lib/xmlns.js","webpack:///../../node_modules/property-information/lib/aria.js","webpack:///../../node_modules/property-information/lib/html.js","webpack:///../../node_modules/property-information/lib/svg.js","webpack:///../../node_modules/property-information/index.js","webpack:///../../node_modules/react-markdown/lib/rehype-filter.js","webpack:///../../node_modules/hast-util-whitespace/index.js","webpack:///../../node_modules/property-information/lib/find.js","webpack:///../../node_modules/property-information/lib/hast-to-react.js","webpack:///../../node_modules/style-to-object/index.mjs","webpack:///../../node_modules/react-markdown/lib/uri-transformer.js","webpack:///../../node_modules/react-markdown/lib/ast-to-react.js","webpack:///../../node_modules/comma-separated-tokens/index.js","webpack:///../../node_modules/space-separated-tokens/index.js","webpack:///../../node_modules/react-markdown/lib/react-markdown.js","webpack:///../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack:///../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack:///../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack:///../../node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack:///../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack:///../../node_modules/ccount/index.js","webpack:///../../node_modules/mdast-util-find-and-replace/lib/index.js","webpack:///../../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack:///../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack:///../../node_modules/mdast-util-to-markdown/lib/util/association.js","webpack:///../../node_modules/mdast-util-to-markdown/lib/util/container-flow.js","webpack:///../../node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","webpack:///../../node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js","webpack:///../../node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack:///../../node_modules/mdast-util-to-markdown/lib/util/safe.js","webpack:///../../node_modules/mdast-util-to-markdown/lib/util/track.js","webpack:///../../node_modules/mdast-util-gfm-footnote/lib/index.js","webpack:///../../node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","webpack:///../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack:///../../node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack:///../../node_modules/markdown-table/index.js","webpack:///../../node_modules/mdast-util-gfm-table/lib/index.js","webpack:///../../node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack:///../../node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack:///../../node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack:///../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack:///../../node_modules/remark-gfm/index.js","webpack:///../../node_modules/micromark-extension-gfm/index.js","webpack:///../../node_modules/mdast-util-gfm/lib/index.js","webpack:///../../node_modules/style-to-object/index.js","webpack:///../../node_modules/unist-util-is/lib/index.js","webpack:///../../node_modules/unist-util-visit-parents/lib/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z\"\n}), 'Description');\nexports.default = _default;","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm3.3 14.71L11 12.41V7h2v4.59l3.71 3.71-1.42 1.41z\"\n}), 'AccessTimeFilled');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M10 16v-1H3.01L3 19c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2v-4h-7v1h-4zm10-9h-4.01V5l-2-2h-4l-2 2v2H4c-1.1 0-2 .9-2 2v3c0 1.11.89 2 2 2h6v-2h4v2h6c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zm-6 0h-4V5h4v2z\"\n}), 'BusinessCenter');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z\"\n}), 'Description');","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 1.27a11 11 0 00-3.48 21.46c.55.09.73-.28.73-.55v-1.84c-3.03.64-3.67-1.46-3.67-1.46-.55-1.29-1.28-1.65-1.28-1.65-.92-.65.1-.65.1-.65 1.1 0 1.73 1.1 1.73 1.1.92 1.65 2.57 1.2 3.21.92a2 2 0 01.64-1.47c-2.47-.27-5.04-1.19-5.04-5.5 0-1.1.46-2.1 1.2-2.84a3.76 3.76 0 010-2.93s.91-.28 3.11 1.1c1.8-.49 3.7-.49 5.5 0 2.1-1.38 3.02-1.1 3.02-1.1a3.76 3.76 0 010 2.93c.83.74 1.2 1.74 1.2 2.94 0 4.21-2.57 5.13-5.04 5.4.45.37.82.92.82 2.02v3.03c0 .27.1.64.73.55A11 11 0 0012 1.27\"\n}), 'GitHub');","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M16.48 10.41c-.39.39-1.04.39-1.43 0l-4.47-4.46-7.05 7.04-.66-.63c-1.17-1.17-1.17-3.07 0-4.24l4.24-4.24c1.17-1.17 3.07-1.17 4.24 0L16.48 9c.39.39.39 1.02 0 1.41zm.7-2.12c.78.78.78 2.05 0 2.83-1.27 1.27-2.61.22-2.83 0l-3.76-3.76-5.57 5.57c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.42 0l4.62-4.62.71.71-4.62 4.62c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.42 0l4.62-4.62.71.71-4.62 4.62c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0l4.62-4.62.71.71-4.62 4.62c-.39.39-.39 1.02 0 1.41.39.39 1.02.39 1.41 0l8.32-8.34c1.17-1.17 1.17-3.07 0-4.24l-4.24-4.24c-1.15-1.15-3.01-1.17-4.18-.06l4.47 4.47z\"\n}), 'Handshake');","import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M22.46 6c-.77.35-1.6.58-2.46.69.88-.53 1.56-1.37 1.88-2.38-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29 0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15 0 1.49.75 2.81 1.91 3.56-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07 4.28 4.28 0 0 0 4 2.98 8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21 16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56.84-.6 1.56-1.36 2.14-2.23z\"\n}), 'Twitter');","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getCardActionAreaUtilityClass(slot) {\n  return generateUtilityClass('MuiCardActionArea', slot);\n}\nconst cardActionAreaClasses = generateUtilityClasses('MuiCardActionArea', ['root', 'focusVisible', 'focusHighlight']);\nexport default cardActionAreaClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"children\", \"className\", \"focusVisibleClassName\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport cardActionAreaClasses, { getCardActionAreaUtilityClass } from './cardActionAreaClasses';\nimport ButtonBase from '../ButtonBase';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    focusHighlight: ['focusHighlight']\n  };\n  return composeClasses(slots, getCardActionAreaUtilityClass, classes);\n};\nconst CardActionAreaRoot = styled(ButtonBase, {\n  name: 'MuiCardActionArea',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(({\n  theme\n}) => ({\n  display: 'block',\n  textAlign: 'inherit',\n  width: '100%',\n  [`&:hover .${cardActionAreaClasses.focusHighlight}`]: {\n    opacity: (theme.vars || theme).palette.action.hoverOpacity,\n    '@media (hover: none)': {\n      opacity: 0\n    }\n  },\n  [`&.${cardActionAreaClasses.focusVisible} .${cardActionAreaClasses.focusHighlight}`]: {\n    opacity: (theme.vars || theme).palette.action.focusOpacity\n  }\n}));\nconst CardActionAreaFocusHighlight = styled('span', {\n  name: 'MuiCardActionArea',\n  slot: 'FocusHighlight',\n  overridesResolver: (props, styles) => styles.focusHighlight\n})(({\n  theme\n}) => ({\n  overflow: 'hidden',\n  pointerEvents: 'none',\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n  borderRadius: 'inherit',\n  opacity: 0,\n  backgroundColor: 'currentcolor',\n  transition: theme.transitions.create('opacity', {\n    duration: theme.transitions.duration.short\n  })\n}));\nconst CardActionArea = /*#__PURE__*/React.forwardRef(function CardActionArea(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardActionArea'\n  });\n  const {\n      children,\n      className,\n      focusVisibleClassName\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(CardActionAreaRoot, _extends({\n    className: clsx(classes.root, className),\n    focusVisibleClassName: clsx(focusVisibleClassName, classes.focusVisible),\n    ref: ref,\n    ownerState: ownerState\n  }, other, {\n    children: [children, /*#__PURE__*/_jsx(CardActionAreaFocusHighlight, {\n      className: classes.focusHighlight,\n      ownerState: ownerState\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActionArea.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * @ignore\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardActionArea;","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getLinkUtilityClass(slot) {\n  return generateUtilityClass('MuiLink', slot);\n}\nconst linkClasses = generateUtilityClasses('MuiLink', ['root', 'underlineNone', 'underlineHover', 'underlineAlways', 'button', 'focusVisible']);\nexport default linkClasses;","import { alpha, getPath } from '@mui/system';\nexport const colorTransformations = {\n  primary: 'primary.main',\n  textPrimary: 'text.primary',\n  secondary: 'secondary.main',\n  textSecondary: 'text.secondary',\n  error: 'error.main'\n};\nconst transformDeprecatedColors = color => {\n  return colorTransformations[color] || color;\n};\nconst getTextDecoration = ({\n  theme,\n  ownerState\n}) => {\n  const transformedColor = transformDeprecatedColors(ownerState.color);\n  const color = getPath(theme, `palette.${transformedColor}`, false) || ownerState.color;\n  const channelColor = getPath(theme, `palette.${transformedColor}Channel`);\n  if ('vars' in theme && channelColor) {\n    return `rgba(${channelColor} / 0.4)`;\n  }\n  return alpha(color, 0.4);\n};\nexport default getTextDecoration;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\", \"sx\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport capitalize from '../utils/capitalize';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nimport linkClasses, { getLinkUtilityClass } from './linkClasses';\nimport getTextDecoration, { colorTransformations } from './getTextDecoration';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    component,\n    focusVisible,\n    underline\n  } = ownerState;\n  const slots = {\n    root: ['root', `underline${capitalize(underline)}`, component === 'button' && 'button', focusVisible && 'focusVisible']\n  };\n  return composeClasses(slots, getLinkUtilityClass, classes);\n};\nconst LinkRoot = styled(Typography, {\n  name: 'MuiLink',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`underline${capitalize(ownerState.underline)}`], ownerState.component === 'button' && styles.button];\n  }\n})(({\n  theme,\n  ownerState\n}) => {\n  return _extends({}, ownerState.underline === 'none' && {\n    textDecoration: 'none'\n  }, ownerState.underline === 'hover' && {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  }, ownerState.underline === 'always' && _extends({\n    textDecoration: 'underline'\n  }, ownerState.color !== 'inherit' && {\n    textDecorationColor: getTextDecoration({\n      theme,\n      ownerState\n    })\n  }, {\n    '&:hover': {\n      textDecorationColor: 'inherit'\n    }\n  }), ownerState.component === 'button' && {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    MozAppearance: 'none',\n    // Reset\n    WebkitAppearance: 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n    },\n\n    [`&.${linkClasses.focusVisible}`]: {\n      outline: 'auto'\n    }\n  });\n});\nconst Link = /*#__PURE__*/React.forwardRef(function Link(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiLink'\n  });\n  const {\n      className,\n      color = 'primary',\n      component = 'a',\n      onBlur,\n      onFocus,\n      TypographyClasses,\n      underline = 'always',\n      variant = 'inherit',\n      sx\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    isFocusVisibleRef,\n    onBlur: handleBlurVisible,\n    onFocus: handleFocusVisible,\n    ref: focusVisibleRef\n  } = useIsFocusVisible();\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const handlerRef = useForkRef(ref, focusVisibleRef);\n  const handleBlur = event => {\n    handleBlurVisible(event);\n    if (isFocusVisibleRef.current === false) {\n      setFocusVisible(false);\n    }\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n  const handleFocus = event => {\n    handleFocusVisible(event);\n    if (isFocusVisibleRef.current === true) {\n      setFocusVisible(true);\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n  const ownerState = _extends({}, props, {\n    color,\n    component,\n    focusVisible,\n    underline,\n    variant\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(LinkRoot, _extends({\n    color: color,\n    className: clsx(classes.root, className),\n    classes: TypographyClasses,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    ownerState: ownerState,\n    variant: variant,\n    sx: [...(!Object.keys(colorTransformations).includes(color) ? [{\n      color\n    }] : []), ...(Array.isArray(sx) ? sx : [sx])]\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the link.\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.any,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * `classes` prop applied to the [`Typography`](/material-ui/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n  /**\n   * Controls when the link should have an underline.\n   * @default 'always'\n   */\n  underline: PropTypes.oneOf(['always', 'hover', 'none']),\n  /**\n   * Applies the theme typography styles.\n   * @default 'inherit'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string])\n} : void 0;\nexport default Link;","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return factorySpace(effects, afterWhitespace, 'linePrefix')\n  /** @type {State} */\n\n  function afterWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownSpace} from 'micromark-util-character'\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {string} type\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\nexport const unicodePunctuationRegex =\n  /[!-/:-@[-`{-~\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n */\n\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n */\n\nexport const asciiDigit = regexCheck(/\\d/)\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n */\n\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n */\n\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n */\n\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n */\n\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n * @returns {code is number}\n */\n\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n\nexport const unicodeWhitespace = regexCheck(/\\s/)\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n */\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => code is number}\n */\n\nfunction regexCheck(regex) {\n  return check\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code Character code\n   * @returns {code is number} Whether the character code matches the bound regex\n   */\n\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {number} start\n * @param {number} remove\n * @param {T[]} items\n * @returns {void}\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {unknown[]} */\n\n  let parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there’s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.\n    ;[].splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) [].splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.\n      ;[].splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n * @param {T[]} list\n * @param {T[]} items\n * @returns {T[]}\n */\n\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n\n/**\n * Classify whether a character code represents whitespace, punctuation, or\n * something else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * Note that eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n * @returns {number|undefined}\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine several syntax extensions into one.\n *\n * @param {Extension[]} extensions List of syntax extensions.\n * @returns {NormalizedExtension} A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all Extension to merge into.\n * @param {Extension} extension Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    for (code in right) {\n      if (!hasOwnProperty.call(left, code)) left[code] = []\n      const value = right[code]\n      constructs(\n        // @ts-expect-error Looks like a list.\n        left[code],\n        Array.isArray(value) ? value : value ? [value] : []\n      )\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {unknown[]} existing\n * @param {unknown[]} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {unknown[]} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine several HTML extensions into one.\n *\n * @param {HtmlExtension[]} htmlExtensions List of HTML extensions.\n * @returns {HtmlExtension} A single combined extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all Extension to merge into.\n * @param {HtmlExtension} extension Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {string} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {string} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.\n    (code > 126 && code < 160) || // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) || // Noncharacters.\n    (code > 64975 && code < 65008) ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 || // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n/**\n * Utility to decode markdown strings (which occur in places such as fenced\n * code info strings, destinations, labels, and titles).\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\n\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  } // Reference.\n\n  const head = $2.charCodeAt(0)\n\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * Normalize an identifier (such as used in definitions).\n *\n * @param {string} value\n * @returns {string}\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value // Collapse Markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ') // Trim.\n      .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {{resolveAll?: Resolver}[]} constructs\n * @param {Event[]} events\n * @param {TokenizeContext} context\n * @returns {Event[]}\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Resolver[]} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n */\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const includeImageAlt = (options || {}).includeImageAlt\n  return one(\n    value,\n    typeof includeImageAlt === 'boolean' ? includeImageAlt : true\n  )\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt) {\n  return (\n    (node(value) &&\n      (('value' in value && value.value) ||\n        (includeImageAlt && 'alt' in value && value.alt) ||\n        ('children' in value && all(value.children, includeImageAlt)))) ||\n    (Array.isArray(value) && all(value, includeImageAlt)) ||\n    ''\n  )\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n/** @type {Initializer} */\n\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n\n  let previous\n  return contentStart\n  /** @type {State} */\n\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n  /** @type {State} */\n\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Point} Point\n */\n\n/**\n * @typedef {Record<string, unknown>} StackState\n * @typedef {[Construct, StackState]} StackItem\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\n\nexport const document = {\n  tokenize: initializeDocument\n}\n/** @type {Construct} */\n\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n/** @type {Initializer} */\n\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext|undefined} */\n\n  let childFlow\n  /** @type {Token|undefined} */\n\n  let childToken\n  /** @type {number} */\n\n  let lineStartOffset\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    } // Done.\n\n    return checkNewContainers(code)\n  }\n  /** @type {State} */\n\n  function documentContinue(code) {\n    continued++ // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point|undefined} */\n\n      let point // Find the flow chunk.\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n  /** @type {State} */\n\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      } // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      } // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    } // Check if there is a new container.\n\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n  /** @type {State} */\n\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n  /** @type {State} */\n\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n  /** @type {State} */\n\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState]) // Try another.\n\n    return documentContinued(code)\n  }\n  /** @type {State} */\n\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n  /** @type {State} */\n\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow')) // Get ready for the next line.\n\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n  /**\n   * @param {Token} token\n   * @param {boolean} [eof]\n   * @returns {void}\n   */\n\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream) // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…\n          (!childFlow.events[index][1].end || // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      } // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean|undefined} */\n\n      let seen\n      /** @type {Point|undefined} */\n\n      let point // Find the previous chunk (the one before the lazy line).\n\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      exitContainers(continued) // Fix positions.\n\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      } // Inject the exits earlier (they’re still also at the end).\n\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      ) // Discard the duplicate exits.\n\n      self.events.length = index\n    }\n  }\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n\n  function exitContainers(size) {\n    let index = stack.length // Exit open containers.\n\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContainer(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {splice} from 'micromark-util-chunked'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Event[]} events\n * @returns {boolean}\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n\n  let event\n  /** @type {number|undefined} */\n\n  let lineIndex\n  /** @type {number} */\n\n  let otherIndex\n  /** @type {Event} */\n\n  let otherEvent\n  /** @type {Event[]} */\n\n  let parameters\n  /** @type {Event[]} */\n\n  let subevents\n  /** @type {boolean|undefined} */\n\n  let more\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events[index] // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    } // Enter.\n\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    } // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start) // Switch container exit w/ line endings.\n\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  return !more\n}\n/**\n * Tokenize embedded tokens.\n *\n * @param {Event[]} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\n\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {number[]} */\n\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {[number, number][]} */\n\n  const jumps = []\n  /** @type {Record<string, number>} */\n\n  const gaps = {}\n  /** @type {Chunk[]} */\n\n  let stream\n  /** @type {Token|undefined} */\n\n  let previous\n  let index = -1\n  /** @type {Token|undefined} */\n\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start] // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(null)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    } // Unravel the next token.\n\n    previous = current\n    current = current.next\n  } // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start) // Help GC.\n\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  } // Help GC.\n\n  tokenizer.events = [] // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  } // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n/** @type {Construct} */\n\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\n\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token} */\n  let previous\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return data(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    } // Data.\n\n    effects.consume(code)\n    return data\n  }\n  /** @type {State} */\n\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return data\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n  /** @type {State} */\n\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n  /** @type {State} */\n\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n/** @type {Initializer} */\n\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding, // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n  /** @type {State} */\n\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n  /** @type {State} */\n\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n/**\n * @param {'string'|'text'} field\n * @returns {InitialConstruct}\n */\n\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n  /** @type {Initializer} */\n\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n    /** @type {State} */\n\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n    /** @type {State} */\n\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      } // Data.\n\n      effects.consume(code)\n      return data\n    }\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        while (++index < list.length) {\n          const item = list[index]\n\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n/**\n * @param {Resolver} [extraResolver]\n * @returns {Resolver}\n */\n\nfunction createResolver(extraResolver) {\n  return resolveAllText\n  /** @type {Resolver} */\n\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number|undefined} */\n\n    let enter // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\n\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean|undefined} */\n\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        } // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n */\n\n/**\n * @typedef Info\n * @property {() => void} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n\n  let chunks = []\n  /** @type {Array<Token>} */\n\n  let stack = []\n  /** @type {boolean|undefined} */\n\n  let consumed = true\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n  /**\n   * The state function.\n   *\n   * @type {State|void}\n   */\n\n  let state = initialize.tokenize.call(context, effects)\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n  /** @type {TokenizeContext['write']} */\n\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main() // Exit if we’re not done, resolve might change stuff.\n\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n\n    addResult(initialize, 0) // Otherwise, resolve, and exit.\n\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  } //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n  /** @type {TokenizeContext['sliceStream']} */\n\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n  /** @type {TokenizeContext['now']} */\n\n  function now() {\n    return Object.assign({}, point)\n  }\n  /** @type {TokenizeContext['defineSkip']} */\n\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  } //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index] // If we’re in a buffer chunk, loop through it.\n\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n  /** @type {Effects['consume']} */\n\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    } // Not in a string chunk.\n\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++ // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    } // Expose the previous character.\n\n    context.previous = code // Mark as consumed.\n\n    consumed = true\n  }\n  /** @type {Effects['enter']} */\n\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n  /** @type {Effects['exit']} */\n\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {Record<string, unknown>} [fields]\n   */\n\n  function constructFactory(onreturn, fields) {\n    return hook\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Construct|Array<Construct>|ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State} [bogusState]\n     * @returns {State}\n     */\n\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n\n      let constructIndex\n      /** @type {Construct} */\n\n      let currentConstruct\n      /** @type {Info} */\n\n      let info\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs // @ts-expect-error Looks like a construct.\n        ? handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n\n      function handleMapOfConstructs(map) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n\n      function handleConstruct(construct) {\n        return start\n        /** @type {State} */\n\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n      /** @type {State} */\n\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n      /** @type {State} */\n\n      function nok(code) {\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'start'|'end'>} token\n * @returns {Array<Chunk>}\n */\n\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n\n  let view\n\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view[0] = view[0].slice(startBufferIndex)\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean} [expandTabs=false]\n * @returns {string}\n */\n\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n\n  const result = []\n  /** @type {boolean|undefined} */\n\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n\n        case -4: {\n          value = '\\n'\n          break\n        }\n\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === -2\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('thematicBreak')\n    marker = code\n    return atBreak(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    if (size < 3 || (code !== null && !markdownLineEnding(code))) {\n      return nok(code)\n    }\n\n    effects.exit('thematicBreak')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit('thematicBreakSequence')\n    return atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @typedef {Record<string, unknown> & {marker: Code, type: string, size: number}} ListContainerState\n * @typedef {TokenizeContext & {containerState: ListContainerState}} TokenizeContextWithState\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n/** @type {Construct} */\n\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n/** @type {Construct} */\n\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n/** @type {Construct} */\n\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n  /**\n   * @type {State}\n   **/\n\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine, // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n  /** @type {State} */\n\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n  /** @type {State} */\n\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine // We have a blank line.\n    // Still, try to consume at most the items size.\n\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n  /** @type {State} */\n\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n  /** @type {State} */\n\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true // As we’re closing flow, we’re no longer interrupting.\n\n    self.interrupt = undefined\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n/**\n * @type {Exiter}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n/**\n * @type {Tokenizer}\n * @this {TokenizeContextWithState}\n */\n\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n/** @type {Exiter} */\n\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} literalType\n * @param {string} literalMarkerType\n * @param {string} rawType\n * @param {string} stringType\n * @param {number} [max=Infinity]\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return destinationEnclosedBefore\n    }\n\n    if (code === null || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationRaw(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationEnclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return destinationEnclosedBefore(code)\n    }\n\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? destinationEnclosedEscape : destinationEnclosed\n  }\n  /** @type {State} */\n\n  function destinationEnclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return destinationEnclosed\n    }\n\n    return destinationEnclosed(code)\n  }\n  /** @type {State} */\n\n  function destinationRaw(code) {\n    if (code === 40) {\n      if (++balance > limit) return nok(code)\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === 41) {\n      if (!balance--) {\n        effects.exit('chunkString')\n        effects.exit(stringType)\n        effects.exit(rawType)\n        effects.exit(type)\n        return ok(code)\n      }\n\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      if (balance) return nok(code)\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (asciiControl(code)) return nok(code)\n    effects.consume(code)\n    return code === 92 ? destinationRawEscape : destinationRaw\n  }\n  /** @type {State} */\n\n  function destinationRawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return destinationRaw\n    }\n\n    return destinationRaw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @this {TokenizeContext}\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      (code === 93 && !data) ||\n      /* To do: remove in the future once we’ve switched from\n       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n       * which doesn’t need this */\n\n      /* Hidden footnotes hook */\n\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs) ||\n      size > 999\n    ) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    data = data || !markdownSpace(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n * @param {State} nok\n * @param {string} type\n * @param {string} markerType\n * @param {string} stringType\n * @returns {State}\n */\n// eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    marker = code === 40 ? 41 : code\n    return atFirstTitleBreak\n  }\n  /** @type {State} */\n\n  function atFirstTitleBreak(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atTitleBreak(code)\n  }\n  /** @type {State} */\n\n  function atTitleBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return atFirstTitleBreak(marker)\n    }\n\n    if (code === null) {\n      return nok(code)\n    } // Note: blank lines can’t exist in content.\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atTitleBreak, 'linePrefix')\n    }\n\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return title(code)\n  }\n  /** @type {State} */\n\n  function title(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atTitleBreak(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? titleEscape : title\n  }\n  /** @type {State} */\n\n  function titleEscape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return title\n    }\n\n    return title(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n\n/**\n * @param {Effects} effects\n * @param {State} ok\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n/** @type {Construct} */\n\nconst titleConstruct = {\n  tokenize: tokenizeTitle,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n\n  let identifier\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('definition')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Note: blank lines can’t exist in content.\n\n      return factoryWhitespace(\n        effects,\n        factoryDestination(\n          effects,\n          effects.attempt(\n            titleConstruct,\n            factorySpace(effects, after, 'whitespace'),\n            factorySpace(effects, after, 'whitespace')\n          ),\n          nok,\n          'definitionDestination',\n          'definitionDestinationLiteral',\n          'definitionDestinationLiteralMarker',\n          'definitionDestinationRaw',\n          'definitionDestinationString'\n        )\n      )\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      if (!self.parser.defined.includes(identifier)) {\n        self.parser.defined.push(identifier)\n      }\n\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTitle(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, before)(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function before(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factorySpace(effects, after, 'whitespace'),\n        nok,\n        'definitionTitle',\n        'definitionTitleMarker',\n        'definitionTitleString'\n      )(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n/** @type {Construct} */\n\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeIndented')\n    return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? afterPrefix(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return content(code)\n  }\n  /** @type {State} */\n\n  function content(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeIndented')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n/** @type {Resolver} */\n\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n\n  let content\n  /** @type {Token} */\n\n  let text // Prefix whitespace, part of the opening.\n\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  } // Suffix whitespace, part of the closing.\n\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      // @ts-expect-error Constants are fine to assign.\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  const self = this\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('atxHeading')\n    effects.enter('atxHeadingSequence')\n    return fenceOpenInside(code)\n  }\n  /** @type {State} */\n\n  function fenceOpenInside(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return fenceOpenInside\n    }\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return self.interrupt ? ok(code) : headingBreak(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function headingBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequence(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headingBreak, 'whitespace')(code)\n    }\n\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequence\n    }\n\n    effects.exit('atxHeadingSequence')\n    return headingBreak(code)\n  }\n  /** @type {State} */\n\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return headingBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n/** @type {Resolver} */\n\nfunction resolveToSetextUnderline(events, context) {\n  let index = events.length\n  /** @type {number|undefined} */\n\n  let content\n  /** @type {number|undefined} */\n\n  let text\n  /** @type {number|undefined} */\n\n  let definition // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    } // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // Change the paragraph to setext heading text.\n\n  events[text][1].type = 'setextHeadingText' // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  } // Add the heading exit at the end.\n\n  events.push(['exit', heading, context])\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  /** @type {boolean} */\n\n  let paragraph // Find an opening.\n\n  while (index--) {\n    // Skip enter/exit of line ending, line prefix, and content.\n    // We can now either have a definition or a paragraph.\n    if (\n      self.events[index][1].type !== 'lineEnding' &&\n      self.events[index][1].type !== 'linePrefix' &&\n      self.events[index][1].type !== 'content'\n    ) {\n      paragraph = self.events[index][1].type === 'paragraph'\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      effects.enter('setextHeadingLineSequence')\n      marker = code\n      return closingSequence(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function closingSequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return closingSequence\n    }\n\n    effects.exit('setextHeadingLineSequence')\n    return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)\n  }\n  /** @type {State} */\n\n  function closingSequenceEnd(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result\n * in more relaxed rules (condition 6): because they are known blocks, the\n * HTML-like syntax doesn’t have to be strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML tag names which when parsing HTML (flow), result in\n * HTML that can include lines w/o exiting, until a closing tag also in this\n * list is found (condition 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * Note that `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n/** @type {Construct} */\n\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n/** @type {Construct} */\n\nconst nextBlankConstruct = {\n  tokenize: tokenizeNextBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start // Add the prefix start to the HTML line token.\n\n    events[index + 1][1].start = events[index - 2][1].start // Remove the line prefix.\n\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n\n  let kind\n  /** @type {boolean} */\n\n  let startTag\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {Code} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationStart\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      kind = 3 // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      startTag = true\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationStart(code) {\n    if (code === 45) {\n      effects.consume(code)\n      kind = 2\n      return commentOpenInside\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      kind = 5\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      kind = 4\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdataOpenInside(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length\n        ? self.interrupt\n          ? ok\n          : continuation\n        : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      if (\n        code !== 47 &&\n        startTag &&\n        htmlRawNames.includes(buffer.toLowerCase())\n      ) {\n        kind = 1\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        kind = 6\n\n        if (code === 47) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      kind = 7 // Do not support complete HTML when interrupting\n\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : startTag\n        ? completeAttributeNameBefore(code)\n        : completeClosingTagAfter(code)\n    }\n\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    marker = null\n    return completeAttributeValueUnquoted(code)\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuoted(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    if (code === marker) {\n      effects.consume(code)\n      return completeAttributeValueQuotedAfter\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function completeAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return code === null || markdownLineEnding(code)\n      ? continuation(code)\n      : nok(code)\n  }\n  /** @type {State} */\n\n  function continuation(code) {\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === 60 && kind === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === 62 && kind === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === 63 && kind === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === 93 && kind === 5) {\n      effects.consume(code)\n      return continuationCharacterDataInside\n    }\n\n    if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {\n      return effects.check(\n        nextBlankConstruct,\n        continuationClose,\n        continuationAtLineEnding\n      )(code)\n    }\n\n    if (code === null || markdownLineEnding(code)) {\n      return continuationAtLineEnding(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n  /** @type {State} */\n\n  function continuationAtLineEnding(code) {\n    effects.exit('htmlFlowData')\n    return htmlContinueStart(code)\n  }\n  /** @type {State} */\n\n  function htmlContinueStart(code) {\n    if (code === null) {\n      return done(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        {\n          tokenize: htmlLineEnd,\n          partial: true\n        },\n        htmlContinueStart,\n        done\n      )(code)\n    }\n\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n  /** @type {Tokenizer} */\n\n  function htmlLineEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {State} */\n\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationRawEndTag(code) {\n    if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationCharacterDataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    } // More dashes.\n\n    if (code === 45 && kind === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n  /** @type {State} */\n\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return done(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('htmlFlow')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextBlank(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.exit('htmlFlowData')\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n\n  const closingFenceConstruct = {\n    tokenize: tokenizeClosingFence,\n    partial: true\n  }\n  /** @type {Construct} */\n\n  const nonLazyLine = {\n    tokenize: tokenizeNonLazyLine,\n    partial: true\n  }\n  const tail = this.events[this.events.length - 1]\n  const initialPrefix =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    marker = code\n    return sequenceOpen(code)\n  }\n  /** @type {State} */\n\n  function sequenceOpen(code) {\n    if (code === marker) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('codeFencedFenceSequence')\n    return sizeOpen < 3\n      ? nok(code)\n      : factorySpace(effects, infoOpen, 'whitespace')(code)\n  }\n  /** @type {State} */\n\n  function infoOpen(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n  /** @type {State} */\n\n  function info(code) {\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, infoAfter, 'whitespace')(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return info\n  }\n  /** @type {State} */\n\n  function infoAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return openAfter(code)\n    }\n\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n  /** @type {State} */\n\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 96 && code === marker) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n  /** @type {State} */\n\n  function openAfter(code) {\n    effects.exit('codeFencedFence')\n    return self.interrupt ? ok(code) : contentStart(code)\n  }\n  /** @type {State} */\n\n  function contentStart(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(\n        nonLazyLine,\n        effects.attempt(\n          closingFenceConstruct,\n          after,\n          initialPrefix\n            ? factorySpace(\n                effects,\n                contentStart,\n                'linePrefix',\n                initialPrefix + 1\n              )\n            : contentStart\n        ),\n        after\n      )(code)\n    }\n\n    effects.enter('codeFlowValue')\n    return contentContinue(code)\n  }\n  /** @type {State} */\n\n  function contentContinue(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return contentStart(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n  /** @type {State} */\n\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeNonLazyLine(effects, ok, nok) {\n    const self = this\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return lineStart\n    }\n    /** @type {State} */\n\n    function lineStart(code) {\n      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n    }\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    let size = 0\n    return factorySpace(\n      effects,\n      closingSequenceStart,\n      'linePrefix',\n      this.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n    /** @type {State} */\n\n    function closingSequenceStart(code) {\n      effects.enter('codeFencedFence')\n      effects.enter('codeFencedFenceSequence')\n      return closingSequence(code)\n    }\n    /** @type {State} */\n\n    function closingSequence(code) {\n      if (code === marker) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('codeFencedFenceSequence')\n      return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n    /** @type {State} */\n\n    function closingSequenceEnd(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n\n  let max\n  /** @type {(code: Code) => code is number} */\n\n  let test\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n  /** @type {State} */\n\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n  /** @type {State} */\n\n  function value(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === 59 && size) {\n      token = effects.exit('characterReferenceValue')\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {asciiPunctuation} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n/** @type {Construct} */\n\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\n\nconst fullReferenceConstruct = {\n  tokenize: tokenizeFullReference\n}\n/** @type {Construct} */\n\nconst collapsedReferenceConstruct = {\n  tokenize: tokenizeCollapsedReference\n}\n/** @type {Resolver} */\n\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Token} */\n\n  let token\n\n  while (++index < events.length) {\n    token = events[index][1]\n\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n\n  return events\n}\n/** @type {Resolver} */\n\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n\n  let token\n  /** @type {number|undefined} */\n\n  let open\n  /** @type {number|undefined} */\n\n  let close\n  /** @type {Event[]} */\n\n  let media // Find an opening.\n\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      } // Mark other link openings as inactive, as we can’t have links in\n      // links.\n\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ] // Opening marker.\n\n  media = push(media, events.slice(open + 1, open + offset + 3)) // Text open.\n\n  media = push(media, [['enter', text, context]]) // Between.\n\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  ) // Text close, marker close, label close.\n\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ]) // Reference, resource, or so.\n\n  media = push(media, events.slice(close + 1)) // Media close.\n\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n\n  let labelStart\n  /** @type {boolean} */\n\n  let defined // Find an opening.\n\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart) {\n      return nok(code)\n    } // It’s a balanced bracket, but contains a link.\n\n    if (labelStart._inactive) return balanced(code)\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return afterLabelEnd\n  }\n  /** @type {State} */\n\n  function afterLabelEnd(code) {\n    // Resource: `[asd](fgh)`.\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        ok,\n        defined ? ok : balanced\n      )(code)\n    } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?\n\n    if (code === 91) {\n      return effects.attempt(\n        fullReferenceConstruct,\n        ok,\n        defined\n          ? effects.attempt(collapsedReferenceConstruct, ok, balanced)\n          : balanced\n      )(code)\n    } // Shortcut reference: `[asd]`?\n\n    return defined ? ok(code) : balanced(code)\n  }\n  /** @type {State} */\n\n  function balanced(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeResource(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return factoryWhitespace(effects, open)\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 41) {\n      return end(code)\n    }\n\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      nok,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n  /** @type {State} */\n\n  function destinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, between)(code)\n      : end(code)\n  }\n  /** @type {State} */\n\n  function between(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        factoryWhitespace(effects, end),\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeFullReference(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      afterLabel,\n      nok,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n  /** @type {State} */\n\n  function afterLabel(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCollapsedReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Point} Point\n */\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n\n  let open\n  /** @type {Token} */\n\n  let group\n  /** @type {Token} */\n\n  let text\n  /** @type {Token} */\n\n  let openingSequence\n  /** @type {Token} */\n\n  let closingSequence\n  /** @type {number} */\n\n  let use\n  /** @type {Event[]} */\n\n  let nextEvents\n  /** @type {number} */\n\n  let offset // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index // Now walk back to find an opener.\n\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open && // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          } // Number of markers to use from the sequence.\n\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = [] // If there are more markers in the opening, add them before.\n\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          } // Opening.\n\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ]) // Between.\n\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          ) // Closing.\n\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ]) // If there are more markers in the closing, add them after.\n\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  } // Remove remaining sequences.\n\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n  /** @type {NonNullable<Code>} */\n\n  let marker\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('attentionSequence')\n    marker = code\n    return sequence(code)\n  }\n  /** @type {State} */\n\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return sequence\n    }\n\n    const token = effects.exit('attentionSequence')\n    const after = classifyCharacter(code)\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\n\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 1\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    return asciiAtext(code) ? emailAtext(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function schemeOrEmailAtext(code) {\n    return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)\n      ? schemeInsideOrEmailAtext(code)\n      : emailAtext(code)\n  }\n  /** @type {State} */\n\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return urlInside\n    }\n\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    return emailAtext(code)\n  }\n  /** @type {State} */\n\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      return end(code)\n    }\n\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n  /** @type {State} */\n\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n  /** @type {State} */\n\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === 62) {\n      // Exit, then change the type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      return end(code)\n    }\n\n    return emailValue(code)\n  }\n  /** @type {State} */\n\n  function emailValue(code) {\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      effects.consume(code)\n      return code === 45 ? emailValue : emailLabel\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.exit('autolink')\n    return ok\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>|undefined} */\n\n  let marker\n  /** @type {string} */\n\n  let buffer\n  /** @type {number} */\n\n  let index\n  /** @type {State} */\n\n  let returnState\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpen\n    }\n\n    if (code === 91) {\n      effects.consume(code)\n      buffer = 'CDATA['\n      index = 0\n      return cdataOpen\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentStart\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function commentStart(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentStartDash\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function commentStartDash(code) {\n    if (code === null || code === 62) {\n      return nok(code)\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n  /** @type {State} */\n\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return end\n    }\n\n    return comment(code)\n  }\n  /** @type {State} */\n\n  function cdataOpen(code) {\n    if (code === buffer.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === buffer.length ? cdata : cdataOpen\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n  /** @type {State} */\n\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n  /** @type {State} */\n\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n  /** @type {State} */\n\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n  /** @type {State} */\n\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n  /** @type {State} */\n\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagClose(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n  /** @type {State} */\n\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpen(code) {\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeName(code) {\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return atLineEnding(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    marker = undefined\n    return tagOpenAttributeValueUnquoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === null) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return atLineEnding(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n\n    if (code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  } // We can’t have blank lines in content, so no need to worry about empty\n  // tokens.\n\n  /** @type {State} */\n\n  function atLineEnding(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(\n      effects,\n      afterPrefix,\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )\n  }\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {labelEnd} from './label-end.js'\n/** @type {Construct} */\n\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n\n    /* Hidden footnotes hook. */\n\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    return open\n  }\n  /** @type {State} */\n\n  function open(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('escapeMarker')\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\nimport {markdownLineEnding} from 'micromark-util-character'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n/** @type {Resolver} */\n\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n\n  let index\n  /** @type {number|undefined} */\n\n  let enter // If we start and end with an EOL or a space.\n\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex // And we have data.\n\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  } // Merge adjacent spaces and data.\n\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n/** @type {Previous} */\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n\n  let size\n  /** @type {Token} */\n\n  let token\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return openingSequence(code)\n  }\n  /** @type {State} */\n\n  function openingSequence(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('codeTextSequence')\n    return gap(code)\n  }\n  /** @type {State} */\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    } // Closing fence?\n    // Could also be data.\n\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return closingSequence(code)\n    } // Tabs don’t work, and virtual spaces don’t make sense.\n\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    } // Data.\n\n    effects.enter('codeTextData')\n    return data(code)\n  } // In code.\n\n  /** @type {State} */\n\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  } // Closing fence.\n\n  /** @type {State} */\n\n  function closingSequence(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    } // Done!\n\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    } // More or less accents: mark as data.\n\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n/** @type {Extension['document']} */\n\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n/** @type {Extension['contentInitial']} */\n\nexport const contentInitial = {\n  [91]: definition\n}\n/** @type {Extension['flowInitial']} */\n\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n/** @type {Extension['flow']} */\n\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n/** @type {Extension['string']} */\n\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n/** @type {Extension['text']} */\n\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n/** @type {Extension['insideSpan']} */\n\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n/** @type {Extension['attentionMarkers']} */\n\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n/** @type {Extension['disable']} */\n\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding} [encoding]\n * @param {boolean} [end=false]\n * @returns {Array<Chunk>}\n */\nconst search = /[\\0\\t\\n\\r]/g\n/**\n * @returns {Preprocessor}\n */\n\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean|undefined} */\n\n  let start = true\n  /** @type {boolean|undefined} */\n\n  let atCarriageReturn\n  return preprocessor\n  /** @type {Preprocessor} */\n\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray|null} */\n\n    let match\n    /** @type {number} */\n\n    let next\n    /** @type {number} */\n\n    let startPosition\n    /** @type {number} */\n\n    let endPosition\n    /** @type {Code} */\n\n    let code // @ts-expect-error `Buffer` does allow an encoding.\n\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n\n            while (column++ < next) chunks.push(-1)\n\n            break\n          }\n\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n\n    return chunks\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        // @ts-expect-error: micromark types need to accept `null`.\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            // @ts-expect-error Patched.\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            // @ts-expect-error Patched\n            _spread: false,\n            start: Object.assign({}, event[1].start)\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    // @ts-expect-error Patched.\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      // @ts-expect-error Patched.\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\n\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Create} Create\n */\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n/**\n * @param {ParseOptions} [options]\n * @returns {ParseContext}\n */\n\nexport function parse(options = {}) {\n  /** @type {FullNormalizedExtension} */\n  // @ts-expect-error `defaultConstructs` is full, so the result will be too.\n  const constructs = combineExtensions(\n    // @ts-expect-error Same as above.\n    [defaultConstructs].concat(options.extensions || [])\n  )\n  /** @type {ParseContext} */\n\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n  /**\n   * @param {InitialConstruct} initial\n   */\n\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","import remarkParse from './lib/index.js'\n\nexport default remarkParse\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/** @type {import('unified').Plugin<[Options?] | void[], string, Root>} */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri` below).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * Then, a regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`,\n * or `/^https?$/i` for `img[src]`.\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string|undefined} url\n * @param {RegExp} [protocol]\n * @returns {string}\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 || // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) || // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n/**\n * Normalize a URL (such as used in definitions).\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n * @returns {string}\n */\n\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n\n    let replace = '' // A correct percent encoded value.\n\n    if (\n      code === 37 &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    } // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    } // Astral.\n    else if (code > 55295 && code < 57344) {\n      const next = value.charCodeAt(index + 1) // A correct surrogate pair.\n\n      if (code < 56320 && next > 56319 && next < 57344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      } // Lone surrogate.\n      else {\n        replace = '\\uFFFD'\n      }\n    } // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('hast').Element} Element\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  if (index === -1) {\n    state.footnoteOrder.push(id)\n    state.footnoteCounts[id] = 1\n    counter = state.footnoteOrder.length\n  } else {\n    state.footnoteCounts[id]++\n    counter = index + 1\n  }\n\n  const reuseCounter = state.footnoteCounts[id]\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + state.clobberPrefix + 'fn-' + safeId,\n      id:\n        state.clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Reference} Reference\n * @typedef {import('mdast').Root} Root\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Reference>} References\n */\n\n// To do: next major: always return array.\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {References} node\n *   Reference node (image, link).\n * @returns {ElementContent | Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return {type: 'text', value: '![' + node.alt + suffix}\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang ? node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/) : null\n  /** @type {Properties} */\n  const properties = {}\n\n  if (lang) {\n    properties.className = ['language-' + lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n\n */\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../state.js').State} State\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n// To do: when both:\n// * <https://github.com/micromark/micromark-extension-footnote>\n// * <https://github.com/syntax-tree/mdast-util-footnote>\n// …are archived, remove this (also from mdast).\n// These inline notes are not used in GFM.\n\n/**\n * Turn an mdast `footnote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Footnote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnote(state, node) {\n  const footnoteById = state.footnoteById\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(state, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').HTML} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Raw | Element | null}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.dangerous) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  // To do: next major: return `undefined`.\n  return null\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {ElementContent | Array<ElementContent>}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const def = state.definition(node.identifier)\n\n  if (!def) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    properties.title = def.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastRoot | HastElement}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start.line && end.line) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * @typedef {Root | Content} Nodes\n * @typedef {Extract<Nodes, Parent>} Parents\n */\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | null | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(node, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastText | HastElement}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} MdastRoot\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n * @typedef {Extract<MdastNodes, MdastParent>} MdastParents\n *\n * @typedef EmbeddedHastFields\n *   hast fields.\n * @property {string | null | undefined} [hName]\n *   Generate a specific element with this tag name instead.\n * @property {HastProperties | null | undefined} [hProperties]\n *   Generate an element with these properties instead.\n * @property {Array<HastElementContent> | null | undefined} [hChildren]\n *   Generate an element with this content instead.\n *\n * @typedef {Record<string, unknown> & EmbeddedHastFields} MdastData\n *   mdast data with embedded hast fields.\n *\n * @typedef {MdastNodes & {data?: MdastData | null | undefined}} MdastNodeWithData\n *   mdast node with embedded hast data.\n *\n * @typedef PointLike\n *   Point-like value.\n * @property {number | null | undefined} [line]\n *   Line.\n * @property {number | null | undefined} [column]\n *   Column.\n * @property {number | null | undefined} [offset]\n *   Offset.\n *\n * @typedef PositionLike\n *   Position-like value.\n * @property {PointLike | null | undefined} [start]\n *   Point-like value.\n * @property {PointLike | null | undefined} [end]\n *   Point-like value.\n *\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | null | undefined} parent\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   hast node.\n *\n * @callback HFunctionProps\n *   Signature of `state` for when props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {HastProperties} props\n *   Properties.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @callback HFunctionNoProps\n *   Signature of `state` for when no props are passed.\n * @param {MdastNodes | PositionLike | null | undefined} node\n *   mdast node or unist position.\n * @param {string} tagName\n *   HTML tag name.\n * @param {Array<HastElementContent> | null | undefined} [children]\n *   hast content.\n * @returns {HastElement}\n *   Compiled element.\n *\n * @typedef HFields\n *   Info on `state`.\n * @property {boolean} dangerous\n *   Whether HTML is allowed.\n * @property {string} clobberPrefix\n *   Prefix to use to prevent DOM clobbering.\n * @property {string} footnoteLabel\n *   Label to use to introduce the footnote section.\n * @property {string} footnoteLabelTagName\n *   HTML used for the footnote label.\n * @property {HastProperties} footnoteLabelProperties\n *   Properties on the HTML tag used for the footnote label.\n * @property {string} footnoteBackLabel\n *   Label to use from backreferences back to their footnote call.\n * @property {(identifier: string) => MdastDefinition | null} definition\n *   Definition cache.\n * @property {Record<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Record<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {Handler} unknownHandler\n *   Handler for any none not in `passThrough` or otherwise handled.\n * @property {(from: MdastNodes, node: HastNodes) => void} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => Type | HastElement} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {(node: MdastNodes, parent: MdastParents | null | undefined) => HastElementContent | Array<HastElementContent> | null | undefined} one\n *   Transform an mdast node to hast.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastContent>(nodes: Array<Type>, loose?: boolean | null | undefined) => Array<Type | HastText>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n * @property {(left: MdastNodeWithData | PositionLike | null | undefined, right: HastElementContent) => HastElementContent} augment\n *   Like `state` but lower-level and usable on non-elements.\n *   Deprecated: use `patch` and `applyData`.\n * @property {Array<string>} passThrough\n *   List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree.\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent it from\n *   *clobbering*.\n * @property {string | null | undefined} [footnoteBackLabel='Back to content']\n *   Label to use from backreferences back to their footnote call (affects\n *   screen readers).\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Label to use for the footnotes section (affects screen readers).\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (note that `id: 'footnote-label'`\n *   is always added as footnote calls use it with `aria-describedby` to\n *   provide an accessible label).\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   Tag name to use for the footnote label.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes.\n * @property {Array<string> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes.\n *\n * @typedef {Record<string, Handler>} Handlers\n *   Handle nodes.\n *\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} State\n *   Info passed around.\n */\n\nimport {visit} from 'unist-util-visit'\nimport {position, pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Record<string, MdastFootnoteDefinition>} */\n  const footnoteById = {}\n\n  // To do: next major: add `options` to state, remove:\n  // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,\n  // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,\n  // `unknownHandler`.\n\n  // To do: next major: move to `state.options.allowDangerousHtml`.\n  state.dangerous = dangerous\n  // To do: next major: move to `state.options`.\n  state.clobberPrefix =\n    settings.clobberPrefix === undefined || settings.clobberPrefix === null\n      ? 'user-content-'\n      : settings.clobberPrefix\n  // To do: next major: move to `state.options`.\n  state.footnoteLabel = settings.footnoteLabel || 'Footnotes'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2'\n  // To do: next major: move to `state.options`.\n  state.footnoteLabelProperties = settings.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  // To do: next major: move to `state.options`.\n  state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content'\n  // To do: next major: move to `state.options`.\n  state.unknownHandler = settings.unknownHandler\n  // To do: next major: move to `state.options`.\n  state.passThrough = settings.passThrough\n\n  state.handlers = {...handlers, ...settings.handlers}\n\n  // To do: next major: replace utility with `definitionById` object, so we\n  // only walk once (as we need footnotes too).\n  state.definition = definitions(tree)\n  state.footnoteById = footnoteById\n  /** @type {Array<string>} */\n  state.footnoteOrder = []\n  /** @type {Record<string, number>} */\n  state.footnoteCounts = {}\n\n  state.patch = patch\n  state.applyData = applyData\n  state.one = oneBound\n  state.all = allBound\n  state.wrap = wrap\n  // To do: next major: remove `augment`.\n  state.augment = augment\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return state\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   *\n   * @param {MdastNodeWithData | PositionLike | null | undefined} left\n   * @param {HastElementContent} right\n   * @returns {HastElementContent}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {MdastData} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        // @ts-expect-error: fine.\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  /* c8 ignore start */\n  // To do: next major: remove.\n  function state(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n  /* c8 ignore stop */\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | null | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n   *   Resulting hast node.\n   */\n  function oneBound(node, parent) {\n    // @ts-expect-error: that’s a state :)\n    return one(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function allBound(parent) {\n    // @ts-expect-error: that’s a state :)\n    return all(state, parent)\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {void}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {Type | HastElement}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {Type | HastElement} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent is likely to keep the content around (otherwise: pass\n      // `hChildren`).\n      else {\n        result = {\n          type: 'element',\n          tagName: hName,\n          properties: {},\n          children: []\n        }\n\n        // To do: next major: take the children from the `root`, or inject the\n        // raw/text/comment or so into the element?\n        // if ('children' in node) {\n        //   // @ts-expect-error: assume `children` are allowed in elements.\n        //   result.children = node.children\n        // } else {\n        //   // @ts-expect-error: assume `node` is allowed in elements.\n        //   result.children.push(node)\n        // }\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      result.properties = {...result.properties, ...hProperties}\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      // @ts-expect-error: assume valid children are defined.\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an mdast node into a hast node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   mdast node.\n * @param {MdastParents | null | undefined} [parent]\n *   Parent of `node`.\n * @returns {HastElementContent | Array<HastElementContent> | null | undefined}\n *   Resulting hast node.\n */\n// To do: next major: do not expose, keep bound.\nexport function one(state, node, parent) {\n  const type = node && node.type\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(state.handlers, type)) {\n    return state.handlers[type](state, node, parent)\n  }\n\n  if (state.passThrough && state.passThrough.includes(type)) {\n    // To do: next major: deep clone.\n    // @ts-expect-error: types of passed through nodes are expected to be added manually.\n    return 'children' in node ? {...node, children: all(state, node)} : node\n  }\n\n  if (state.unknownHandler) {\n    return state.unknownHandler(state, node, parent)\n  }\n\n  return defaultUnknownHandler(state, node)\n}\n\n/**\n * Transform the children of an mdast node into hast nodes.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} parent\n *   mdast node to compile\n * @returns {Array<HastElementContent>}\n *   Resulting hast nodes.\n */\n// To do: next major: do not expose, keep bound.\nexport function all(state, parent) {\n  /** @type {Array<HastElementContent>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n    while (++index < nodes.length) {\n      const result = one(state, nodes[index], parent)\n\n      // To do: see if we van clean this? Can we merge texts?\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastText | HastElement}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastText | HastElement} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: all(state, node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | null | undefined} [loose=false]\n *   Whether to add line endings at start and end.\n * @returns {Array<Type | HastText>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<Type | HastText>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('hast').Content} HastContent\n * @typedef {import('hast').Root} HastRoot\n *\n * @typedef {import('mdast').Content} MdastContent\n * @typedef {import('mdast').Root} MdastRoot\n *\n * @typedef {import('./state.js').Options} Options\n */\n\n/**\n * @typedef {HastRoot | HastContent} HastNodes\n * @typedef {MdastRoot | MdastContent} MdastNodes\n */\n\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HastNodes | null | undefined}\n *   hast tree.\n */\n// To do: next major: always return a single `root`.\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, null)\n  const foot = footer(state)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  // To do: next major: always return root?\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\nexport function footer(state) {\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let index = -1\n\n  while (++index < state.footnoteOrder.length) {\n    const def = state.footnoteById[state.footnoteOrder[index]]\n\n    if (!def) {\n      continue\n    }\n\n    const content = state.all(def)\n    const id = String(def.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let referenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n\n    while (++referenceIndex <= state.footnoteCounts[id]) {\n      /** @type {Element} */\n      const backReference = {\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            state.clobberPrefix +\n            'fnref-' +\n            safeId +\n            (referenceIndex > 1 ? '-' + referenceIndex : ''),\n          dataFootnoteBackref: true,\n          className: ['data-footnote-backref'],\n          ariaLabel: state.footnoteBackLabel\n        },\n        children: [{type: 'text', value: '↩'}]\n      }\n\n      if (referenceIndex > 1) {\n        backReference.children.push({\n          type: 'element',\n          tagName: 'sup',\n          children: [{type: 'text', value: String(referenceIndex)}]\n        })\n      }\n\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      backReferences.push(backReference)\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: state.clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(def, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: state.footnoteLabelTagName,\n        properties: {\n          // To do: use structured clone.\n          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: state.footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin that turns markdown into HTML to support rehype.\n *\n * *   If a destination processor is given, that processor runs with a new HTML\n *     (hast) tree (bridge-mode).\n *     As the given processor runs with a hast tree, and rehype plugins support\n *     hast, that means rehype plugins can be used with the given processor.\n *     The hast tree is discarded in the end.\n *     It’s highly unlikely that you want to do this.\n * *   The common case is to not pass a destination processor, in which case the\n *     current processor continues running with a new HTML (hast) tree\n *     (mutate-mode).\n *     As the current processor continues with a hast tree, and rehype plugins\n *     support hast, that means rehype plugins can be used after\n *     `remark-rehype`.\n *     It’s likely that this is what you want to do.\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination || options)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further plugins run on the hast tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned by `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","import StyleToObject from './index.js';\n\nexport default StyleToObject;\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types.js').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'td'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: false}} TableDataCellProps\n * @typedef {ComponentPropsWithoutRef<'th'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: true}} TableHeaderCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableDataCellProps>} TableDataCellComponent\n * @typedef {ComponentType<TableHeaderCellProps>} TableHeaderCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableDataCellComponent|ReactMarkdownNames} td\n * @property {TableHeaderCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types.js').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\nimport {uriTransformer} from './uri-transformer.js'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const transform =\n    options.transformLinkUri === undefined\n      ? uriTransformer\n      : options.transformLinkUri\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = [\n    name,\n    position.start.line,\n    position.start.column,\n    index\n  ].join('-')\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && transform) {\n    properties.href = transform(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map(String)\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n * @property {import('remark-rehype').Options | undefined} [remarkRehypeOptions={}]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  plugins: {to: 'remarkPlugins', id: 'change-plugins-to-remarkplugins'},\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(options.remarkPlugins || [])\n    .use(remarkRehype, {\n      ...options.remarkRehypeOptions,\n      allowDangerousHtml: true\n    })\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([\n          PropTypes.bool,\n          PropTypes.string,\n          PropTypes.object,\n          PropTypes.func,\n          PropTypes.arrayOf(\n            // prettier-ignore\n            // type-coverage:ignore-next-line\n            PropTypes.any\n          )\n        ])\n      )\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiControl,\n  asciiDigit,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nconst www = {\n  tokenize: tokenizeWww,\n  partial: true\n}\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n}\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n}\nconst punctuation = {\n  tokenize: tokenizePunctuation,\n  partial: true\n}\nconst namedCharacterReference = {\n  tokenize: tokenizeNamedCharacterReference,\n  partial: true\n}\nconst wwwAutolink = {\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n}\nconst httpAutolink = {\n  tokenize: tokenizeHttpAutolink,\n  previous: previousHttp\n}\nconst emailAutolink = {\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n}\n/** @type {ConstructRecord} */\n\nconst text = {}\n/** @type {Extension} */\n\nexport const gfmAutolinkLiteral = {\n  text\n}\nlet code = 48 // Add alphanumerics.\n\nwhile (code < 123) {\n  text[code] = emailAutolink\n  code++\n  if (code === 58) code = 65\n  else if (code === 91) code = 97\n}\n\ntext[43] = emailAutolink\ntext[45] = emailAutolink\ntext[46] = emailAutolink\ntext[95] = emailAutolink\ntext[72] = [emailAutolink, httpAutolink]\ntext[104] = [emailAutolink, httpAutolink]\ntext[87] = [emailAutolink, wwwAutolink]\ntext[119] = [emailAutolink, wwwAutolink]\n/** @type {Tokenizer} */\n\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this\n  /** @type {boolean} */\n\n  let hasDot\n  /** @type {boolean|undefined} */\n\n  let hasDigitInLastSegment\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      !gfmAtext(code) ||\n      !previousEmail(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkEmail')\n    return atext(code)\n  }\n  /** @type {State} */\n\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code)\n      return atext\n    }\n\n    if (code === 64) {\n      effects.consume(code)\n      return label\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (code === 46) {\n      return effects.check(punctuation, done, dotContinuation)(code)\n    }\n\n    if (code === 45 || code === 95) {\n      return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code)\n    }\n\n    if (asciiAlphanumeric(code)) {\n      if (!hasDigitInLastSegment && asciiDigit(code)) {\n        hasDigitInLastSegment = true\n      }\n\n      effects.consume(code)\n      return label\n    }\n\n    return done(code)\n  }\n  /** @type {State} */\n\n  function dotContinuation(code) {\n    effects.consume(code)\n    hasDot = true\n    hasDigitInLastSegment = undefined\n    return label\n  }\n  /** @type {State} */\n\n  function dashOrUnderscoreContinuation(code) {\n    effects.consume(code)\n    return afterDashOrUnderscore\n  }\n  /** @type {State} */\n\n  function afterDashOrUnderscore(code) {\n    if (code === 46) {\n      return effects.check(punctuation, nok, dotContinuation)(code)\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (hasDot && !hasDigitInLastSegment) {\n      effects.exit('literalAutolinkEmail')\n      effects.exit('literalAutolink')\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 87 && code !== 119) ||\n      !previousWww(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkWww') // For `www.` we check instead of attempt, because when it matches, GH\n    // treats it as part of a domain (yes, it says a valid domain must come\n    // after `www.`, but that’s not how it’s implemented by them).\n\n    return effects.check(\n      www,\n      effects.attempt(domain, effects.attempt(path, done), nok),\n      nok\n    )(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkWww')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeHttpAutolink(effects, ok, nok) {\n  const self = this\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (\n      (code !== 72 && code !== 104) ||\n      !previousHttp(self.previous) ||\n      previousUnbalanced(self.events)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('literalAutolink')\n    effects.enter('literalAutolinkHttp')\n    effects.consume(code)\n    return t1\n  }\n  /** @type {State} */\n\n  function t1(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return t2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function t2(code) {\n    if (code === 84 || code === 116) {\n      effects.consume(code)\n      return p\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function p(code) {\n    if (code === 80 || code === 112) {\n      effects.consume(code)\n      return s\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function s(code) {\n    if (code === 83 || code === 115) {\n      effects.consume(code)\n      return colon\n    }\n\n    return colon(code)\n  }\n  /** @type {State} */\n\n  function colon(code) {\n    if (code === 58) {\n      effects.consume(code)\n      return slash1\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash1(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return slash2\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function slash2(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)\n      ? nok(code)\n      : effects.attempt(domain, effects.attempt(path, done), nok)(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    effects.exit('literalAutolinkHttp')\n    effects.exit('literalAutolink')\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeWww(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return w2\n  }\n  /** @type {State} */\n\n  function w2(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return w3\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function w3(code) {\n    if (code === 87 || code === 119) {\n      effects.consume(code)\n      return dot\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function dot(code) {\n    if (code === 46) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? nok(code) : ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean|undefined} */\n  let hasUnderscoreInLastSegment\n  /** @type {boolean|undefined} */\n\n  let hasUnderscoreInLastLastSegment\n  return domain\n  /** @type {State} */\n\n  function domain(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        done,\n        punctuationContinuation\n      )(code)\n    }\n\n    if (code === 46 || code === 95) {\n      return effects.check(punctuation, done, punctuationContinuation)(code)\n    } // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n\n    if (\n      code === null ||\n      asciiControl(code) ||\n      unicodeWhitespace(code) ||\n      (code !== 45 && unicodePunctuation(code))\n    ) {\n      return done(code)\n    }\n\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function punctuationContinuation(code) {\n    if (code === 46) {\n      hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment\n      hasUnderscoreInLastSegment = undefined\n      effects.consume(code)\n      return domain\n    }\n\n    if (code === 95) hasUnderscoreInLastSegment = true\n    effects.consume(code)\n    return domain\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment) {\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePath(effects, ok) {\n  let balance = 0\n  return inPath\n  /** @type {State} */\n\n  function inPath(code) {\n    if (code === 38) {\n      return effects.check(\n        namedCharacterReference,\n        ok,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (code === 40) {\n      balance++\n    }\n\n    if (code === 41) {\n      return effects.check(\n        punctuation,\n        parenAtPathEnd,\n        continuedPunctuation\n      )(code)\n    }\n\n    if (pathEnd(code)) {\n      return ok(code)\n    }\n\n    if (trailingPunctuation(code)) {\n      return effects.check(punctuation, ok, continuedPunctuation)(code)\n    }\n\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function continuedPunctuation(code) {\n    effects.consume(code)\n    return inPath\n  }\n  /** @type {State} */\n\n  function parenAtPathEnd(code) {\n    balance--\n    return balance < 0 ? ok(code) : continuedPunctuation(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNamedCharacterReference(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (code === 59) {\n      effects.consume(code)\n      return after\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // If the named character reference is followed by the end of the path, it’s\n    // not continued punctuation.\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePunctuation(effects, ok, nok) {\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.consume(code)\n    return after\n  }\n  /** @type {State} */\n\n  function after(code) {\n    // Check the next.\n    if (trailingPunctuation(code)) {\n      effects.consume(code)\n      return after\n    } // If the punctuation marker is followed by the end of the path, it’s not\n    // continued punctuation.\n\n    return pathEnd(code) ? ok(code) : nok(code)\n  }\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction trailingPunctuation(code) {\n  return (\n    code === 33 ||\n    code === 34 ||\n    code === 39 ||\n    code === 41 ||\n    code === 42 ||\n    code === 44 ||\n    code === 46 ||\n    code === 58 ||\n    code === 59 ||\n    code === 60 ||\n    code === 63 ||\n    code === 95 ||\n    code === 126\n  )\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction pathEnd(code) {\n  return code === null || code === 60 || markdownLineEndingOrSpace(code)\n}\n/**\n * @param {Code} code\n * @returns {boolean}\n */\n\nfunction gfmAtext(code) {\n  return (\n    code === 43 ||\n    code === 45 ||\n    code === 46 ||\n    code === 95 ||\n    asciiAlphanumeric(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousWww(code) {\n  return (\n    code === null ||\n    code === 40 ||\n    code === 42 ||\n    code === 95 ||\n    code === 126 ||\n    markdownLineEndingOrSpace(code)\n  )\n}\n/** @type {Previous} */\n\nfunction previousHttp(code) {\n  return code === null || !asciiAlpha(code)\n}\n/** @type {Previous} */\n\nfunction previousEmail(code) {\n  return code !== 47 && previousHttp(code)\n}\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\n\nfunction previousUnbalanced(events) {\n  let index = events.length\n  let result = false\n\n  while (index--) {\n    const token = events[index][1]\n\n    if (\n      (token.type === 'labelLink' || token.type === 'labelImage') &&\n      !token._balanced\n    ) {\n      result = true\n      break\n    } // @ts-expect-error If we’ve seen this token, and it was marked as not\n    // having any unbalanced bracket before it, we can exit.\n\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false\n      break\n    }\n  }\n\n  if (events.length > 0 && !result) {\n    // @ts-expect-error Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true\n  }\n\n  return result\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n */\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n/**\n * @returns {Extension}\n */\n\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    const token = self.events[index][1]\n\n    if (token.type === 'labelImage') {\n      labelStart = token\n      break\n    } // Exit if we’ve walked far enough.\n\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === 'labelLink' ||\n      token.type === 'label' ||\n      token.type === 'image' ||\n      token.type === 'link'\n    ) {\n      break\n    }\n  }\n\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n\n    const id = normalizeIdentifier(\n      self.sliceSerialize({\n        start: labelStart.end,\n        end: self.now()\n      })\n    )\n\n    if (id.charCodeAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n/** @type {Resolver} */\n\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token|undefined} */\n\n  let labelStart // Find an opening.\n\n  while (index--) {\n    if (\n      events[index][1].type === 'labelImage' &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = 'data'\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker' // The whole (without `!`):\n\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  } // The `^` marker\n\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  } // Increment the end 1 character.\n\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  const chunk = {\n    type: 'chunkString',\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n  /** @type {Array<Event>} */\n\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context], // The `[`\n    events[index + 3],\n    events[index + 4], // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context], // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context], // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n  events.splice(index, events.length - index + 1, ...replacement)\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n  /** @type {State} */\n\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n  /** @type {State} */\n\n  function callData(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size++ > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      effects.exit('chunkString')\n      token = effects.exit('gfmFootnoteCallString')\n      return defined.includes(normalizeIdentifier(self.sliceSerialize(token)))\n        ? end(code)\n        : nok(code)\n    }\n\n    effects.consume(code)\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    return code === 92 ? callEscape : callData\n  }\n  /** @type {State} */\n\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n\n    return callData(code)\n  }\n  /** @type {State} */\n\n  function end(code) {\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    effects.exit('gfmFootnoteCall')\n    return ok\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n\n  let identifier\n  let size = 0\n  /** @type {boolean|undefined} */\n\n  let data\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelStart\n  }\n  /** @type {State} */\n\n  function labelStart(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      return atBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function atBreak(code) {\n    /** @type {Token} */\n    let token\n\n    if (code === null || code === 91 || size > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      size++\n      return atBreak\n    }\n\n    effects.enter('chunkString').contentType = 'string'\n    return label(code)\n  }\n  /** @type {State} */\n\n  function label(code) {\n    if (\n      code === null ||\n      markdownLineEnding(code) ||\n      code === 91 ||\n      code === 93 ||\n      size > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : label\n  }\n  /** @type {State} */\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n  /** @type {State} */\n\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker') // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n\n      return factorySpace(effects, done, 'gfmFootnoteDefinitionWhitespace')\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function done(code) {\n    if (!defined.includes(identifier)) {\n      defined.push(identifier)\n    }\n\n    return ok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n/** @type {Exiter} */\n\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    4 + 1\n  )\n  /** @type {State} */\n\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean} [singleTilde=true]\n *   Whether to support strikethrough with a single tilde (`boolean`, default:\n *   `true`).\n *   Single tildes work on github.com, but are technically prohibited by the\n *   GFM spec.\n */\nimport {splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n\n/**\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfmStrikethrough(options = {}) {\n  let single = options.singleTilde\n  const tokenizer = {\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  }\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  }\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n\n  function resolveAllStrikethrough(events, context) {\n    let index = -1 // Walk through all events.\n\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (\n        events[index][0] === 'enter' &&\n        events[index][1].type === 'strikethroughSequenceTemporary' &&\n        events[index][1]._close\n      ) {\n        let open = index // Now walk back to find an opener.\n\n        while (open--) {\n          // Find a token that can open the closer.\n          if (\n            events[open][0] === 'exit' &&\n            events[open][1].type === 'strikethroughSequenceTemporary' &&\n            events[open][1]._open && // If the sizes are the same:\n            events[index][1].end.offset - events[index][1].start.offset ===\n              events[open][1].end.offset - events[open][1].start.offset\n          ) {\n            events[index][1].type = 'strikethroughSequence'\n            events[open][1].type = 'strikethroughSequence'\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            }\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            } // Opening.\n\n            const nextEvents = [\n              ['enter', strikethrough, context],\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context],\n              ['enter', text, context]\n            ] // Between.\n\n            splice(\n              nextEvents,\n              nextEvents.length,\n              0,\n              resolveAll(\n                context.parser.constructs.insideSpan.null,\n                events.slice(open + 1, index),\n                context\n              )\n            ) // Closing.\n\n            splice(nextEvents, nextEvents.length, 0, [\n              ['exit', text, context],\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context],\n              ['exit', strikethrough, context]\n            ])\n            splice(events, open - 1, index - open + 3, nextEvents)\n            index = open + nextEvents.length - 2\n            break\n          }\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = 'data'\n      }\n    }\n\n    return events\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous\n    const events = this.events\n    let size = 0\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      if (\n        previous === 126 &&\n        events[events.length - 1][1].type !== 'characterEscape'\n      ) {\n        return nok(code)\n      }\n\n      effects.enter('strikethroughSequenceTemporary')\n      return more(code)\n    }\n    /** @type {State} */\n\n    function more(code) {\n      const before = classifyCharacter(previous)\n\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code)\n        effects.consume(code)\n        size++\n        return more\n      }\n\n      if (size < 2 && !single) return nok(code)\n      const token = effects.exit('strikethroughSequenceTemporary')\n      const after = classifyCharacter(code)\n      token._open = !after || (after === 2 && Boolean(before))\n      token._close = !before || (before === 2 && Boolean(after))\n      return ok(code)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n/**\n * @typedef {'left'|'center'|'right'|'none'} Align\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n\n/** @type {Extension} */\nexport const gfmTable = {\n  flow: {\n    null: {\n      tokenize: tokenizeTable,\n      resolve: resolveTable\n    }\n  }\n}\nconst nextPrefixedOrBlank = {\n  tokenize: tokenizeNextPrefixedOrBlank,\n  partial: true\n}\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1\n  /** @type {boolean|undefined} */\n\n  let inHead\n  /** @type {boolean|undefined} */\n\n  let inDelimiterRow\n  /** @type {boolean|undefined} */\n\n  let inRow\n  /** @type {number|undefined} */\n\n  let contentStart\n  /** @type {number|undefined} */\n\n  let contentEnd\n  /** @type {number|undefined} */\n\n  let cellStart\n  /** @type {boolean|undefined} */\n\n  let seenCellInRow\n\n  while (++index < events.length) {\n    const token = events[index][1]\n\n    if (inRow) {\n      if (token.type === 'temporaryTableCellContent') {\n        contentStart = contentStart || index\n        contentEnd = index\n      }\n\n      if (\n        // Combine separate content parts into one.\n        (token.type === 'tableCellDivider' || token.type === 'tableRow') &&\n        contentEnd\n      ) {\n        const content = {\n          type: 'tableContent',\n          start: events[contentStart][1].start,\n          end: events[contentEnd][1].end\n        }\n        /** @type {Token} */\n\n        const text = {\n          type: 'chunkText',\n          start: content.start,\n          end: content.end,\n          // @ts-expect-error It’s fine.\n          contentType: 'text'\n        }\n        events.splice(\n          contentStart,\n          contentEnd - contentStart + 1,\n          ['enter', content, context],\n          ['enter', text, context],\n          ['exit', text, context],\n          ['exit', content, context]\n        )\n        index -= contentEnd - contentStart - 3\n        contentStart = undefined\n        contentEnd = undefined\n      }\n    }\n\n    if (\n      events[index][0] === 'exit' &&\n      cellStart !== undefined &&\n      cellStart + (seenCellInRow ? 0 : 1) < index &&\n      (token.type === 'tableCellDivider' ||\n        (token.type === 'tableRow' &&\n          (cellStart + 3 < index ||\n            events[cellStart][1].type !== 'whitespace')))\n    ) {\n      const cell = {\n        type: inDelimiterRow\n          ? 'tableDelimiter'\n          : inHead\n          ? 'tableHeader'\n          : 'tableData',\n        start: events[cellStart][1].start,\n        end: events[index][1].end\n      }\n      events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, [\n        'exit',\n        cell,\n        context\n      ])\n      events.splice(cellStart, 0, ['enter', cell, context])\n      index += 2\n      cellStart = index + 1\n      seenCellInRow = true\n    }\n\n    if (token.type === 'tableRow') {\n      inRow = events[index][0] === 'enter'\n\n      if (inRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableDelimiterRow') {\n      inDelimiterRow = events[index][0] === 'enter'\n\n      if (inDelimiterRow) {\n        cellStart = index + 1\n        seenCellInRow = false\n      }\n    }\n\n    if (token.type === 'tableHead') {\n      inHead = events[index][0] === 'enter'\n    }\n  }\n\n  return events\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this\n  /** @type {Array<Align>} */\n\n  const align = []\n  let tableHeaderCount = 0\n  /** @type {boolean|undefined} */\n\n  let seenDelimiter\n  /** @type {boolean|undefined} */\n\n  let hasDash\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // @ts-expect-error Custom.\n    effects.enter('table')._align = align\n    effects.enter('tableHead')\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    }\n\n    tableHeaderCount++\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function cellDividerHead(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    seenDelimiter = true\n    return cellBreakHead\n  }\n  /** @type {State} */\n\n  function cellBreakHead(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndHead(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    if (seenDelimiter) {\n      seenDelimiter = undefined\n      tableHeaderCount++\n    }\n\n    if (code === 124) {\n      return cellDividerHead(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceHead(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceHead\n    }\n\n    effects.exit('whitespace')\n    return cellBreakHead(code)\n  }\n  /** @type {State} */\n\n  function inCellContentHead(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakHead(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeHead : inCellContentHead\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeHead(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentHead\n    } // Anything else.\n\n    return inCellContentHead(code)\n  }\n  /** @type {State} */\n\n  function atRowEndHead(code) {\n    if (code === null) {\n      return nok(code)\n    }\n\n    effects.exit('tableRow')\n    effects.exit('tableHead')\n    const originalInterrupt = self.interrupt\n    self.interrupt = true\n    return effects.attempt(\n      {\n        tokenize: tokenizeRowEnd,\n        partial: true\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        effects.enter('tableDelimiterRow')\n        return atDelimiterRowBreak(code)\n      },\n      function (code) {\n        self.interrupt = originalInterrupt\n        return nok(code)\n      }\n    )(code)\n  }\n  /** @type {State} */\n\n  function atDelimiterRowBreak(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      align.push('none')\n      return inFillerDelimiter\n    }\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align.push('left')\n      return afterLeftAlignment\n    } // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceDelimiter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    }\n\n    effects.exit('whitespace')\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function inFillerDelimiter(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return inFillerDelimiter\n    }\n\n    effects.exit('tableDelimiterFiller')\n\n    if (code === 58) {\n      effects.enter('tableDelimiterAlignment')\n      effects.consume(code)\n      effects.exit('tableDelimiterAlignment')\n      align[align.length - 1] =\n        align[align.length - 1] === 'left' ? 'center' : 'right'\n      return afterRightAlignment\n    }\n\n    return atDelimiterRowBreak(code)\n  }\n  /** @type {State} */\n\n  function afterLeftAlignment(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller')\n      effects.consume(code)\n      hasDash = true\n      return inFillerDelimiter\n    } // Anything else is not ok.\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function afterRightAlignment(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return rowEndDelimiter(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceDelimiter\n    } // `|`\n\n    if (code === 124) {\n      effects.enter('tableCellDivider')\n      effects.consume(code)\n      effects.exit('tableCellDivider')\n      return atDelimiterRowBreak\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function rowEndDelimiter(code) {\n    effects.exit('tableDelimiterRow') // Exit if there was no dash at all, or if the header cell count is not the\n    // delimiter cell count.\n\n    if (!hasDash || tableHeaderCount !== align.length) {\n      return nok(code)\n    }\n\n    if (code === null) {\n      return tableClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, bodyStart, 'linePrefix', 4),\n        tableClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableClose(code) {\n    effects.exit('table')\n    return ok(code)\n  }\n  /** @type {State} */\n\n  function bodyStart(code) {\n    effects.enter('tableBody')\n    return rowStartBody(code)\n  }\n  /** @type {State} */\n\n  function rowStartBody(code) {\n    effects.enter('tableRow') // If we start with a pipe, we open a cell marker.\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    }\n\n    effects.enter('temporaryTableCellContent') // Can’t be space or eols at the start of a construct, so we’re in a cell.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function cellDividerBody(code) {\n    effects.enter('tableCellDivider')\n    effects.consume(code)\n    effects.exit('tableCellDivider')\n    return cellBreakBody\n  }\n  /** @type {State} */\n\n  function cellBreakBody(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return atRowEndBody(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.enter('whitespace')\n      effects.consume(code)\n      return inWhitespaceBody\n    } // `|`\n\n    if (code === 124) {\n      return cellDividerBody(code)\n    } // Anything else is cell content.\n\n    effects.enter('temporaryTableCellContent')\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function inWhitespaceBody(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return inWhitespaceBody\n    }\n\n    effects.exit('whitespace')\n    return cellBreakBody(code)\n  }\n  /** @type {State} */\n\n  function inCellContentBody(code) {\n    // EOF, whitespace, pipe\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit('temporaryTableCellContent')\n      return cellBreakBody(code)\n    }\n\n    effects.consume(code)\n    return code === 92 ? inCellContentEscapeBody : inCellContentBody\n  }\n  /** @type {State} */\n\n  function inCellContentEscapeBody(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code)\n      return inCellContentBody\n    } // Anything else.\n\n    return inCellContentBody(code)\n  }\n  /** @type {State} */\n\n  function atRowEndBody(code) {\n    effects.exit('tableRow')\n\n    if (code === null) {\n      return tableBodyClose(code)\n    }\n\n    return effects.check(\n      nextPrefixedOrBlank,\n      tableBodyClose,\n      effects.attempt(\n        {\n          tokenize: tokenizeRowEnd,\n          partial: true\n        },\n        factorySpace(effects, rowStartBody, 'linePrefix', 4),\n        tableBodyClose\n      )\n    )(code)\n  }\n  /** @type {State} */\n\n  function tableBodyClose(code) {\n    effects.exit('tableBody')\n    return tableClose(code)\n  }\n  /** @type {Tokenizer} */\n\n  function tokenizeRowEnd(effects, ok, nok) {\n    return start\n    /** @type {State} */\n\n    function start(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, prefixed, 'linePrefix')\n    }\n    /** @type {State} */\n\n    function prefixed(code) {\n      // Blank or interrupting line.\n      if (\n        self.parser.lazy[self.now().line] ||\n        code === null ||\n        markdownLineEnding(code)\n      ) {\n        return nok(code)\n      }\n\n      const tail = self.events[self.events.length - 1] // Indented code can interrupt delimiter and body rows.\n\n      if (\n        !self.parser.constructs.disable.null.includes('codeIndented') &&\n        tail &&\n        tail[1].type === 'linePrefix' &&\n        tail[2].sliceSerialize(tail[1], true).length >= 4\n      ) {\n        return nok(code)\n      }\n\n      self._gfmTableDynamicInterruptHack = true\n      return effects.check(\n        self.parser.constructs.flow,\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return nok(code)\n        },\n        function (code) {\n          self._gfmTableDynamicInterruptHack = false\n          return ok(code)\n        }\n      )(code)\n    }\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeNextPrefixedOrBlank(effects, ok, nok) {\n  let size = 0\n  return start\n  /** @type {State} */\n\n  function start(code) {\n    // This is a check, so we don’t care about tokens, but we open a bogus one\n    // so we’re valid.\n    effects.enter('check') // EOL.\n\n    effects.consume(code)\n    return whitespace\n  }\n  /** @type {State} */\n\n  function whitespace(code) {\n    if (code === -1 || code === 32) {\n      effects.consume(code)\n      size++\n      return size === 4 ? ok : whitespace\n    } // EOF or whitespace\n\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      return ok(code)\n    } // Anything else.\n\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Code} Code\n */\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nconst tasklistCheck = {\n  tokenize: tokenizeTasklistCheck\n}\nexport const gfmTaskListItem = {\n  text: {\n    [91]: tasklistCheck\n  }\n}\n/** @type {Tokenizer} */\n\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this\n  return open\n  /** @type {State} */\n\n  function open(code) {\n    if (\n      // Exit if there’s stuff before.\n      self.previous !== null || // Exit if not in the first content that is the first child of a list\n      // item.\n      !self._gfmTasklistFirstContentOfListItem\n    ) {\n      return nok(code)\n    }\n\n    effects.enter('taskListCheck')\n    effects.enter('taskListCheckMarker')\n    effects.consume(code)\n    effects.exit('taskListCheckMarker')\n    return inside\n  }\n  /** @type {State} */\n\n  function inside(code) {\n    // To match how GH works in comments, use `markdownSpace` (`[ \\t]`) instead\n    // of `markdownLineEndingOrSpace` (`[ \\t\\r\\n]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueUnchecked')\n      return close\n    }\n\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked')\n      effects.consume(code)\n      effects.exit('taskListCheckValueChecked')\n      return close\n    }\n\n    return nok(code)\n  }\n  /** @type {State} */\n\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker')\n      effects.consume(code)\n      effects.exit('taskListCheckMarker')\n      effects.exit('taskListCheck')\n      return effects.check(\n        {\n          tokenize: spaceThenNonSpace\n        },\n        ok,\n        nok\n      )\n    }\n\n    return nok(code)\n  }\n}\n/** @type {Tokenizer} */\n\nfunction spaceThenNonSpace(effects, ok, nok) {\n  const self = this\n  return factorySpace(effects, after, 'whitespace')\n  /** @type {State} */\n\n  function after(code) {\n    const tail = self.events[self.events.length - 1]\n    return (\n      // We either found spaces…\n      ((tail && tail[1].type === 'whitespace') || // …or it was followed by a line ending, in which case, there has to be\n        // non-whitespace after that line ending, because otherwise we’d get an\n        // EOF as the content is closed with blank lines.\n        markdownLineEnding(code)) &&\n        code !== null\n        ? ok(code)\n        : nok(code)\n    )\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-from-markdown').Transform} FromMarkdownTransform\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n *\n * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction\n * @typedef {import('mdast-util-find-and-replace').RegExpMatchObject} RegExpMatchObject\n */\n\nimport {ccount} from 'ccount'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n// To do: next major: expose functions instead of extensions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM autolink literals.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmAutolinkLiteralFromMarkdown = {\n  transforms: [transformGfmAutolinkLiterals],\n  enter: {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n  },\n  exit: {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmAutolinkLiteralToMarkdown = {\n  unsafe: [\n    {\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    },\n    {character: ':', before: '[ps]', after: '\\\\/', inConstruct, notInConstruct}\n  ]\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = /** @type {Link} */ (this.stack[this.stack.length - 1])\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/g, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Link | Array<PhrasingContent> | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    (!email || code !== 47)\n  )\n}\n","/**\n * @typedef {import('../types.js').AssociationId} AssociationId\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @typedef {import('../types.js').IndentLines} IndentLines\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n */\n\n/**\n * @param {Unsafe} pattern\n * @returns {RegExp}\n */\nexport function patternCompile(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').SafeConfig} SafeConfig\n */\n\nimport {patternCompile} from './pattern-compile.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(\n        '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'\n      )\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @typedef Options\n *   Configuration (optional).\n * @property {string|null|ReadonlyArray<string|null|undefined>} [align]\n *   One style for all columns, or styles for their respective columns.\n *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).\n *   Other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left.\n *   *Only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean} [padding=true]\n *   Whether to add a space of padding between delimiters and cells.\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {boolean} [delimiterStart=true]\n *   Whether to begin each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean} [delimiterEnd=true]\n *   Whether to end each row with the delimiter.\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean} [alignDelimiters=true]\n *   Whether to align the delimiters.\n *   By default, they are aligned:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {(value: string) => number} [stringLength]\n *   Function to detect the length of table cell content.\n *   This is used when aligning the delimiters (`|`) between table cells.\n *   Full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source.\n *   To fix this, you can pass this function, which receives the cell content\n *   and returns its “visible” size.\n *   Note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @typedef {Options} MarkdownTableOptions\n * @todo\n *   Remove next major.\n */\n\n/**\n * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..\n *\n * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table\n *   Table data (matrix of strings).\n * @param {Options} [options]\n *   Configuration (optional).\n * @returns {string}\n */\nexport function markdownTable(table, options = {}) {\n  const align = (options.align || []).concat()\n  const stringLength = options.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (options.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      options.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (options.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (options.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (options.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        options.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(options.alignDelimiters === false && cell === '') &&\n        (options.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (options.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (options.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (options.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        options.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      options.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string|null|undefined} [value]\n * @returns {string}\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string} value\n * @returns {number}\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * @param {string|null|undefined} value\n * @returns {number}\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n    ? 108 /* `l` */\n    : code === 82 /* `R` */ || code === 114 /* `r` */\n    ? 114 /* `r` */\n    : 0\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').InlineCode} InlineCode\n *\n * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext\n * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells.\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters.\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {inlineCode} from 'mdast-util-to-markdown/lib/handle/inline-code.js'\nimport {markdownTable} from 'markdown-table'\n\n// To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.\n// To do: next major: use `defaultHandlers.inlineCode`.\n// To do: next major: expose functions.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM tables.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTableFromMarkdown = {\n  enter: {\n    table: enterTable,\n    tableData: enterCell,\n    tableHeader: enterCell,\n    tableRow: enterRow\n  },\n  exit: {\n    codeText: exitCodeText,\n    table: exitTable,\n    tableData: exit,\n    tableHeader: exit,\n    tableRow: exit\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  /** @type {Array<'left' | 'right' | 'center' | 'none'>} */\n  // @ts-expect-error: `align` is custom.\n  const align = token._align\n  this.enter(\n    {\n      type: 'table',\n      align: align.map((d) => (d === 'none' ? null : d)),\n      children: []\n    },\n    token\n  )\n  this.setData('inTable', true)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.setData('inTable')\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.getData('inTable')) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1])\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      table: handleTable,\n      tableRow: handleTableRow,\n      tableCell: handleTableCell,\n      inlineCode: inlineCodeWithTable\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, context, safeOptions) {\n    return serializeData(\n      handleTableAsData(node, context, safeOptions),\n      node.align\n    )\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, context, safeOptions) {\n    const row = handleTableRowAsData(node, context, safeOptions)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, context, safeOptions) {\n    const exit = context.enter('tableCell')\n    const subexit = context.enter('phrasing')\n    const value = containerPhrasing(node, context, {\n      ...safeOptions,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = context.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(\n        children[index],\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {ToMarkdownContext} context\n   * @param {SafeOptions} safeOptions\n   */\n  function handleTableRowAsData(node, context, safeOptions) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = context.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(\n        children[index],\n        node,\n        context,\n        safeOptions\n      )\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, context) {\n    let value = inlineCode(node, parent, context)\n\n    if (context.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('../types.js').Map} Map\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Info} Info\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parent | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'tab'\n\n  // To do: remove in a major.\n  // @ts-expect-error: deprecated.\n  if (style === 1 || style === '1') {\n    return 'one'\n  }\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Options} Options\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\n/**\n * @typedef {Extract<Root | Content, Parent>} Parents\n */\n\nimport {listItem} from 'mdast-util-to-markdown/lib/handle/list-item.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: rename `context` -> `state`, `safeOptions` -> `info`, use\n// `track` from `state`.\n// To do: next major: replace exports with functions.\n// To do: next major: use `defaulthandlers.listItem`.\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM task list items.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmTaskListItemFromMarkdown = {\n  exit: {\n    taskListCheckValueChecked: exitCheck,\n    taskListCheckValueUnchecked: exitCheck,\n    paragraph: exitParagraphWithTaskListItem\n  }\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM task list items.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmTaskListItemToMarkdown = {\n  unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n  handlers: {listItem: listItemWithTaskListItem}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  const node = /** @type {ListItem} */ (this.stack[this.stack.length - 2])\n  // We’re always in a paragraph, in a list item.\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = /** @type {Parents} */ (this.stack[this.stack.length - 2])\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = /** @type {Paragraph} */ (this.stack[this.stack.length - 1])\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, context, safeOptions) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = track(safeOptions)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = listItem(node, parent, context, {\n    ...safeOptions,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('micromark-extension-gfm').Options & import('mdast-util-gfm').Options} Options\n */\n\nimport {gfm} from 'micromark-extension-gfm'\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\n\n/**\n * Plugin to support GFM (autolink literals, footnotes, strikethrough, tables, tasklists).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function remarkGfm(options = {}) {\n  const data = this.data()\n\n  add('micromarkExtensions', gfm(options))\n  add('fromMarkdownExtensions', gfmFromMarkdown())\n  add('toMarkdownExtensions', gfmToMarkdown(options))\n\n  /**\n   * @param {string} field\n   * @param {unknown} value\n   */\n  function add(field, value) {\n    const list = /** @type {unknown[]} */ (\n      // Other extensions\n      /* c8 ignore next 2 */\n      data[field] ? data[field] : (data[field] = [])\n    )\n\n    list.push(value)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Support GFM or markdown on github.com.\n *\n * @param {Options} [options]\n * @returns {Extension}\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral,\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable,\n    gfmTaskListItem\n  ])\n}\n\n/**\n * Support to compile GFM to HTML.\n *\n * @param {HtmlOptions} [options]\n * @returns {HtmlExtension}\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml,\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml,\n    gfmTableHtml,\n    gfmTagfilterHtml,\n    gfmTaskListItemHtml\n  ])\n}\n","/**\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * @typedef {import('mdast-util-gfm-table').Options} Options\n *   Configuration.\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown,\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown,\n    gfmTableFromMarkdown,\n    gfmTaskListItemFromMarkdown\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown,\n      gfmFootnoteToMarkdown(),\n      gfmStrikethroughToMarkdown,\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown\n    ]\n  }\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\nmodule.exports.default = StyleToObject; // ESM support\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n"],"names":["_interopRequireDefault","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","getCardActionAreaUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardActionAreaRoot","styled","ButtonBase","name","overridesResolver","props","styles","root","theme","display","textAlign","width","opacity","vars","palette","action","hoverOpacity","focusOpacity","CardActionAreaFocusHighlight","focusHighlight","overflow","pointerEvents","position","top","right","bottom","left","borderRadius","backgroundColor","transition","transitions","create","duration","short","inProps","ref","useThemeProps","children","className","focusVisibleClassName","other","ownerState","classes","composeClasses","useUtilityClasses","focusVisible","getLinkUtilityClass","colorTransformations","primary","textPrimary","secondary","textSecondary","error","transformedColor","color","transformDeprecatedColors","channelColor","LinkRoot","Typography","capitalize","underline","component","button","textDecoration","textDecorationColor","WebkitTapHighlightColor","outline","border","margin","padding","cursor","userSelect","verticalAlign","MozAppearance","WebkitAppearance","borderStyle","onBlur","onFocus","TypographyClasses","variant","sx","isFocusVisibleRef","handleBlurVisible","handleFocusVisible","focusVisibleRef","useIsFocusVisible","setFocusVisible","handlerRef","useForkRef","slots","event","current","Object","keys","includes","Array","isArray","element","document","createElement","decodeNamedCharacterReference","value","characterReference","innerHTML","char","textContent","charCodeAt","length","hasOwn","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","arr","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","enumerable","configurable","newValue","writable","getProperty","module","extend","src","copy","copyIsArray","clone","arguments","i","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","start","line","node","Position","whitespace","this","end","source","content","errorsList","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","isBuffer","blankLine","tokenize","effects","ok","nok","f","code","partial","factorySpace","max","limit","Number","POSITIVE_INFINITY","size","enter","prefix","consume","exit","asciiAlpha","regexCheck","asciiDigit","asciiHexDigit","asciiAlphanumeric","asciiPunctuation","asciiAtext","asciiControl","markdownLineEndingOrSpace","markdownLineEnding","markdownSpace","unicodeWhitespace","unicodePunctuation","regex","test","String","fromCharCode","splice","list","remove","items","parameters","chunkStart","from","unshift","apply","classifyCharacter","combineExtensions","extensions","all","index","syntaxExtension","extension","hook","undefined","constructs","existing","before","add","decodeNumericCharacterReference","base","parseInt","characterEscapeOrReference","decodeString","decode","$0","$1","$2","head","hex","normalizeIdentifier","toLowerCase","toUpperCase","resolveAll","events","context","called","resolve","stringifyPosition","point","VFileMessage","place","origin","parts","super","indexOf","message","stack","fatal","ruleId","file","actual","expected","url","note","path","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","join","segments","joined","absolute","allowAboveRoot","lastSlashIndex","result","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","buffer","data","messages","history","stored","map","assertNonEmpty","assertPart","stem","encoding","info","fail","part","bail","getPrototypeOf","Symbol","toStringTag","iterator","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","output","fn","middleware","wrapped","fnExpectsCallback","done","Promise","then","wrap","use","middelware","unified","transformers","attachers","frozen","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","attacher","transformer","settings","addPlugin","addList","addPreset","assign","plugin","plugins","entry","parse","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","executor","reject","tree","runSync","complete","assertDone","process","processSync","destination","asyncName","Boolean","looksLikeAVFile","one","includeImageAlt","alt","contentStart","attempt","parser","contentInitial","lineStart","previous","token","contentType","self","childFlow","childToken","lineStartOffset","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","disable","null","subtokenize","jumps","lineIndex","otherIndex","otherEvent","subevents","more","_isInFirstContentOfListItem","subcontent","_container","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","adjust","breaks","_gfmTasklistFirstContentOfListItem","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","createResolver","string","initializeFactory","field","text","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","tabs","bufferIndex","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","accountForPotentialSkip","fields","constructFactory","construct","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","expectedCode","state","startIndex","startBufferIndex","endIndex","endBufferIndex","view","sliceChunks","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","after","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","destinationEnclosedBefore","destinationRaw","destinationEnclosed","destinationEnclosedEscape","destinationRawEscape","factoryLabel","markerType","label","labelEscape","factoryTitle","atFirstTitleBreak","atTitleBreak","title","titleEscape","factoryWhitespace","definition","identifier","labelAfter","titleConstruct","defined","codeIndented","afterStartPrefix","afterPrefix","indentedContent","headingAtx","fenceOpenInside","headingBreak","setextUnderline","paragraph","closingSequence","closingSequenceEnd","heading","htmlBlockNames","htmlRawNames","htmlFlow","startTag","declarationStart","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","basicSelfClosing","completeAttributeNameBefore","completeClosingTagAfter","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCharacterDataInside","continuationAtLineEnding","nextBlankConstruct","htmlContinueStart","htmlLineEnd","continuationRawEndTag","codeFenced","closingFenceConstruct","closingSequenceStart","sizeOpen","nonLazyLine","initialPrefix","sequenceOpen","infoOpen","openAfter","infoAfter","meta","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","balanced","afterLabelEnd","resourceConstruct","fullReferenceConstruct","collapsedReferenceConstruct","close","media","group","insideSpan","destinationAfter","between","afterLabel","labelStartImage","attention","attentionMarkers","_open","_close","openingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","declarationOpen","instruction","tagOpen","commentOpen","cdataOpen","commentStart","commentStartDash","commentClose","atLineEnding","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","labelStartLink","hardBreakEscape","codeText","gap","tailExitIndex","headEnterIndex","search","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","depth","referenceType","ancestor","fragment","ordered","spread","checked","compiler","postprocess","concat","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","combined","normalizeUri","skip","encodeURIComponent","visit","visitor","reverse","parents","parent","pointStart","pointEnd","clean","footnoteReference","id","safeId","footnoteOrder","counter","footnoteCounts","reuseCounter","properties","clobberPrefix","dataFootnoteRef","ariaDescribedBy","patch","sup","applyData","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","codePointAt","handlers","blockquote","break","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","results","loose","listLoose","disabled","child","table","rows","firstRow","shift","tableContent","body","tableCell","tableRow","siblings","align","cellIndex","cells","cell","alignValue","toml","ignore","yaml","footnoteDefinition","createState","allowDangerousHtml","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","footnoteBackLabel","unknownHandler","passThrough","cache","definitions","augment","hName","hProperties","hChildren","ctx","generated","to","defaultUnknownHandler","nodes","toHast","foot","listItems","referenceIndex","backReferences","backReference","dataFootnoteBackref","ariaLabel","tailTail","dataFootnotes","footer","bridge","mutate","Schema","normal","space","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","checks","DefinedInfo","mask","mark","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","translate","typeMustMatch","useMap","aLink","archive","axis","background","bgColor","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textRendering","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cx","cy","defaultAction","descent","diffuseConstant","direction","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","operator","orient","orientation","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","unwrapDisallowed","thing","valid","dash","cap","kebab","camelcase","hastToReact","protocols","uriTransformer","uri","first","colon","tableElements","Set","childrenToReact","childIndex","toReact","has","skipHtml","transformLinkUri","parentSchema","schema","addProperty","listDepth","components","basic","linkTarget","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","v","styleReplacer","parseStyle","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehypeOptions","rehypePlugins","hastNode","propTypes","www","w2","w3","dot","domain","hasUnderscoreInLastSegment","hasUnderscoreInLastLastSegment","namedCharacterReference","punctuationContinuation","punctuation","inPath","continuedPunctuation","parenAtPathEnd","pathEnd","trailingPunctuation","wwwAutolink","previousWww","previousUnbalanced","httpAutolink","previousHttp","t1","t2","p","s","slash1","slash2","emailAutolink","hasDot","hasDigitInLastSegment","gfmAtext","previousEmail","atext","dotContinuation","dashOrUnderscoreContinuation","afterDashOrUnderscore","gfmAutolinkLiteral","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","gfmTable","seenDelimiter","hasDash","tableHeaderCount","_align","cellDividerHead","inCellContentHead","cellBreakHead","originalInterrupt","tokenizeRowEnd","atDelimiterRowBreak","atRowEndHead","inWhitespaceHead","inCellContentEscapeHead","rowEndDelimiter","inWhitespaceDelimiter","inFillerDelimiter","afterLeftAlignment","afterRightAlignment","tableClose","nextPrefixedOrBlank","bodyStart","rowStartBody","cellDividerBody","inCellContentBody","cellBreakBody","tableBodyClose","atRowEndBody","inWhitespaceBody","inCellContentEscapeBody","inHead","inDelimiterRow","inRow","cellStart","seenCellInRow","tasklistCheck","spaceThenNonSpace","gfmTaskListItem","ccount","character","findAndReplace","RegExp","ignored","pairs","toExpression","toFunction","toPairs","pairIndex","grandparent","change","matchObject","global","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","findUrl","findEmail","literalAutolink","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","gfmAutolinkLiteralToMarkdown","unsafe","split","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","email","association","repeat","eol","patternCompile","_compiled","patternInScope","listInScope","none","safe","positions","infos","expression","sort","numerical","escapeBackslashes","encode","a","b","whole","track","lineShift","move","enterFootnoteDefinition","enterFootnoteDefinitionLabelString","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","enterFootnoteCall","enterFootnoteCallString","exitFootnoteCallString","exitFootnoteCall","safeOptions","tracker","subexit","indentLines","indexStack","createTracker","handle","bulletLastUsed","containerFlow","blank","containerPhrasing","peek","handleDelete","gfmStrikethroughFromMarkdown","gfmStrikethroughToMarkdown","defaultStringLength","toAlignment","gfmTableFromMarkdown","tableData","enterCell","tableHeader","gfmTableToMarkdown","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","columnIndex","delimiterStart","delimiterEnd","markdownTable","listItemIndent","checkListItemIndent","bullet","bulletCurrent","checkBullet","incrementListMarker","gfmTaskListItemFromMarkdown","taskListCheckValueChecked","exitCheck","taskListCheckValueUnchecked","firstParaghraph","sibling","gfmTaskListItemToMarkdown","checkable","checkbox","remarkGfm","gfm","gfmFootnoteDefinition","gfmFootnoteDefinitionLabelString","gfmFootnoteCall","gfmFootnoteCallString","gfmToMarkdown","StyleToObject","hasIterator","len","convert","castFactory","typeFactory","tests","any","anyFactory","propsFactory","visitParents","factory","subresult","grandparents","toResult"],"sourceRoot":""}