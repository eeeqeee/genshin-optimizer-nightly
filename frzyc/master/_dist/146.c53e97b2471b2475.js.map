{"version":3,"file":"146.c53e97b2471b2475.js","mappings":"4HAOO,SAASA,EACdC,EACAC,GAEA,MAAMC,GAAQC,EAAAA,EAAAA,IAAOH,GAAYI,GAASC,EAAYD,KAEtD,OADAH,EAAGC,IACIC,EAAAA,EAAAA,IAAOD,GAAQI,GAAOC,EAAoBD,IACnD,CAEO,SAASE,EACdJ,EACAH,GAEA,MAAMK,EAAKD,EAAYD,GAEvB,OADAH,EAAGK,GACIC,EAAoBD,EAC7B,CAEA,SAASD,EACPD,GAEA,OAAOK,OAAOC,YACZN,EAAKO,KAAKC,GAAM,CAACA,EAAG,CAAEC,MAAO,EAAGC,QAAS,MAE7C,CAEA,SAASP,EAA2CQ,GAClD,OAAOZ,EAAAA,EAAAA,IAAOY,GAAK,EAAGF,QAAOC,aAC3BA,IAAYD,EAAS,GAAEA,IAAW,GAAEC,KAAWD,KAEnD,C","sources":["webpack:///./src/app/Util/totalUtils.ts"],"sourcesContent":["import { objMap } from '@genshin-optimizer/util'\ntype Entry = {\n  total: number\n  current: number\n}\ntype CatTotalKey = string | number | symbol\n// A helper function to generate multiple `current/total` formated string object with categories using a single callback\nexport function bulkCatTotal(\n  catTotals: Record<CatTotalKey, readonly CatTotalKey[]>,\n  cb: (ctMap: Record<CatTotalKey, Record<CatTotalKey, Entry>>) => void\n) {\n  const ctMap = objMap(catTotals, (keys) => catTotalObj(keys))\n  cb(ctMap)\n  return objMap(ctMap, (ct) => catTotalToStringObj(ct))\n}\n// A helper function to generate a `current/total` formated string object with categories\nexport function catTotal<T extends CatTotalKey>(\n  keys: readonly T[],\n  cb: (ct: Record<T, Entry>) => void\n) {\n  const ct = catTotalObj(keys)\n  cb(ct)\n  return catTotalToStringObj(ct)\n}\n\nfunction catTotalObj<T extends CatTotalKey>(\n  keys: readonly T[]\n): Record<T, Entry> {\n  return Object.fromEntries(\n    keys.map((k) => [k, { total: 0, current: 0 }])\n  ) as Record<T, Entry>\n}\n\nfunction catTotalToStringObj<T extends CatTotalKey>(tot: Record<T, Entry>) {\n  return objMap(tot, ({ total, current }) =>\n    current === total ? `${total}` : `${current}/${total}`\n  ) as Record<T, string>\n}\n"],"names":["bulkCatTotal","catTotals","cb","ctMap","objMap","keys","catTotalObj","ct","catTotalToStringObj","catTotal","Object","fromEntries","map","k","total","current","tot"],"sourceRoot":""}