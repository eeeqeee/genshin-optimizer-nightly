{"version":3,"file":"36.e336074b68958b45.js","mappings":"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","sources":["webpack:///./src/app/Components/Artifact/SlotIcon.tsx","webpack:///./src/app/PageHome/InventoryCard.tsx","webpack:///./src/app/PageHome/QuickLinksCard.tsx","webpack:///./src/app/PageHome/ResinCard.tsx","webpack:///./src/app/PageHome/TeamCard.tsx","webpack:///./src/app/PageHome/VidGuideCard.tsx","webpack:///./src/app/PageHome/index.tsx"],"sourcesContent":["import type { ArtifactSlotKey } from '@genshin-optimizer/consts'\nimport {\n  CircletIcon,\n  FlowerIcon,\n  GobletIcon,\n  PlumeIcon,\n  SandsIcon,\n} from '@genshin-optimizer/gi-svgicons'\nimport type { SvgIconProps } from '@mui/material'\n\nexport default function SlotIcon({\n  slotKey,\n  iconProps = {},\n}: {\n  slotKey: ArtifactSlotKey\n  iconProps?: SvgIconProps\n}) {\n  switch (slotKey) {\n    case 'flower':\n      return <FlowerIcon {...iconProps} />\n    case 'plume':\n      return <PlumeIcon {...iconProps} />\n    case 'sands':\n      return <SandsIcon {...iconProps} />\n    case 'goblet':\n      return <GobletIcon {...iconProps} />\n    case 'circlet':\n      return <CircletIcon {...iconProps} />\n  }\n}\n","import {\n  allArtifactSlotKeys,\n  allElementKeys,\n  allWeaponTypeKeys,\n} from '@genshin-optimizer/consts'\nimport { imgAssets } from '@genshin-optimizer/g-assets'\nimport { FlowerIcon } from '@genshin-optimizer/gi-svgicons'\nimport { AnvilIcon } from '@genshin-optimizer/svgicons'\nimport { objKeyMap } from '@genshin-optimizer/util'\nimport { BusinessCenter, People } from '@mui/icons-material'\nimport {\n  CardActionArea,\n  CardContent,\n  CardHeader,\n  Chip,\n  Divider,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@mui/material'\nimport { useContext, useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { Link as RouterLink } from 'react-router-dom'\nimport SlotIcon from '../Components/Artifact/SlotIcon'\nimport CardDark from '../Components/Card/CardDark'\nimport CardLight from '../Components/Card/CardLight'\nimport ImgIcon from '../Components/Image/ImgIcon'\nimport { getCharSheet } from '../Data/Characters'\nimport { getWeaponSheet } from '../Data/Weapons'\nimport { DatabaseContext } from '../Database/Database'\nimport { ElementIcon } from '../KeyMap/StatIcon'\nimport useDBMeta from '../ReactHooks/useDBMeta'\n\nexport default function InventoryCard() {\n  const { t } = useTranslation(['page_home', 'ui'])\n  const { database } = useContext(DatabaseContext)\n  const { gender } = useDBMeta()\n  const { characterTally, characterTotal } = useMemo(() => {\n    const chars = database.chars.keys\n    const tally = objKeyMap(allElementKeys, () => 0)\n    chars.forEach((ck) => {\n      const elementKey = getCharSheet(ck, gender).elementKey\n      tally[elementKey] = tally[elementKey] + 1\n    })\n    return { characterTally: tally, characterTotal: chars.length }\n  }, [database, gender])\n\n  const { weaponTally, weaponTotal } = useMemo(() => {\n    const weapons = database.weapons.values\n    const tally = objKeyMap(allWeaponTypeKeys, () => 0)\n    weapons.forEach((wp) => {\n      const type = getWeaponSheet(wp.key).weaponType\n      tally[type] = tally[type] + 1\n    })\n    return { weaponTally: tally, weaponTotal: weapons.length }\n  }, [database])\n\n  const { artifactTally, artifactTotal } = useMemo(() => {\n    const tally = objKeyMap(allArtifactSlotKeys, () => 0)\n    const arts = database.arts.values\n    arts.forEach((art) => {\n      const slotKey = art.slotKey\n      tally[slotKey] = tally[slotKey] + 1\n    })\n    return { artifactTally: tally, artifactTotal: arts.length }\n  }, [database])\n  const theme = useTheme()\n  const smaller = !useMediaQuery(theme.breakpoints.up('md'))\n\n  return (\n    <CardDark>\n      <CardHeader\n        title={<Typography variant=\"h5\">{t`inventoryCard.title`}</Typography>}\n        avatar={<BusinessCenter fontSize=\"large\" />}\n      />\n      <Divider />\n      <CardContent sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n        <CardLight>\n          <CardActionArea\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              p: 2,\n              gap: 1,\n              flexWrap: 'wrap',\n            }}\n            component={RouterLink}\n            to=\"/characters\"\n          >\n            <Chip\n              label={\n                <strong>\n                  {t(`ui:tabs.characters`)} {characterTotal}\n                </strong>\n              }\n              icon={<People />}\n              sx={{\n                flexBasis: smaller ? '100%' : 'auto',\n                flexGrow: 1,\n                cursor: 'pointer',\n              }}\n              color={characterTotal ? 'primary' : 'secondary'}\n            />\n            {Object.entries(characterTally).map(([ele, num]) => (\n              <Chip\n                key={ele}\n                sx={{ flexGrow: 1, cursor: 'pointer' }}\n                color={num ? ele : 'secondary'}\n                icon={<ElementIcon ele={ele} />}\n                label={<strong>{num}</strong>}\n              />\n            ))}\n          </CardActionArea>\n        </CardLight>\n        <CardLight>\n          <CardActionArea\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              p: 2,\n              gap: 1,\n              flexWrap: 'wrap',\n            }}\n            component={RouterLink}\n            to=\"/weapons\"\n          >\n            <Chip\n              label={\n                <strong>\n                  {t(`ui:tabs.weapons`)} {weaponTotal}\n                </strong>\n              }\n              icon={<AnvilIcon />}\n              sx={{\n                flexBasis: smaller ? '100%' : 'auto',\n                flexGrow: 1,\n                cursor: 'pointer',\n              }}\n              color={weaponTotal ? 'primary' : 'secondary'}\n            />\n            {Object.entries(weaponTally).map(([wt, num]) => (\n              <Chip\n                key={wt}\n                sx={{ flexGrow: 1, cursor: 'pointer' }}\n                color={num ? 'success' : 'secondary'}\n                icon={<ImgIcon src={imgAssets.weaponTypes?.[wt]} size={2} />}\n                label={<strong>{num}</strong>}\n              />\n            ))}\n          </CardActionArea>\n        </CardLight>\n        <CardLight>\n          <CardActionArea\n            sx={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              p: 2,\n              gap: 1,\n              flexWrap: 'wrap',\n            }}\n            component={RouterLink}\n            to=\"/artifacts\"\n          >\n            <Chip\n              label={\n                <strong>\n                  {t(`ui:tabs.artifacts`)} {artifactTotal}\n                </strong>\n              }\n              icon={<FlowerIcon />}\n              sx={{\n                flexBasis: smaller ? '100%' : 'auto',\n                flexGrow: 1,\n                cursor: 'pointer',\n              }}\n              color={artifactTotal ? 'primary' : 'secondary'}\n            />\n            {Object.entries(artifactTally).map(([slotKey, num]) => (\n              <Chip\n                key={slotKey}\n                sx={{ flexGrow: 1, cursor: 'pointer' }}\n                color={num ? 'success' : 'secondary'}\n                icon={<SlotIcon slotKey={slotKey} />}\n                label={<strong>{num}</strong>}\n              />\n            ))}\n          </CardActionArea>\n        </CardLight>\n      </CardContent>\n    </CardDark>\n  )\n}\n","/* eslint @typescript-eslint/no-unused-vars: [ \"warn\", { \"argsIgnorePattern\": \"^_|^t$\" } ] */\nimport {\n  DiscordIcon,\n  PatreonIcon,\n  PaypalIcon,\n  TwitchIcon,\n} from '@genshin-optimizer/svgicons'\nimport {\n  Article,\n  Description,\n  GitHub,\n  Handshake,\n  InsertLink,\n  Scanner,\n  Twitter,\n  YouTube,\n} from '@mui/icons-material'\nimport {\n  Button,\n  CardContent,\n  CardHeader,\n  Divider,\n  Link,\n  Tooltip,\n  Typography,\n} from '@mui/material'\nimport { useTranslation } from 'react-i18next'\nimport { Link as RouterLink } from 'react-router-dom'\nimport CardDark from '../Components/Card/CardDark'\n\nconst buttons = [\n  {\n    title: () => 'Genshin Optimizer Discord',\n    icon: <DiscordIcon />,\n    tooltip: (t) => '',\n    url: process.env.NX_URL_DISCORD_GO,\n    color: 'discord',\n  },\n  {\n    title: () => 'Genshin Optimizer Github',\n    icon: <GitHub />,\n    tooltip: (t) => '',\n    url: process.env.NX_URL_GITHUB_GO,\n    color: 'white',\n  },\n  {\n    title: (t) => t`quickLinksCard.buttons.patchNotes.title`,\n    icon: <Description />,\n    tooltip: (t) => t`quickLinksCard.buttons.patchNotes.tooltip`,\n    url: `${process.env.NX_URL_GITHUB_GO}/releases`,\n    color: 'secondary',\n  },\n  {\n    title: (t) => t`quickLinksCard.buttons.tyGuide.title`,\n    icon: <YouTube />,\n    tooltip: (t) => t`quickLinksCard.buttons.tyGuide.tooltip`,\n    url: process.env.NX_URL_YOUTUBE_TUTPL,\n    color: 'red',\n  },\n  {\n    title: () => 'Twitch (frzyc)',\n    icon: <TwitchIcon />,\n    tooltip: (t) => '',\n    url: process.env.NX_URL_TWITCH_FRZYC,\n    color: 'twitch',\n  },\n  {\n    title: () => 'Twitter (frzyc)',\n    icon: <Twitter />,\n    tooltip: (t) => '',\n    url: process.env.NX_URL_TWITTER_FRZYC,\n    color: 'twitter',\n  },\n  {\n    title: () => 'Patreon (frzyc)',\n    icon: <PatreonIcon />,\n    tooltip: (t) => '',\n    url: process.env.NX_URL_PATREON_FRZYC,\n    color: 'patreon',\n  },\n  {\n    title: () => 'PayPal (frzyc)',\n    icon: <PaypalIcon />,\n    tooltip: (t) => '',\n    url: process.env.NX_URL_PAYPAL_FRZYC,\n    color: 'paypal',\n  },\n  {\n    title: (t) => t`quickLinksCard.buttons.scanners.title`,\n    icon: <Scanner />,\n    tooltip: (t) => t`quickLinksCard.buttons.scanners.tooltip`,\n    to: '/scanner',\n    color: 'primary',\n  },\n  {\n    title: (t) => t`quickLinksCard.buttons.kqm.title`,\n    icon: <Handshake />,\n    tooltip: (t) => t`quickLinksCard.buttons.kqm.tooltip`,\n    url: process.env.NX_URL_WEBSITE_KQM,\n    color: 'keqing',\n  },\n  {\n    title: (t) => t`quickLinksCard.buttons.devDiscord.title`,\n    icon: <DiscordIcon />,\n    tooltip: (t) => t`quickLinksCard.buttons.devDiscord.tooltip`,\n    url: process.env.NX_URL_DISCORD_GDEV,\n    color: 'discord',\n  },\n  {\n    title: (t) => t`quickLinksCard.buttons.good.title`,\n    icon: <Article />,\n    tooltip: (t) => t`quickLinksCard.buttons.good.tooltip`,\n    to: '/doc',\n    color: 'primary',\n  },\n] as const\n\nexport default function QuickLinksCard() {\n  const { t } = useTranslation(['page_home', 'ui'])\n  return (\n    <CardDark>\n      <CardHeader\n        title={<Typography variant=\"h5\">{t`quickLinksCard.title`}</Typography>}\n        avatar={<InsertLink fontSize=\"large\" />}\n      />\n      <Divider />\n      <CardContent sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n        {buttons.map((btnProps, i) => {\n          const { title, icon, tooltip, color } = btnProps\n          let button\n          if ('to' in btnProps)\n            button = (\n              <Button\n                fullWidth\n                key={i}\n                color={color}\n                component={RouterLink}\n                to={btnProps.to}\n                startIcon={icon}\n              >\n                {title(t)}\n              </Button>\n            )\n          if ('url' in btnProps)\n            button = (\n              <Button\n                fullWidth\n                key={i}\n                color={color}\n                component={Link}\n                href={btnProps.url}\n                target=\"_blank\"\n                rel=\"noopener\"\n                startIcon={icon}\n              >\n                {title(t)}\n              </Button>\n            )\n          return (\n            <Tooltip key={i} title={tooltip(t)} placement=\"top\" arrow>\n              {button}\n            </Tooltip>\n          )\n        })}\n      </CardContent>\n    </CardDark>\n  )\n}\n","import { imgAssets } from '@genshin-optimizer/g-assets'\nimport { SECOND_MS } from '@genshin-optimizer/util'\nimport { AccessTimeFilled } from '@mui/icons-material'\nimport {\n  CardActionArea,\n  CardContent,\n  CardHeader,\n  Divider,\n  Typography,\n} from '@mui/material'\nimport { useContext, useEffect, useRef, useState } from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\nimport CardDark from '../Components/Card/CardDark'\nimport CardLight from '../Components/Card/CardLight'\nimport ImgIcon from '../Components/Image/ImgIcon'\nimport { DatabaseContext } from '../Database/Database'\nimport { RESIN_MAX, timeZones } from '../Database/DataEntries/DisplayTool'\nimport { RESIN_RECH_MS } from '../PageTools/ResinCounter'\n\nexport default function ResinCard() {\n  const { database } = useContext(DatabaseContext)\n  const [{ timeZoneKey, resin, resinDate }, setState] = useState(() =>\n    database.displayTool.get()\n  )\n  useEffect(\n    () => database.displayTool.follow((r, s) => setState(s)),\n    [database]\n  )\n  const [time, setTime] = useState(\n    new Date(Date.now() + timeZones[timeZoneKey])\n  )\n\n  useEffect(() => {\n    const setSecondTimeout = () => {\n      setTime(new Date(Date.now() + timeZones[timeZoneKey]))\n      return setTimeout(() => {\n        interval = setSecondTimeout()\n      }, SECOND_MS - (Date.now() % SECOND_MS))\n    }\n    let interval = setSecondTimeout()\n    return () => clearTimeout(interval)\n  }, [timeZoneKey])\n\n  const resinIncrement = useRef(undefined as undefined | NodeJS.Timeout)\n\n  const setResin = (newResin: number) => {\n    if (newResin >= RESIN_MAX) {\n      resinIncrement.current && clearTimeout(resinIncrement.current)\n      resinIncrement.current = undefined\n    } else\n      resinIncrement.current = setTimeout(\n        () => console.log('set resin', newResin + 1),\n        RESIN_RECH_MS\n      )\n    database.displayTool.set({\n      resin: newResin,\n      resinDate: new Date().getTime(),\n    })\n  }\n\n  useEffect(() => {\n    if (resin < RESIN_MAX) {\n      const now = Date.now()\n      const resinToMax = RESIN_MAX - resin\n      const resinSinceLastDate = Math.min(\n        Math.floor((now - resinDate) / RESIN_RECH_MS),\n        resinToMax\n      )\n      const catchUpResin = resin + resinSinceLastDate\n      const newDate = resinDate + resinSinceLastDate * RESIN_RECH_MS\n      database.displayTool.set({ resin: catchUpResin, resinDate: newDate })\n      if (catchUpResin < RESIN_MAX)\n        resinIncrement.current = setTimeout(\n          () => setResin(catchUpResin + 1),\n          now - newDate\n        )\n    }\n    return () => resinIncrement.current && clearTimeout(resinIncrement.current)\n    // eslint-disable-next-line\n  }, [database])\n\n  return (\n    <CardDark>\n      <CardHeader\n        title={\n          <Typography variant=\"h5\">\n            {timeZoneKey} {time.toLocaleTimeString([], { timeZone: 'UTC' })}\n          </Typography>\n        }\n        avatar={<AccessTimeFilled fontSize=\"large\" />}\n      />\n      <Divider />\n      <CardContent>\n        <CardLight>\n          <CardActionArea sx={{ p: 2 }} component={RouterLink} to=\"/tools\">\n            <Typography variant=\"h2\" sx={{ textAlign: 'center' }}>\n              <ImgIcon src={imgAssets.resin.fragile} />\n              <span>\n                {resin}/{RESIN_MAX}\n              </span>\n            </Typography>\n          </CardActionArea>\n        </CardLight>\n      </CardContent>\n    </CardDark>\n  )\n}\n","import {\n  Box,\n  CardContent,\n  CardHeader,\n  Divider,\n  Grid,\n  Link,\n  Typography,\n} from '@mui/material'\nimport CardDark from '../Components/Card/CardDark'\nimport CardLight from '../Components/Card/CardLight'\nimport frzyc from './teamIcons/frzyc.png'\nimport lantua from './teamIcons/lantua.png'\nimport van from './teamIcons/van.webp'\nimport stain from './teamIcons/stain.png'\nimport sin from './teamIcons/sin.png'\nimport polomo from './teamIcons/polomo.png'\nimport qbe from './teamIcons/qbe.png'\nimport reens from './teamIcons/reens.png'\nimport toofless from './teamIcons/toofless.png'\nimport yae from './teamIcons/yae.png'\nimport d1 from './teamIcons/d1.png'\n\nimport { Groups } from '@mui/icons-material'\nimport { useTranslation } from 'react-i18next'\nconst team = [\n  {\n    name: 'frzyc',\n    img: frzyc,\n    title: (t) => t`teamCard.jobTitle.leadDev`,\n    subtitle: 'Insomniac in Chief',\n    url: process.env.NX_URL_GITHUB_FRZYC,\n  },\n  {\n    name: 'Lantua',\n    img: lantua,\n    title: (t) => t`teamCard.jobTitle.dev`,\n    subtitle: 'Copium Calculator',\n    url: process.env.NX_URL_GITHUB_LANTUA,\n  },\n  {\n    name: 'Van',\n    img: van,\n    title: (t) => t`teamCard.jobTitle.dev`,\n    subtitle: 'Waverider Stowaway',\n    url: process.env.NX_URL_GITHUB_VAN,\n  },\n  {\n    name: '✦ Sin ✦',\n    img: sin,\n    title: (t) => t`teamCard.jobTitle.admin`,\n    subtitle: 'Ohh, shiny.',\n    url: '',\n  },\n  {\n    name: 'Stain',\n    img: stain,\n    title: (t) => t`teamCard.jobTitle.admin`,\n    subtitle: 'Australia Man',\n    url: '',\n  },\n  {\n    name: 'yae!',\n    img: yae,\n    title: (t) => t`teamCard.jobTitle.dev`,\n    subtitle: 'eeeqeee',\n    url: '',\n  },\n  {\n    name: 'tooflesswulf',\n    img: toofless,\n    title: (t) => t`teamCard.jobTitle.dev`,\n    subtitle: 'Mad Mathematician',\n    url: '',\n  },\n  {\n    name: 'Qbe',\n    img: qbe,\n    title: (t) => t`teamCard.jobTitle.dev`,\n    subtitle: 'Irminsul Debugger',\n    url: '',\n  },\n  {\n    name: 'Polomo',\n    img: polomo,\n    title: (t) => t`teamCard.jobTitle.translator`,\n    subtitle: 'Director of Text',\n    url: '',\n  },\n  {\n    name: 'Reens',\n    img: reens,\n    title: (t) => t`teamCard.jobTitle.TC`,\n    subtitle: 'Keqing NERD',\n    url: '',\n  },\n  {\n    name: 'D1firehail',\n    img: d1,\n    title: (t) => t`teamCard.jobTitle.mod`,\n    subtitle: 'Scanner Spy',\n    url: '',\n  },\n] as const\n\nexport default function TeamCard() {\n  const { t } = useTranslation(['page_home', 'ui'])\n  return (\n    <CardDark>\n      <CardHeader\n        title={<Typography variant=\"h5\">{t`teamCard.title`}</Typography>}\n        avatar={<Groups fontSize=\"large\" />}\n      />\n      <Divider />\n      <CardContent sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n        <Grid container columns={{ xs: 6, md: 12 }} spacing={1}>\n          {team.map(({ name, img, title, subtitle, url }, i) => (\n            <Grid item key={name} xs={i < 2 ? 3 : 2} md={i <= 2 ? 4 : 3}>\n              <CardLight sx={{ height: '100%' }}>\n                <CardContent>\n                  <Box\n                    component=\"img\"\n                    src={img}\n                    sx={{ width: '100%', height: 'auto', borderRadius: '50%' }}\n                  />\n                  <Box display=\"flex\" flexDirection=\"column\">\n                    {url ? (\n                      <Typography\n                        variant=\"h6\"\n                        sx={{ textAlign: 'center' }}\n                        color=\"inherit\"\n                        component={Link}\n                        href={url}\n                        target=\"_blank\"\n                        rel=\"noopener\"\n                      >\n                        <strong>{name}</strong>\n                      </Typography>\n                    ) : (\n                      <Typography variant=\"h6\" sx={{ textAlign: 'center' }}>\n                        <strong>{name}</strong>\n                      </Typography>\n                    )}\n                    <Typography\n                      variant=\"subtitle1\"\n                      sx={{ textAlign: 'center' }}\n                    >\n                      {title(t)}\n                    </Typography>\n                    <Typography\n                      variant=\"subtitle2\"\n                      sx={{\n                        textAlign: 'center',\n                        transform:\n                          name === 'Stain' ? 'rotate(180deg)' : undefined,\n                      }}\n                      color=\"secondary.light\"\n                    >\n                      {subtitle}\n                    </Typography>\n                  </Box>\n                </CardContent>\n              </CardLight>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </CardDark>\n  )\n}\n","import { YouTube } from '@mui/icons-material'\nimport {\n  Box,\n  CardContent,\n  CardHeader,\n  Divider,\n  Grid,\n  Link,\n  Typography,\n} from '@mui/material'\nimport { useTranslation } from 'react-i18next'\nimport CardDark from '../Components/Card/CardDark'\n\nconst embeds = JSON.parse(process.env.NX_URLS_GUIDES ?? '[]') as string[]\n\nexport default function VidGuideCard() {\n  const { t } = useTranslation(['page_home', 'ui'])\n  if (!embeds.length) return null\n  return (\n    <CardDark>\n      <CardHeader\n        title={\n          <Typography\n            variant=\"h5\"\n            component={Link}\n            color=\"inherit\"\n            href={process.env.NX_URL_YOUTUBE_TUTPL}\n            target=\"_blank\"\n            rel=\"noopener\"\n          >{t`vidGuideCard.title`}</Typography>\n        }\n        avatar={<YouTube fontSize=\"large\" />}\n      />\n      <Divider />\n      <CardContent>\n        <Grid container columns={{ xs: 1, sm: 2 }} spacing={2}>\n          {embeds.map((embed) => (\n            <Grid item xs={1} key={embed}>\n              <Box\n                key={embed}\n                sx={{\n                  position: 'relative',\n                  pb: '56.25%',\n                  /* 16:9 */\n                  pt: '25px',\n                  height: 0,\n                  borderRadius: 2,\n                  overflow: 'hidden',\n                  '> iframe': {\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%',\n                  },\n                }}\n              >\n                <iframe\n                  width=\"560\"\n                  height=\"349\"\n                  title=\"Genshin Optimizer Guide\"\n                  src={`https://www.youtube-nocookie.com/embed/${embed}`}\n                  frameBorder={0}\n                  allowFullScreen\n                />\n              </Box>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </CardDark>\n  )\n}\n","import DescriptionIcon from '@mui/icons-material/Description'\nimport {\n  Box,\n  CardContent,\n  CardHeader,\n  Divider,\n  Grid,\n  Link,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@mui/material'\nimport { useEffect, useState } from 'react'\nimport ReactGA from 'react-ga4'\nimport { Trans, useTranslation } from 'react-i18next'\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm'\nimport CardDark from '../Components/Card/CardDark'\nimport InventoryCard from './InventoryCard'\nimport QuickLinksCard from './QuickLinksCard'\nimport ResinCard from './ResinCard'\nimport TeamCard from './TeamCard'\nimport VidGuideCard from './VidGuideCard'\nimport package_json from 'package.json'\n\nexport default function PageHome() {\n  const theme = useTheme()\n  const lg = useMediaQuery(theme.breakpoints.up('lg'))\n  ReactGA.send({ hitType: 'pageview', page: '/home' })\n  if (lg)\n    return (\n      <Grid container spacing={2} direction={'row-reverse'} sx={{ my: 2 }}>\n        <Grid\n          item\n          xs={12}\n          lg={5}\n          xl={4}\n          sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}\n        >\n          <QuickLinksCard />\n          <ResinCard />\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          lg={7}\n          xl={8}\n          sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}\n        >\n          <IntroCard />\n          <InventoryCard />\n          <VidGuideCard />\n          <PatchNotesCard />\n          <TeamCard />\n        </Grid>\n      </Grid>\n    )\n  return (\n    <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n      <IntroCard />\n      <QuickLinksCard />\n      <InventoryCard />\n      <ResinCard />\n      <VidGuideCard />\n      <PatchNotesCard />\n      <TeamCard />\n    </Box>\n  )\n}\n\nfunction IntroCard() {\n  const { t } = useTranslation('page_home')\n  return (\n    <CardDark>\n      <CardContent>\n        <Typography variant=\"subtitle1\">\n          <Trans t={t} i18nKey=\"intro\">\n            The <strong>ultimate</strong>{' '}\n            <Link\n              href=\"https://genshin.mihoyo.com/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <i>Genshin Impact</i>\n            </Link>{' '}\n            calculator, GO will keep track of your artifact/weapon/character\n            inventory, and help you create the best build based on how you play,\n            with what you have.\n          </Trans>\n        </Typography>\n      </CardContent>\n    </CardDark>\n  )\n}\n\nfunction PatchNotesCard() {\n  const { t } = useTranslation('page_home')\n  const [{ isLoaded, text }, setState] = useState({ isLoaded: false, text: '' })\n  useEffect(() => {\n    fetch(\n      process.env.NX_URL_GITHUB_API_GO_RELEASES + package_json.version ?? ''\n    )\n      .then((res) => res.arrayBuffer())\n      .then((buffer) => {\n        const decoder = new TextDecoder('utf-8')\n        const data = decoder.decode(buffer)\n        const release = JSON.parse(data)\n        setState({ isLoaded: true, text: release.body })\n      })\n      .catch((err) => console.log('Error: ' + err.message))\n  }, [])\n  return (\n    <CardDark>\n      <CardHeader\n        title={\n          <Typography variant=\"h5\">{t`quickLinksCard.buttons.patchNotes.title`}</Typography>\n        }\n        avatar={<DescriptionIcon fontSize=\"large\" />}\n      />\n      <Divider />\n      <CardContent>\n        {isLoaded ? (\n          <ReactMarkdown children={text} remarkPlugins={[remarkGfm]} />\n        ) : (\n          'Loading...'\n        )}\n      </CardContent>\n    </CardDark>\n  )\n}\n"],"names":["SlotIcon","slotKey","iconProps","InventoryCard","useTranslation","database","useContext","DatabaseContext","gender","useDBMeta","characterTally","characterTotal","useMemo","chars","keys","tally","objKeyMap","allElementKeys","forEach","ck","elementKey","getCharSheet","length","weaponTally","weaponTotal","weapons","values","allWeaponTypeKeys","wp","type","getWeaponSheet","key","weaponType","artifactTally","artifactTotal","allArtifactSlotKeys","arts","art","theme","useTheme","smaller","useMediaQuery","breakpoints","up","CardDark","CardHeader","title","Typography","variant","t","avatar","BusinessCenter","fontSize","Divider","CardContent","sx","display","flexDirection","gap","CardLight","CardActionArea","justifyContent","p","flexWrap","component","RouterLink","to","Chip","label","icon","People","flexBasis","flexGrow","cursor","color","Object","entries","map","ele","num","wt","ImgIcon","src","imgAssets","size","buttons","tooltip","url","process","GitHub","YouTube","Twitter","Scanner","Handshake","Article","QuickLinksCard","InsertLink","btnProps","i","button","Button","fullWidth","startIcon","Link","href","target","rel","Tooltip","placement","arrow","ResinCard","timeZoneKey","resin","resinDate","setState","useState","displayTool","get","useEffect","follow","r","s","time","setTime","Date","now","timeZones","setSecondTimeout","setTimeout","interval","SECOND_MS","clearTimeout","resinIncrement","useRef","undefined","RESIN_MAX","resinToMax","resinSinceLastDate","Math","min","floor","RESIN_RECH_MS","catchUpResin","newDate","set","current","setResin","newResin","console","log","getTime","toLocaleTimeString","timeZone","AccessTimeFilled","textAlign","team","name","img","frzyc","subtitle","lantua","van","sin","stain","yae","toofless","polomo","reens","d1","TeamCard","Groups","Grid","container","columns","xs","md","spacing","item","height","Box","width","borderRadius","transform","embeds","JSON","parse","VidGuideCard","sm","embed","position","pb","pt","overflow","top","left","frameBorder","allowFullScreen","PageHome","lg","ReactGA","hitType","page","direction","my","xl","IntroCard","PatchNotesCard","i18nKey","isLoaded","text","fetch","package_json","then","res","arrayBuffer","buffer","data","TextDecoder","decode","release","body","catch","err","message","Description","children","remarkPlugins","remarkGfm"],"sourceRoot":""}