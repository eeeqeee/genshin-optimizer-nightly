{"version":3,"file":"973.e98eaff193ee2ac2.js","mappings":"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","sources":["webpack:///./src/app/Context/GraphContext.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/CharSelectButton.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/FormulaModal.tsx","webpack:///./src/app/Components/ExpandButton.tsx","webpack:///./src/app/Components/StatInput.tsx","webpack:///./src/app/Components/EnemyEditor.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/StatModal.tsx","webpack:///./src/app/Context/OptimizationTargetContext.tsx","webpack:///./src/app/Solver/common.ts","webpack:///./src/app/Solver/coordinator.ts","webpack:///./src/app/Solver/GOSolver/GOSolver.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/useBuildSetting.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/AllowChar.tsx","webpack:///./src/app/Components/Artifact/SetEffectDisplay.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/SetInclusionButton.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ArtifactSetConfig.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/AssumeFullLevelToggle.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BonusStatsCard.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BuildAlert.tsx","webpack:///./src/app/Components/Character/LocationIcon.tsx","webpack:///./src/app/Components/StatDisplay.tsx","webpack:///./src/app/Components/Artifact/ArtifactCardNano.tsx","webpack:///./src/app/Components/Character/StatDisplayComponent.tsx","webpack:///./src/app/Components/Weapon/WeaponCardNano.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ArtifactSetBadges.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/BuildDisplayItem.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/useBuildResult.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/CustomDot.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/CustomTooltip.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/EnhancedPoint.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ChartCard/index.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/ExcludeArt.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/MainStatSelectionCard.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/OptimizationTargetEditorList.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/Components/StatFilterCard.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/foreground.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOptimize/index.tsx","webpack:///./src/app/ReactHooks/useGlobalError.tsx","webpack:///../../libs/char-cards/src/index.ts","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/CompareBuildButton.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/ArtifactSwapModal.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/WeaponSwapModal.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/EquipmentSection.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabOverview/index.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTalent.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTeambuffs.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTheorycraft/index.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/Tabs/TabTheorycraft/useCharTC.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/TravelerElementSelect.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/TravelerGenderSelect.tsx","webpack:///./src/app/PageCharacter/CharacterDisplay/index.tsx"],"sourcesContent":["import { createContext } from 'react'\nimport type { NumNode } from '../Formula/type'\nimport type { Build } from '../Solver/common'\n\nexport type ChartData = {\n  valueNode: NumNode\n  plotNode: NumNode\n  data: Build[]\n}\nexport type GraphContextObj = {\n  chartData?: ChartData\n  setChartData: (data: ChartData | undefined) => void\n  graphBuilds: string[][] | undefined\n  setGraphBuilds: (builds: string[][] | undefined) => void\n}\nexport const GraphContext = createContext({} as GraphContextObj)\n","import { Button } from '@mui/material'\nimport React, { Suspense, useContext, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport CharIconSide from '../../Components/Image/CharIconSide'\nimport { CharacterContext } from '../../Context/CharacterContext'\nimport useCharSelectionCallback from '../../ReactHooks/useCharSelectionCallback'\n\nconst CharacterSelectionModal = React.lazy(\n  () => import('../CharacterSelectionModal')\n)\n\nexport default function CharSelectButton() {\n  const { t } = useTranslation('page_character')\n  const {\n    characterSheet,\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const [showModal, setshowModal] = useState(false)\n  const setCharacter = useCharSelectionCallback()\n  return (\n    <>\n      <Suspense fallback={false}>\n        <CharacterSelectionModal\n          show={showModal}\n          onHide={() => setshowModal(false)}\n          onSelect={setCharacter}\n        />\n      </Suspense>\n      <Button\n        color=\"info\"\n        onClick={() => setshowModal(true)}\n        startIcon={<CharIconSide characterKey={characterKey} />}\n      >\n        {characterSheet?.name ?? t('selectCharacter')}\n      </Button>\n    </>\n  )\n}\n","import type { AmpReactionKey } from '@genshin-optimizer/consts'\nimport { allAmpReactionKeys } from '@genshin-optimizer/consts'\nimport { ExpandMore } from '@mui/icons-material'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  CardContent,\n  CardHeader,\n  Divider,\n  Skeleton,\n  Typography,\n} from '@mui/material'\nimport type { MutableRefObject } from 'react'\nimport {\n  Suspense,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport AmpReactionModeText from '../../Components/AmpReactionModeText'\nimport CardDark from '../../Components/Card/CardDark'\nimport CardHeaderCustom from '../../Components/Card/CardHeaderCustom'\nimport CardLight from '../../Components/Card/CardLight'\nimport CloseButton from '../../Components/CloseButton'\nimport ColorText from '../../Components/ColoredText'\nimport ImgIcon from '../../Components/Image/ImgIcon'\nimport ModalWrapper from '../../Components/ModalWrapper'\nimport SqBadge from '../../Components/SqBadge'\nimport { DataContext } from '../../Context/DataContext'\nimport { FormulaDataContext } from '../../Context/FormulaDataContext'\nimport { DatabaseContext } from '../../Database/Database'\nimport { getDisplayHeader, getDisplaySections } from '../../Formula/DisplayUtil'\nimport type { DisplaySub } from '../../Formula/type'\nimport type { NodeDisplay } from '../../Formula/uiData'\nimport { nodeVStr } from '../../Formula/uiData'\n\nexport default function FormulaModal() {\n  const { modalOpen } = useContext(FormulaDataContext)\n  const { setFormulaData } = useContext(FormulaDataContext)\n  const onCloseHandler = useCallback(\n    () => setFormulaData?.(undefined, undefined),\n    [setFormulaData]\n  )\n  return (\n    <ModalWrapper open={!!modalOpen} onClose={onCloseHandler}>\n      <CardDark>\n        <CardHeader\n          title=\"Formulas & Calculations\"\n          action={<CloseButton onClick={onCloseHandler} />}\n        />\n        <CardContent sx={{ pt: 0 }}>\n          <CalculationDisplay />\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  )\n}\n\nfunction CalculationDisplay() {\n  const { data } = useContext(DataContext)\n  const { data: contextData } = useContext(FormulaDataContext)\n  const sections = getDisplaySections(contextData ?? data)\n  return (\n    <Suspense\n      fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}\n    >\n      <Box sx={{ mr: -1, mb: -1 }}>\n        {sections.map(([key, Nodes]) => (\n          <FormulaCalc key={key} displayNs={Nodes} sectionKey={key} />\n        ))}\n      </Box>\n    </Suspense>\n  )\n}\nfunction FormulaCalc({\n  sectionKey,\n  displayNs,\n}: {\n  displayNs: DisplaySub<NodeDisplay>\n  sectionKey: string\n}) {\n  const { data } = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const { data: contextData } = useContext(FormulaDataContext)\n  const header = useMemo(\n    () => getDisplayHeader(contextData ?? data, sectionKey, database),\n    [database, contextData, data, sectionKey]\n  )\n  if (!header) return null\n  if (Object.entries(displayNs).every(([_, node]) => node.isEmpty)) return null\n  const { title, icon, action } = header\n  return (\n    <CardLight sx={{ mb: 1 }}>\n      <CardHeaderCustom\n        avatar={icon && <ImgIcon size={2} src={icon} />}\n        title={title}\n        action={action && <SqBadge>{action}</SqBadge>}\n      />\n      <Divider />\n      <CardContent>\n        {Object.entries(displayNs).map(\n          ([key, node]) =>\n            !node.isEmpty && <FormulaAccordian key={key} node={node} />\n        )}\n      </CardContent>\n    </CardLight>\n  )\n}\nfunction FormulaAccordian({ node }: { node: NodeDisplay }) {\n  const { node: contextNode } = useContext(FormulaDataContext)\n  const [expanded, setExpanded] = useState(false)\n  const handleChange = useCallback(\n    (e: React.SyntheticEvent, isExpanded: boolean) => setExpanded(isExpanded),\n    []\n  )\n  const scrollRef =\n    useRef<HTMLDivElement>() as MutableRefObject<HTMLDivElement | null>\n\n  useEffect(() => {\n    if (node === contextNode)\n      setTimeout(\n        () => scrollRef?.current?.scrollIntoView?.({ behavior: 'smooth' }),\n        300\n      )\n  }, [scrollRef, node, contextNode])\n\n  return (\n    <Accordion\n      sx={{ bgcolor: 'contentDark.main' }}\n      expanded={node === contextNode || expanded}\n      onChange={handleChange}\n      ref={scrollRef}\n    >\n      <AccordionSummary expandIcon={<ExpandMore />}>\n        <Typography>\n          <ColorText color={node.info.variant}>{node.info.name}</ColorText>{' '}\n          <strong>{nodeVStr(node)}</strong>\n        </Typography>\n        {allAmpReactionKeys.includes(\n          node.info.variant as 'vaporize' | 'melt'\n        ) && (\n          <Box sx={{ display: 'inline-block', ml: 'auto', mr: 2 }}>\n            <AmpReactionModeText\n              reaction={node.info.variant as AmpReactionKey}\n              trigger={\n                node.info.subVariant as 'cryo' | 'pyro' | 'hydro' | undefined\n              }\n            />\n          </Box>\n        )}\n      </AccordionSummary>\n      <AccordionDetails>\n        {node.formulas.map((subform, i) => (\n          <Typography key={i} component=\"div\">\n            {subform}\n          </Typography>\n        ))}\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import type { IconButtonProps } from '@mui/material'\nimport { IconButton, styled } from '@mui/material'\n\ninterface ExpandMoreProps extends IconButtonProps {\n  expand: boolean\n}\nconst ExpandButton = styled((props: ExpandMoreProps) => {\n  const { expand, ...other } = props\n  return <IconButton {...other} />\n})(({ theme, expand }) => ({\n  transform: !expand ? 'rotate(0deg)' : 'rotate(180deg)',\n  marginLeft: 'auto',\n  transition: (theme as any).transitions.create('transform', {\n    duration: (theme as any).transitions.duration.shortest,\n  }),\n}))\n\nexport default ExpandButton\n","import { Replay } from '@mui/icons-material'\nimport type { ButtonGroupProps } from '@mui/material'\nimport { Button, ButtonGroup, styled } from '@mui/material'\nimport type { ReactNode } from 'react'\nimport CustomNumberInput, {\n  CustomNumberInputButtonGroupWrapper,\n} from './CustomNumberInput'\nimport TextButton from './TextButton'\n\ntype StatInputInput = ButtonGroupProps & {\n  name: Displayable\n  children?: ReactNode\n  value: number\n  placeholder?: string\n  defaultValue?: number\n  onValueChange: (newValue: number | undefined) => void\n  percent?: boolean\n  disabled?: boolean\n  onReset?: () => void\n}\nconst FlexButtonGroup = styled(ButtonGroup)({\n  display: 'flex',\n})\n\nexport default function StatInput({\n  name,\n  children,\n  value,\n  placeholder,\n  defaultValue = 0,\n  onValueChange,\n  percent = false,\n  disabled = false,\n  onReset,\n  ...restProps\n}: StatInputInput) {\n  return (\n    <FlexButtonGroup {...restProps}>\n      {children}\n      <TextButton sx={{ px: 1 }}>{name}</TextButton>\n      <CustomNumberInputButtonGroupWrapper\n        sx={{ flexBasis: '10em', flexGrow: 1 }}\n      >\n        <CustomNumberInput\n          sx={{ px: 1 }}\n          inputProps={{\n            sx: { textAlign: 'right' },\n          }}\n          float={percent}\n          placeholder={placeholder}\n          value={value}\n          onChange={onValueChange}\n          disabled={disabled}\n          endAdornment={percent ? '%' : undefined}\n        />\n      </CustomNumberInputButtonGroupWrapper>\n      <Button\n        sx={{ flexShrink: 2 }}\n        size=\"small\"\n        color=\"error\"\n        onClick={() => (onReset ? onReset() : onValueChange(defaultValue))}\n        disabled={disabled || value === defaultValue}\n      >\n        <Replay />\n      </Button>\n    </FlexButtonGroup>\n  )\n}\n","import type { ElementWithPhyKey } from '@genshin-optimizer/consts'\nimport { allElementWithPhyKeys } from '@genshin-optimizer/consts'\nimport { iconInlineProps } from '@genshin-optimizer/svgicons'\nimport {\n  CheckBox,\n  CheckBoxOutlineBlank,\n  ExpandMore,\n  Replay,\n} from '@mui/icons-material'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Chip,\n  Collapse,\n  Grid,\n  Typography,\n} from '@mui/material'\nimport { useCallback, useContext, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { CharacterContext } from '../Context/CharacterContext'\nimport { DataContext } from '../Context/DataContext'\nimport { uiInput as input } from '../Formula'\nimport { nodeVStr } from '../Formula/uiData'\nimport KeyMap from '../KeyMap'\nimport { ElementIcon } from '../KeyMap/StatIcon'\nimport CardLight from './Card/CardLight'\nimport ColorText from './ColoredText'\nimport ExpandButton from './ExpandButton'\nimport StatInput from './StatInput'\n\nexport function EnemyExpandCard() {\n  const { t } = useTranslation('ui')\n  const { characterDispatch } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const [expanded, setexpanded] = useState(false)\n  const toggle = useCallback(\n    () => setexpanded(!expanded),\n    [setexpanded, expanded]\n  )\n  const eLvlNode = data.get(input.enemy.level)\n  const eDefRed = data.get(input.enemy.defRed)\n  const eDefIgn = data.get(input.enemy.defIgn)\n  const onReset = useCallback(\n    () => characterDispatch({ enemyOverride: {} }),\n    [characterDispatch]\n  )\n\n  return (\n    <CardLight>\n      <CardContent\n        sx={{ display: 'flex', gap: 1, alignItems: 'center', flexWrap: 'wrap' }}\n      >\n        <Chip\n          size=\"small\"\n          color=\"success\"\n          label={\n            <span>\n              {eLvlNode.info.name} <strong>{eLvlNode.value}</strong>\n            </span>\n          }\n        />\n        {allElementWithPhyKeys.map((element) => (\n          <Typography key={element}>\n            <EnemyResText element={element} />\n          </Typography>\n        ))}\n        <Typography>DEF Red. {nodeVStr(eDefRed)}</Typography>\n        <Typography>DEF Ignore {nodeVStr(eDefIgn)}</Typography>\n        <Box flexGrow={1} display=\"flex\" justifyContent=\"flex-end\" gap={1}>\n          <Button\n            size=\"small\"\n            color=\"error\"\n            onClick={onReset}\n            startIcon={<Replay />}\n          >{t`reset`}</Button>\n          <ExpandButton\n            expand={expanded}\n            onClick={toggle}\n            aria-expanded={expanded}\n            aria-label=\"show more\"\n            size=\"small\"\n            sx={{ marginLeft: 0 }}\n          >\n            <ExpandMore />\n          </ExpandButton>\n        </Box>\n      </CardContent>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent sx={{ pt: 0 }}>\n          <EnemyEditor />\n        </CardContent>\n      </Collapse>\n    </CardLight>\n  )\n}\n\nexport function EnemyResText({ element }: { element: ElementWithPhyKey }) {\n  const { data } = useContext(DataContext)\n  const node = data.get(input.enemy[`${element}_res_`])\n  const immune = !isFinite(node.value)\n  const icon = <ElementIcon ele={element} iconProps={iconInlineProps} />\n  const content = immune ? (\n    <span>{icon} &#8734;</span>\n  ) : (\n    <span>\n      {icon} <strong>{nodeVStr(node)}</strong>\n    </span>\n  )\n  return <ColorText color={element}>{content}</ColorText>\n}\n\nexport function EnemyEditor({\n  bsProps = { xs: 12, md: 6 },\n}: {\n  bsProps?: object\n}) {\n  const {\n    character: { enemyOverride },\n    characterDispatch,\n  } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const defaultVal = 10\n\n  const eLvl = enemyOverride.enemyLevel ?? data.get(input.lvl).value\n  const eDefRed = enemyOverride.enemyDefIgn_ ?? 0\n  const eDefIgn = enemyOverride.enemyDefRed_ ?? 0\n  return (\n    <Grid container spacing={1}>\n      <Grid item {...bsProps}>\n        <Button\n          fullWidth\n          sx={{ height: '100%' }}\n          size=\"small\"\n          component=\"a\"\n          color=\"warning\"\n          href=\"https://genshin-impact.fandom.com/wiki/Resistance#Base_Enemy_Resistances\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          To get the specific resistance values of enemies, please visit the\n          wiki.\n        </Button>\n      </Grid>\n      <Grid item {...bsProps}>\n        <StatInput\n          sx={{ bgcolor: (t) => t.palette.contentLight.main, width: '100%' }}\n          name={<b>{KeyMap.get('enemyLevel')}</b>}\n          value={eLvl}\n          placeholder={KeyMap.getStr('enemyLevel')}\n          defaultValue={data.get(input.lvl).value}\n          onValueChange={(value) =>\n            characterDispatch({\n              type: 'enemyOverride',\n              statKey: 'enemyLevel',\n              value,\n            })\n          }\n          onReset={() =>\n            characterDispatch({\n              type: 'enemyOverride',\n              statKey: 'enemyLevel',\n              value: undefined,\n            })\n          }\n        />\n      </Grid>\n      {allElementWithPhyKeys.map((eleKey) => {\n        const statKey = `${eleKey}_enemyRes_`\n        const val = enemyOverride[statKey]\n        const elementImmunity = val === Number.MAX_VALUE\n        return (\n          <Grid item key={eleKey} {...bsProps}>\n            <StatInput\n              sx={{\n                bgcolor: (t) => t.palette.contentLight.main,\n                width: '100%',\n              }}\n              name={\n                <ColorText color={eleKey}>\n                  <b>{KeyMap.get(statKey)}</b>\n                </ColorText>\n              }\n              value={\n                val !== undefined ? (elementImmunity ? Infinity : val) : 10\n              }\n              placeholder={elementImmunity ? '∞ ' : KeyMap.getStr(statKey)}\n              defaultValue={defaultVal}\n              onValueChange={(value) =>\n                characterDispatch({ type: 'enemyOverride', statKey, value })\n              }\n              disabled={elementImmunity}\n              percent\n            >\n              <Button\n                color={eleKey}\n                onClick={() =>\n                  characterDispatch({\n                    type: 'enemyOverride',\n                    statKey,\n                    value: elementImmunity ? defaultVal : Number.MAX_VALUE,\n                  })\n                }\n                startIcon={\n                  elementImmunity ? <CheckBox /> : <CheckBoxOutlineBlank />\n                }\n              >\n                Immunity\n              </Button>\n            </StatInput>\n          </Grid>\n        )\n      })}\n      <Grid item {...bsProps}>\n        <StatInput\n          sx={{ bgcolor: (t) => t.palette.contentLight.main, width: '100%' }}\n          name={<b>{KeyMap.get('enemyDefIgn_')}</b>}\n          value={eDefRed}\n          placeholder={KeyMap.getStr('enemyDefIgn_')}\n          defaultValue={0}\n          onValueChange={(value) =>\n            characterDispatch({\n              type: 'enemyOverride',\n              statKey: 'enemyDefIgn_',\n              value,\n            })\n          }\n          percent\n        />\n      </Grid>\n      <Grid item {...bsProps}>\n        <StatInput\n          sx={{ bgcolor: (t) => t.palette.contentLight.main, width: '100%' }}\n          name={<b>{KeyMap.get('enemyDefRed_')}</b>}\n          value={eDefIgn}\n          placeholder={KeyMap.getStr('enemyDefRed_')}\n          defaultValue={0}\n          onValueChange={(value) =>\n            characterDispatch({\n              type: 'enemyOverride',\n              statKey: 'enemyDefRed_',\n              value,\n            })\n          }\n          percent\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <small>\n          Note: Genshin Impact halves resistance shred values below 0%. For the\n          sake of calculations enter the RAW value and GO will do the rest.\n          (e.g. 10% - 20% = -10%)\n        </small>\n      </Grid>\n    </Grid>\n  )\n}\n","import {\n  CardContent,\n  CardHeader,\n  Grid,\n  ListItem,\n  Stack,\n  Typography,\n  Box,\n  Alert,\n} from '@mui/material'\nimport { useCallback, useContext, useMemo } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport CardDark from '../../Components/Card/CardDark'\nimport CardLight from '../../Components/Card/CardLight'\nimport CloseButton from '../../Components/CloseButton'\nimport ColorText from '../../Components/ColoredText'\nimport { EnemyExpandCard } from '../../Components/EnemyEditor'\nimport {\n  FieldDisplayList,\n  NodeFieldDisplay,\n} from '../../Components/FieldDisplay'\nimport ModalWrapper from '../../Components/ModalWrapper'\nimport StatEditorList from '../../Components/StatEditorList'\nimport { CharacterContext } from '../../Context/CharacterContext'\nimport { DataContext } from '../../Context/DataContext'\nimport { allInputPremodKeys, uiInput as input } from '../../Formula'\nimport type { ReadNode } from '../../Formula/type'\nimport { nodeVStr } from '../../Formula/uiData'\nimport { allEleDmgKeys, allEleResKeys } from '../../KeyMap'\n\nconst cols = {\n  xs: 1,\n  md: 2,\n  lg: 3,\n}\n\nexport default function StatModal({ open, onClose }) {\n  const { t } = useTranslation('page_character')\n  return (\n    <ModalWrapper open={open} onClose={onClose}>\n      <CardDark>\n        <CardHeader\n          title={t`addStats.title`}\n          action={<CloseButton onClick={onClose} />}\n        />\n        <CardContent sx={{ pt: 0 }}>\n          <Stack spacing={1}>\n            <BonusStatsEditor />\n            <EnemyExpandCard />\n            <MainStatsCards />\n          </Stack>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  )\n}\nconst keys = [...allInputPremodKeys]\nconst wrapperFunc = (e: JSX.Element, key?: string) => (\n  <Grid item key={key} xs={1}>\n    {e}\n  </Grid>\n)\nfunction BonusStatsEditor() {\n  const { t } = useTranslation('page_character')\n  const {\n    character: { bonusStats },\n    characterDispatch,\n  } = useContext(CharacterContext)\n  const setFilter = useCallback(\n    (bonusStats) => characterDispatch({ bonusStats }),\n    [characterDispatch]\n  )\n  return (\n    <CardLight>\n      <CardContent sx={{ display: 'flex' }}>\n        <Grid container columns={cols} sx={{ pt: 1 }} spacing={1}>\n          <Grid item xs={12}>\n            <Alert severity=\"info\" variant=\"filled\">\n              <Trans i18nKey={'addStats.info'} t={t}>\n                You can use these fields to add buffs/debuffs not directly\n                supported in GO, such as food buffs, abyss cards, or\n                Superconduct. Please refer to the\n                <a href=\"https://genshin-impact.fandom.com/wiki/Genshin_Impact_Wiki\">\n                  Genshin Impact Wiki\n                </a>\n                for specific values.\n              </Trans>\n            </Alert>\n          </Grid>\n          <StatEditorList\n            statKeys={keys}\n            statFilters={bonusStats}\n            setStatFilters={setFilter}\n            wrapperFunc={wrapperFunc}\n          />\n        </Grid>\n      </CardContent>\n    </CardLight>\n  )\n}\n\nconst mainBaseKeys = ['hp', 'atk', 'def'] as const\nconst mainSubKeys = [\n  'eleMas',\n  'critRate_',\n  'critDMG_',\n  'enerRech_',\n  'heal_',\n] as const\nconst mainReadNodes = [...mainBaseKeys, ...mainSubKeys].map(\n  (k) => input.total[k]\n)\nconst mainEditKeys = [\n  'atk_',\n  'atk',\n  'hp_',\n  'hp',\n  'def_',\n  'def',\n  ...mainSubKeys,\n] as const\n\nconst otherStatKeys = [\n  ...allEleDmgKeys,\n  ...allEleResKeys,\n  'stamina',\n  'incHeal_',\n  'shield_',\n  'cdRed_',\n] as const\n\nconst miscStatkeys = allInputPremodKeys.filter(\n  (k) =>\n    !(mainEditKeys as readonly string[]).includes(k) &&\n    !(otherStatKeys as readonly string[]).includes(k)\n)\n\nfunction StatDisplayContent({\n  nodes,\n  extra,\n}: {\n  nodes: ReadNode<number>[]\n  extra?: Displayable\n}) {\n  const { data, oldData } = useContext(DataContext)\n  return (\n    <FieldDisplayList>\n      {nodes.map((rn) => (\n        <NodeFieldDisplay\n          component={ListItem}\n          key={JSON.stringify(rn.info)}\n          node={data.get(rn)}\n          oldValue={oldData?.get(rn)?.value}\n        />\n      ))}\n      {extra}\n    </FieldDisplayList>\n  )\n}\n\nfunction MainStatsCards() {\n  const { characterSheet } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const specialNode = data.get(input.special)\n  const charEle = characterSheet.elementKey\n  const isMelee = characterSheet.isMelee()\n\n  const otherStatReadNodes = useMemo(() => {\n    const nodes = otherStatKeys\n      .filter((k) => {\n        if (k.includes(charEle)) return false\n        if (isMelee && k.includes('physical')) return true\n        return true\n      })\n      .map((k) => input.total[k])\n\n    return nodes.filter((n) => !!data.get(n).value)\n  }, [data, charEle, isMelee])\n\n  const miscStatReadNodes = useMemo(\n    () =>\n      miscStatkeys.map((k) => input.total[k]).filter((n) => data.get(n).value),\n    [data]\n  )\n\n  return (\n    <CardLight>\n      <CardContent>\n        <Grid container columns={cols} spacing={1}>\n          <Grid item xs={1}>\n            <StatDisplayCard title=\"Main Stats\">\n              <StatDisplayContent\n                nodes={mainReadNodes}\n                extra={\n                  specialNode && (\n                    <ListItem\n                      sx={{ display: 'flex', justifyContent: 'space-between' }}\n                    >\n                      <span>\n                        <b>Special:</b>{' '}\n                        <ColorText color={specialNode.info.variant}>\n                          {specialNode.info.icon} {specialNode.info.name}\n                        </ColorText>\n                      </span>\n                      <span>{nodeVStr(specialNode)}</span>\n                    </ListItem>\n                  )\n                }\n              />\n            </StatDisplayCard>\n          </Grid>\n          <Grid item xs={1}>\n            <StatDisplayCard title=\"Other Stats\">\n              <StatDisplayContent nodes={otherStatReadNodes} />\n            </StatDisplayCard>\n          </Grid>\n          {!!miscStatReadNodes.length && (\n            <Grid item xs={1}>\n              <StatDisplayCard title=\"Misc Stats\">\n                <StatDisplayContent nodes={miscStatReadNodes} />\n              </StatDisplayCard>\n            </Grid>\n          )}\n        </Grid>\n      </CardContent>\n    </CardLight>\n  )\n}\nfunction StatDisplayCard({ title, children }) {\n  return (\n    <CardDark>\n      <CardContent sx={{ py: 1 }}>\n        <Box display=\"flex\" justifyContent=\"space-between\">\n          <Typography variant=\"subtitle1\">{title}</Typography>\n        </Box>\n      </CardContent>\n      {children}\n    </CardDark>\n  )\n}\n","import { createContext } from 'react'\n\nexport const OptimizationTargetContext = createContext(\n  undefined as string[] | undefined\n)\n","import {\n  allArtifactSlotKeys,\n  type ArtifactSetKey,\n  type ArtifactSlotKey,\n} from '@genshin-optimizer/consts'\nimport {\n  assertUnreachable,\n  objKeyMap,\n  objMap,\n  range,\n} from '@genshin-optimizer/util'\nimport type {\n  ArtSetExclusion,\n  ArtSetExclusionKey,\n} from '../Database/DataManagers/BuildSettingData'\nimport { forEachNodes, mapFormulas } from '../Formula/internal'\nimport type { OptNode } from '../Formula/optimization'\nimport { allOperations, constantFold } from '../Formula/optimization'\nimport type { ConstantNode } from '../Formula/type'\nimport { constant, dynRead, max, min, sum, threshold } from '../Formula/utils'\n\ntype MicropassOperation =\n  | 'reaffine'\n  | 'pruneArtRange'\n  | 'pruneNodeRange'\n  | 'pruneOrder'\nexport function pruneAll(\n  nodes: OptNode[],\n  minimum: number[],\n  arts: ArtifactsBySlot,\n  numTop: number,\n  exclusion: ArtSetExclusion,\n  forced: Dict<MicropassOperation, boolean>\n): { nodes: OptNode[]; arts: ArtifactsBySlot } {\n  let should = forced\n  /** If `key` makes progress, all operations in `value` should be performed */\n  const deps: StrictDict<MicropassOperation, Dict<MicropassOperation, true>> = {\n    pruneOrder: { pruneNodeRange: true },\n    pruneArtRange: { pruneNodeRange: true },\n    pruneNodeRange: { reaffine: true },\n    reaffine: { pruneOrder: true, pruneArtRange: true, pruneNodeRange: true },\n  }\n  let count = 0\n  while (Object.values(should).some((x) => x) && count++ < 20) {\n    if (should.pruneOrder) {\n      delete should.pruneOrder\n      const newArts = pruneOrder(arts, numTop, exclusion)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneOrder }\n      }\n    }\n    if (should.pruneArtRange) {\n      delete should.pruneArtRange\n      const newArts = pruneArtRange(nodes, arts, minimum)\n      if (arts !== newArts) {\n        arts = newArts\n        should = { ...should, ...deps.pruneArtRange }\n      }\n    }\n    if (should.pruneNodeRange) {\n      delete should.pruneNodeRange\n      const newNodes = pruneNodeRange(nodes, arts)\n      if (nodes !== newNodes) {\n        nodes = newNodes\n        should = { ...should, ...deps.pruneNodeRange }\n      }\n    }\n    if (should.reaffine) {\n      delete should.reaffine\n      const { nodes: newNodes, arts: newArts } = reaffine(nodes, arts)\n      if (nodes !== newNodes || arts !== newArts) {\n        nodes = newNodes\n        arts = newArts\n        should = { ...should, ...deps.reaffine }\n      }\n    }\n  }\n  return { nodes, arts }\n}\n\nexport function pruneExclusion(\n  nodes: OptNode[],\n  exclusion: ArtSetExclusion\n): OptNode[] {\n  const maxValues: Dict<keyof typeof exclusion, number> = {}\n  for (const [key, e] of Object.entries(exclusion)) {\n    if (!e.includes(4)) continue\n    maxValues[key] = e.includes(2) ? 1 : 3\n  }\n  return mapFormulas(\n    nodes,\n    (f) => f,\n    (f) => {\n      if (f.operation !== 'threshold') return f\n\n      const [v, t, pass, fail] = f.operands\n      if (v.operation === 'read' && t.operation === 'const') {\n        const key = v.path[v.path.length - 1],\n          thres = t.value\n        if (key in maxValues) {\n          const max: number = maxValues[key]\n          if (max < thres) return fail\n          if (thres === 2 && exclusion[key]!.includes(2))\n            return threshold(v, 4, pass, fail)\n        }\n      }\n      return f\n    }\n  )\n}\n\nfunction reaffine(\n  nodes: OptNode[],\n  arts: ArtifactsBySlot,\n  forceRename = false\n): { nodes: OptNode[]; arts: ArtifactsBySlot } {\n  const affineNodes = new Set<OptNode>(),\n    topLevelAffine = new Set<OptNode>()\n\n  function visit(node: OptNode, isAffine: boolean): OptNode {\n    if (isAffine) affineNodes.add(node)\n    else\n      node.operands.forEach(\n        (op) => affineNodes.has(op) && topLevelAffine.add(op)\n      )\n    return node\n  }\n\n  const dynKeys = new Set<string>()\n\n  nodes = mapFormulas(\n    nodes,\n    (_) => _,\n    (f) => {\n      const { operation } = f\n      switch (operation) {\n        case 'read':\n          dynKeys.add(f.path[1])\n          return visit(f, true)\n        case 'add': {\n          const affineOps = f.operands.filter((op) => affineNodes.has(op))\n          const nonAffineOps = f.operands.filter((op) => !affineNodes.has(op))\n          if (nonAffineOps.length === 0) return visit(f, true)\n          if (affineOps.length <= 1) return visit(f, false)\n          const affine = visit(sum(...affineOps), true)\n          return visit(sum(affine, ...nonAffineOps), false)\n        }\n        case 'mul': {\n          const nonConst = f.operands.filter((op) => op.operation !== 'const')\n          return visit(\n            f,\n            nonConst.length === 0 ||\n              (nonConst.length === 1 && affineNodes.has(nonConst[0]))\n          )\n        }\n        case 'const':\n          return visit(f, true)\n        case 'res':\n        case 'threshold':\n        case 'sum_frac':\n        case 'max':\n        case 'min':\n          return visit(f, false)\n        default:\n          assertUnreachable(operation)\n      }\n    }\n  )\n\n  nodes\n    .filter((node) => affineNodes.has(node))\n    .forEach((node) => topLevelAffine.add(node))\n  if (\n    [...topLevelAffine].every(\n      ({ operation }) => operation === 'read' || operation === 'const'\n    ) &&\n    Object.keys(arts.base).length === dynKeys.size\n  )\n    return { nodes, arts }\n\n  let current = -1\n  function nextDynKey(): string {\n    while (dynKeys.has(`${++current}`));\n    return `${current}`\n  }\n\n  const affine = [...topLevelAffine].filter((f) => f.operation !== 'const')\n  const affineMap = new Map(\n    affine.map((node) => [\n      node,\n      !forceRename && node.operation === 'read' && node.path[0] === 'dyn'\n        ? node\n        : dynRead(nextDynKey()),\n    ])\n  )\n  nodes = mapFormulas(\n    nodes,\n    (f) => affineMap.get(f) ?? f,\n    (f) => f\n  )\n\n  function reaffineArt(stat: DynStat): DynStat {\n    const values = constantFold(\n      [...affineMap.keys()],\n      {\n        dyn: objMap(stat, (value) => constant(value)),\n      } as any,\n      (_) => true\n    )\n    return Object.fromEntries(\n      [...affineMap.values()].map((v, i) => [\n        v.path[1],\n        (values[i] as ConstantNode<number>).value,\n      ])\n    )\n  }\n  const result = {\n    nodes,\n    arts: {\n      base: reaffineArt(arts.base),\n      values: objKeyMap(allArtifactSlotKeys, (slot) =>\n        arts.values[slot].map(({ id, set, values }) => ({\n          id,\n          set,\n          values: reaffineArt(values),\n        }))\n      ),\n    },\n  }\n  const offsets = Object.entries(reaffineArt({}))\n  for (const arts of Object.values(result.arts.values))\n    for (const { values } of arts)\n      for (const [key, baseValue] of offsets) values[key] -= baseValue\n  return result\n}\n/** Remove artifacts that cannot be in top `numTop` builds */\nfunction pruneOrder(\n  arts: ArtifactsBySlot,\n  numTop: number,\n  exclusion: ArtSetExclusion\n): ArtifactsBySlot {\n  let progress = false\n  /**\n   * Note:\n   * This function assumes that every base (reaffined) stats are monotonically increasing. That is, artifacts\n   * with higher stats are better. This remains true as long as the main and substats are in increasing. Set\n   * effects that decrease enemy resistance (which is monotonically decreasing) does not violate this assumption\n   * as set effects are not handled here.\n   */\n  const allowRainbow = !exclusion.rainbow?.length,\n    keys = Object.keys(arts.base)\n  const noSwitchIn = new Set(\n    Object.entries(exclusion)\n      .filter(([_, v]) => v.length)\n      .map(([k]) => k) as ArtifactSetKey[]\n  )\n  const noSwitchOut = new Set(\n    Object.entries(exclusion)\n      .filter(([_, v]) => v.includes(2) && !v.includes(4))\n      .map(([k]) => k) as ArtifactSetKey[]\n  )\n  const values = objKeyMap(allArtifactSlotKeys, (slot) => {\n    const list = arts.values[slot]\n    const newList = list.filter((art) => {\n      let count = 0\n      return list.every((other) => {\n        const otherBetterEqual = keys.every(\n          (k) => (other.values[k] ?? 0) >= (art.values[k] ?? 0)\n        )\n        const otherMaybeBetter = keys.some(\n          (k) => (other.values[k] ?? 0) > (art.values[k] ?? 0)\n        )\n        const otherBetter =\n          otherBetterEqual && (otherMaybeBetter || other.id > art.id)\n        const canSwitch =\n          (allowRainbow &&\n            !noSwitchIn.has(other.set!) &&\n            !noSwitchOut.has(art.set!)) ||\n          art.set === other.set\n        if (otherBetter && canSwitch) count++\n        return count < numTop\n      })\n    })\n    if (newList.length !== list.length) progress = true\n    return newList\n  })\n  return progress ? { base: arts.base, values } : arts\n}\n/** Remove artifacts that cannot reach `minimum` in any build */\nfunction pruneArtRange(\n  nodes: OptNode[],\n  arts: ArtifactsBySlot,\n  minimum: number[]\n): ArtifactsBySlot {\n  const baseRange = Object.fromEntries(\n    Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }])\n  )\n  const wrap = { arts }\n  while (true) {\n    const artRanges = objKeyMap(allArtifactSlotKeys, (slot) =>\n      computeArtRange(wrap.arts.values[slot])\n    )\n    const otherArtRanges = objKeyMap(allArtifactSlotKeys, (key) =>\n      addArtRange(\n        Object.entries(artRanges)\n          .map((a) => (a[0] === key ? baseRange : a[1]))\n          .filter((x) => x)\n      )\n    )\n\n    let progress = false\n    const values = objKeyMap(allArtifactSlotKeys, (slot) => {\n      const result = wrap.arts.values[slot].filter((art) => {\n        const read = addArtRange([computeArtRange([art]), otherArtRanges[slot]])\n        const newRange = computeNodeRange(nodes, read)\n        return nodes.every(\n          (node, i) => newRange.get(node)!.max >= (minimum[i] ?? -Infinity)\n        )\n      })\n      if (result.length !== wrap.arts.values[slot].length) progress = true\n      return result\n    })\n    if (!progress) break\n    wrap.arts = { base: wrap.arts.base, values }\n  }\n  return wrap.arts\n}\nfunction pruneNodeRange(nodes: OptNode[], arts: ArtifactsBySlot): OptNode[] {\n  const baseRange = Object.fromEntries(\n    Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }])\n  )\n  const reads = addArtRange([\n    baseRange,\n    ...Object.values(arts.values).map((values) => computeArtRange(values)),\n  ])\n  const nodeRange = computeNodeRange(nodes, reads)\n\n  return mapFormulas(\n    nodes,\n    (f) => {\n      {\n        const { min, max } = nodeRange.get(f)!\n        if (min === max) return constant(min)\n      }\n      const { operation } = f\n      const operandRanges = f.operands.map((x) => nodeRange.get(x)!)\n      switch (operation) {\n        case 'threshold': {\n          const [value, threshold, pass, fail] = operandRanges\n          if (value.min >= threshold.max) return f.operands[2]\n          else if (value.max < threshold.min) return f.operands[3]\n          if (\n            pass.max === pass.min &&\n            fail.max === fail.min &&\n            pass.min === fail.min &&\n            isFinite(pass.min)\n          )\n            return constant(pass.max)\n          break\n        }\n        case 'min': {\n          const newOperands = f.operands.filter((_, i) => {\n            const op1 = operandRanges[i]\n            return operandRanges.every((op2) => op1.min <= op2.max)\n          })\n          if (newOperands.length < operandRanges.length)\n            return min(...newOperands)\n          break\n        }\n        case 'max': {\n          const newOperands = f.operands.filter((_, i) => {\n            const op1 = operandRanges[i]\n            return operandRanges.every((op2) => op1.max >= op2.min)\n          })\n          if (newOperands.length < operandRanges.length)\n            return max(...newOperands)\n          break\n        }\n      }\n      return f\n    },\n    (f) => f\n  )\n}\nfunction addArtRange(ranges: DynMinMax[]): DynMinMax {\n  const result: DynMinMax = {}\n  ranges.forEach((range) => {\n    Object.entries(range).forEach(([key, value]) => {\n      if (result[key]) {\n        result[key].min += value.min\n        result[key].max += value.max\n      } else result[key] = { ...value }\n    })\n  })\n  return result\n}\nfunction computeArtRange(arts: ArtifactBuildData[]): DynMinMax {\n  const result: DynMinMax = {}\n  if (arts.length) {\n    Object.keys(arts[0].values)\n      .filter((key) => arts.every((art) => art.values[key]))\n      .forEach(\n        (key) =>\n          (result[key] = { min: arts[0].values[key], max: arts[0].values[key] })\n      )\n    arts.forEach(({ values }) => {\n      for (const [key, value] of Object.entries(values)) {\n        if (!result[key]) result[key] = { min: 0, max: value }\n        else {\n          if (result[key].max < value) result[key].max = value\n          if (result[key].min > value) result[key].min = value\n        }\n      }\n    })\n  }\n  return result\n}\nexport function computeFullArtRange(arts: ArtifactsBySlot): DynMinMax {\n  const baseRange = Object.fromEntries(\n    Object.entries(arts.base).map(([key, x]) => [key, { min: x, max: x }])\n  )\n  return addArtRange([\n    baseRange,\n    ...Object.values(arts.values).map((values) => computeArtRange(values)),\n  ])\n}\nexport function computeNodeRange(\n  nodes: OptNode[],\n  reads: DynMinMax\n): Map<OptNode, MinMax> {\n  const range = new Map<OptNode, MinMax>()\n\n  forEachNodes(\n    nodes,\n    (_) => {},\n    (f) => {\n      const { operation } = f\n      const operands = f.operands.map((op) => range.get(op)!)\n      let current: MinMax\n      switch (operation) {\n        case 'read':\n          if (f.path[0] !== 'dyn')\n            throw new Error(\n              `Found non-dyn path ${f.path} while computing range`\n            )\n          current = reads[f.path[1]] ?? { min: 0, max: 0 }\n          break\n        case 'const':\n          current = computeMinMax([f.value])\n          break\n        case 'add':\n        case 'min':\n        case 'max':\n          current = {\n            min: allOperations[operation](operands.map((x) => x.min)),\n            max: allOperations[operation](operands.map((x) => x.max)),\n          }\n          break\n        case 'res':\n          current = {\n            min: allOperations[operation]([operands[0].max]),\n            max: allOperations[operation]([operands[0].min]),\n          }\n          break\n        case 'mul':\n          current = operands.reduce((accu, current) =>\n            computeMinMax([\n              accu.min * current.min,\n              accu.min * current.max,\n              accu.max * current.min,\n              accu.max * current.max,\n            ])\n          )\n          break\n        case 'threshold':\n          if (operands[0].min >= operands[1].max) current = operands[2]\n          else if (operands[0].max < operands[1].min) current = operands[3]\n          else current = computeMinMax([], [operands[2], operands[3]])\n          break\n        case 'sum_frac': {\n          const [x, c] = operands,\n            sum = { min: x.min + c.min, max: x.max + c.max }\n          if (sum.min <= 0 && sum.max >= 0)\n            current =\n              x.min <= 0 && x.max >= 0\n                ? { min: NaN, max: NaN }\n                : { min: -Infinity, max: Infinity }\n          // TODO: Check this\n          else\n            current = computeMinMax([\n              x.min / sum.min,\n              x.min / sum.max,\n              x.max / sum.min,\n              x.max / sum.max,\n            ])\n          break\n        }\n        default:\n          assertUnreachable(operation)\n      }\n      range.set(f, current)\n    }\n  )\n  return range\n}\nfunction computeMinMax(\n  values: readonly number[],\n  minMaxes: readonly MinMax[] = []\n): MinMax {\n  const max = Math.max(...values, ...minMaxes.map((x) => x.max))\n  const min = Math.min(...values, ...minMaxes.map((x) => x.min))\n  return { min, max }\n}\n\nexport function filterArts(\n  arts: ArtifactsBySlot,\n  filters: RequestFilter\n): ArtifactsBySlot {\n  return {\n    base: arts.base,\n    values: objKeyMap(allArtifactSlotKeys, (slot) => {\n      const filter = filters[slot]\n      switch (filter.kind) {\n        case 'id':\n          return arts.values[slot].filter((art) => filter.ids.has(art.id))\n        case 'exclude':\n          return arts.values[slot].filter((art) => !filter.sets.has(art.set!))\n        case 'required':\n          return arts.values[slot].filter((art) => filter.sets.has(art.set!))\n      }\n    }),\n  }\n}\n\nexport function mergeBuilds(builds: Build[][], maxNum: number): Build[] {\n  return builds\n    .flatMap((x) => x)\n    .sort((a, b) => b.value - a.value)\n    .slice(0, maxNum)\n}\nexport function mergePlot(plots: PlotData[]): PlotData {\n  let scale = 0.01\n  const reductionScaling = 2,\n    maxCount = 1500\n  let keys = new Set(\n    plots.flatMap((x) =>\n      Object.values(x).map((v) => Math.round(v.plot! / scale))\n    )\n  )\n  while (keys.size > maxCount) {\n    scale *= reductionScaling\n    keys = new Set([...keys].map((key) => Math.round(key / reductionScaling)))\n  }\n  const result: PlotData = {}\n  for (const plot of plots)\n    for (const build of Object.values(plot)) {\n      const x = Math.round(build.plot! / scale) * scale\n      if (!result[x] || result[x]!.value < build.value) result[x] = build\n    }\n  return result\n}\n\nexport function countBuilds(arts: ArtifactsBySlot): number {\n  return allArtifactSlotKeys.reduce(\n    (_count, slot) => _count * arts.values[slot].length,\n    1\n  )\n}\n\nexport function* filterFeasiblePerm(\n  filters: Iterable<RequestFilter>,\n  _artSets: ArtifactsBySlot\n): Iterable<RequestFilter> {\n  const artSets = objMap(\n    _artSets.values,\n    (values) => new Set(values.map((v) => v.set))\n  )\n  filter_loop: for (const filter of filters) {\n    for (const [slot, f] of Object.entries(filter)) {\n      const available = artSets[slot]!\n      switch (f.kind) {\n        case 'required':\n          if ([...f.sets].every((s) => !available.has(s))) continue filter_loop\n          break\n        case 'exclude':\n          if ([...available].every((s) => f.sets.has(s!))) continue filter_loop\n          break\n        case 'id':\n          break\n      }\n    }\n    yield filter\n  }\n}\nexport function exclusionToAllowed(\n  exclusion: number[] | undefined\n): Set<number> {\n  return new Set(\n    exclusion?.includes(2)\n      ? exclusion.includes(4)\n        ? [0, 1]\n        : [0, 1, 4, 5]\n      : exclusion?.includes(4)\n      ? [0, 1, 2, 3]\n      : [0, 1, 2, 3, 4, 5]\n  )\n}\n/** A *disjoint* set of `RequestFilter` satisfying the exclusion rules */\nexport function* artSetPerm(\n  exclusion: ArtSetExclusion,\n  _artSets: ArtifactSetKey[]\n): Iterable<RequestFilter> {\n  /**\n   * This generation algorithm is separated into two parts:\n   * - \"Shape\" generation\n   *   - It first generates all build \"shapes\", e.g., AABBC, ABBCD\n   *   - It then filters the generated shapes according to the rainbow exclusion, e.g., removes ABBCD if excluding 3 rainbows\n   *   - It then merges the remaining shapes into wildcards, e.g. AABAA + AABAB + AABAC => AABA*\n   * - Shape filling\n   *   - From the given shapes, it tries to fill in all non-rainbow slots, e.g., slots A and B of AABBC, with actual artifacts\n   *   - It then fills the rainbow slots, e.g., slot C of AABBC while ensuring the exclusion rule of each sets\n   */\n  const artSets = [...new Set(_artSets)],\n    allowedRainbows = exclusionToAllowed(exclusion.rainbow)\n  let shapes: number[][] = []\n  function populateShapes(\n    current: number[],\n    list: Set<number>,\n    rainbows: number[]\n  ) {\n    if (current.length === 5) {\n      if (allowedRainbows.has(rainbows.length)) shapes.push(current)\n      return\n    }\n    for (const i of list)\n      populateShapes(\n        [...current, i],\n        list,\n        rainbows.filter((j) => j !== i)\n      )\n    populateShapes(\n      [...current, current.length],\n      new Set([...list, current.length]),\n      [...rainbows, current.length]\n    )\n  }\n  populateShapes([0], new Set([0]), [0])\n  function indexOfShape(shape: number[], replacing: number) {\n    if (range(replacing + 1, 4).some((i) => shape[i] !== 5)) return undefined\n    shape = [...shape]\n    shape[replacing] = 5\n    return shape.reduce((a, b) => a * 6 + b, 0)\n  }\n  for (let replacing = 4; replacing >= 0; replacing--) {\n    const required: Map<number, number> = new Map()\n    for (const shape of shapes) {\n      const id = indexOfShape(shape, replacing)\n      if (id === undefined) continue\n      required.set(\n        id,\n        (required.get(id) ?? new Set(shape.slice(0, replacing)).size + 1) - 1\n      )\n    }\n    for (const [id, remaining] of required.entries()) {\n      if (remaining === 0) {\n        const shape = [\n          ...shapes.find((shape) => indexOfShape(shape, replacing) === id)!,\n        ]\n        shape[replacing] = 5\n        shapes = shapes.filter((shape) => indexOfShape(shape, replacing) !== id)\n        shapes.push(shape)\n      }\n    }\n  }\n\n  // Shapes are now calculated and merged, proceed to fill in the sets\n\n  const noFilter = { kind: 'exclude' as const, sets: new Set<ArtifactSetKey>() }\n  const result: RequestFilter = objKeyMap(allArtifactSlotKeys, (_) => noFilter)\n\n  const counts = {\n    ...objMap(exclusion as Record<ArtSetExclusionKey, (2 | 4)[]>, (_) => 0),\n    ...objKeyMap(artSets, (_) => 0),\n  }\n  const allowedCounts = objMap(\n    exclusion as Record<ArtSetExclusionKey, (2 | 4)[]>,\n    exclusionToAllowed\n  )\n\n  function* check(shape: number[]) {\n    const used: Set<ArtifactSetKey> = new Set(),\n      rainbows: number[] = []\n    let groupped: number[][] = []\n    for (const i of shape) {\n      groupped.push([])\n      if (i === 5) rainbows.push(groupped.length - 1)\n      else groupped[i].push(groupped.length - 1)\n    }\n    groupped = groupped\n      .filter((v) => v.length)\n      .sort((a, b) => b.length - a.length)\n    let usableRainbows = rainbows.length\n\n    // Inception.. because js doesn't like functions inside a for-loop\n    function* check(i: number) {\n      if (i === groupped.length) return yield* check_free(0)\n\n      for (const set of artSets) {\n        if (used.has(set)) continue\n        const length = groupped[i].length,\n          allowedSet = allowedCounts[set]\n        let requiredRainbows = 0\n\n        if (allowedSet && !allowedSet.has(length)) {\n          // Look ahead and see if we have enough rainbows to fill to the next `allowedSet` if we use the current set\n          requiredRainbows =\n            (range(length + 1, 5).find((l) => allowedSet.has(l)) ?? 6) - length\n          if (requiredRainbows > usableRainbows) continue // Not enough rainbows. Next..\n        }\n\n        used.add(set)\n        counts[set] = groupped[i].length\n        groupped[i].forEach(\n          (j) =>\n            (result[allArtifactSlotKeys[j]] = {\n              kind: 'required',\n              sets: new Set([set]),\n            })\n        )\n        usableRainbows -= requiredRainbows\n\n        yield* check(i + 1)\n\n        usableRainbows += requiredRainbows\n        counts[set] = 0\n        used.delete(set)\n      }\n    }\n    // We separate filling rainbow slots from groupped slots because it has an entirely\n    // different set of rules regarding what can be filled and what states to be kept.\n    function* check_free(i: number) {\n      const remaining = rainbows.length - i,\n        isolated: ArtifactSetKey[] = [],\n        missing: ArtifactSetKey[] = [],\n        rejected: ArtifactSetKey[] = []\n      let required = 0\n      for (const set of artSets) {\n        const allowedSet = allowedCounts[set],\n          count = counts[set]\n        if (!allowedSet) continue\n        if (range(1, remaining).every((j) => !allowedSet.has(count + j)))\n          rejected.push(set)\n        else if (!allowedSet.has(count)) {\n          required += [...allowedSet].find((x) => x > count)! - count\n          missing.push(set)\n        } else if (range(0, remaining).some((j) => !allowedSet.has(count + j)))\n          isolated.push(set)\n      }\n      if (required > remaining) return\n      if (i === rainbows.length) {\n        yield { ...result }\n        return\n      }\n      if (required === remaining) {\n        for (const set of missing) {\n          counts[set]++\n          result[allArtifactSlotKeys[rainbows[i]]] = {\n            kind: 'required',\n            sets: new Set([set]),\n          }\n          yield* check_free(i + 1)\n          counts[set]--\n        }\n        return\n      }\n      for (const set of [...isolated, ...missing]) {\n        counts[set]++\n        result[allArtifactSlotKeys[rainbows[i]]] = {\n          kind: 'required',\n          sets: new Set([set]),\n        }\n        yield* check_free(i + 1)\n        counts[set]--\n      }\n      result[allArtifactSlotKeys[rainbows[i]]] = {\n        kind: 'exclude',\n        sets: new Set([...missing, ...rejected, ...isolated]),\n      }\n      yield* check_free(i + 1)\n    }\n    yield* check(0)\n  }\n  for (const shape of shapes) yield* check(shape)\n}\n\nexport type RequestFilter = StrictDict<\n  ArtifactSlotKey,\n  | { kind: 'required'; sets: Set<ArtifactSetKey> }\n  | { kind: 'exclude'; sets: Set<ArtifactSetKey> }\n  | { kind: 'id'; ids: Set<string> }\n>\n\nexport type DynStat = { [key in string]: number }\nexport type ArtifactBuildData = {\n  id: string\n  set?: ArtifactSetKey\n  values: DynStat\n}\nexport type ArtifactsBySlot = {\n  base: DynStat\n  values: StrictDict<ArtifactSlotKey, ArtifactBuildData[]>\n}\n\nexport type PlotData = Dict<number, Build>\nexport interface Build {\n  value: number\n  plot?: number\n  artifactIds: string[]\n}\n\nexport type DynMinMax = { [key in string]: MinMax }\nexport type MinMax = { min: number; max: number }\n","import { FIFO } from '@genshin-optimizer/util'\n\nexport class WorkerCoordinator<\n  Command extends { command: string; resultType?: never },\n  Response extends { command?: never; resultType: string }\n> {\n  prio: Map<Command['command'], number>\n  commands: FIFO<Command>[]\n  workers: Promise<Worker>[]\n  workDone: Map<Worker, () => void> = new Map()\n  _workers: Worker[]\n\n  cancel: (e?: Error) => void\n  cancelled: Promise<never>\n  callback: (_: Response, w: Worker) => void\n  notifyNonEmpty: (() => void) | undefined\n\n  constructor(\n    workers: Worker[],\n    prio: Command['command'][],\n    callback: (_: Response, w: Worker) => void\n  ) {\n    this.commands = prio.map((_) => new FIFO())\n    this.prio = new Map(prio.map((p, i) => [p, i]))\n    this.callback = callback\n\n    workers.forEach((worker) => {\n      worker.onmessage = (x) => this.onMessage(x.data, worker)\n      worker.onerror = (e) => this.onError(e)\n    })\n    this._workers = workers\n    this.workers = workers.map((w) => Promise.resolve(w))\n    this.cancel = () => {}\n    this.cancelled = new Promise<never>((_, rej) => (this.cancel = rej))\n    this.cancelled.catch((_) => workers.forEach((w) => w.terminate()))\n  }\n\n  /**\n   * Send `commands` to available workers. If a worker sends back a `Command`,\n   * that command is further sent to an available worker (may be the same worker).\n   * If a worker sends back a `Response`, `this.callback` is invoked.\n   *\n   * Note that `{ resultType: 'done' }` is a special type that the worker is\n   * expected to send back when completing its `command`.\n   */\n  async execute(commands: Iterable<Command> | AsyncIterable<Command>) {\n    const processingInput = (async () => {\n      for await (const command of commands) this.add(command)\n    })()\n\n    while (true) {\n      const command = this.commands.find((x) => x.length)?.pop()\n      if (command === undefined) {\n        const hasCommand = await Promise.race([\n          new Promise<boolean>(\n            (res) => (this.notifyNonEmpty = () => res(true))\n          ),\n          Promise.all([...this.workers, processingInput]).then((_) => false),\n          this.cancelled,\n        ])\n\n        this.notifyNonEmpty = undefined\n        if (hasCommand) continue\n        break\n      }\n\n      const { i, w } = await Promise.race([\n        ...this.workers.map((w, i) => w.then((w) => ({ i, w }))),\n        this.cancelled,\n      ])\n      this.workers[i] = new Promise((res) => this.workDone.set(w, () => res(w)))\n      w.postMessage(command)\n    }\n  }\n\n  onError(e: { message: string }) {\n    this.cancel(new Error(`Worker Error: ${e.message}`))\n  }\n  onMessage(msg: Command | Response, worker: Worker) {\n    if (msg.command !== undefined) this.add(msg)\n    else if (msg.resultType === 'done') this.workDone.get(worker)!()\n    else this.callback(msg, worker)\n  }\n  /** May be ignored after `execute` ends */\n  add(command: Command) {\n    const prio = this.prio.get(command.command)!\n    this.commands[prio].push(command)\n    this.notifyNonEmpty?.()\n  }\n  /** May be ignored after `execute` ends */\n  broadcast(command: Command) {\n    this._workers.forEach((w) => w.postMessage(command))\n  }\n  /** MUST be followed by `execute` and cannot be called while `execute` is running */\n  notifiedBroadcast(command: Command) {\n    this.workers = this.workers.map((worker) =>\n      worker.then(\n        (w) =>\n          new Promise((res) => {\n            this.workDone.set(w, () => res(w))\n          })\n      )\n    )\n    this._workers.forEach((w) => w.postMessage(command))\n  }\n}\n","import type {\n  Count,\n  FinalizeResult,\n  Interim,\n  OptProblemInput,\n  Setup,\n  WorkerCommand,\n  WorkerResult,\n} from '..'\nimport { optimize } from '../../Formula/optimization'\nimport { pruneAll, pruneExclusion } from '../common'\nimport { WorkerCoordinator } from '../coordinator'\n\nexport class GOSolver extends WorkerCoordinator<WorkerCommand, WorkerResult> {\n  private maxIterateSize = 32_000_000\n  private status: Record<'tested' | 'failed' | 'skipped' | 'total', number>\n  private exclusion: Count['exclusion']\n  private topN: number\n  private buildValues: { w: Worker; val: number }[]\n  private finalizedResults: FinalizeResult[] = []\n\n  constructor(\n    problem: OptProblemInput,\n    status: GOSolver['status'],\n    numWorker: number\n  ) {\n    const workers = Array(numWorker)\n      .fill(NaN)\n      .map((_) => new Worker(new URL('./BackgroundWorker.ts', import.meta.url)))\n    super(workers, ['iterate', 'split', 'count'], (r, w) => {\n      switch (r.resultType) {\n        case 'interim':\n          this.interim(r, w)\n          break\n        case 'finalize':\n          this.finalizedResults.push(r)\n          break\n        case 'count':\n          this.status.total = r.count\n          break\n        case 'err':\n          this.onError(r)\n          break\n      }\n    })\n    const { exclusion, topN } = problem\n    this.status = status\n    this.exclusion = exclusion\n    this.topN = topN\n    this.status.total = NaN\n    this.buildValues = Array(topN).fill({ w: undefined as any, val: -Infinity })\n\n    this.notifiedBroadcast(this.preprocess(problem))\n  }\n\n  async solve() {\n    const { exclusion, maxIterateSize } = this\n    this.finalizedResults = []\n    await this.execute([{ command: 'count', exclusion, maxIterateSize }])\n    this.notifiedBroadcast({ command: 'finalize' })\n    await this.execute([])\n    return this.finalizedResults\n  }\n\n  preprocess({\n    plotBase,\n    optimizationTarget,\n    arts,\n    topN,\n    exclusion,\n    constraints,\n  }: OptProblemInput): Setup {\n    constraints = constraints.filter((x) => x.min > -Infinity)\n\n    let nodes = [...constraints.map((x) => x.value), optimizationTarget]\n    const minimums = [...constraints.map((x) => x.min), -Infinity]\n    if (plotBase) {\n      nodes.push(plotBase)\n      minimums.push(-Infinity)\n    }\n\n    nodes = pruneExclusion(nodes, exclusion)\n    nodes = optimize(nodes, {}, (_) => false)\n    ;({ nodes, arts } = pruneAll(nodes, minimums, arts, topN, exclusion, {\n      reaffine: true,\n      pruneArtRange: true,\n      pruneNodeRange: true,\n      pruneOrder: true,\n    }))\n    nodes = optimize(nodes, {}, (_) => false)\n\n    if (plotBase) plotBase = nodes.pop()\n    const optTarget = nodes.pop()!\n\n    return {\n      command: 'setup',\n      arts,\n      optTarget,\n      plotBase,\n      topN,\n      constraints: nodes.map((value, i) => ({ value, min: minimums[i] })),\n    }\n  }\n\n  /** Returns a new `threshold` if altered */\n  private interim(r: Interim, worker: Worker) {\n    this.status.tested += r.tested\n    this.status.failed += r.failed\n    this.status.skipped += r.skipped\n\n    if (r.buildValues) {\n      const { topN } = this,\n        oldThreshold = this.buildValues[topN - 1].val ?? -Infinity\n\n      this.buildValues.filter(({ w }) => w !== worker)\n      this.buildValues.push(\n        ...r.buildValues.map((val) => ({ w: worker!, val }))\n      )\n      this.buildValues.sort((a, b) => b.val - a.val).splice(topN)\n\n      const threshold = this.buildValues[topN - 1].val ?? -Infinity\n      if (oldThreshold !== threshold)\n        this.broadcast({ command: 'threshold', threshold })\n    }\n  }\n}\n","import type { CharacterKey } from '@genshin-optimizer/consts'\nimport { useCallback, useContext, useEffect, useState } from 'react'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport type { BuildSetting } from '../../../../Database/DataManagers/BuildSettingData'\n\nexport default function useBuildSetting(characterKey: CharacterKey) {\n  const { database } = useContext(DatabaseContext)\n  const [buildSetting, setBuildSetting] = useState(() =>\n    database.buildSettings.get(characterKey)\n  )\n  useEffect(\n    () => setBuildSetting(database.buildSettings.get(characterKey)),\n    [database, characterKey]\n  )\n  useEffect(\n    () =>\n      database.buildSettings.follow(\n        characterKey,\n        (k, r, v) => r === 'update' && setBuildSetting(v)\n      ),\n    [characterKey, setBuildSetting, database]\n  )\n  const buildSettingDispatch = useCallback(\n    (action: Partial<BuildSetting>) =>\n      characterKey && database.buildSettings.set(characterKey, action),\n    [characterKey, database]\n  )\n\n  return { buildSetting: buildSetting as BuildSetting, buildSettingDispatch }\n}\n","import type {\n  CharacterKey,\n  LocationCharacterKey,\n} from '@genshin-optimizer/consts'\nimport {\n  allArtifactSlotKeys,\n  allElementKeys,\n  allWeaponTypeKeys,\n  charKeyToLocCharKey,\n} from '@genshin-optimizer/consts'\nimport { useBoolState, useForceUpdate } from '@genshin-optimizer/react-util'\nimport { iconInlineProps } from '@genshin-optimizer/svgicons'\nimport { filterFunction } from '@genshin-optimizer/util'\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport ShowChartIcon from '@mui/icons-material/ShowChart'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Divider,\n  Grid,\n  Stack,\n  TextField,\n  ToggleButton,\n  Typography,\n} from '@mui/material'\nimport type { ChangeEvent, MouseEvent } from 'react'\nimport {\n  useCallback,\n  useContext,\n  useDeferredValue,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { useTranslation } from 'react-i18next'\nimport SlotIcon from '../../../../../Components/Artifact/SlotIcon'\nimport CardDark from '../../../../../Components/Card/CardDark'\nimport CardLight from '../../../../../Components/Card/CardLight'\nimport CharacterCardPico from '../../../../../Components/Character/CharacterCardPico'\nimport CloseButton from '../../../../../Components/CloseButton'\nimport InfoTooltip from '../../../../../Components/InfoTooltip'\nimport ModalWrapper from '../../../../../Components/ModalWrapper'\nimport SolidToggleButtonGroup from '../../../../../Components/SolidToggleButtonGroup'\nimport SqBadge from '../../../../../Components/SqBadge'\nimport ElementToggle from '../../../../../Components/ToggleButton/ElementToggle'\nimport WeaponToggle from '../../../../../Components/ToggleButton/WeaponToggle'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport { SillyContext } from '../../../../../Context/SillyContext'\nimport { getCharSheet } from '../../../../../Data/Characters'\nimport { DatabaseContext } from '../../../../../Database/Database'\nimport type { AllowLocationsState } from '../../../../../Database/DataManagers/BuildSettingData'\nimport { allAllowLocationsState } from '../../../../../Database/DataManagers/BuildSettingData'\nimport type { ICachedCharacter } from '../../../../../Types/character'\nimport { characterFilterConfigs } from '../../../../../Util/CharacterSort'\nimport { bulkCatTotal } from '../../../../../Util/totalUtils'\nimport useBuildSetting from '../useBuildSetting'\n\nenum CharListMode {\n  ToggleToAllow,\n  ToggleToExclude,\n}\n\nexport default function AllowChar({\n  disabled = false,\n  allowListTotal,\n}: {\n  disabled?: boolean\n  allowListTotal: string\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  const { t: t_pc } = useTranslation('page_character')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { silly } = useContext(SillyContext)\n  const {\n    buildSetting: { excludedLocations, allowLocationsState },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState(false)\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  const deferredDbDirty = useDeferredValue(dbDirty)\n\n  const [searchTerm, setSearchTerm] = useState('')\n  const deferredSearchTerm = useDeferredValue(searchTerm)\n  const [elementKeys, setElementKeys] = useState([...allElementKeys])\n  const deferredElementKeys = useDeferredValue(elementKeys)\n  const [weaponTypeKeys, setWeaponTypeKeys] = useState([...allWeaponTypeKeys])\n  const deferredWeaponTypeKeys = useDeferredValue(weaponTypeKeys)\n\n  const charKeyMap: Dict<CharacterKey, ICachedCharacter> = useMemo(\n    () =>\n      deferredDbDirty &&\n      Object.fromEntries(\n        Array.from(\n          new Set(\n            Object.entries(database.chars.data)\n              .filter(([ck]) => ck !== characterKey)\n              .filter(([ck]) =>\n                filterFunction(\n                  {\n                    element: deferredElementKeys,\n                    weaponType: deferredWeaponTypeKeys,\n                    name: deferredSearchTerm,\n                  },\n                  characterFilterConfigs(database, silly)\n                )(ck)\n              )\n          )\n        )\n      ),\n    [\n      deferredDbDirty,\n      database,\n      characterKey,\n      deferredElementKeys,\n      deferredWeaponTypeKeys,\n      deferredSearchTerm,\n      silly,\n    ]\n  )\n\n  const locList = Object.entries(charKeyMap)\n    .sort(([ck1, c1], [ck2, c2]) => {\n      // sort characters by: star => more artifacts equipped\n      const [choosec1, choosec2] = [-1, 1]\n      const c1f = database.charMeta.get(ck1).favorite\n      const c2f = database.charMeta.get(ck2).favorite\n      if (c1f && !c2f) return choosec1\n      else if (c2f && !c1f) return choosec2\n\n      const art1 = Object.values(c1.equippedArtifacts).filter((id) => id).length\n      const art2 = Object.values(c2.equippedArtifacts).filter((id) => id).length\n      if (art1 > art2) return choosec1\n      else if (art2 > art1) return choosec2\n      return ck1.localeCompare(ck2)\n    })\n    .map(([ck]) => charKeyToLocCharKey(ck))\n\n  const { elementTotals, weaponTypeTotals, locListTotals } = useMemo(() => {\n    const catKeys = {\n      elementTotals: [...allElementKeys],\n      weaponTypeTotals: [...allWeaponTypeKeys],\n      locListTotals: ['allowed', 'excluded'],\n    } as const\n    return bulkCatTotal(catKeys, (ctMap) =>\n      Object.entries(database.chars.data)\n        .filter(([ck]) => ck !== characterKey)\n        .forEach(([ck]) => {\n          const sheet = getCharSheet(ck, database.gender)\n          const eleKey = sheet.elementKey\n          ctMap.elementTotals[eleKey].total++\n          if (charKeyMap[ck]) ctMap.elementTotals[eleKey].current++\n\n          const weaponTypeKey = sheet.weaponTypeKey\n          ctMap.weaponTypeTotals[weaponTypeKey].total++\n          if (charKeyMap[ck]) ctMap.weaponTypeTotals[weaponTypeKey].current++\n\n          const locKey = charKeyToLocCharKey(ck)\n          if (locList.includes(locKey)) {\n            ctMap.locListTotals.allowed.total++\n            ctMap.locListTotals.excluded.total++\n            if (!excludedLocations.includes(locKey))\n              ctMap.locListTotals.allowed.current++\n            else ctMap.locListTotals.excluded.current++\n          }\n        })\n    )\n  }, [\n    charKeyMap,\n    characterKey,\n    database.chars.data,\n    database.gender,\n    excludedLocations,\n    locList,\n  ])\n\n  useEffect(\n    () => database.charMeta.followAny((_) => forceUpdate()),\n    [forceUpdate, database]\n  )\n  useEffect(\n    () => database.chars.followAny((_) => forceUpdate()),\n    [forceUpdate, database]\n  )\n\n  const [mouseUpDetected, setMouseUpDetected] = useState(false)\n\n  const allowAll = useCallback(\n    () =>\n      buildSettingDispatch({\n        excludedLocations: excludedLocations.filter(\n          (key) => !locList.includes(key)\n        ),\n        allowLocationsState: 'customList',\n      }),\n    [buildSettingDispatch, excludedLocations, locList]\n  )\n  const disallowAll = useCallback(\n    () =>\n      buildSettingDispatch({\n        excludedLocations: Array.from(\n          new Set(excludedLocations.concat(locList))\n        ),\n        allowLocationsState: 'customList',\n      }),\n    [buildSettingDispatch, excludedLocations, locList]\n  )\n\n  const setState = useCallback(\n    (_e: MouseEvent, state: AllowLocationsState) =>\n      buildSettingDispatch({ allowLocationsState: state }),\n    [buildSettingDispatch]\n  )\n\n  const toggleList = useCallback(\n    (lkList: Set<LocationCharacterKey>) => {\n      const lkArray = [...lkList]\n      const newExcludedLocations = lkArray\n        .filter((lk) => !excludedLocations.includes(lk))\n        .concat(excludedLocations.filter((lk) => !lkArray.includes(lk)))\n      buildSettingDispatch({\n        excludedLocations: newExcludedLocations,\n        allowLocationsState: 'customList',\n      })\n    },\n    [excludedLocations, buildSettingDispatch]\n  )\n\n  const onMouseUp = useCallback(() => setMouseUpDetected(true), [])\n\n  const total = database.chars.keys.length - 1\n  const useTot = total - excludedLocations.length\n  const totalStr = useTot === total ? useTot : `${useTot}/${total}`\n  const charactersAllowed =\n    allowLocationsState === 'all'\n      ? total\n      : allowLocationsState === 'customList'\n      ? totalStr\n      : 0 // unequippedOnly\n  const stateBadgeColor =\n    allowLocationsState === 'all'\n      ? 'success'\n      : allowLocationsState === 'customList'\n      ? 'info'\n      : 'secondary' // unequippedOnly\n\n  return (\n    <Box display=\"flex\" gap={1}>\n      {/* Begin modal */}\n      <ModalWrapper\n        open={show}\n        onClose={onClose}\n        containerProps={{ maxWidth: 'xl' }}\n        draggable={false}\n        onMouseUp={onMouseUp}\n      >\n        <CardDark>\n          {/* Header */}\n          <CardContent>\n            <Box display=\"flex\" gap={1} alignItems=\"center\">\n              <Typography variant=\"h6\">{t`excludeChar.title`}</Typography>\n              <InfoTooltip\n                title={<Typography>{t`excludeChar.tooltip`}</Typography>}\n              />\n              <Box flexGrow={1} />\n              <CloseButton onClick={onClose} size=\"small\" />\n            </Box>\n          </CardContent>\n          <Divider />\n          {/* Content */}\n          <CardContent sx={{ pb: 0 }}>\n            <Stack gap={1}>\n              {/* State + Search box */}\n              <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n                <SolidToggleButtonGroup\n                  exclusive\n                  baseColor=\"secondary\"\n                  size=\"small\"\n                  value={allowLocationsState}\n                  onChange={setState}\n                >\n                  {allAllowLocationsState.map((s) => (\n                    <ToggleButton\n                      key={s}\n                      value={s}\n                      disabled={allowLocationsState === s || disabled}\n                    >\n                      {t(`excludeChar.states.${s}`)}\n                    </ToggleButton>\n                  ))}\n                </SolidToggleButtonGroup>\n                <TextField\n                  autoFocus\n                  value={searchTerm}\n                  onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>\n                    setSearchTerm(e.target.value)\n                  }\n                  label={t_pc('characterName')}\n                  size=\"small\"\n                  sx={{ height: '100%' }}\n                  InputProps={{\n                    sx: { height: '100%' },\n                  }}\n                />\n              </Box>\n              {/* Filter toggles */}\n              <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n                <WeaponToggle\n                  sx={{ height: '100%' }}\n                  onChange={setWeaponTypeKeys}\n                  value={deferredWeaponTypeKeys}\n                  totals={weaponTypeTotals}\n                  size=\"small\"\n                />\n                <ElementToggle\n                  sx={{ height: '100%' }}\n                  onChange={setElementKeys}\n                  value={deferredElementKeys}\n                  totals={elementTotals}\n                  size=\"small\"\n                />\n              </Box>\n            </Stack>\n          </CardContent>\n          {/* Allow/Disallow + grid */}\n          <CardContent\n            sx={{ opacity: allowLocationsState === 'customList' ? 1 : 0.6 }}\n          >\n            <Grid container pb={1} gap={1} flexWrap=\"nowrap\">\n              <Grid item xs={6}>\n                <Button color=\"success\" fullWidth onClick={allowAll}>\n                  {t`excludeChar.modal.allow_all`}\n                  <SqBadge sx={{ ml: 1 }}>\n                    <strong>{locListTotals.allowed}</strong>\n                  </SqBadge>\n                </Button>\n              </Grid>\n              <Grid item xs={6}>\n                <Button fullWidth color=\"error\" onClick={disallowAll}>\n                  {t`excludeChar.modal.disallow_All`}\n                  <SqBadge sx={{ ml: 1 }}>\n                    <strong>{locListTotals.excluded}</strong>\n                  </SqBadge>\n                </Button>\n              </Grid>\n            </Grid>\n            <SelectItemGrid\n              locList={locList}\n              excludedLocations={excludedLocations}\n              mouseUpDetected={mouseUpDetected}\n              setMouseUpDetected={setMouseUpDetected}\n              toggleList={toggleList}\n            />\n          </CardContent>\n        </CardDark>\n      </ModalWrapper>\n\n      {/* Button to open modal */}\n      <CardLight sx={{ display: 'flex', width: '100%' }}>\n        <CardContent sx={{ flexGrow: 1 }}>\n          <Stack spacing={1}>\n            <Typography>\n              <strong>{t('excludeChar.title')}</strong>\n            </Typography>\n            <Typography>\n              {t('excludeChar.usingState')}{' '}\n              <SqBadge color={stateBadgeColor}>\n                {t(`excludeChar.states.${allowLocationsState}`)}\n              </SqBadge>\n            </Typography>\n            <Typography>\n              {t('excludeChar.chars')}{' '}\n              <SqBadge color=\"success\">\n                {charactersAllowed} <ShowChartIcon {...iconInlineProps} />\n                {t('artSetConfig.allowed')}\n              </SqBadge>\n            </Typography>\n            <Typography>\n              {t('excludeChar.artis')}{' '}\n              <SqBadge color=\"success\">\n                {allowListTotal} <ShowChartIcon {...iconInlineProps} />\n                {t('artSetConfig.allowed')}\n              </SqBadge>\n            </Typography>\n          </Stack>\n        </CardContent>\n        <Button\n          sx={{ borderRadius: 0, flexShrink: 1, minWidth: 40 }}\n          onClick={onOpen}\n          disabled={disabled}\n          color=\"info\"\n        >\n          <SettingsIcon />\n        </Button>\n      </CardLight>\n    </Box>\n  )\n}\n\nfunction SelectItemGrid({\n  locList,\n  excludedLocations,\n  mouseUpDetected,\n  setMouseUpDetected,\n  toggleList,\n}: {\n  locList: LocationCharacterKey[]\n  excludedLocations: LocationCharacterKey[]\n  mouseUpDetected: boolean\n  setMouseUpDetected: (v: boolean) => void\n  toggleList: (charList: Set<LocationCharacterKey>) => void\n}) {\n  const [charList, setCharList] = useState(new Set<LocationCharacterKey>())\n  const [charListMode, setCharListMode] = useState<CharListMode>()\n  useEffect(() => {\n    if (mouseUpDetected) {\n      setMouseUpDetected(false)\n      if (charList.size > 0) {\n        toggleList(charList)\n        setCharList(new Set<LocationCharacterKey>())\n        setCharListMode(undefined)\n      }\n    }\n  }, [charList, setCharList, setMouseUpDetected, mouseUpDetected, toggleList])\n  return (\n    <Grid\n      container\n      spacing={1}\n      columns={{ xs: 6, sm: 7, md: 10, lg: 12, xl: 16 }}\n    >\n      {locList.map((lk) => (\n        <Grid item key={lk} xs={1}>\n          <SelectItem\n            locKey={lk}\n            charList={charList}\n            charListMode={charListMode}\n            setCharList={setCharList}\n            setCharListMode={setCharListMode}\n            selected={!excludedLocations.includes(lk)}\n          />\n        </Grid>\n      ))}\n    </Grid>\n  )\n}\n\nfunction SelectItem({\n  locKey,\n  selected,\n  charList,\n  charListMode,\n  setCharList,\n  setCharListMode,\n}: {\n  locKey: LocationCharacterKey\n  selected: boolean\n  charList: Set<LocationCharacterKey>\n  charListMode?: CharListMode\n  setCharList: (list: Set<LocationCharacterKey>) => void\n  setCharListMode: (mode?: CharListMode) => void\n}) {\n  const { database } = useContext(DatabaseContext)\n  const char = database.chars.get(database.chars.LocationToCharacterKey(locKey))\n  const onMouseEnter = useCallback(\n    (e: MouseEvent) =>\n      // Mouse 1 being held down\n      e.buttons === 1 &&\n      // Only select characters with the same exclusion state as the rest of the list\n      ((charListMode === CharListMode.ToggleToAllow && !selected) ||\n        (charListMode === CharListMode.ToggleToExclude && selected)) &&\n      setCharList(new Set([...charList]).add(locKey)),\n    [charListMode, selected, setCharList, charList, locKey]\n  )\n  const onMouseDown = useCallback(() => {\n    const mode = selected\n      ? CharListMode.ToggleToExclude\n      : CharListMode.ToggleToAllow\n    setCharListMode(mode)\n    setCharList(new Set([...charList]).add(locKey))\n  }, [selected, setCharListMode, setCharList, charList, locKey])\n  const disableTooltip = useMemo(() => charList.size !== 0, [charList.size])\n  const allowed =\n    // Character is already allowed, and not selected to be excluded\n    (selected &&\n      !(\n        charListMode === CharListMode.ToggleToExclude && charList.has(locKey)\n      )) ||\n    // Or character is selected to be allowed\n    (charListMode === CharListMode.ToggleToAllow && charList.has(locKey))\n  const sx = {\n    opacity: allowed ? undefined : 0.6,\n    borderColor: allowed ? 'rgb(100,200,100)' : 'rgb(200,100,100)',\n    borderWidth: '3px',\n    borderStyle: 'solid',\n    borderRadius: '8px',\n  }\n  const content = useMemo(\n    () => (\n      <Box\n        fontSize=\"0.85em\"\n        display=\"flex\"\n        justifyContent=\"space-between\"\n        p={0.3}\n      >\n        {allArtifactSlotKeys.map((s) => (\n          <SlotIcon\n            key={s}\n            slotKey={s}\n            iconProps={{\n              fontSize: 'inherit',\n              sx: { opacity: char?.equippedArtifacts[s] ? undefined : 0.5 },\n            }}\n          />\n        ))}\n      </Box>\n    ),\n    [char?.equippedArtifacts]\n  )\n  return (\n    <CardLight sx={sx}>\n      <CharacterCardPico\n        characterKey={database.chars.LocationToCharacterKey(locKey)}\n        onMouseDown={onMouseDown}\n        onMouseEnter={onMouseEnter}\n        disableTooltip={disableTooltip}\n      />\n      {content}\n    </CardLight>\n  )\n}\n","import type { ArtifactSetKey } from '@genshin-optimizer/consts'\nimport { Box } from '@mui/material'\nimport { getArtSheet } from '../../Data/Artifacts'\nimport type { SetNum } from '../../Types/consts'\nimport DocumentDisplay from '../DocumentDisplay'\n\ntype Data = {\n  setKey: ArtifactSetKey\n  setNumKey: SetNum\n  hideHeader?: boolean\n  conditionalsOnly?: boolean\n}\n\nexport default function SetEffectDisplay({\n  setKey,\n  setNumKey,\n  hideHeader = false,\n  conditionalsOnly = false,\n}: Data) {\n  const sheet = getArtSheet(setKey)\n\n  const document = conditionalsOnly\n    ? sheet\n        .setEffectDocument(setNumKey)\n        ?.filter((section) => 'states' in section)\n    : sheet.setEffectDocument(setNumKey)\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      {document ? (\n        <DocumentDisplay sections={document} hideHeader={hideHeader} />\n      ) : null}\n    </Box>\n  )\n}\n","import { CheckBox, CheckBoxOutlineBlank } from '@mui/icons-material'\nimport BlockIcon from '@mui/icons-material/Block'\nimport ShowChartIcon from '@mui/icons-material/ShowChart'\nimport type { SxProps, Theme } from '@mui/material'\nimport { Button, ButtonGroup } from '@mui/material'\nimport { useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport type { ArtSetExclusionKey } from '../../../../../Database/DataManagers/BuildSettingData'\nimport { handleArtSetExclusion } from '../../../../../Database/DataManagers/BuildSettingData'\nimport useBuildSetting from '../useBuildSetting'\n\nexport default function SetInclusionButton({\n  setKey,\n  buttonGroupSx,\n}: {\n  setKey: ArtSetExclusionKey\n  buttonGroupSx?: SxProps<Theme>\n}) {\n  const { t } = useTranslation('sheet')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { artSetExclusion },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const setExclusionSet = artSetExclusion?.[setKey] ?? []\n  const exclude2 = setExclusionSet.includes(2)\n  const exclude4 = setExclusionSet.includes(4)\n\n  return (\n    <ButtonGroup sx={buttonGroupSx} fullWidth>\n      <Button\n        startIcon={exclude2 ? <CheckBoxOutlineBlank /> : <CheckBox />}\n        onClick={() =>\n          buildSettingDispatch({\n            artSetExclusion: handleArtSetExclusion(artSetExclusion, setKey, 2),\n          })\n        }\n        color={exclude2 ? 'secondary' : 'success'}\n        endIcon={exclude2 ? <BlockIcon /> : <ShowChartIcon />}\n      >{t`2set`}</Button>\n      <Button\n        startIcon={exclude4 ? <CheckBoxOutlineBlank /> : <CheckBox />}\n        onClick={() =>\n          buildSettingDispatch({\n            artSetExclusion: handleArtSetExclusion(artSetExclusion, setKey, 4),\n          })\n        }\n        color={exclude4 ? 'secondary' : 'success'}\n        endIcon={exclude4 ? <BlockIcon /> : <ShowChartIcon />}\n      >{t`4set`}</Button>\n    </ButtonGroup>\n  )\n}\n","import type { ArtifactSetKey, ArtifactSlotKey } from '@genshin-optimizer/consts'\nimport {\n  allArtifactSetKeys,\n  allArtifactSlotKeys,\n} from '@genshin-optimizer/consts'\nimport { useForceUpdate } from '@genshin-optimizer/react-util'\nimport { iconInlineProps } from '@genshin-optimizer/svgicons'\nimport { objKeyMap } from '@genshin-optimizer/util'\nimport { CheckBox, CheckBoxOutlineBlank, Replay } from '@mui/icons-material'\nimport BlockIcon from '@mui/icons-material/Block'\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport ShowChartIcon from '@mui/icons-material/ShowChart'\nimport StarRoundedIcon from '@mui/icons-material/StarRounded'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Divider,\n  Grid,\n  Stack,\n  Typography,\n} from '@mui/material'\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport SetEffectDisplay from '../../../../../Components/Artifact/SetEffectDisplay'\nimport SlotIcon from '../../../../../Components/Artifact/SlotIcon'\nimport CardDark from '../../../../../Components/Card/CardDark'\nimport CardLight from '../../../../../Components/Card/CardLight'\nimport CloseButton from '../../../../../Components/CloseButton'\nimport ColorText from '../../../../../Components/ColoredText'\nimport { InfoTooltipInline } from '../../../../../Components/InfoTooltip'\nimport ModalWrapper from '../../../../../Components/ModalWrapper'\nimport SqBadge from '../../../../../Components/SqBadge'\nimport { Translate } from '../../../../../Components/Translate'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport type { dataContextObj } from '../../../../../Context/DataContext'\nimport { DataContext } from '../../../../../Context/DataContext'\nimport { getArtSheet, setKeysByRarities } from '../../../../../Data/Artifacts'\nimport { artifactDefIcon } from '../../../../../Data/Artifacts/ArtifactSheet'\nimport { DatabaseContext } from '../../../../../Database/Database'\nimport type { ArtSetExclusionKey } from '../../../../../Database/DataManagers/BuildSettingData'\nimport {\n  allArtifactSetExclusionKeys,\n  handleArtSetExclusion,\n} from '../../../../../Database/DataManagers/BuildSettingData'\nimport { UIData } from '../../../../../Formula/uiData'\nimport { constant } from '../../../../../Formula/utils'\nimport type { SetNum } from '../../../../../Types/consts'\nimport { bulkCatTotal } from '../../../../../Util/totalUtils'\nimport useBuildSetting from '../useBuildSetting'\nimport SetInclusionButton from './SetInclusionButton'\n\nexport default function ArtifactSetConfig({\n  disabled,\n}: {\n  disabled?: boolean\n}) {\n  const { t } = useTranslation(['page_character_optimize', 'sheet'])\n  const dataContext = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const {\n    character: { key: characterKey, conditional },\n    characterDispatch,\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { artSetExclusion },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const [open, setOpen] = useState(false)\n  const onOpen = useCallback(() => setOpen(true), [setOpen])\n  const onClose = useCallback(() => setOpen(false), [setOpen])\n\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  useEffect(() => database.arts.followAny(forceUpdate), [database, forceUpdate])\n\n  const artKeysByRarity = useMemo(\n    () =>\n      Object.entries(setKeysByRarities)\n        .reverse()\n        .flatMap(([, sets]) => sets)\n        .filter((key) => !key.includes('Prayers')),\n    []\n  )\n  const { artKeys, artSlotCount } = useMemo(() => {\n    const artSlotCount = objKeyMap(artKeysByRarity, (_) =>\n      objKeyMap(allArtifactSlotKeys, (_) => 0)\n    )\n    database.arts.values.forEach(\n      (art) =>\n        artSlotCount[art.setKey] && artSlotCount[art.setKey][art.slotKey]++\n    )\n    const artKeys = [...artKeysByRarity].sort(\n      (a, b) =>\n        +(getNumSlots(artSlotCount[a]) < 2) -\n        +(getNumSlots(artSlotCount[b]) < 2)\n    )\n    return dbDirty && { artKeys, artSlotCount }\n  }, [dbDirty, database, artKeysByRarity])\n\n  const allowRainbow2 = !artSetExclusion.rainbow?.includes(2)\n  const allowRainbow4 = !artSetExclusion.rainbow?.includes(4)\n\n  const { allowTotals } = useMemo(() => {\n    const catKeys = { allowTotals: ['2', '4'] }\n    return bulkCatTotal(catKeys, (ctMap) =>\n      artKeysByRarity.forEach((setKey) => {\n        ctMap.allowTotals['2'].total++\n        if (!artSetExclusion[setKey]?.includes(2)) {\n          ctMap.allowTotals['2'].current++\n        }\n        ctMap.allowTotals['4'].total++\n        if (!artSetExclusion[setKey]?.includes(4)) {\n          ctMap.allowTotals['4'].current++\n        }\n      })\n    )\n  }, [artKeysByRarity, artSetExclusion])\n  const artifactCondCount = useMemo(\n    () =>\n      Object.keys(conditional).filter(\n        (k) =>\n          allArtifactSetKeys.includes(k as ArtifactSetKey) &&\n          !!Object.keys(conditional[k] ?? {}).length\n      ).length,\n    [conditional]\n  )\n  const fakeDataContextObj = useMemo(\n    () => ({\n      ...dataContext,\n      data: new UIData(\n        {\n          ...dataContext.data.data[0],\n          artSet: objKeyMap(allArtifactSetKeys, (_) => constant(4)),\n        },\n        undefined\n      ),\n    }),\n    [dataContext]\n  )\n  const resetArtConds = useCallback(() => {\n    const tconditional = Object.fromEntries(\n      Object.entries(conditional).filter(\n        ([k]) => !allArtifactSetKeys.includes(k as any)\n      )\n    )\n    characterDispatch({ conditional: tconditional })\n  }, [conditional, characterDispatch])\n  const setAllExclusion = useCallback(\n    (setnum: number, exclude = true) => {\n      const artSetExclusion_ = structuredClone(artSetExclusion)\n      artKeysByRarity.forEach((k) => {\n        if (exclude)\n          artSetExclusion_[k] = [...(artSetExclusion_[k] ?? []), setnum]\n        else if (artSetExclusion_[k])\n          artSetExclusion_[k] = artSetExclusion_[k].filter((n) => n !== setnum)\n      })\n      buildSettingDispatch({ artSetExclusion: artSetExclusion_ })\n    },\n    [artKeysByRarity, artSetExclusion, buildSettingDispatch]\n  )\n\n  return (\n    <>\n      {/* Button to open modal */}\n      <CardLight sx={{ display: 'flex', width: '100%' }}>\n        <CardContent sx={{ flexGrow: 1 }}>\n          <Typography>\n            <strong>{t`artSetConfig.title`}</strong>\n          </Typography>\n          <Stack spacing={1}>\n            <Typography>\n              {t`artSetConfig.setEffCond`}{' '}\n              <SqBadge color={artifactCondCount ? 'success' : 'warning'}>\n                {artifactCondCount} {t('artSetConfig.enabled')}\n              </SqBadge>\n            </Typography>\n            <Typography>\n              {t`sheet:2set`}{' '}\n              <SqBadge color=\"success\">\n                {allowTotals['2']} <ShowChartIcon {...iconInlineProps} />{' '}\n                {t('artSetConfig.allowed')}\n              </SqBadge>\n            </Typography>\n            <Typography>\n              {t`sheet:4set`}{' '}\n              <SqBadge color=\"success\">\n                {allowTotals['4']} <ShowChartIcon {...iconInlineProps} />{' '}\n                {t('artSetConfig.allowed')}\n              </SqBadge>\n            </Typography>\n            <Typography>\n              {t`artSetConfig.2rainbow`}{' '}\n              <SqBadge color={allowRainbow2 ? 'success' : 'secondary'}>\n                {allowRainbow2 ? (\n                  <ShowChartIcon {...iconInlineProps} />\n                ) : (\n                  <BlockIcon {...iconInlineProps} />\n                )}{' '}\n                {allowRainbow2 ? t('artSetConfig.allowed') : 'Excluded'}\n              </SqBadge>\n            </Typography>\n            <Typography>\n              {t`artSetConfig.4rainbow`}{' '}\n              <SqBadge color={allowRainbow4 ? 'success' : 'secondary'}>\n                {allowRainbow4 ? (\n                  <ShowChartIcon {...iconInlineProps} />\n                ) : (\n                  <BlockIcon {...iconInlineProps} />\n                )}{' '}\n                {allowRainbow4 ? t('artSetConfig.allowed') : 'Excluded'}\n              </SqBadge>\n            </Typography>\n          </Stack>\n        </CardContent>\n        <Button\n          onClick={onOpen}\n          disabled={disabled}\n          color=\"info\"\n          sx={{ borderRadius: 0, flexShrink: 1, minWidth: 40 }}\n        >\n          <SettingsIcon />\n        </Button>\n      </CardLight>\n\n      {/* Begin modal */}\n      <ModalWrapper open={open} onClose={onClose}>\n        <CardDark>\n          <CardContent\n            sx={{ display: 'flex', gap: 1, justifyContent: 'space-between' }}\n          >\n            <Typography variant=\"h6\">{t`artSetConfig.title`}</Typography>\n            <CloseButton onClick={onClose} />\n          </CardContent>\n          <Divider />\n          <CardContent>\n            <CardLight sx={{ mb: 1 }}>\n              <CardContent>\n                <Box display=\"flex\" gap={1}>\n                  <Typography>\n                    <strong>{t`artSetConfig.modal.setCond.title`}</strong>\n                  </Typography>\n                  <Typography sx={{ flexGrow: 1 }}>\n                    <SqBadge color={artifactCondCount ? 'success' : 'warning'}>\n                      {artifactCondCount} {t('artSetConfig.selected')}\n                    </SqBadge>\n                  </Typography>\n                  <Button\n                    size=\"small\"\n                    onClick={resetArtConds}\n                    color=\"error\"\n                    startIcon={<Replay />}\n                  >{t`artSetConfig.modal.setCond.reset`}</Button>\n                </Box>\n                <Typography>{t`artSetConfig.modal.setCond.text`}</Typography>\n              </CardContent>\n            </CardLight>\n            <CardLight sx={{ mb: 1 }}>\n              <CardContent>\n                <Typography sx={{ flexGrow: 1 }}>\n                  <strong>\n                    <Trans\n                      t={t}\n                      i18nKey=\"artSetConfig.modal.ArtSetFilter.title\"\n                    >\n                      {'Artifact Sets '}\n                      <ColorText color=\"success\">\n                        Allowed\n                        <ShowChartIcon {...iconInlineProps} />\n                      </ColorText>\n                      {' / '}\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        Excluded\n                        <BlockIcon {...iconInlineProps} />\n                      </ColorText>\n                    </Trans>\n                  </strong>\n                </Typography>\n                <Typography>\n                  <Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.intro\">\n                    You can allow/exclude which sets you want the builder to\n                    consider. In the following examples, <strong>A</strong> is\n                    on-set, and <strong>R</strong> is rainbow(off-set)\n                  </Trans>\n                </Typography>\n                <Typography>\n                  <Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.2set\">\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        Excluding\n                        <BlockIcon {...iconInlineProps} /> 2-Set\n                      </ColorText>\n                    </strong>\n                    would exclude 2-Set builds:\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        AA\n                      </ColorText>\n                      RRR\n                    </strong>\n                    and\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        AAA\n                      </ColorText>\n                      RR\n                    </strong>\n                    .\n                  </Trans>\n                </Typography>\n                <Typography>\n                  <Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.4set\">\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        Excluding\n                        <BlockIcon {...iconInlineProps} /> 4-Set\n                      </ColorText>\n                    </strong>\n                    would exclude 4-Set builds:\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        AAAA\n                      </ColorText>\n                      R\n                    </strong>\n                    and\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        AAAAA\n                      </ColorText>\n                    </strong>\n                    .\n                  </Trans>\n                </Typography>\n                <Typography>\n                  <Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.2rain\">\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        Excluding\n                        <BlockIcon {...iconInlineProps} /> 3-Rainbow\n                      </ColorText>\n                    </strong>\n                    would exclude 2-Set + 3-Rainbow builds:\n                    <strong>\n                      AA\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        RRR\n                      </ColorText>\n                    </strong>\n                    and\n                    <strong>\n                      AAA\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        RR\n                      </ColorText>\n                    </strong>\n                    .\n                  </Trans>\n                </Typography>\n                <Typography>\n                  <Trans t={t} i18nKey=\"artSetConfig.modal.ArtSetFilter.4rain\">\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        Excluding\n                        <BlockIcon {...iconInlineProps} /> 5-Rainbow\n                      </ColorText>\n                    </strong>\n                    would exclude full 5-Rainbow builds:\n                    <strong>\n                      <ColorText color=\"secondary\" variant=\"light\">\n                        RRRRR\n                      </ColorText>\n                    </strong>\n                    .\n                  </Trans>\n                </Typography>\n              </CardContent>\n            </CardLight>\n            <Grid\n              container\n              columns={{ xs: 2, lg: 3 }}\n              sx={{ mb: 1 }}\n              spacing={1}\n            >\n              <Grid item xs={1}>\n                <AllSetAllowExcludeCard\n                  allowTotal={allowTotals['2']}\n                  setNum={2}\n                  setAllExclusion={setAllExclusion}\n                />\n              </Grid>\n              <Grid item xs={1}>\n                <AllSetAllowExcludeCard\n                  allowTotal={allowTotals['4']}\n                  setNum={4}\n                  setAllExclusion={setAllExclusion}\n                />\n              </Grid>\n              <Grid item xs={1}>\n                <CardLight>\n                  <CardContent>\n                    <Typography gutterBottom>\n                      <strong>\n                        <Trans t={t} i18nKey=\"artSetConfig.alExRainbow\">\n                          <ColorText color=\"success\">\n                            Allow <ShowChartIcon {...iconInlineProps} />\n                          </ColorText>\n                          {' / '}\n                          <ColorText color=\"secondary\" variant=\"light\">\n                            Exclude <BlockIcon {...iconInlineProps} />\n                          </ColorText>\n                          {' Rainbow Builds'}\n                        </Trans>\n                      </strong>\n                    </Typography>\n                    <Box\n                      sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n                    >\n                      <Button\n                        fullWidth\n                        onClick={() =>\n                          buildSettingDispatch({\n                            artSetExclusion: handleArtSetExclusion(\n                              artSetExclusion,\n                              'rainbow',\n                              2\n                            ),\n                          })\n                        }\n                        color={allowRainbow2 ? 'success' : 'secondary'}\n                        startIcon={\n                          !allowRainbow2 ? (\n                            <CheckBoxOutlineBlank />\n                          ) : (\n                            <CheckBox />\n                          )\n                        }\n                        endIcon={\n                          allowRainbow2 ? <ShowChartIcon /> : <BlockIcon />\n                        }\n                      >{t`artSetConfig.2rainbow`}</Button>\n                      <Button\n                        fullWidth\n                        onClick={() =>\n                          buildSettingDispatch({\n                            artSetExclusion: handleArtSetExclusion(\n                              artSetExclusion,\n                              'rainbow',\n                              4\n                            ),\n                          })\n                        }\n                        color={allowRainbow4 ? 'success' : 'secondary'}\n                        startIcon={\n                          !allowRainbow4 ? (\n                            <CheckBoxOutlineBlank />\n                          ) : (\n                            <CheckBox />\n                          )\n                        }\n                        endIcon={\n                          allowRainbow4 ? <ShowChartIcon /> : <BlockIcon />\n                        }\n                      >{t`artSetConfig.4rainbow`}</Button>\n                    </Box>\n                  </CardContent>\n                </CardLight>\n              </Grid>\n            </Grid>\n            <Grid container spacing={1} columns={{ xs: 2, lg: 3 }}>\n              {artKeys.map((setKey) => (\n                <ArtifactSetCard\n                  key={setKey}\n                  setKey={setKey}\n                  fakeDataContextObj={fakeDataContextObj}\n                  slotCount={artSlotCount[setKey]}\n                />\n              ))}\n            </Grid>\n          </CardContent>\n          <Divider />\n          <CardContent sx={{ py: 1 }}>\n            <CloseButton large onClick={onClose} />\n          </CardContent>\n        </CardDark>\n      </ModalWrapper>\n    </>\n  )\n}\nfunction AllSetAllowExcludeCard({\n  allowTotal,\n  setNum,\n  setAllExclusion,\n}: {\n  allowTotal: string\n  setNum: 2 | 4\n  setAllExclusion: (setNum: 2 | 4, exclude?: boolean) => void\n}) {\n  const { t } = useTranslation(['page_character_optimize', 'sheet'])\n  return (\n    <CardLight>\n      <CardContent>\n        <Typography gutterBottom>\n          <strong>{t(`sheet:${setNum}set`)}</strong>{' '}\n          <SqBadge color=\"success\">\n            {allowTotal} <ShowChartIcon {...iconInlineProps} />{' '}\n            {t('artSetConfig.allowed')}\n          </SqBadge>\n        </Typography>\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n          <Button\n            fullWidth\n            disabled={\n              allowTotal.charAt(0) !== '0' && allowTotal.indexOf('/') === -1\n            }\n            onClick={() => setAllExclusion(setNum, false)}\n            color=\"success\"\n            startIcon={<ShowChartIcon />}\n          >\n            {t(`artSetConfig.allowAll${setNum}set`)}\n          </Button>\n          <Button\n            fullWidth\n            disabled={allowTotal.charAt(0) === '0'}\n            onClick={() => setAllExclusion(setNum, true)}\n            color=\"secondary\"\n            startIcon={<BlockIcon />}\n          >\n            {t(`artSetConfig.excludeAll${setNum}set`)}\n          </Button>\n        </Box>\n      </CardContent>\n    </CardLight>\n  )\n}\nfunction ArtifactSetCard({\n  setKey,\n  fakeDataContextObj,\n  slotCount,\n}: {\n  setKey: ArtifactSetKey\n  fakeDataContextObj: dataContextObj\n  slotCount: Record<ArtifactSlotKey, number>\n}) {\n  const { t } = useTranslation('sheet')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { buildSetting } = useBuildSetting(characterKey)\n  const { artSetExclusion } = buildSetting\n  const setExclusionSet = artSetExclusion?.[setKey] ?? []\n  const allow4 = !setExclusionSet.includes(4)\n  const slots = getNumSlots(slotCount)\n  const sheet = getArtSheet(setKey)\n  /* Assumes that all conditionals are from 4-Set. needs to change if there are 2-Set conditionals */\n  const set4CondNums = useMemo(() => {\n    if (!allow4) return []\n    return Object.keys(sheet.setEffects).filter((setNumKey) =>\n      sheet.setEffects[setNumKey]?.document.some((doc) => 'states' in doc)\n    )\n  }, [sheet.setEffects, allow4])\n  return (\n    <Grid item key={setKey} xs={1}>\n      <CardLight\n        sx={{ height: '100%', opacity: slots < 2 ? '50%' : undefined }}\n      >\n        <Box\n          className={`grad-${sheet.rarity[0]}star`}\n          width=\"100%\"\n          sx={{ display: 'flex' }}\n        >\n          <Box\n            component=\"img\"\n            src={artifactDefIcon(setKey)}\n            sx={{ height: 100, width: 'auto', mx: -1 }}\n          />\n          <Box\n            sx={{\n              flexGrow: 1,\n              px: 1,\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n            }}\n          >\n            <Typography variant=\"h6\">{sheet.name ?? ''}</Typography>\n            <Box>\n              {/* If there is ever a 2-Set conditional, we will need to change this */}\n              <Typography variant=\"subtitle1\">\n                {sheet.rarity.map((ns, i) => (\n                  <Box\n                    component=\"span\"\n                    sx={{ display: 'inline-flex', alignItems: 'center' }}\n                    key={ns}\n                  >\n                    {ns} <StarRoundedIcon fontSize=\"inherit\" />{' '}\n                    {i < sheet.rarity.length - 1 ? '/ ' : null}\n                  </Box>\n                ))}{' '}\n                <InfoTooltipInline\n                  title={\n                    <Box>\n                      <Typography>\n                        <SqBadge color=\"success\">{t`2set`}</SqBadge>\n                      </Typography>\n                      <Typography>\n                        <Translate\n                          ns={`artifact_${setKey}_gen`}\n                          key18={'setEffects.2'}\n                        />\n                      </Typography>\n                      <Box\n                        paddingTop={2}\n                        sx={{ opacity: setExclusionSet.includes(4) ? 0.6 : 1 }}\n                      >\n                        <Typography>\n                          <SqBadge color=\"success\">{t`4set`}</SqBadge>\n                        </Typography>\n                        <Typography>\n                          <Translate\n                            ns={`artifact_${setKey}_gen`}\n                            key18={'setEffects.4'}\n                          />\n                        </Typography>\n                      </Box>\n                    </Box>\n                  }\n                />\n              </Typography>\n            </Box>\n            <Box sx={{ display: 'flex', gap: 1 }}>\n              {Object.entries(slotCount).map(([slotKey, count]) => (\n                <Typography\n                  key={slotKey}\n                  sx={{ flexGrow: 1 }}\n                  variant=\"subtitle2\"\n                >\n                  <SqBadge\n                    sx={{ width: '100%' }}\n                    color={count ? 'primary' : 'secondary'}\n                  >\n                    <SlotIcon slotKey={slotKey} iconProps={iconInlineProps} />{' '}\n                    {count}\n                  </SqBadge>\n                </Typography>\n              ))}\n            </Box>\n          </Box>\n        </Box>\n        {allArtifactSetExclusionKeys.includes(setKey as ArtSetExclusionKey) && (\n          <SetInclusionButton\n            setKey={setKey as ArtSetExclusionKey}\n            buttonGroupSx={{ '.MuiButton-root': { borderRadius: 0 } }}\n          />\n        )}\n\n        {!!set4CondNums.length && (\n          <DataContext.Provider value={fakeDataContextObj}>\n            <CardContent\n              sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}\n            >\n              {set4CondNums.map((setNumKey) => (\n                <SetEffectDisplay\n                  key={setNumKey}\n                  setKey={setKey}\n                  setNumKey={parseInt(setNumKey) as SetNum}\n                  hideHeader\n                  conditionalsOnly\n                />\n              ))}\n            </CardContent>\n          </DataContext.Provider>\n        )}\n      </CardLight>\n    </Grid>\n  )\n}\n\nfunction getNumSlots(slotCount: Record<string, number>): number {\n  return Object.values(slotCount).reduce((tot, v) => tot + (v ? 1 : 0), 0)\n}\n","import { MenuItem } from '@mui/material'\nimport { useTranslation } from 'react-i18next'\nimport DropdownButton from '../../../../../Components/DropdownMenu/DropdownButton'\n\nconst levels = [0, 4, 8, 12, 16, 20] as const\nexport default function AssumeFullLevelToggle({\n  mainStatAssumptionLevel = 0,\n  setmainStatAssumptionLevel,\n  disabled,\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  return (\n    <DropdownButton\n      fullWidth\n      color={mainStatAssumptionLevel ? 'success' : 'primary'}\n      disabled={disabled}\n      title={\n        mainStatAssumptionLevel\n          ? t('mainStat.assumptionLvl.lvl', { lvl: mainStatAssumptionLevel })\n          : t('mainStat.assumptionLvl.no')\n      }\n    >\n      {levels.map((lvl) => (\n        <MenuItem key={lvl} onClick={() => setmainStatAssumptionLevel(lvl)}>\n          {lvl\n            ? t('mainStat.assumptionLvl.lvl', { lvl })\n            : t('mainStat.assumptionLvl.no')}\n        </MenuItem>\n      ))}\n    </DropdownButton>\n  )\n}\n","import { CardContent, Divider, Typography } from '@mui/material'\nimport { useContext } from 'react'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport CardLight from '../../../../../Components/Card/CardLight'\nimport { NodeFieldDisplay } from '../../../../../Components/FieldDisplay'\nimport { DataContext } from '../../../../../Context/DataContext'\nimport { uiInput as input } from '../../../../../Formula'\nimport type { NumNode } from '../../../../../Formula/type'\nimport { useTranslation } from 'react-i18next'\n\nexport default function BonusStatsCard() {\n  const { t } = useTranslation('page_character_optimize')\n  const {\n    character: { bonusStats },\n  } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const bonusStatsKeys = Object.keys(bonusStats)\n  if (!bonusStatsKeys.length) return null\n  const nodes = bonusStatsKeys.map((k) =>\n    data.get(input.customBonus[k] as NumNode)\n  )\n  return (\n    <CardLight>\n      <CardContent>\n        <Typography\n          sx={{ fontWeight: 'bold' }}\n        >{t`bonusStats.title`}</Typography>\n      </CardContent>\n      <Divider />\n      <CardContent>\n        {nodes.map((n) => (\n          <NodeFieldDisplay key={JSON.stringify(n.info)} node={n} />\n        ))}\n      </CardContent>\n    </CardLight>\n  )\n}\n","import { timeStringMs } from '@genshin-optimizer/util'\nimport { Alert, Grid, LinearProgress, styled, Typography } from '@mui/material'\nimport type { ReactNode } from 'react'\n\nexport const warningBuildNumber = 10000000\nexport type BuildStatus = {\n  type: 'active' | 'inactive'\n  tested: number // tested, including `failed`\n  failed: number // tested but fail the filter criteria, e.g., not enough EM\n  skipped: number\n  total: number\n  startTime?: number\n  finishTime?: number\n}\n\nconst Monospace = styled('strong')({\n  fontFamily: 'monospace',\n})\n\nconst BorderLinearProgress = styled(LinearProgress)(() => ({\n  height: 10,\n  borderRadius: 5,\n}))\nexport default function BuildAlert({\n  status: { type, tested, failed: _, skipped, total, startTime, finishTime },\n  characterName,\n}: {\n  status: BuildStatus\n  characterName: Displayable\n}) {\n  const hasTotal = isFinite(total)\n\n  const generatingBuilds = type !== 'inactive'\n  const unskipped = total - skipped\n\n  const testedString = <Monospace>{tested.toLocaleString()}</Monospace>\n  const unskippedString = <Monospace>{unskipped.toLocaleString()}</Monospace>\n  const skippedText = !!skipped && (\n    <span>\n      (<b>{<Monospace>{skipped.toLocaleString()}</Monospace>}</b> skipped)\n    </span>\n  )\n\n  const durationString = (\n    <Monospace>\n      {timeStringMs(\n        Math.round((finishTime ?? performance.now()) - (startTime ?? NaN))\n      )}\n    </Monospace>\n  )\n\n  const color = 'success' as 'success' | 'warning' | 'error'\n  let title = '' as ReactNode\n  let subtitle = '' as ReactNode\n  let progress = undefined as undefined | number\n\n  if (generatingBuilds) {\n    progress = (tested * 100) / unskipped\n    title = (\n      <Typography>\n        Generating and testing {testedString}\n        {hasTotal ? <>/{unskippedString}</> : undefined} build configurations\n        against the criteria for <b>{characterName}</b>. {skippedText}\n      </Typography>\n    )\n    subtitle = <Typography>Time elapsed: {durationString}</Typography>\n  } else if (tested + skipped) {\n    progress = 100\n    title = (\n      <Typography>\n        Generated and tested {testedString} Build configurations against the\n        criteria for <b>{characterName}</b>. {skippedText}\n      </Typography>\n    )\n    subtitle = <Typography>Total duration: {durationString}</Typography>\n  } else {\n    return null\n  }\n\n  return (\n    <Alert\n      severity={color}\n      variant=\"filled\"\n      sx={{\n        '& .MuiAlert-message': {\n          flexGrow: 1,\n        },\n      }}\n    >\n      {title}\n      {subtitle}\n      {progress !== undefined && (\n        <Grid container spacing={1} alignItems=\"center\">\n          {hasTotal && (\n            <Grid item>\n              <Typography>{`${progress.toFixed(1)}%`}</Typography>\n            </Grid>\n          )}\n          <Grid item flexGrow={1}>\n            <BorderLinearProgress\n              variant={hasTotal ? 'determinate' : 'indeterminate'}\n              value={progress}\n              color=\"primary\"\n            />\n          </Grid>\n        </Grid>\n      )}\n    </Alert>\n  )\n}\n","import type { CharacterKey } from '@genshin-optimizer/consts'\nimport { Typography } from '@mui/material'\nimport { getCharSheet } from '../../Data/Characters'\nimport useDBMeta from '../../ReactHooks/useDBMeta'\nimport BootstrapTooltip from '../BootstrapTooltip'\nimport CharIconSide from '../Image/CharIconSide'\n\nexport default function LocationIcon({\n  characterKey,\n}: {\n  characterKey: CharacterKey\n}) {\n  const { gender } = useDBMeta()\n  const characterSheet = getCharSheet(characterKey, gender)\n  if (!characterSheet) return null\n  return (\n    <BootstrapTooltip\n      placement=\"right-end\"\n      title={<Typography>{characterSheet.name}</Typography>}\n    >\n      <CharIconSide characterKey={characterKey} sideMargin />\n    </BootstrapTooltip>\n  )\n}\n","import { Box } from '@mui/material'\nimport type { StatKey } from '../KeyMap'\nimport KeyMap from '../KeyMap'\nimport StatIcon from '../KeyMap/StatIcon'\nimport { iconInlineProps } from '@genshin-optimizer/svgicons'\nimport ColorText from './ColoredText'\n\nexport function StatWithUnit({\n  statKey,\n  disableIcon = false,\n}: {\n  statKey: StatKey\n  disableIcon?: boolean\n}) {\n  return (\n    <Box component=\"span\" display=\"flex\" alignItems=\"center\" gap={1}>\n      {!disableIcon && (\n        <StatIcon statKey={statKey} iconProps={iconInlineProps} />\n      )}\n      <span>\n        {KeyMap.get(statKey)}\n        {KeyMap.unit(statKey)}\n      </span>\n    </Box>\n  )\n}\nexport function StatColoredWithUnit({\n  statKey,\n  disableIcon = false,\n}: {\n  statKey: StatKey\n  disableIcon?: boolean\n}) {\n  return (\n    <ColorText color={KeyMap.getVariant(statKey)}>\n      <StatWithUnit statKey={statKey} disableIcon={disableIcon} />\n    </ColorText>\n  )\n}\n","import type { ArtifactSlotKey } from '@genshin-optimizer/consts'\nimport { allElementWithPhyKeys } from '@genshin-optimizer/consts'\nimport { artifactAsset, imgAssets } from '@genshin-optimizer/gi-assets'\nimport {\n  artDisplayValue,\n  getMainStatDisplayStr,\n} from '@genshin-optimizer/gi-util'\nimport { clamp, unit } from '@genshin-optimizer/util'\nimport { BusinessCenter } from '@mui/icons-material'\nimport {\n  alpha,\n  Box,\n  CardActionArea,\n  Chip,\n  Typography,\n  useTheme,\n} from '@mui/material'\nimport { useCallback, useContext } from 'react'\nimport Artifact from '../../Data/Artifacts/Artifact'\nimport { DatabaseContext } from '../../Database/Database'\nimport StatIcon from '../../KeyMap/StatIcon'\nimport useArtifact from '../../ReactHooks/useArtifact'\nimport type { ICachedSubstat } from '../../Types/artifact'\nimport BootstrapTooltip from '../BootstrapTooltip'\nimport CardDark from '../Card/CardDark'\nimport LocationIcon from '../Character/LocationIcon'\nimport ColorText from '../ColoredText'\nimport ConditionalWrapper from '../ConditionalWrapper'\nimport { StatColoredWithUnit } from '../StatDisplay'\nimport ArtifactTooltip from './ArtifactTooltip'\n\ntype Data = {\n  artifactId?: string\n  slotKey: ArtifactSlotKey\n  mainStatAssumptionLevel?: number\n  onClick?: () => void\n  showLocation?: boolean\n  BGComponent?: React.ElementType\n}\n\nexport default function ArtifactCardNano({\n  artifactId,\n  slotKey: pSlotKey,\n  mainStatAssumptionLevel = 0,\n  showLocation = false,\n  onClick,\n  BGComponent = CardDark,\n}: Data) {\n  const art = useArtifact(artifactId)\n  const { database } = useContext(DatabaseContext)\n  const actionWrapperFunc = useCallback(\n    (children) => (\n      <CardActionArea onClick={onClick} sx={{ height: '100%' }}>\n        {children}\n      </CardActionArea>\n    ),\n    [onClick]\n  )\n  const theme = useTheme()\n  if (!art)\n    return (\n      <BGComponent\n        sx={{\n          display: 'flex',\n          height: '100%',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        <Box\n          component=\"img\"\n          src={imgAssets.slot[pSlotKey]}\n          sx={{ width: '25%', height: 'auto', opacity: 0.7 }}\n        />\n      </BGComponent>\n    )\n\n  const { slotKey, rarity, level, mainStatKey, substats, location } = art\n  const mainStatLevel = Math.max(\n    Math.min(mainStatAssumptionLevel, rarity * 4),\n    level\n  )\n  const element = allElementWithPhyKeys.find((ele) =>\n    art.mainStatKey.includes(ele)\n  )\n  const color = element\n    ? alpha(theme.palette[element].main, 0.6)\n    : alpha(theme.palette.secondary.main, 0.6)\n  return (\n    <BGComponent sx={{ height: '100%' }}>\n      <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\n        <Box display=\"flex\" height=\"100%\">\n          <Box\n            className={`grad-${rarity}star`}\n            sx={{\n              position: 'relative',\n              flexGrow: 1,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            <ArtifactTooltip art={art}>\n              <Box\n                component=\"img\"\n                src={artifactAsset(art.setKey, slotKey)}\n                sx={{ m: -1, maxHeight: '110%', maxWidth: '110%' }}\n              />\n            </ArtifactTooltip>\n            <Box\n              sx={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                p: 0.5,\n                opacity: 0.85,\n                display: 'flex',\n                justifyContent: 'space-between',\n                pointerEvents: 'none',\n              }}\n            >\n              <Chip\n                size=\"small\"\n                label={<strong>{` +${level}`}</strong>}\n                color={Artifact.levelVariant(level)}\n              />\n              {showLocation && (\n                <Chip\n                  size=\"small\"\n                  label={\n                    location ? (\n                      <LocationIcon\n                        characterKey={\n                          location &&\n                          database.chars.LocationToCharacterKey(location)\n                        }\n                      />\n                    ) : (\n                      <BusinessCenter />\n                    )\n                  }\n                  color={'secondary'}\n                  sx={{\n                    overflow: 'visible',\n                    '.MuiChip-label': {\n                      overflow: 'visible',\n                    },\n                  }}\n                />\n              )}\n            </Box>\n            {/* mainstats */}\n            <Chip\n              size=\"small\"\n              sx={{\n                position: 'absolute',\n                bottom: 0,\n                mb: 1,\n                backgroundColor: color,\n                p: 1,\n              }}\n              icon={\n                <BootstrapTooltip\n                  placement=\"top\"\n                  title={\n                    <Typography>\n                      <StatColoredWithUnit statKey={mainStatKey} />\n                    </Typography>\n                  }\n                  disableInteractive\n                >\n                  <Box lineHeight={0}>\n                    <StatIcon\n                      statKey={mainStatKey}\n                      iconProps={{ style: { padding: '4px' } }}\n                    />\n                  </Box>\n                </BootstrapTooltip>\n              }\n              label={\n                <Typography sx={{ mx: -0.7 }}>\n                  <ColorText\n                    color={mainStatLevel !== level ? 'warning' : undefined}\n                  >\n                    {getMainStatDisplayStr(mainStatKey, rarity, mainStatLevel)}\n                  </ColorText>\n                </Typography>\n              }\n            />\n          </Box>\n          {/* substats */}\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"space-between\"\n            sx={{ p: 1 }}\n          >\n            {substats.map((stat: ICachedSubstat, i: number) => (\n              <SubstatDisplay key={i + stat.key} stat={stat} />\n            ))}\n          </Box>\n        </Box>\n      </ConditionalWrapper>\n    </BGComponent>\n  )\n}\nfunction SubstatDisplay({ stat }: { stat: ICachedSubstat }) {\n  if (!stat.value) return null\n  const numRolls = stat.rolls?.length ?? 0\n  const rollColor = `roll${clamp(numRolls, 1, 6)}`\n  const statUnit = unit(stat.key)\n  return (\n    <Box display=\"flex\" gap={1} alignContent=\"center\">\n      <Typography\n        sx={{ flexGrow: 1, display: 'flex', gap: 0.5, alignItems: 'center' }}\n        color={(numRolls ? `${rollColor}.main` : 'error.main') as any}\n        component=\"span\"\n      >\n        <BootstrapTooltip\n          placement=\"top\"\n          title={\n            <Typography>\n              {stat.key && <StatColoredWithUnit statKey={stat.key} />}\n            </Typography>\n          }\n          disableInteractive\n        >\n          <Box lineHeight={0}>\n            <StatIcon statKey={stat.key} iconProps={{ fontSize: 'inherit' }} />\n          </Box>\n        </BootstrapTooltip>\n        <span>{`${artDisplayValue(stat.value, statUnit)}${statUnit}`}</span>\n      </Typography>\n    </Box>\n  )\n}\n","import { objMap } from '@genshin-optimizer/util'\nimport { Masonry } from '@mui/lab'\nimport { Box, Divider, ListItem } from '@mui/material'\nimport { useContext, useMemo } from 'react'\nimport { DataContext } from '../../Context/DataContext'\nimport { OptimizationTargetContext } from '../../Context/OptimizationTargetContext'\nimport { DatabaseContext } from '../../Database/Database'\nimport { getDisplayHeader, getDisplaySections } from '../../Formula/DisplayUtil'\nimport type { DisplaySub } from '../../Formula/type'\nimport type { NodeDisplay } from '../../Formula/uiData'\nimport { customRead } from '../../Formula/utils'\nimport CardDark from '../Card/CardDark'\nimport CardHeaderCustom from '../Card/CardHeaderCustom'\nimport { FieldDisplayList, NodeFieldDisplay } from '../FieldDisplay'\nimport ImgIcon from '../Image/ImgIcon'\nimport SqBadge from '../SqBadge'\n\nexport default function StatDisplayComponent() {\n  const { data } = useContext(DataContext)\n  const sections = useMemo(\n    () =>\n      getDisplaySections(data).filter(([, ns]) =>\n        Object.values(ns).some((n) => !n.isEmpty)\n      ),\n    [data]\n  )\n  return (\n    <Box sx={{ mr: -1, mb: -1 }}>\n      <Masonry columns={{ xs: 1, sm: 2, md: 3, xl: 4 }} spacing={1}>\n        {sections.map(([key, Nodes]) => (\n          <Section key={key} displayNs={Nodes} sectionKey={key} />\n        ))}\n      </Masonry>\n    </Box>\n  )\n}\n\nfunction Section({\n  displayNs,\n  sectionKey,\n}: {\n  displayNs: DisplaySub<NodeDisplay>\n  sectionKey: string\n}) {\n  const optimizationTarget = useContext(OptimizationTargetContext)\n  const { data, oldData } = useContext(DataContext)\n  const { database } = useContext(DatabaseContext)\n  const header = useMemo(\n    () => getDisplayHeader(data, sectionKey, database),\n    [database, data, sectionKey]\n  )\n  const displayNsReads = useMemo(\n    () =>\n      objMap(displayNs, (n, nodeKey) =>\n        customRead(['display', sectionKey, nodeKey])\n      ),\n    [displayNs, sectionKey]\n  )\n  if (!header) return <CardDark></CardDark>\n\n  const { title, icon, action } = header\n  return (\n    <CardDark>\n      <CardHeaderCustom\n        avatar={icon && <ImgIcon size={2} src={icon} />}\n        title={title}\n        action={action && <SqBadge>{action}</SqBadge>}\n      />\n      <Divider />\n      <FieldDisplayList sx={{ m: 0 }}>\n        {Object.entries(displayNs).map(([nodeKey, n]) => (\n          <NodeFieldDisplay\n            key={nodeKey}\n            node={n}\n            oldValue={\n              oldData ? oldData.get(displayNsReads[nodeKey]!).value : undefined\n            }\n            component={ListItem}\n            emphasize={\n              JSON.stringify(optimizationTarget) ===\n              JSON.stringify([sectionKey, nodeKey])\n            }\n          />\n        ))}\n      </FieldDisplayList>\n    </CardDark>\n  )\n}\n","import { weaponAsset } from '@genshin-optimizer/gi-assets'\nimport { BusinessCenter } from '@mui/icons-material'\nimport { Box, CardActionArea, Chip, Skeleton, Typography } from '@mui/material'\nimport { useCallback, useContext, useMemo } from 'react'\nimport { getWeaponSheet } from '../../Data/Weapons'\nimport WeaponSheet from '../../Data/Weapons/WeaponSheet'\nimport { DatabaseContext } from '../../Database/Database'\nimport { input } from '../../Formula'\nimport { computeUIData, dataObjForWeapon } from '../../Formula/api'\nimport type { NodeDisplay } from '../../Formula/uiData'\nimport { nodeVStr } from '../../Formula/uiData'\nimport useWeapon from '../../ReactHooks/useWeapon'\nimport BootstrapTooltip from '../BootstrapTooltip'\nimport CardDark from '../Card/CardDark'\nimport LocationIcon from '../Character/LocationIcon'\nimport ConditionalWrapper from '../ConditionalWrapper'\nimport WeaponNameTooltip from './WeaponNameTooltip'\n\ntype Data = {\n  weaponId?: string\n  onClick?: () => void\n  showLocation?: boolean\n  BGComponent?: React.ElementType\n}\n\nexport default function WeaponCardNano({\n  weaponId,\n  showLocation = false,\n  onClick,\n  BGComponent = CardDark,\n}: Data) {\n  const { database } = useContext(DatabaseContext)\n  const weapon = useWeapon(weaponId)\n  const weaponSheet = weapon?.key && getWeaponSheet(weapon.key)\n  const actionWrapperFunc = useCallback(\n    (children) => (\n      <CardActionArea sx={{ height: '100%' }} onClick={onClick}>\n        {children}\n      </CardActionArea>\n    ),\n    [onClick]\n  )\n  const UIData = useMemo(\n    () =>\n      weaponSheet &&\n      weapon &&\n      computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]),\n    [weaponSheet, weapon]\n  )\n  if (!weapon || !weaponSheet || !UIData)\n    return (\n      <BGComponent sx={{ height: '100%' }}>\n        <Skeleton\n          variant=\"rectangular\"\n          sx={{ width: '100%', height: '100%' }}\n        />\n      </BGComponent>\n    )\n  const { refinement, location } = weapon\n  return (\n    <BGComponent sx={{ height: '100%' }}>\n      <ConditionalWrapper condition={!!onClick} wrapper={actionWrapperFunc}>\n        <Box display=\"flex\" height=\"100%\" alignItems=\"stretch\">\n          <Box\n            className={`grad-${weaponSheet.rarity}star`}\n            sx={{\n              height: '100%',\n              position: 'relative',\n              flexGrow: 1,\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              justifyContent: 'flex-end',\n            }}\n          >\n            <WeaponNameTooltip sheet={weaponSheet}>\n              <Box\n                component=\"img\"\n                src={weaponAsset(weapon.key, weapon.ascension >= 2)}\n                sx={{ mx: -1, maxHeight: '100%', maxWidth: '100%' }}\n              />\n            </WeaponNameTooltip>\n            <Box\n              sx={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                p: 0.5,\n                opacity: 0.85,\n                display: 'flex',\n                justifyContent: 'space-between',\n                pointerEvents: 'none',\n              }}\n            >\n              <Chip\n                size=\"small\"\n                label={<strong>{WeaponSheet.getLevelString(weapon)}</strong>}\n                color=\"primary\"\n              />\n              {showLocation && (\n                <Chip\n                  size=\"small\"\n                  label={\n                    location ? (\n                      <LocationIcon\n                        characterKey={database.chars.LocationToCharacterKey(\n                          location\n                        )}\n                      />\n                    ) : (\n                      <BusinessCenter />\n                    )\n                  }\n                  color={'secondary'}\n                  sx={{\n                    overflow: 'visible',\n                    '.MuiChip-label': {\n                      overflow: 'visible',\n                    },\n                  }}\n                />\n              )}\n            </Box>\n            <Box\n              sx={{\n                position: 'absolute',\n                width: '100%',\n                height: '100%',\n                p: 0.5,\n                opacity: 0.85,\n                display: 'flex',\n                justifyContent: 'flex-end',\n                alignItems: 'flex-end',\n              }}\n            >\n              {weaponSheet.hasRefinement && (\n                <Chip\n                  size=\"small\"\n                  color=\"info\"\n                  label={<strong>R{refinement}</strong>}\n                />\n              )}\n            </Box>\n          </Box>\n          <Box display=\"flex\" flexDirection=\"column\" sx={{ p: 1 }}>\n            <WeaponStat node={UIData.get(input.weapon.main)} />\n            <WeaponStat node={UIData.get(input.weapon.sub)} />\n          </Box>\n        </Box>\n      </ConditionalWrapper>\n    </BGComponent>\n  )\n}\nfunction WeaponStat({ node }: { node: NodeDisplay }) {\n  if (!node.info.name) return null\n  return (\n    <Box display=\"flex\" gap={1} alignContent=\"center\">\n      <Typography\n        sx={{ flexGrow: 1, display: 'flex', gap: 1 }}\n        component=\"span\"\n      >\n        <BootstrapTooltip\n          placement=\"top\"\n          title={<Typography>{node.info.name}</Typography>}\n          disableInteractive\n        >\n          <span>{node.info.icon}</span>\n        </BootstrapTooltip>\n        <span>{nodeVStr(node)}</span>\n      </Typography>\n    </Box>\n  )\n}\n","import type { ArtifactSetKey, ArtifactSlotKey } from '@genshin-optimizer/consts'\nimport { Box, Typography } from '@mui/material'\nimport { useMemo } from 'react'\nimport ArtifactSetTooltip from '../../../../../Components/Artifact/ArtifactSetTooltip'\nimport SlotIcon from '../../../../../Components/Artifact/SlotIcon'\nimport SqBadge from '../../../../../Components/SqBadge'\nimport { getArtSheet } from '../../../../../Data/Artifacts'\nimport { iconInlineProps } from '@genshin-optimizer/svgicons'\nimport type { ICachedArtifact } from '../../../../../Types/artifact'\n\ntype ArtifactSetBadgesProps = {\n  artifacts: ICachedArtifact[]\n  currentlyEquipped?: boolean\n}\nexport function ArtifactSetBadges({\n  artifacts,\n  currentlyEquipped = false,\n}: ArtifactSetBadgesProps) {\n  const setToSlots: Partial<Record<ArtifactSetKey, ArtifactSlotKey[]>> =\n    useMemo(\n      () =>\n        artifacts\n          .filter((arti) => arti)\n          .reduce((acc, curr) => {\n            acc[curr.setKey]\n              ? acc[curr.setKey].push(curr.slotKey)\n              : (acc[curr.setKey] = [curr.slotKey])\n            return acc\n          }, {}),\n      [artifacts]\n    )\n  return (\n    <>\n      {Object.entries(setToSlots)\n        .sort(\n          ([_k1, slotarr1], [_k2, slotarr2]) =>\n            slotarr2.length - slotarr1.length\n        )\n        .map(([key, slotarr]) => (\n          <ArtifactSetBadge\n            key={key}\n            setKey={key}\n            currentlyEquipped={currentlyEquipped}\n            slotarr={slotarr}\n          />\n        ))}\n    </>\n  )\n}\nfunction ArtifactSetBadge({\n  setKey,\n  currentlyEquipped = false,\n  slotarr,\n}: {\n  setKey: ArtifactSetKey\n  currentlyEquipped: boolean\n  slotarr: ArtifactSlotKey[]\n}) {\n  const artifactSheet = getArtSheet(setKey)\n  const numInSet = slotarr.length\n  const setActive = Object.keys(artifactSheet.setEffects)\n    .map((setKey) => parseInt(setKey))\n    .filter((setNum) => setNum <= numInSet)\n  return (\n    <Box>\n      <ArtifactSetTooltip artifactSheet={artifactSheet} numInSet={numInSet}>\n        <SqBadge\n          sx={{ height: '100%' }}\n          color={currentlyEquipped ? 'success' : 'primary'}\n        >\n          <Typography>\n            {slotarr.map((slotKey) => (\n              <SlotIcon\n                key={slotKey}\n                slotKey={slotKey}\n                iconProps={iconInlineProps}\n              />\n            ))}{' '}\n            {artifactSheet.name ?? ''}\n            {setActive.map((n, i) => (\n              <SqBadge sx={{ ml: 0.5 }} key={'' + n + i} color=\"success\">\n                {n}\n              </SqBadge>\n            ))}\n          </Typography>\n        </SqBadge>\n      </ArtifactSetTooltip>\n    </Box>\n  )\n}\n","import type { LocationCharacterKey } from '@genshin-optimizer/consts'\nimport {\n  allArtifactSlotKeys,\n  charKeyToLocCharKey,\n} from '@genshin-optimizer/consts'\nimport { toggleArr } from '@genshin-optimizer/util'\nimport { Checkroom, ChevronRight } from '@mui/icons-material'\nimport BlockIcon from '@mui/icons-material/Block'\nimport CheckBoxIcon from '@mui/icons-material/CheckBox'\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank'\nimport ShowChartIcon from '@mui/icons-material/ShowChart'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Grid,\n  Skeleton,\n  Typography,\n} from '@mui/material'\nimport { Suspense, useCallback, useContext, useMemo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport ArtifactCardNano from '../../../../../Components/Artifact/ArtifactCardNano'\nimport BootstrapTooltip from '../../../../../Components/BootstrapTooltip'\nimport CardDark from '../../../../../Components/Card/CardDark'\nimport CardLight from '../../../../../Components/Card/CardLight'\nimport StatDisplayComponent from '../../../../../Components/Character/StatDisplayComponent'\nimport ColorText from '../../../../../Components/ColoredText'\nimport ModalWrapper from '../../../../../Components/ModalWrapper'\nimport SqBadge from '../../../../../Components/SqBadge'\nimport WeaponCardNano from '../../../../../Components/Weapon/WeaponCardNano'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport { DataContext } from '../../../../../Context/DataContext'\nimport { getCharSheet } from '../../../../../Data/Characters'\nimport { DatabaseContext } from '../../../../../Database/Database'\nimport type {\n  AllowLocationsState,\n  ArtSetExclusionKey,\n} from '../../../../../Database/DataManagers/BuildSettingData'\nimport { allArtifactSetExclusionKeys } from '../../../../../Database/DataManagers/BuildSettingData'\nimport { uiInput as input } from '../../../../../Formula'\nimport ArtifactCard from '../../../../../PageArtifact/ArtifactCard'\nimport useArtifact from '../../../../../ReactHooks/useArtifact'\nimport type { ICachedArtifact } from '../../../../../Types/artifact'\nimport useBuildSetting from '../useBuildSetting'\nimport { ArtifactSetBadges } from './ArtifactSetBadges'\nimport SetInclusionButton from './SetInclusionButton'\n\ntype NewOld = {\n  newId: string\n  oldId?: string\n}\n\ntype BuildDisplayItemProps = {\n  label?: Displayable\n  compareBuild: boolean\n  disabled?: boolean\n  extraButtonsRight?: JSX.Element\n  extraButtonsLeft?: JSX.Element\n}\n//for displaying each artifact build\nexport default function BuildDisplayItem({\n  label,\n  compareBuild,\n  extraButtonsRight,\n  extraButtonsLeft,\n  disabled,\n}: BuildDisplayItemProps) {\n  const {\n    character: { key: characterKey, equippedArtifacts },\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { mainStatAssumptionLevel, allowLocationsState },\n  } = useBuildSetting(characterKey)\n  const { database } = useContext(DatabaseContext)\n  const dataContext = useContext(DataContext)\n\n  const { data, oldData } = dataContext\n  const [newOld, setNewOld] = useState(undefined as NewOld | undefined)\n  const close = useCallback(() => setNewOld(undefined), [setNewOld])\n\n  const equipBuild = useCallback(() => {\n    if (!window.confirm('Do you want to equip this build to this character?'))\n      return\n    const char = database.chars.get(characterKey)\n    if (!char) return\n    allArtifactSlotKeys.forEach((s) => {\n      const aid = data.get(input.art[s].id).value?.toString()\n      if (aid)\n        database.arts.set(aid, { location: charKeyToLocCharKey(characterKey) })\n      else {\n        const oldAid = char.equippedArtifacts[s]\n        if (oldAid && database.arts.get(oldAid))\n          database.arts.set(oldAid, { location: '' })\n      }\n    })\n    const weapon = data.get(input.weapon.id).value\n    if (weapon)\n      database.weapons.set(weapon, {\n        location: charKeyToLocCharKey(characterKey),\n      })\n  }, [characterKey, data, database])\n\n  const statProviderContext = useMemo(() => {\n    const dataContext_ = { ...dataContext }\n    if (!compareBuild) dataContext_.oldData = undefined\n    return dataContext_\n  }, [dataContext, compareBuild])\n\n  const artifactIdsBySlot = useMemo(\n    () =>\n      Object.fromEntries(\n        allArtifactSlotKeys.map((slotKey) => [\n          slotKey,\n          data.get(input.art[slotKey].id).value?.toString(),\n        ])\n      ),\n    [data]\n  )\n  const artifacts = useMemo(\n    () =>\n      artifactIdsBySlot &&\n      (Object.values(artifactIdsBySlot)\n        .map((artiId: string) => database.arts.get(artiId))\n        .filter((arti) => arti) as ICachedArtifact[]),\n    [artifactIdsBySlot, database.arts]\n  )\n\n  // Memoize Arts because of its dynamic onClick\n  const artNanos = useMemo(\n    () =>\n      allArtifactSlotKeys.map((slotKey) => (\n        <Grid item xs={1} key={slotKey}>\n          <ArtifactCardNano\n            showLocation\n            slotKey={slotKey}\n            artifactId={artifactIdsBySlot[slotKey]}\n            mainStatAssumptionLevel={mainStatAssumptionLevel}\n            onClick={() => {\n              const oldId = equippedArtifacts[slotKey]\n              const newId = artifactIdsBySlot[slotKey]!\n              setNewOld({ oldId: oldId !== newId ? oldId : undefined, newId })\n            }}\n          />\n        </Grid>\n      )),\n    [setNewOld, equippedArtifacts, mainStatAssumptionLevel, artifactIdsBySlot]\n  )\n\n  if (!oldData) return null\n  const currentlyEquipped =\n    allArtifactSlotKeys.every(\n      (slotKey) =>\n        artifactIdsBySlot[slotKey] ===\n        oldData.get(input.art[slotKey].id).value?.toString()\n    ) && data.get(input.weapon.id).value === oldData.get(input.weapon.id).value\n\n  return (\n    <CardLight>\n      <Suspense\n        fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}\n      >\n        {newOld && (\n          <CompareArtifactModal\n            newOld={newOld}\n            mainStatAssumptionLevel={mainStatAssumptionLevel}\n            onClose={close}\n            allowLocationsState={allowLocationsState}\n          />\n        )}\n        <CardContent>\n          <Box display=\"flex\" gap={1} sx={{ pb: 1 }} flexWrap=\"wrap\">\n            {label !== undefined && (\n              <SqBadge color=\"info\">\n                <Typography>\n                  <strong>\n                    {label}\n                    {currentlyEquipped ? ' (Equipped)' : ''}\n                  </strong>\n                </Typography>\n              </SqBadge>\n            )}\n            <ArtifactSetBadges\n              artifacts={artifacts}\n              currentlyEquipped={currentlyEquipped}\n            />\n            <Box\n              sx={{ flexGrow: 1, display: 'flex', justifyContent: 'flex-end' }}\n            />\n            {extraButtonsLeft}\n            <Button\n              size=\"small\"\n              color=\"success\"\n              onClick={equipBuild}\n              disabled={disabled || currentlyEquipped}\n              startIcon={<Checkroom />}\n            >\n              Equip Build\n            </Button>\n            {extraButtonsRight}\n          </Box>\n          <Grid\n            container\n            spacing={1}\n            sx={{ pb: 1 }}\n            columns={{ xs: 2, sm: 3, md: 4, lg: 6 }}\n          >\n            <Grid item xs={1}>\n              <WeaponCardNano\n                showLocation\n                weaponId={data.get(input.weapon.id).value!}\n              />\n            </Grid>\n            {artNanos}\n          </Grid>\n          <DataContext.Provider value={statProviderContext}>\n            <StatDisplayComponent />\n          </DataContext.Provider>\n        </CardContent>\n      </Suspense>\n    </CardLight>\n  )\n}\n\nfunction CompareArtifactModal({\n  newOld: { newId, oldId },\n  mainStatAssumptionLevel,\n  onClose,\n  allowLocationsState,\n}: {\n  newOld: NewOld\n  mainStatAssumptionLevel: number\n  onClose: () => void\n  allowLocationsState: AllowLocationsState\n}) {\n  const { database } = useContext(DatabaseContext)\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const onEquip = useCallback(() => {\n    if (\n      !window.confirm('Do you want to equip this artifact to this character?')\n    )\n      return\n    database.arts.set(newId, { location: charKeyToLocCharKey(characterKey) })\n    onClose()\n  }, [newId, database, characterKey, onClose])\n  const newLoc = database.arts.get(newId)?.location ?? ''\n  const newArtifact = useArtifact(newId)\n\n  return (\n    <ModalWrapper\n      open={!!newId}\n      onClose={onClose}\n      containerProps={{ maxWidth: oldId ? 'md' : 'xs' }}\n    >\n      <CardDark>\n        <CardContent\n          sx={{\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'stretch',\n            gap: 2,\n          }}\n        >\n          {oldId && (\n            <Box minWidth={320}>\n              <ArtifactCard\n                artifactId={oldId}\n                mainStatAssumptionLevel={mainStatAssumptionLevel}\n                canEquip\n                editorProps={{ disableSet: true, disableSlot: true }}\n                extraButtons={<ExcludeButton id={oldId} />}\n              />\n            </Box>\n          )}\n          {oldId && <Box display=\"flex\" flexGrow={1} />}\n          {oldId && (\n            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n              <Button onClick={onEquip} sx={{ display: 'flex' }}>\n                <ChevronRight sx={{ fontSize: 40 }} />\n              </Button>\n            </Box>\n          )}\n          {oldId && <Box display=\"flex\" flexGrow={1} />}\n          <Box minWidth={320} display=\"flex\" flexDirection=\"column\" gap={1}>\n            <ArtifactCard\n              artifactId={newId}\n              mainStatAssumptionLevel={mainStatAssumptionLevel}\n              canEquip\n              editorProps={{ disableSet: true, disableSlot: true }}\n              extraButtons={<ExcludeButton id={newId} />}\n            />\n            {newLoc &&\n              newLoc !== charKeyToLocCharKey(characterKey) &&\n              allowLocationsState !== 'all' && (\n                <ExcludeEquipButton locationKey={newLoc} />\n              )}\n            {newArtifact &&\n              allArtifactSetExclusionKeys.includes(\n                newArtifact.setKey as ArtSetExclusionKey\n              ) && (\n                <SetInclusionButton\n                  setKey={newArtifact.setKey as ArtSetExclusionKey}\n                />\n              )}\n          </Box>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  )\n}\nfunction ExcludeButton({ id }: { id: string }) {\n  const { t } = useTranslation('page_character_optimize')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { artExclusion },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const excluded = artExclusion.includes(id)\n  const toggle = useCallback(\n    () => buildSettingDispatch({ artExclusion: toggleArr(artExclusion, id) }),\n    [id, artExclusion, buildSettingDispatch]\n  )\n\n  return (\n    <BootstrapTooltip\n      title={\n        <Box>\n          <Typography>{t`excludeArt.excludeArtifactTip`}</Typography>\n          <Typography>\n            <ColorText color={excluded ? 'error' : 'success'}>\n              {t(excluded ? 'excludeArt.excluded' : 'excludeArt.included')}\n            </ColorText>\n          </Typography>\n        </Box>\n      }\n      placement=\"top\"\n      arrow\n    >\n      <Button\n        onClick={toggle}\n        color={excluded ? 'error' : 'success'}\n        size=\"small\"\n      >\n        {excluded ? <BlockIcon /> : <ShowChartIcon />}\n      </Button>\n    </BootstrapTooltip>\n  )\n}\nfunction ExcludeEquipButton({\n  locationKey,\n}: {\n  locationKey: LocationCharacterKey\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const characterSheet = getCharSheet(\n    database.chars.LocationToCharacterKey(locationKey)\n  )\n  const {\n    buildSetting: { excludedLocations },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const excluded = excludedLocations.includes(locationKey)\n  const toggle = useCallback(\n    () =>\n      buildSettingDispatch({\n        excludedLocations: toggleArr(excludedLocations, locationKey),\n      }),\n    [locationKey, excludedLocations, buildSettingDispatch]\n  )\n\n  return (\n    <Button\n      onClick={toggle}\n      color={excluded ? 'secondary' : 'success'}\n      size=\"small\"\n      startIcon={excluded ? <CheckBoxOutlineBlankIcon /> : <CheckBoxIcon />}\n    >\n      <span>\n        {t`excludeChar.allowEquip`} <strong>{characterSheet.name}</strong>\n      </span>\n    </Button>\n  )\n}\n","import type { CharacterKey } from '@genshin-optimizer/consts'\nimport { useCallback, useContext, useEffect, useState } from 'react'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport type { IBuildResult } from '../../../../Database/DataManagers/BuildResult'\n\nexport default function useBuildResult(characterKey: CharacterKey) {\n  const { database } = useContext(DatabaseContext)\n  const [buildResult, setBuildResult] = useState(() =>\n    database.buildResult.get(characterKey)\n  )\n  useEffect(\n    () => setBuildResult(database.buildResult.get(characterKey)),\n    [database, characterKey]\n  )\n  useEffect(\n    () =>\n      database.buildResult.follow(\n        characterKey,\n        (k, r, v) => r === 'update' && setBuildResult(v)\n      ),\n    [characterKey, setBuildResult, database]\n  )\n  const buildResultDispatch = useCallback(\n    (action: Partial<IBuildResult>) =>\n      characterKey && database.buildResult.set(characterKey, action),\n    [characterKey, database]\n  )\n\n  return { buildResult, buildResultDispatch }\n}\n","import type { DotProps } from 'recharts'\nimport type EnhancedPoint from './EnhancedPoint'\n\ntype CustomShapeType = 'circle' | 'diamond' | 'square'\ntype CustomDotProps = DotProps & {\n  selectedPoint: EnhancedPoint | undefined\n  payload?: EnhancedPoint\n  radiusSelected?: number\n  radiusUnselected?: number\n  colorSelected?: string\n  colorUnselected: string\n  shape?: CustomShapeType\n}\nexport default function CustomDot({\n  cx,\n  cy,\n  payload,\n  selectedPoint,\n  radiusSelected = 6,\n  radiusUnselected = 3,\n  colorSelected = 'red',\n  colorUnselected,\n  shape = 'circle',\n}: CustomDotProps) {\n  if (!cx || !cy || !payload) {\n    return null\n  }\n\n  const isSelected =\n    selectedPoint &&\n    selectedPoint.x === payload.x &&\n    selectedPoint.y === payload.y\n\n  return (\n    <g\n      className=\"custom-dot\"\n      data-chart-x={cx}\n      data-chart-y={cy}\n      data-x-value={payload.x}\n      data-y-value={payload.y}\n      data-radius={isSelected ? radiusUnselected : radiusSelected}\n    >\n      {!isSelected ? (\n        <CustomShape\n          id=\"customShapeUnselected\"\n          shape={shape}\n          cx={cx}\n          cy={cy}\n          r={radiusUnselected}\n          fill={colorUnselected}\n        />\n      ) : (\n        <>\n          <CustomShape\n            id=\"customShapeSelected\"\n            shape={shape}\n            cx={cx}\n            cy={cy}\n            r={radiusSelected / 2}\n            fill={colorSelected}\n          />\n          <CustomShape\n            id=\"customShapeBorder\"\n            shape={shape}\n            cx={cx}\n            cy={cy}\n            r={radiusSelected}\n            fill=\"none\"\n            stroke={colorSelected}\n          />\n        </>\n      )}\n    </g>\n  )\n}\nfunction CustomShape({\n  shape,\n  id,\n  cx,\n  cy,\n  r,\n  fill,\n  stroke,\n}: {\n  shape: CustomShapeType\n  id?: string\n  cx: number\n  cy: number\n  r: number\n  fill?: string\n  stroke?: string\n}) {\n  switch (shape) {\n    case 'circle':\n      return (\n        <circle id={id} cx={cx} cy={cy} r={r} fill={fill} stroke={stroke} />\n      )\n    case 'square':\n      return (\n        <rect\n          id={id}\n          x={cx - r}\n          y={cy - r}\n          width={r * 2}\n          height={r * 2}\n          fill={fill}\n          stroke={stroke}\n        />\n      )\n    case 'diamond':\n      return (\n        <polygon\n          id={id}\n          points={`${cx},${cy + r * 2.5} ${cx + r * 1.5},${cy} ${cx},${\n            cy - r * 2.5\n          } ${cx - r * 1.5},${cy}`}\n          fill={fill}\n          stroke={stroke}\n        />\n      )\n  }\n}\n","import { allArtifactSlotKeys } from '@genshin-optimizer/consts'\nimport { valueString } from '@genshin-optimizer/util'\nimport {\n  Button,\n  CardContent,\n  ClickAwayListener,\n  Grid,\n  Skeleton,\n  Stack,\n  Typography,\n} from '@mui/material'\nimport { Suspense, useCallback, useContext, useMemo } from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport type { TooltipProps } from 'recharts'\nimport ArtifactCardPico from '../../../../../../Components/Artifact/ArtifactCardPico'\nimport BootstrapTooltip from '../../../../../../Components/BootstrapTooltip'\nimport CardDark from '../../../../../../Components/Card/CardDark'\nimport CloseButton from '../../../../../../Components/CloseButton'\nimport SqBadge from '../../../../../../Components/SqBadge'\nimport { DataContext } from '../../../../../../Context/DataContext'\nimport { DatabaseContext } from '../../../../../../Database/Database'\nimport { input } from '../../../../../../Formula'\nimport type { Unit } from '../../../../../../KeyMap'\nimport type { ICachedArtifact } from '../../../../../../Types/artifact'\nimport { ArtifactSetBadges } from '../ArtifactSetBadges'\nimport type EnhancedPoint from './EnhancedPoint'\n\ntype CustomTooltipProps = TooltipProps<number, string> & {\n  xLabel: Displayable\n  xUnit: Unit | undefined\n  yLabel: Displayable\n  yUnit: Unit | undefined\n  selectedPoint: EnhancedPoint | undefined\n  setSelectedPoint: (pt: EnhancedPoint | undefined) => void\n  addBuildToList: (build: string[]) => void\n}\nexport default function CustomTooltip({\n  xLabel,\n  xUnit,\n  yLabel,\n  yUnit,\n  selectedPoint,\n  setSelectedPoint,\n  addBuildToList,\n  ...tooltipProps\n}: CustomTooltipProps) {\n  const { database } = useContext(DatabaseContext)\n  const { data } = useContext(DataContext)\n  const { t } = useTranslation('page_character_optimize')\n\n  const artifactsBySlot: { [slot: string]: ICachedArtifact } = useMemo(\n    () =>\n      selectedPoint &&\n      selectedPoint.artifactIds &&\n      Object.fromEntries(\n        selectedPoint.artifactIds\n          .map((id) => {\n            const artiObj = database.arts.get(id)\n            return [artiObj?.slotKey, artiObj]\n          })\n          .filter((arti) => arti)\n      ),\n    [database.arts, selectedPoint]\n  )\n  const clickAwayHandler = useCallback(\n    (e) => {\n      if (\n        !(\n          e.target.id.includes('customShape') ||\n          e.target.id.includes('chartContainer')\n        )\n      ) {\n        setSelectedPoint(undefined)\n      }\n    },\n    [setSelectedPoint]\n  )\n\n  const currentlyEquipped =\n    artifactsBySlot &&\n    allArtifactSlotKeys.every(\n      (slotKey) =>\n        artifactsBySlot[slotKey]?.id ===\n        data.get(input.art[slotKey].id).value?.toString()\n    )\n\n  const generLabel = useMemo(\n    () =>\n      selectedPoint?.generBuildNumber !== undefined &&\n      `#${selectedPoint?.generBuildNumber}`,\n    [selectedPoint]\n  )\n  const graphLabel = useMemo(\n    () =>\n      selectedPoint?.graphBuildNumber !== undefined && (\n        <Trans\n          t={t}\n          i18nKey=\"graphBuildLabel\"\n          count={selectedPoint?.graphBuildNumber}\n        >\n          Graph #{{ count: selectedPoint?.graphBuildNumber + 1 }}\n        </Trans>\n      ),\n    [selectedPoint, t]\n  )\n\n  if (tooltipProps.active && selectedPoint) {\n    return (\n      <ClickAwayListener onClickAway={clickAwayHandler}>\n        <CardDark\n          sx={{ minWidth: '400px', maxWidth: '400px' }}\n          onClick={(e) => e.stopPropagation()}\n        >\n          <CardContent>\n            <Stack gap={1}>\n              <Stack direction=\"row\" alignItems=\"start\" gap={1}>\n                <Stack spacing={0.5} flexGrow={99}>\n                  {currentlyEquipped && (\n                    <SqBadge color=\"info\">\n                      <strong>{t('currentlyEquippedBuild')}</strong>\n                    </SqBadge>\n                  )}\n                  {generLabel && <SqBadge color=\"info\">{generLabel}</SqBadge>}\n                  {graphLabel && <SqBadge color=\"info\">{graphLabel}</SqBadge>}\n                  <Suspense fallback={<Skeleton width={300} height={50} />}>\n                    <ArtifactSetBadges\n                      artifacts={Object.values(artifactsBySlot)}\n                      currentlyEquipped={currentlyEquipped}\n                    />\n                  </Suspense>\n                </Stack>\n                <Grid item flexGrow={1} />\n                <CloseButton onClick={() => setSelectedPoint(undefined)} />\n              </Stack>\n              <Grid container direction=\"row\" spacing={0.75} columns={5}>\n                {allArtifactSlotKeys.map((key) => (\n                  <Grid item key={key} xs={1}>\n                    <Suspense fallback={<Skeleton width={75} height={75} />}>\n                      <ArtifactCardPico\n                        artifactObj={artifactsBySlot[key]}\n                        slotKey={key}\n                      />\n                    </Suspense>\n                  </Grid>\n                ))}\n              </Grid>\n              <Typography>\n                <strong>{xLabel}</strong>:{' '}\n                {valueString(\n                  xUnit === '%' ? selectedPoint.x / 100 : selectedPoint.x,\n                  xUnit\n                )}\n              </Typography>\n              <Typography>\n                <strong>{yLabel}</strong>:{' '}\n                {valueString(\n                  yUnit === '%' ? selectedPoint.y / 100 : selectedPoint.y,\n                  yUnit\n                )}\n              </Typography>\n              <BootstrapTooltip\n                title={\n                  selectedPoint.highlighted\n                    ? t('tcGraph.buildAlreadyInList')\n                    : ''\n                }\n                placement=\"top\"\n              >\n                <span>\n                  <Button\n                    sx={{ width: '100%' }}\n                    disabled={selectedPoint?.graphBuildNumber !== undefined}\n                    color=\"info\"\n                    onClick={() => addBuildToList(selectedPoint.artifactIds)}\n                  >\n                    {t('addBuildToList')}\n                  </Button>\n                </span>\n              </BootstrapTooltip>\n            </Stack>\n          </CardContent>\n        </CardDark>\n      </ClickAwayListener>\n    )\n  }\n\n  return null\n}\n","export default class EnhancedPoint {\n  public x: number\n  public trueY?: number\n  public artifactIds: string[]\n  public min?: number\n  public current?: number\n  public highlighted?: number\n  public generBuildNumber?: number\n  public graphBuildNumber?: number\n\n  public constructor(x: number, y: number, artifactIds: string[]) {\n    this.x = x\n    this.trueY = y\n    this.artifactIds = artifactIds\n  }\n\n  public get y(): number {\n    return (this.trueY || this.current || this.highlighted) as number\n  }\n  public set y(y: number | undefined) {\n    this.trueY = y\n  }\n}\n","import { allArtifactSlotKeys } from '@genshin-optimizer/consts'\nimport { ReadOnlyTextArea } from '@genshin-optimizer/react-util'\nimport { objKeyMap, objPathValue, valueString } from '@genshin-optimizer/util'\nimport {\n  CheckBox,\n  CheckBoxOutlineBlank,\n  Download,\n  Replay,\n} from '@mui/icons-material'\nimport {\n  Button,\n  CardContent,\n  Collapse,\n  Divider,\n  Grid,\n  Slider,\n  Typography,\n} from '@mui/material'\nimport type { TFunction } from 'i18next'\nimport { useCallback, useContext, useEffect, useMemo, useState } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport type { LegendType } from 'recharts'\nimport {\n  CartesianGrid,\n  ComposedChart,\n  Label,\n  Legend,\n  Line,\n  ResponsiveContainer,\n  Scatter,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts'\nimport BootstrapTooltip from '../../../../../../Components/BootstrapTooltip'\nimport CardDark from '../../../../../../Components/Card/CardDark'\nimport CardLight from '../../../../../../Components/Card/CardLight'\nimport InfoTooltip from '../../../../../../Components/InfoTooltip'\nimport { CharacterContext } from '../../../../../../Context/CharacterContext'\nimport { DataContext } from '../../../../../../Context/DataContext'\nimport { GraphContext } from '../../../../../../Context/GraphContext'\nimport { input } from '../../../../../../Formula'\nimport type { NumNode } from '../../../../../../Formula/type'\nimport useBuildResult from '../../useBuildResult'\nimport OptimizationTargetSelector from '../OptimizationTargetSelector'\nimport CustomDot from './CustomDot'\nimport CustomTooltip from './CustomTooltip'\nimport EnhancedPoint from './EnhancedPoint'\n\nexport type Point = {\n  x: number\n  y: number\n  artifactIds: string[]\n  min?: number\n}\ntype ChartCardProps = {\n  plotBase?: string[]\n  setPlotBase: (path: string[] | undefined) => void\n  disabled?: boolean\n  showTooltip?: boolean\n}\nexport default function ChartCard({\n  plotBase,\n  setPlotBase,\n  disabled = false,\n  showTooltip = false,\n}: ChartCardProps) {\n  const { t } = useTranslation(['page_character_optimize', 'ui'])\n  const { data } = useContext(DataContext)\n  const { chartData } = useContext(GraphContext)\n  const [showDownload, setshowDownload] = useState(false)\n  const [showMin, setshowMin] = useState(true)\n  const { graphBuilds } = useContext(GraphContext)\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const {\n    buildResult: { builds: generatedBuilds },\n  } = useBuildResult(characterKey)\n\n  const [sliderLow, setSliderLow] = useState(-Infinity)\n  const [sliderHigh, setSliderHigh] = useState(Infinity)\n  const setSlider = useCallback(\n    (_e: unknown, value: number | number[]) => {\n      if (typeof value === 'number') throw new TypeError()\n      const [l, h] = value\n      setSliderLow(l)\n      setSliderHigh(h)\n    },\n    [setSliderLow, setSliderHigh]\n  )\n  useEffect(() => {\n    setSliderLow(-Infinity)\n    setSliderHigh(Infinity)\n  }, [chartData])\n\n  const { displayData, downloadData, sliderMin, sliderMax } = useMemo(() => {\n    if (!chartData) return { displayData: null, downloadData: null }\n    let sliderMin = Infinity\n    let sliderMax = -Infinity\n    const currentBuild = allArtifactSlotKeys.map(\n      (slotKey) => data?.get(input.art[slotKey].id).value ?? ''\n    )\n    // Shape the data so we know the current and highlighted builds\n    const points = chartData.data\n      .map(({ value: y, plot: x, artifactIds }) => {\n        if (x === undefined) return null\n        if (x < sliderMin) sliderMin = x\n        if (x > sliderMax) sliderMax = x\n        const enhancedDatum: EnhancedPoint = new EnhancedPoint(\n          x,\n          y,\n          artifactIds\n        )\n        const datumBuildMap = objKeyMap(artifactIds, (_) => true)\n\n        const isCurrentBuild = currentBuild.every((aId) => datumBuildMap[aId])\n        if (isCurrentBuild) {\n          enhancedDatum.current = y\n          // Remove the Y-value so there are not 2 dots displayed for these builds\n          enhancedDatum.y = undefined\n          // Don't return yet, still need to check if build is highlighted\n        }\n\n        const graphBuildIndex = graphBuilds?.findIndex((build) =>\n          build.every((aId) => datumBuildMap[aId])\n        )\n        if (graphBuildIndex !== undefined && graphBuildIndex !== -1) {\n          // Skip setting y-value if it has already been set.\n          if (enhancedDatum.trueY !== undefined) {\n            enhancedDatum.highlighted = y\n            // Remove the Y-value so there are not 2 dots displayed for these builds\n            enhancedDatum.y = undefined\n          }\n          enhancedDatum.graphBuildNumber = graphBuildIndex + 1\n        }\n\n        const generBuildIndex = generatedBuilds.findIndex((build) =>\n          build.every((aId) => datumBuildMap[aId])\n        )\n        if (generBuildIndex !== -1) {\n          // Skip setting y-value if it has already been set.\n          if (enhancedDatum.trueY !== undefined) {\n            enhancedDatum.highlighted = y\n            // Remove the Y-value so there are not 2 dots displayed for these builds\n            enhancedDatum.y = undefined\n          }\n          enhancedDatum.generBuildNumber = generBuildIndex + 1\n        }\n\n        return enhancedDatum\n      })\n      .filter((pt): pt is NonNullable<EnhancedPoint> => pt !== null)\n      .sort((a, b) => a.x - b.x)\n\n    const minimumData: EnhancedPoint[] = []\n    for (const point of points) {\n      let last: EnhancedPoint | undefined\n      while ((last = minimumData.pop())) {\n        if (last.y > point.y) {\n          minimumData.push(last)\n          break\n        }\n      }\n      minimumData.push(point)\n    }\n\n    // Note:\n    // We can also just use `minimumData` if the plotter supports multiple data sources.\n    // It could be faster too since there're no empty entries in `minimumData`.\n    // From my limited testing, using multiple data sources makes the graph behave strangely though.\n    if (minimumData[0]?.x !== points[0]?.x) points[0].min = minimumData[0].y\n    minimumData.forEach((pt) => {\n      pt.min = pt.y\n    })\n\n    const downloadData = {\n      minimum: minimumData.map((point) => [point.x, point.y]),\n      allData: points.map((point) => [point.x, point.y]),\n    }\n    return {\n      displayData: points.filter(\n        (pt) => pt && pt.x >= sliderLow && pt.x <= sliderHigh\n      ),\n      downloadData,\n      sliderMin,\n      sliderMax,\n    }\n  }, [chartData, generatedBuilds, data, graphBuilds, sliderLow, sliderHigh])\n\n  const plotBaseNode = plotBase && objPathValue(data?.getDisplay(), plotBase)\n  const invalidTarget = plotBase && (!plotBaseNode || plotBaseNode.isEmpty)\n\n  const buttonText = invalidTarget\n    ? t('page_character_optimize:targetSelector.invalidTarget')\n    : t('page_character_optimize:targetSelector.selectGraphTarget')\n\n  return (\n    <CardLight>\n      <CardContent>\n        <Grid container spacing={1} alignItems=\"center\">\n          <Grid item>\n            <Typography>{t`tcGraph.vs`}</Typography>\n          </Grid>\n          <Grid item>\n            <BootstrapTooltip\n              placement=\"top\"\n              title={\n                showTooltip\n                  ? t('page_character_optimize:selectTargetFirst')\n                  : ''\n              }\n            >\n              <span>\n                <OptimizationTargetSelector\n                  optimizationTarget={plotBase}\n                  setTarget={(target) => setPlotBase(target)}\n                  defaultText={buttonText}\n                  disabled={disabled}\n                />\n              </span>\n            </BootstrapTooltip>\n          </Grid>\n          <Grid item>\n            <BootstrapTooltip\n              title={!plotBase ? '' : t('ui:reset')}\n              placement=\"top\"\n            >\n              <span>\n                <Button\n                  color=\"error\"\n                  onClick={() => setPlotBase(undefined)}\n                  disabled={!plotBase || disabled}\n                >\n                  <Replay />\n                </Button>\n              </span>\n            </BootstrapTooltip>\n          </Grid>\n          <Grid item flexGrow={1}>\n            <InfoTooltip\n              placement=\"top\"\n              title={t('page_character_optimize:tcGraph.desc')}\n            />\n          </Grid>\n          {!!downloadData && (\n            <Grid item>\n              <Button\n                size=\"small\"\n                startIcon={showMin ? <CheckBox /> : <CheckBoxOutlineBlank />}\n                color={showMin ? 'success' : 'secondary'}\n                onClick={() => setshowMin(!showMin)}\n              >{t`tcGraph.showStatThr`}</Button>\n            </Grid>\n          )}\n          {!!downloadData && (\n            <Grid item>\n              <Button\n                size=\"small\"\n                color=\"info\"\n                startIcon={<Download />}\n                onClick={() => setshowDownload(!showDownload)}\n              >{t`tcGraph.downloadData`}</Button>\n            </Grid>\n          )}\n        </Grid>\n      </CardContent>\n      {displayData && displayData.length && <Divider />}\n      {chartData && displayData && !!displayData.length && (\n        <CardContent>\n          <Collapse in={!!downloadData && showDownload}>\n            <CardDark sx={{ mb: 2 }}>\n              <CardContent>\n                <Typography>Min Data</Typography>\n                <ReadOnlyTextArea\n                  value={JSON.stringify(downloadData?.minimum)}\n                />\n                <Typography>All Data</Typography>\n                <ReadOnlyTextArea\n                  value={JSON.stringify(downloadData?.allData)}\n                />\n              </CardContent>\n            </CardDark>\n          </Collapse>\n          <Chart\n            displayData={displayData}\n            plotNode={chartData.plotNode}\n            valueNode={chartData.valueNode}\n            showMin={showMin}\n          />\n          {displayData.length > 1 && (\n            <Slider\n              marks\n              value={[sliderLow, sliderHigh]}\n              onChange={setSlider}\n              onChangeCommitted={setSlider}\n              min={sliderMin}\n              max={sliderMax}\n              step={(sliderMax - sliderMin) / 20}\n              valueLabelDisplay=\"auto\"\n              valueLabelFormat={(n) =>\n                valueString(\n                  chartData.plotNode.info?.unit === '%' ? n / 100 : n,\n                  chartData.plotNode.info?.unit\n                )\n              }\n              sx={{ ml: '6%', width: '93%' }}\n            />\n          )}\n        </CardContent>\n      )}\n    </CardLight>\n  )\n}\n\nconst optTargetColor = '#8884d8'\nconst highlightedColor = 'cyan'\nconst currentColor = '#46a046'\nconst lineColor = '#ff7300'\nfunction Chart({\n  displayData,\n  plotNode,\n  valueNode,\n  showMin,\n}: {\n  displayData: EnhancedPoint[]\n  plotNode: NumNode\n  valueNode: NumNode\n  showMin: boolean\n}) {\n  const { graphBuilds, setGraphBuilds } = useContext(GraphContext)\n  const { t } = useTranslation('page_character_optimize')\n  const [selectedPoint, setSelectedPoint] = useState<EnhancedPoint>()\n  const addBuildToList = useCallback(\n    (build: string[]) => {\n      setGraphBuilds([...(graphBuilds ?? []), build])\n      setSelectedPoint(undefined)\n    },\n    [setGraphBuilds, graphBuilds]\n  )\n  const chartOnClick = useCallback(\n    (props) => {\n      if (props && props.chartX && props.chartY)\n        setSelectedPoint(\n          getNearestPoint(props.chartX, props.chartY, 20, displayData)\n        )\n    },\n    [setSelectedPoint, displayData]\n  )\n\n  // Below works because character translation should already be loaded\n  const xLabelValue = getLabelFromNode(plotNode, t)\n  const yLabelValue = getLabelFromNode(valueNode, t)\n\n  return (\n    <ResponsiveContainer width=\"100%\" height={600}>\n      <ComposedChart\n        id=\"chartContainer\"\n        data={displayData}\n        onClick={chartOnClick}\n        style={{ cursor: 'pointer' }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey=\"x\"\n          scale=\"linear\"\n          unit={plotNode.info?.unit}\n          domain={['auto', 'auto']}\n          tick={{ fill: 'white' }}\n          type=\"number\"\n          tickFormatter={(n) => (n > 10000 ? n.toFixed() : n.toFixed(1))}\n          label={\n            <Label fill=\"white\" dy={10}>\n              {xLabelValue}\n            </Label>\n          }\n          height={50}\n        />\n        <YAxis\n          name=\"DMG\"\n          domain={['auto', 'auto']}\n          unit={valueNode.info?.unit}\n          allowDecimals={false}\n          tick={{ fill: 'white' }}\n          type=\"number\"\n          label={\n            <Label fill=\"white\" angle={-90} dx={-40}>\n              {yLabelValue}\n            </Label>\n          }\n          width={100}\n        />\n        <Tooltip\n          content={\n            <CustomTooltip\n              xLabel={xLabelValue}\n              xUnit={plotNode.info?.unit}\n              yLabel={yLabelValue}\n              yUnit={valueNode.info?.unit}\n              selectedPoint={selectedPoint}\n              setSelectedPoint={setSelectedPoint}\n              addBuildToList={addBuildToList}\n            />\n          }\n          trigger=\"click\"\n          wrapperStyle={{ pointerEvents: 'auto', cursor: 'auto' }}\n          cursor={false}\n        />\n        <Legend\n          payload={[\n            ...(showMin\n              ? [\n                  {\n                    id: 'min',\n                    value: t`tcGraph.statReqThr`,\n                    type: 'line' as LegendType,\n                    color: lineColor,\n                  },\n                ]\n              : []),\n            {\n              id: 'trueY',\n              value: t`tcGraph.generatedBuilds`,\n              type: 'circle',\n              color: optTargetColor,\n            },\n            {\n              id: 'highlighted',\n              value: t`tcGraph.highlightedBuilds`,\n              type: 'square',\n              color: highlightedColor,\n            },\n            {\n              id: 'current',\n              value: t`tcGraph.currentBuild`,\n              type: 'diamond',\n              color: currentColor,\n            },\n          ]}\n        />\n        {showMin && (\n          <Line\n            dataKey=\"min\"\n            stroke={lineColor}\n            type=\"stepBefore\"\n            connectNulls\n            strokeWidth={2}\n            isAnimationActive={false}\n            dot={false}\n            activeDot={false}\n          />\n        )}\n        <Scatter\n          dataKey=\"trueY\"\n          isAnimationActive={false}\n          shape={\n            <CustomDot\n              selectedPoint={selectedPoint}\n              colorUnselected={optTargetColor}\n            />\n          }\n        />\n        <Scatter\n          dataKey=\"highlighted\"\n          isAnimationActive={false}\n          shape={\n            <CustomDot\n              shape=\"square\"\n              selectedPoint={selectedPoint}\n              colorUnselected={highlightedColor}\n            />\n          }\n        />\n        <Scatter\n          dataKey=\"current\"\n          isAnimationActive={false}\n          shape={\n            <CustomDot\n              shape=\"diamond\"\n              selectedPoint={selectedPoint}\n              colorUnselected={currentColor}\n            />\n          }\n        />\n      </ComposedChart>\n    </ResponsiveContainer>\n  )\n}\n\ninterface DomPt extends Element {\n  dataset: {\n    chartX: number\n    chartY: number\n    xValue: string\n    yValue: string\n  }\n}\nfunction getNearestPoint(\n  clickedX: number,\n  clickedY: number,\n  threshold: number,\n  data: EnhancedPoint[]\n) {\n  const nearestDomPtData = Array.from(\n    document.querySelectorAll<DomPt>('.custom-dot')\n  ).reduce((domPtA, domPtB) => {\n    const { chartX: aChartX, chartY: aChartY } = domPtA.dataset\n    const aDistance = Math.sqrt(\n      (clickedX - aChartX) ** 2 + (clickedY - aChartY) ** 2\n    )\n    const { chartX: bChartX, chartY: bChartY } = domPtB.dataset\n    const bDistance = Math.sqrt(\n      (clickedX - bChartX) ** 2 + (clickedY - bChartY) ** 2\n    )\n    return aDistance <= bDistance ? domPtA : domPtB\n  })['dataset']\n\n  // Don't select a point too far away\n  const distance = Math.sqrt(\n    (clickedX - nearestDomPtData.chartX) ** 2 +\n      (clickedY - nearestDomPtData.chartY) ** 2\n  )\n  return distance < threshold\n    ? data.find(\n        (d) =>\n          d.x === +nearestDomPtData.xValue && d.y === +nearestDomPtData.yValue\n      )\n    : undefined\n}\n\nfunction getLabelFromNode(node: NumNode, t: TFunction) {\n  return typeof node.info?.name === 'string'\n    ? node.info.name\n    : `${t(`${node.info?.name?.props.ns}:${node.info?.name?.props.key18}`)}${\n        node.info?.textSuffix ? ` ${node.info?.textSuffix}` : ''\n      }`\n}\n","import {\n  useBoolState,\n  useForceUpdate,\n  useMediaQueryUp,\n} from '@genshin-optimizer/react-util'\nimport { filterFunction } from '@genshin-optimizer/util'\nimport AddIcon from '@mui/icons-material/Add'\nimport CheckBoxIcon from '@mui/icons-material/CheckBox'\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank'\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  CardContent,\n  Divider,\n  Grid,\n  Skeleton,\n  Typography,\n} from '@mui/material'\nimport {\n  Suspense,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n} from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport ArtifactCardNano from '../../../../../Components/Artifact/ArtifactCardNano'\nimport ArtifactFilterDisplay from '../../../../../Components/Artifact/ArtifactFilterDisplay'\nimport CardDark from '../../../../../Components/Card/CardDark'\nimport CardLight from '../../../../../Components/Card/CardLight'\nimport CloseButton from '../../../../../Components/CloseButton'\nimport InfoTooltip from '../../../../../Components/InfoTooltip'\nimport ModalWrapper from '../../../../../Components/ModalWrapper'\nimport SqBadge from '../../../../../Components/SqBadge'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport { DatabaseContext } from '../../../../../Database/Database'\nimport ArtifactCard from '../../../../../PageArtifact/ArtifactCard'\nimport {\n  artifactFilterConfigs,\n  initialFilterOption,\n} from '../../../../../PageArtifact/ArtifactSort'\nimport useBuildSetting from '../useBuildSetting'\n\nexport default function ExcludeArt({\n  disabled = false,\n  excludedTotal,\n}: {\n  disabled?: boolean\n  excludedTotal: string\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { artExclusion, useExcludedArts },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const [show, onOpen, onClose] = useBoolState(false)\n  const numExcludedArt = artExclusion.length\n  const [showSel, onOpenSel, onCloseSel] = useBoolState(false)\n  const onSelect = useCallback(\n    (id: string) => {\n      buildSettingDispatch({\n        artExclusion: [...artExclusion, id],\n        useExcludedArts: false,\n      })\n    },\n    [buildSettingDispatch, artExclusion]\n  )\n  const onDelSelect = useCallback(\n    (id: string) => {\n      buildSettingDispatch({\n        artExclusion: artExclusion.filter((i) => i !== id),\n        useExcludedArts: false,\n      })\n    },\n    [buildSettingDispatch, artExclusion]\n  )\n  const toggleArtExclusion = useCallback(\n    () => buildSettingDispatch({ useExcludedArts: !useExcludedArts }),\n    [buildSettingDispatch, useExcludedArts]\n  )\n  return (\n    <>\n      {/* Begin modal */}\n      <ModalWrapper\n        open={show}\n        onClose={onClose}\n        containerProps={{ maxWidth: 'xl' }}\n      >\n        <CardDark>\n          <CardContent>\n            <Box display=\"flex\" gap={1} alignItems=\"center\">\n              <Typography variant=\"h6\">{t`excludeArt.title_exclude`}</Typography>\n              <InfoTooltip\n                title={<Typography>{t`excludeArt.title_tooltip`}</Typography>}\n              />\n              <Box flexGrow={1} />\n              <CloseButton onClick={onClose} size=\"small\" />\n            </Box>\n          </CardContent>\n          <Divider />\n          <CardContent>\n            <ArtifactSelectModal\n              show={showSel}\n              onClose={onCloseSel}\n              onSelect={onSelect}\n              artExclusion={artExclusion}\n            />\n            <Button\n              fullWidth\n              onClick={onOpenSel}\n              color=\"info\"\n              sx={{ mb: 1 }}\n              startIcon={<AddIcon />}\n            >{t`excludeArt.addExc`}</Button>\n            {!!numExcludedArt && (\n              <CardLight sx={{ mb: 1 }}>\n                <Typography textAlign=\"center\">{t`excludeArt.deSelectExc`}</Typography>\n              </CardLight>\n            )}\n            <Grid\n              container\n              columns={{ xs: 3, md: 5, lg: 6, xl: 8 }}\n              spacing={1}\n            >\n              {artExclusion.map((id) => (\n                <Grid item key={id} xs={1}>\n                  <ArtifactCardNano\n                    artifactId={id}\n                    slotKey=\"flower\"\n                    BGComponent={CardLight}\n                    onClick={() => onDelSelect(id)}\n                    showLocation\n                  />\n                </Grid>\n              ))}\n            </Grid>\n          </CardContent>\n        </CardDark>\n      </ModalWrapper>\n\n      {/* Button to open modal */}\n      <ButtonGroup sx={{ display: 'flex', width: '100%' }}>\n        <Button\n          onClick={toggleArtExclusion}\n          disabled={disabled || !numExcludedArt}\n          startIcon={\n            useExcludedArts ? <CheckBoxOutlineBlankIcon /> : <CheckBoxIcon />\n          }\n          color={useExcludedArts ? 'secondary' : 'success'}\n          sx={{ flexGrow: 1 }}\n        >\n          <Box sx={{ display: 'flex', gap: 1 }}>\n            <Box>{t('excludeArt.button_txt')}</Box>\n            <SqBadge\n              sx={{ whiteSpace: 'normal' }}\n              color={\n                !numExcludedArt\n                  ? 'secondary'\n                  : useExcludedArts\n                  ? 'warning'\n                  : 'primary'\n              }\n            >\n              {useExcludedArts ? (\n                <Trans t={t} i18nKey=\"excludeArt.usingNum\">\n                  Using {{ totalStr: excludedTotal } as TransObject} excluded\n                  artifacts\n                </Trans>\n              ) : (\n                <Trans t={t} i18nKey=\"excludeArt.excNum\" count={numExcludedArt}>\n                  {{ count: numExcludedArt } as TransObject} artifacts are\n                  excluded\n                </Trans>\n              )}\n            </SqBadge>\n          </Box>\n        </Button>\n        <Button\n          color=\"info\"\n          onClick={onOpen}\n          disabled={disabled}\n          sx={{ flexShrink: 1 }}\n        >\n          <SettingsIcon />\n        </Button>\n      </ButtonGroup>\n    </>\n  )\n}\n\nconst numToShowMap = { xs: 2 * 3, sm: 2 * 3, md: 3 * 3, lg: 4 * 3, xl: 4 * 3 }\nconst filterOptionReducer = (state, action) => ({ ...state, ...action })\nfunction ArtifactSelectModal({\n  onSelect,\n  show,\n  onClose,\n  artExclusion,\n}: {\n  onSelect: (id: string) => void\n  show: boolean\n  onClose: () => void\n  artExclusion: string[]\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  const { database } = useContext(DatabaseContext)\n  const clickHandler = useCallback(\n    (id: string) => {\n      onSelect(id)\n      onClose()\n    },\n    [onSelect, onClose]\n  )\n\n  const [filterOption, filterOptionDispatch] = useReducer(\n    filterOptionReducer,\n    initialFilterOption()\n  )\n\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  useEffect(() => {\n    return database.arts.followAny(forceUpdate)\n  }, [database, forceUpdate])\n\n  const brPt = useMediaQueryUp()\n\n  const filterConfigs = useMemo(() => artifactFilterConfigs(), [])\n  const artIdList = useMemo(() => {\n    const filterFunc = filterFunction(filterOption, filterConfigs)\n    return (\n      dbDirty &&\n      database.arts.values\n        .filter(filterFunc)\n        .map((art) => art.id)\n        .filter((id) => !artExclusion.includes(id))\n        .slice(0, numToShowMap[brPt])\n    )\n  }, [dbDirty, database, filterConfigs, filterOption, brPt, artExclusion])\n\n  return (\n    <ModalWrapper\n      open={show}\n      onClose={onClose}\n      containerProps={{ maxWidth: 'xl' }}\n    >\n      <CardDark>\n        <CardContent\n          sx={{\n            py: 1,\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <Typography variant=\"h6\">{t`excludeArt.selExc`}</Typography>\n          <CloseButton onClick={onClose} />\n        </CardContent>\n        <Divider />\n        <CardContent>\n          <Suspense\n            fallback={\n              <Skeleton variant=\"rectangular\" width=\"100%\" height={200} />\n            }\n          >\n            <ArtifactFilterDisplay\n              filterOption={filterOption}\n              filterOptionDispatch={filterOptionDispatch}\n              filteredIds={artIdList}\n            />\n          </Suspense>\n          <Box mt={1}>\n            <Suspense\n              fallback={\n                <Skeleton variant=\"rectangular\" width=\"100%\" height={300} />\n              }\n            >\n              <Grid container spacing={1} columns={{ xs: 2, md: 3, lg: 4 }}>\n                {artIdList.map((id) => (\n                  <Grid item key={id} xs={1}>\n                    <ArtifactCard artifactId={id} onClick={clickHandler} />\n                  </Grid>\n                ))}\n              </Grid>\n            </Suspense>\n          </Box>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  )\n}\n","import { allElementWithPhyKeys, artSlotsData } from '@genshin-optimizer/consts'\nimport {\n  AtkIcon,\n  FlowerIcon,\n  HpIcon,\n  PlumeIcon,\n} from '@genshin-optimizer/gi-svgicons'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Divider,\n  Grid,\n  Typography,\n} from '@mui/material'\nimport { useContext, useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport SlotIcon from '../../../../../Components/Artifact/SlotIcon'\nimport BootstrapTooltip from '../../../../../Components/BootstrapTooltip'\nimport SqBadge from '../../../../../Components/SqBadge'\nimport { StatColoredWithUnit } from '../../../../../Components/StatDisplay'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport { DatabaseContext } from '../../../../../Database/Database'\nimport StatIcon from '../../../../../KeyMap/StatIcon'\nimport { iconInlineProps } from '@genshin-optimizer/svgicons'\nimport { handleMultiSelect } from '../../../../../Util/MultiSelect'\nimport { bulkCatTotal } from '../../../../../Util/totalUtils'\nimport useBuildSetting from '../useBuildSetting'\n\nexport const artifactsSlotsToSelectMainStats = [\n  'sands',\n  'goblet',\n  'circlet',\n] as const\n\nexport default function MainStatSelectionCard({\n  disabled = false,\n  filteredArtIdMap,\n}: {\n  disabled?: boolean\n  filteredArtIdMap: Record<string, boolean>\n}) {\n  const { t } = useTranslation('artifact')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { mainStatKeys },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const { database } = useContext(DatabaseContext)\n  const { mainStatSlotTots, slotTots } = useMemo(() => {\n    const catKeys = {\n      flowerMainStatTots: artSlotsData['flower'].stats,\n      plumeMainStatTots: artSlotsData['plume'].stats,\n      sandsMainStatTots: artSlotsData['sands'].stats,\n      gobletMainStatTots: artSlotsData['goblet'].stats,\n      circletMainStatTots: artSlotsData['circlet'].stats,\n      slotTots: artifactsSlotsToSelectMainStats,\n    } as const\n    const catTotals = bulkCatTotal(catKeys, (ctMap) =>\n      Object.entries(database.arts.data).forEach(([id, art]) => {\n        const { slotKey, mainStatKey } = art\n        if (\n          (artifactsSlotsToSelectMainStats as readonly string[]).includes(\n            slotKey\n          )\n        ) {\n          ctMap.slotTots[slotKey].total++\n          if (filteredArtIdMap[id]) ctMap.slotTots[slotKey].current++\n        }\n        ctMap[`${slotKey}MainStatTots`][mainStatKey].total++\n        if (filteredArtIdMap[id])\n          ctMap[`${slotKey}MainStatTots`][mainStatKey].current++\n      })\n    )\n    return {\n      mainStatSlotTots: {\n        flower: catTotals.flowerMainStatTots,\n        plume: catTotals.plumeMainStatTots,\n        sands: catTotals.sandsMainStatTots,\n        goblet: catTotals.gobletMainStatTots,\n        circlet: catTotals.circletMainStatTots,\n      },\n      slotTots: catTotals.slotTots,\n    }\n  }, [database, filteredArtIdMap])\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\">\n      <Divider />\n      <Box display=\"flex\">\n        <CardContent sx={{ flexGrow: 1 }}>\n          <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\n            <BootstrapTooltip\n              placement=\"top\"\n              title={<Typography>{t(`slotName.flower`)}</Typography>}\n            >\n              <FlowerIcon fontSize=\"inherit\" />\n            </BootstrapTooltip>\n            <Box flexGrow={1}>\n              <SqBadge color=\"info\">\n                <HpIcon {...iconInlineProps} /> {mainStatSlotTots.flower.hp}\n              </SqBadge>\n            </Box>\n          </Box>\n        </CardContent>\n        <Divider orientation=\"vertical\" flexItem />\n        <CardContent sx={{ flexGrow: 1 }}>\n          <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\n            <BootstrapTooltip\n              placement=\"top\"\n              title={<Typography>{t(`slotName.plume`)}</Typography>}\n            >\n              <PlumeIcon fontSize=\"inherit\" />\n            </BootstrapTooltip>\n            <Box flexGrow={1}>\n              <SqBadge color=\"info\">\n                <AtkIcon {...iconInlineProps} /> {mainStatSlotTots.plume.atk}\n              </SqBadge>\n            </Box>\n          </Box>\n        </CardContent>\n      </Box>\n      {artifactsSlotsToSelectMainStats.map((slotKey) => {\n        const selectedMainKeys = mainStatKeys[slotKey]\n        const mainKeys = artSlotsData[slotKey].stats\n        const mainKeysHandler = handleMultiSelect([...mainKeys])\n        return (\n          <Box key={slotKey}>\n            <Divider />\n            <CardContent sx={{ pt: 1, pb: 1 }}>\n              <Box\n                sx={{ display: 'flex', gap: 1, alignItems: 'center', pb: 1 }}\n              >\n                <BootstrapTooltip\n                  placement=\"top\"\n                  title={<Typography>{t(`slotName.${slotKey}`)}</Typography>}\n                >\n                  <Box lineHeight={0}>\n                    <SlotIcon\n                      slotKey={slotKey}\n                      iconProps={{ fontSize: 'inherit' }}\n                    />\n                  </Box>\n                </BootstrapTooltip>\n                <Box flexGrow={1}>\n                  <SqBadge color=\"info\">{slotTots[slotKey]}</SqBadge>\n                </Box>\n              </Box>\n              <Grid container spacing={1}>\n                {mainKeys.map((mainStatKey, i) => {\n                  const element = allElementWithPhyKeys.find((ele) =>\n                    mainStatKey.includes(ele)\n                  )\n                  const color = selectedMainKeys.includes(mainStatKey)\n                    ? element ?? 'success'\n                    : 'secondary'\n                  return (\n                    <Grid\n                      item\n                      key={mainStatKey}\n                      flexGrow={1}\n                      xs={\n                        (i < 3 && slotKey !== 'goblet') || slotKey === 'goblet'\n                          ? 4\n                          : undefined\n                      }\n                    >\n                      <BootstrapTooltip\n                        placement=\"top\"\n                        title={\n                          <Typography>\n                            <strong>\n                              <StatColoredWithUnit statKey={mainStatKey} />\n                            </strong>\n                          </Typography>\n                        }\n                        disableInteractive\n                      >\n                        <Button\n                          fullWidth\n                          size=\"small\"\n                          color={color}\n                          sx={{\n                            height: '100%',\n                            pointerEvents: disabled ? 'none' : undefined,\n                            cursor: disabled ? 'none' : undefined,\n                          }}\n                          startIcon={<StatIcon statKey={mainStatKey} />}\n                          onClick={() =>\n                            buildSettingDispatch({\n                              mainStatKeys: {\n                                ...mainStatKeys,\n                                [slotKey]: mainKeysHandler(\n                                  selectedMainKeys,\n                                  mainStatKey\n                                ),\n                              },\n                            })\n                          }\n                        >\n                          {mainStatSlotTots[slotKey][mainStatKey]}\n                        </Button>\n                      </BootstrapTooltip>\n                    </Grid>\n                  )\n                })}\n              </Grid>\n            </CardContent>\n          </Box>\n        )\n      })}\n    </Box>\n  )\n}\n","import {\n  CheckBox,\n  CheckBoxOutlineBlank,\n  DeleteForever,\n} from '@mui/icons-material'\nimport { Button, ButtonGroup } from '@mui/material'\nimport { useCallback, useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport CustomNumberInput, {\n  CustomNumberInputButtonGroupWrapper,\n} from '../../../../../Components/CustomNumberInput'\nimport { DataContext } from '../../../../../Context/DataContext'\nimport type {\n  StatFilters,\n  StatFilterSetting,\n} from '../../../../../Database/DataManagers/BuildSettingData'\nimport type { NodeDisplay } from '../../../../../Formula/uiData'\nimport { objPathValue } from '../../../../../Util/Util'\nimport OptimizationTargetSelector from './OptimizationTargetSelector'\n\ntype OptimizationTargetEditorListProps = {\n  statFilters: StatFilters\n  setStatFilters: (statFilters: StatFilters) => void\n  disabled: boolean\n}\n\nexport default function OptimizationTargetEditorList({\n  statFilters,\n  setStatFilters,\n  disabled = false,\n}: OptimizationTargetEditorListProps) {\n  const setTarget = useCallback(\n    (path: string[], oldPath?: string[], oldIndex?: number) => {\n      const statFilters_ = { ...statFilters }\n      const oldPathStr = JSON.stringify(oldPath)\n      const oldFilterArr = oldPath ? [...statFilters[oldPathStr]!] : undefined\n      const pathStr = JSON.stringify(path)\n      const filterArr = [...(statFilters[pathStr] ?? [])]\n      // Copy/create new setting\n      if (oldIndex !== undefined && oldFilterArr)\n        filterArr.push(oldFilterArr[oldIndex])\n      else filterArr.push({ value: 0, disabled: false })\n      statFilters_[pathStr] = filterArr\n      // Remove old setting\n      if (oldIndex !== undefined && oldFilterArr) {\n        oldFilterArr.splice(oldIndex, 1)\n        if (oldFilterArr.length) statFilters_[oldPathStr] = oldFilterArr\n        else delete statFilters_[oldPathStr]\n      }\n      setStatFilters({ ...statFilters_ })\n    },\n    [setStatFilters, statFilters]\n  )\n\n  const delTarget = useCallback(\n    (path: string[], index: number) => {\n      const statFilters_ = { ...statFilters }\n      const pathStr = JSON.stringify(path)\n      const filterArr = [...statFilters[pathStr]!]\n      filterArr.splice(index, 1)\n      if (filterArr.length) statFilters_[pathStr] = filterArr\n      else delete statFilters_[pathStr]\n      setStatFilters({ ...statFilters_ })\n    },\n    [setStatFilters, statFilters]\n  )\n\n  const setTargetValue = useCallback(\n    (path: string[], index: number, value: number) => {\n      const statFilters_ = { ...statFilters }\n      const pathStr = JSON.stringify(path)\n      const filterArr = [...statFilters[pathStr]!]\n      filterArr[index] = { ...filterArr[index], value } as StatFilterSetting\n      statFilters_[pathStr] = filterArr\n      setStatFilters({ ...statFilters_ })\n    },\n    [setStatFilters, statFilters]\n  )\n\n  const setTargetDisabled = useCallback(\n    (path: string[], index: number, disabled: boolean) => {\n      const statFilters_ = { ...statFilters }\n      const pathStr = JSON.stringify(path)\n      const filterArr = [...statFilters[pathStr]!]\n      filterArr[index] = { ...filterArr[index], disabled } as StatFilterSetting\n      statFilters_[pathStr] = filterArr\n      setStatFilters({ ...statFilters_ })\n    },\n    [setStatFilters, statFilters]\n  )\n\n  return (\n    <>\n      {Object.entries(statFilters).flatMap(([pathStr, settings]) =>\n        settings?.map((setting, index) => (\n          <OptimizationTargetEditorItem\n            path={JSON.parse(pathStr)}\n            setting={setting}\n            index={index}\n            setTarget={setTarget}\n            delTarget={delTarget}\n            setValue={setTargetValue}\n            setDisabled={setTargetDisabled}\n            disabled={disabled}\n            key={pathStr + index}\n          />\n        ))\n      )}\n      <OptimizationTargetEditorItem\n        setTarget={setTarget}\n        delTarget={delTarget}\n        setValue={setTargetValue}\n        setDisabled={setTargetDisabled}\n        disabled={disabled}\n      />\n    </>\n  )\n}\n\ntype OptimizationTargetEditorItemProps = {\n  path?: string[]\n  setting?: StatFilterSetting\n  index?: number\n  setTarget: (path: string[], oldPath?: string[], oldIndex?: number) => void\n  delTarget: (path: string[], index: number) => void\n  setValue: (path: string[], index: number, value: number) => void\n  setDisabled: (path: string[], index: number, disabled: boolean) => void\n  disabled: boolean\n}\nfunction OptimizationTargetEditorItem({\n  path,\n  setting,\n  index,\n  setTarget,\n  delTarget,\n  setValue,\n  setDisabled,\n  disabled,\n}: OptimizationTargetEditorItemProps) {\n  const { t } = useTranslation('page_character_optimize')\n  const { data } = useContext(DataContext)\n  const onChange = useCallback(\n    (val: number | undefined) =>\n      path && index !== undefined && setValue(path, index, val ?? 0),\n    [setValue, path, index]\n  )\n  const buttonStyle = { p: 1, flexBasis: 30, flexGrow: 0, flexShrink: 0 }\n\n  const buildConstraintNode: NodeDisplay = objPathValue(\n    data.getDisplay(),\n    path ?? []\n  )\n  const isPercent = buildConstraintNode?.info?.unit === '%'\n\n  return (\n    <ButtonGroup\n      sx={{ '& .MuiButtonGroup-grouped': { minWidth: 24 }, width: '100%' }}\n    >\n      {!!setting && !!path && index !== undefined && (\n        <Button\n          sx={buttonStyle}\n          color={setting.disabled ? 'secondary' : 'success'}\n          onClick={() => setDisabled(path, index, !setting.disabled)}\n          disabled={disabled}\n        >\n          {setting.disabled ? <CheckBoxOutlineBlank /> : <CheckBox />}\n        </Button>\n      )}\n      <OptimizationTargetSelector\n        showEmptyTargets\n        optimizationTarget={path}\n        setTarget={(target) => setTarget(target, path, index)}\n        defaultText={t('targetSelector.selectBuildTarget')}\n      />\n      <CustomNumberInputButtonGroupWrapper sx={{ flexBasis: 150, flexGrow: 1 }}>\n        <CustomNumberInput\n          float\n          disabled={!path || disabled}\n          value={setting?.value}\n          placeholder=\"Stat Value\"\n          onChange={onChange}\n          sx={{ px: 1 }}\n          inputProps={{ sx: { textAlign: 'right' } }}\n          endAdornment={isPercent ? '%' : undefined}\n        />\n      </CustomNumberInputButtonGroupWrapper>\n      {!!path && index !== undefined && (\n        <Button\n          sx={buttonStyle}\n          color=\"error\"\n          onClick={() => delTarget(path, index)}\n          disabled={disabled}\n        >\n          <DeleteForever fontSize=\"small\" />\n        </Button>\n      )}\n    </ButtonGroup>\n  )\n}\n","import { Box, CardContent, Divider, Typography } from '@mui/material'\nimport { useCallback, useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport CardLight from '../../../../../Components/Card/CardLight'\nimport InfoTooltip from '../../../../../Components/InfoTooltip'\nimport { CharacterContext } from '../../../../../Context/CharacterContext'\nimport type { StatFilters } from '../../../../../Database/DataManagers/BuildSettingData'\nimport useBuildSetting from '../useBuildSetting'\nimport OptimizationTargetEditorList from './OptimizationTargetEditorList'\n\nexport default function StatFilterCard({\n  disabled = false,\n}: {\n  disabled?: boolean\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { statFilters },\n    buildSettingDispatch,\n  } = useBuildSetting(characterKey)\n  const setStatFilters = useCallback(\n    (statFilters: StatFilters) => buildSettingDispatch({ statFilters }),\n    [buildSettingDispatch]\n  )\n\n  return (\n    <Box>\n      <CardLight>\n        <CardContent\n          sx={{\n            display: 'flex',\n            gap: 1,\n            justifyContent: 'space-between',\n            flexDirection: 'column',\n          }}\n        >\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <Typography\n              sx={{ fontWeight: 'bold' }}\n            >{t`constraintFilter.title`}</Typography>\n            <InfoTooltip\n              title={<Typography>{t`constraintFilter.tooltip`}</Typography>}\n            />\n          </Box>\n        </CardContent>\n        <Divider />\n        <Box display=\"flex\" flexDirection=\"column\" gap={0.5}>\n          <OptimizationTargetEditorList\n            statFilters={statFilters}\n            setStatFilters={setStatFilters}\n            disabled={disabled}\n          />\n        </Box>\n      </CardLight>\n    </Box>\n  )\n}\n","import {\n  allMainStatKeys,\n  allSubstatKeys,\n  artMaxLevel,\n} from '@genshin-optimizer/consts'\nimport { getMainStatDisplayValue } from '@genshin-optimizer/gi-util'\nimport { objKeyMap, objMap } from '@genshin-optimizer/util'\nimport { input } from '../../../../Formula'\nimport { computeUIData } from '../../../../Formula/api'\nimport { formulaString } from '../../../../Formula/debug'\nimport type { Data, NumNode } from '../../../../Formula/type'\nimport { constant, setReadNodeKeys } from '../../../../Formula/utils'\nimport type {\n  ArtifactBuildData,\n  ArtifactsBySlot,\n  DynStat,\n} from '../../../../Solver/common'\nimport type { ICachedArtifact } from '../../../../Types/artifact'\nimport { deepClone } from '../../../../Util/Util'\nconst dynamic = setReadNodeKeys(\n  deepClone({ dyn: { ...input.art, ...input.artSet } })\n)\nexport const dynamicData = {\n  art: objKeyMap(\n    [...allMainStatKeys, ...allSubstatKeys],\n    (key) => dynamic.dyn[key]\n  ),\n  artSet: objMap(input.artSet, (_, key) => dynamic.dyn[key]),\n}\n\nexport function compactArtifacts(\n  arts: ICachedArtifact[],\n  mainStatAssumptionLevel: number,\n  allowPartial: boolean\n): ArtifactsBySlot {\n  const result: ArtifactsBySlot = {\n    base: {},\n    values: { flower: [], plume: [], goblet: [], circlet: [], sands: [] },\n  }\n  const keys = new Set<string>()\n\n  for (const art of arts) {\n    const mainStatVal = getMainStatDisplayValue(\n      art.mainStatKey,\n      art.rarity,\n      Math.max(\n        Math.min(mainStatAssumptionLevel, artMaxLevel[art.rarity]),\n        art.level\n      )\n    )\n\n    const data: ArtifactBuildData = {\n      id: art.id,\n      set: art.setKey,\n      values: {\n        [art.setKey]: 1,\n        [art.mainStatKey]: art.mainStatKey.endsWith('_')\n          ? mainStatVal / 100\n          : mainStatVal,\n        ...Object.fromEntries(\n          art.substats.map((substat) => [\n            substat.key,\n            substat.key.endsWith('_')\n              ? substat.accurateValue / 100\n              : substat.accurateValue,\n          ])\n        ),\n      },\n    }\n    delete data.values['']\n    result.values[art.slotKey].push(data)\n    Object.keys(data.values).forEach((x) => keys.add(x))\n  }\n  result.base = objKeyMap([...keys], (_) => 0)\n  if (allowPartial)\n    for (const value of Object.values(result.values))\n      value.push({ id: '', values: {} })\n  return result\n}\n\nexport function debugCompute(\n  nodes: NumNode[],\n  base: DynStat,\n  arts: ArtifactBuildData[]\n) {\n  const stats = { ...base }\n  for (const art of arts) {\n    for (const [key, value] of Object.entries(art.values)) {\n      stats[key] = (stats[key] ?? 0) + value\n    }\n  }\n  const data = {\n    dyn: Object.fromEntries(\n      Object.entries(stats).map(([key, value]) => [key, constant(value)])\n    ),\n  } as Data\n  const uiData = computeUIData([data])\n  return {\n    base,\n    arts,\n    stats,\n    data,\n    uiData,\n    nodes: nodes.map(formulaString),\n    results: nodes.map((node) => uiData.get(node)),\n  }\n}\n","import type { CharacterKey } from '@genshin-optimizer/consts'\nimport { charKeyToLocCharKey } from '@genshin-optimizer/consts'\nimport { useForceUpdate, useMediaQueryUp } from '@genshin-optimizer/react-util'\nimport { objKeyMap, objPathValue, range } from '@genshin-optimizer/util'\nimport {\n  CheckBox,\n  CheckBoxOutlineBlank,\n  Close,\n  DeleteForever,\n  Science,\n  TrendingUp,\n} from '@mui/icons-material'\nimport NotificationsActiveIcon from '@mui/icons-material/NotificationsActive'\nimport NotificationsOffIcon from '@mui/icons-material/NotificationsOff'\nimport {\n  Alert,\n  Box,\n  Button,\n  ButtonGroup,\n  CardContent,\n  Divider,\n  Grid,\n  Link,\n  MenuItem,\n  Skeleton,\n  ToggleButton,\n  Typography,\n} from '@mui/material'\nimport React, {\n  Suspense,\n  useCallback,\n  useContext,\n  useDeferredValue,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport { Trans, useTranslation } from 'react-i18next'\nimport { Link as RouterLink, useLocation, useNavigate } from 'react-router-dom'\nimport ArtifactLevelSlider from '../../../../Components/Artifact/ArtifactLevelSlider'\nimport BootstrapTooltip from '../../../../Components/BootstrapTooltip'\nimport CardLight from '../../../../Components/Card/CardLight'\nimport CharacterCard from '../../../../Components/Character/CharacterCard'\nimport DropdownButton from '../../../../Components/DropdownMenu/DropdownButton'\nimport {\n  HitModeToggle,\n  ReactionToggle,\n} from '../../../../Components/HitModeEditor'\nimport InfoTooltip from '../../../../Components/InfoTooltip'\nimport SolidToggleButtonGroup from '../../../../Components/SolidToggleButtonGroup'\nimport SqBadge from '../../../../Components/SqBadge'\nimport { CharacterContext } from '../../../../Context/CharacterContext'\nimport type { dataContextObj } from '../../../../Context/DataContext'\nimport { DataContext } from '../../../../Context/DataContext'\nimport { GraphContext } from '../../../../Context/GraphContext'\nimport { OptimizationTargetContext } from '../../../../Context/OptimizationTargetContext'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport { defThreads } from '../../../../Database/DataEntries/DisplayOptimizeEntry'\nimport { maxBuildsToShowList } from '../../../../Database/DataManagers/BuildSettingData'\nimport { mergeData, uiDataForTeam } from '../../../../Formula/api'\nimport { optimize } from '../../../../Formula/optimization'\nimport type { NumNode } from '../../../../Formula/type'\nimport type { UIData } from '../../../../Formula/uiData'\nimport useCharacterReducer from '../../../../ReactHooks/useCharacterReducer'\nimport useCharSelectionCallback from '../../../../ReactHooks/useCharSelectionCallback'\nimport useDBMeta from '../../../../ReactHooks/useDBMeta'\nimport useGlobalError from '../../../../ReactHooks/useGlobalError'\nimport useTeamData, { getTeamData } from '../../../../ReactHooks/useTeamData'\nimport type { OptProblemInput } from '../../../../Solver'\nimport type { Build } from '../../../../Solver/common'\nimport { mergeBuilds, mergePlot } from '../../../../Solver/common'\nimport { GOSolver } from '../../../../Solver/GOSolver/GOSolver'\nimport type { ICachedArtifact } from '../../../../Types/artifact'\nimport { bulkCatTotal } from '../../../../Util/totalUtils'\nimport AllowChar from './Components/AllowChar'\nimport ArtifactSetConfig from './Components/ArtifactSetConfig'\nimport AssumeFullLevelToggle from './Components/AssumeFullLevelToggle'\nimport BonusStatsCard from './Components/BonusStatsCard'\nimport type { BuildStatus } from './Components/BuildAlert'\nimport BuildAlert from './Components/BuildAlert'\nimport BuildDisplayItem from './Components/BuildDisplayItem'\nimport ChartCard from './Components/ChartCard'\nimport ExcludeArt from './Components/ExcludeArt'\nimport MainStatSelectionCard from './Components/MainStatSelectionCard'\nimport OptimizationTargetSelector from './Components/OptimizationTargetSelector'\nimport StatFilterCard from './Components/StatFilterCard'\nimport { compactArtifacts, dynamicData } from './foreground'\nimport useBuildResult from './useBuildResult'\nimport useBuildSetting from './useBuildSetting'\n\nconst audio = new Audio('notification.mp3')\nexport default function TabBuild() {\n  const { t } = useTranslation('page_character_optimize')\n  const {\n    character: { key: characterKey, compareData },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const { setChartData, graphBuilds, setGraphBuilds } = useContext(GraphContext)\n  const { gender } = useDBMeta()\n\n  const [notification, setnotification] = useState(false)\n  const notificationRef = useRef(false)\n  useEffect(() => {\n    notificationRef.current = notification\n  }, [notification])\n\n  const [buildStatus, setBuildStatus] = useState({\n    type: 'inactive',\n    tested: 0,\n    failed: 0,\n    skipped: 0,\n    total: 0,\n  } as BuildStatus)\n  const generatingBuilds = buildStatus.type !== 'inactive'\n\n  const [artsDirty, setArtsDirty] = useForceUpdate()\n\n  const [{ threads = defThreads }, setDisplayOptimize] = useState(\n    database.displayOptimize.get()\n  )\n  useEffect(\n    () => database.displayOptimize.follow((_r, to) => setDisplayOptimize(to)),\n    [database, setDisplayOptimize]\n  )\n\n  const maxWorkers = threads > defThreads ? defThreads : threads\n  const setMaxWorkers = useCallback(\n    (threads: number) => database.displayOptimize.set({ threads }),\n    [database]\n  )\n\n  const characterDispatch = useCharacterReducer(characterKey)\n  const onClickTeammate = useCharSelectionCallback()\n\n  // Clear state when changing characters\n  useEffect(() => {\n    setBuildStatus({\n      type: 'inactive',\n      tested: 0,\n      failed: 0,\n      skipped: 0,\n      total: 0,\n    })\n  }, [characterKey])\n\n  const noArtifact = useMemo(() => !database.arts.values.length, [database])\n\n  const { buildSetting, buildSettingDispatch } = useBuildSetting(characterKey)\n  const {\n    plotBase,\n    optimizationTarget,\n    mainStatAssumptionLevel,\n    allowPartial,\n    maxBuildsToShow,\n    levelLow,\n    levelHigh,\n  } = buildSetting\n  const {\n    buildResult: { builds, buildDate },\n    buildResultDispatch,\n  } = useBuildResult(characterKey)\n  const teamData = useTeamData(characterKey, mainStatAssumptionLevel)\n  const { characterSheet, target: data } =\n    teamData?.[characterKey as CharacterKey] ?? {}\n  const optimizationTargetNode =\n    optimizationTarget && objPathValue(data?.getDisplay(), optimizationTarget)\n  const isSM = ['xs', 'sm'].includes(useMediaQueryUp())\n\n  //register changes in artifact database\n  useEffect(\n    () => database.arts.followAny(setArtsDirty),\n    [setArtsDirty, database]\n  )\n\n  const deferredArtsDirty = useDeferredValue(artsDirty)\n  const deferredBuildSetting = useDeferredValue(buildSetting)\n  const filteredArts = useMemo(() => {\n    const {\n      mainStatKeys,\n      excludedLocations,\n      artExclusion,\n      levelLow,\n      levelHigh,\n      allowLocationsState,\n      useExcludedArts,\n    } = deferredArtsDirty && deferredBuildSetting\n\n    return database.arts.values.filter((art) => {\n      if (!useExcludedArts && artExclusion.includes(art.id)) return false\n      if (art.level < levelLow) return false\n      if (art.level > levelHigh) return false\n      const mainStats = mainStatKeys[art.slotKey]\n      if (mainStats?.length && !mainStats.includes(art.mainStatKey))\n        return false\n\n      const locKey = charKeyToLocCharKey(characterKey)\n      const unequippedStateAndEquippedElsewhere =\n        allowLocationsState === 'unequippedOnly' &&\n        art.location &&\n        art.location !== locKey\n      const customListStateAndNotOnList =\n        allowLocationsState === 'customList' &&\n        art.location &&\n        art.location !== locKey &&\n        excludedLocations.includes(art.location)\n      if (unequippedStateAndEquippedElsewhere || customListStateAndNotOnList)\n        return false\n\n      return true\n    })\n  }, [database, characterKey, deferredArtsDirty, deferredBuildSetting])\n\n  const filteredArtIdMap = useMemo(\n    () =>\n      objKeyMap(\n        filteredArts.map(({ id }) => id),\n        (_) => true\n      ),\n    [filteredArts]\n  )\n  const { levelTotal, allowListTotal, excludedTotal } = useMemo(() => {\n    const catKeys = {\n      levelTotal: ['in'],\n      allowListTotal: ['in'],\n      excludedTotal: ['in'],\n    } as const\n    return bulkCatTotal(catKeys, (ctMap) =>\n      Object.entries(database.arts.data).forEach(([id, art]) => {\n        const { level, location } = art\n        const {\n          levelLow,\n          levelHigh,\n          excludedLocations,\n          allowLocationsState,\n          artExclusion,\n        } = deferredArtsDirty && deferredBuildSetting\n        if (level >= levelLow && level <= levelHigh) {\n          ctMap.levelTotal.in.total++\n          if (filteredArtIdMap[id]) ctMap.levelTotal.in.current++\n        }\n        const locKey = charKeyToLocCharKey(characterKey)\n        const allStateAndEquippedSomewhereElse =\n          allowLocationsState === 'all' && location && location !== locKey\n        const customListStateAndNotOnList =\n          allowLocationsState === 'customList' &&\n          location &&\n          location !== locKey &&\n          !excludedLocations.includes(location)\n        if (allStateAndEquippedSomewhereElse || customListStateAndNotOnList) {\n          ctMap.allowListTotal.in.total++\n          if (filteredArtIdMap[id]) ctMap.allowListTotal.in.current++\n        }\n        if (artExclusion.includes(id)) {\n          ctMap.excludedTotal.in.total++\n          if (filteredArtIdMap[id]) ctMap.excludedTotal.in.current++\n        }\n      })\n    )\n  }, [\n    characterKey,\n    database.arts.data,\n    deferredArtsDirty,\n    deferredBuildSetting,\n    filteredArtIdMap,\n  ])\n\n  const tabFocused = useRef(true)\n  useEffect(() => {\n    const onFocus = () => (tabFocused.current = true)\n    const onBlur = () => (tabFocused.current = false)\n    window.addEventListener('focus', onFocus)\n    window.addEventListener('blur', onBlur)\n    return () => {\n      window.removeEventListener('focus', onFocus)\n      window.removeEventListener('blur', onBlur)\n    }\n  }, [tabFocused])\n\n  // Provides a function to cancel the work\n  const cancelToken = useRef(() => {})\n  //terminate worker when component unmounts\n  useEffect(() => () => cancelToken.current(), [])\n  const throwGlobalError = useGlobalError()\n\n  const generateBuilds = useCallback(async () => {\n    const {\n      artSetExclusion,\n      plotBase,\n      statFilters,\n      optimizationTarget,\n      mainStatAssumptionLevel,\n      allowPartial,\n      maxBuildsToShow,\n    } = buildSetting\n    if (!characterKey || !optimizationTarget) return\n\n    const split = compactArtifacts(\n      filteredArts,\n      mainStatAssumptionLevel,\n      allowPartial\n    )\n\n    const teamData = getTeamData(\n      database,\n      characterKey,\n      mainStatAssumptionLevel,\n      []\n    )\n    if (!teamData) return\n    const workerData = uiDataForTeam(teamData.teamData, gender, characterKey)[\n      characterKey\n    ]?.target.data![0]\n    if (!workerData) return\n    Object.assign(workerData, mergeData([workerData, dynamicData])) // Mark art fields as dynamic\n    const unoptimizedOptimizationTargetNode = objPathValue(\n      workerData.display ?? {},\n      optimizationTarget\n    ) as NumNode | undefined\n    if (!unoptimizedOptimizationTargetNode) return\n    const targetNode = unoptimizedOptimizationTargetNode\n    const valueFilter: { value: NumNode; minimum: number }[] = Object.entries(\n      statFilters\n    )\n      .flatMap(([pathStr, settings]) =>\n        settings\n          .filter((setting) => !setting.disabled)\n          .map((setting) => {\n            const filterNode: NumNode = objPathValue(\n              workerData.display ?? {},\n              JSON.parse(pathStr)\n            )\n            const minimum =\n              filterNode.info?.unit === '%'\n                ? setting.value / 100\n                : setting.value // TODO: Conversion\n            return { value: filterNode, minimum: minimum }\n          })\n      )\n      .filter((x) => x.value && x.minimum > -Infinity)\n\n    setChartData(undefined)\n\n    const cancelled = new Promise<void>((r) => (cancelToken.current = r))\n\n    const unoptimizedNodes = [\n      ...valueFilter.map((x) => x.value),\n      unoptimizedOptimizationTargetNode,\n    ]\n    const minimum = [...valueFilter.map((x) => x.minimum), -Infinity]\n    const plotBaseNumNode: NumNode =\n      plotBase && objPathValue(workerData.display ?? {}, plotBase)\n    if (plotBaseNumNode) {\n      unoptimizedNodes.push(plotBaseNumNode)\n      minimum.push(-Infinity)\n    }\n\n    const nodes = optimize(\n      unoptimizedNodes,\n      workerData,\n      ({ path: [p] }) => p !== 'dyn'\n    )\n    const plotBaseNode = plotBaseNumNode ? nodes.pop() : undefined\n    const optimizationTargetNode = nodes.pop()!\n\n    const problem: OptProblemInput = {\n      arts: split,\n      optimizationTarget: optimizationTargetNode,\n      exclusion: artSetExclusion,\n      constraints: nodes.map((value, i) => ({ value, min: minimum[i] })),\n\n      topN: maxBuildsToShow,\n      plotBase: plotBaseNode,\n    }\n    const status: Omit<BuildStatus, 'type'> = {\n      tested: 0,\n      failed: 0,\n      skipped: 0,\n      total: 0,\n      startTime: performance.now(),\n    }\n    const statusUpdateTimer = setInterval(\n      () => setBuildStatus({ type: 'active', ...status }),\n      100\n    )\n\n    const cancellationError = new Error()\n    try {\n      const solver = new GOSolver(problem, status, maxWorkers)\n      cancelled.then(() => solver.cancel(cancellationError))\n\n      const results = await solver.solve()\n      solver.cancel() // Done using `solver`\n\n      cancelToken.current = () => {}\n\n      if (plotBaseNumNode) {\n        const plotData = mergePlot(results.map((x) => x.plotData!))\n        let data = Object.values(plotData)\n        if (targetNode.info?.unit === '%')\n          data = data.map(({ value, plot, artifactIds }) => ({\n            value: value * 100,\n            plot,\n            artifactIds,\n          })) as Build[]\n        if (plotBaseNumNode.info?.unit === '%')\n          data = data.map(({ value, plot, artifactIds }) => ({\n            value,\n            plot: (plot ?? 0) * 100,\n            artifactIds,\n          })) as Build[]\n        setChartData({\n          valueNode: targetNode,\n          plotNode: plotBaseNumNode,\n          data,\n        })\n      }\n      const builds = mergeBuilds(\n        results.map((x) => x.builds),\n        maxBuildsToShow\n      )\n      if (process.env.NODE_ENV === 'development')\n        console.log('Build Result', builds)\n\n      buildResultDispatch({\n        builds: builds.map((build) => build.artifactIds),\n        buildDate: Date.now(),\n      })\n\n      setTimeout(() => {\n        // Using a ref because a user can cancel the notification while the build is going.\n        if (results && notificationRef.current) {\n          audio.play()\n          if (!tabFocused.current)\n            setTimeout(() => window.alert(t`buildCompleted`), 1)\n        }\n      }, 100)\n    } catch (e) {\n      // Worker error, cancelled, printer catches on fire, etc.\n      if (e !== cancellationError) {\n        console.log('Failed to load worker')\n        console.log(e)\n        if (e instanceof Error) throwGlobalError(e)\n      }\n\n      cancelToken.current()\n      status.tested = 0\n      status.failed = 0\n      status.skipped = 0\n      status.total = 0\n    } finally {\n      clearInterval(statusUpdateTimer)\n      setBuildStatus({\n        type: 'inactive',\n        ...status,\n        finishTime: performance.now(),\n      })\n    }\n  }, [\n    buildSetting,\n    characterKey,\n    filteredArts,\n    database,\n    gender,\n    setChartData,\n    maxWorkers,\n    buildResultDispatch,\n    t,\n    throwGlobalError,\n  ])\n\n  const characterName = characterSheet?.name ?? 'Character Name'\n\n  const setPlotBase = useCallback(\n    (plotBase: string[] | undefined) => {\n      buildSettingDispatch({ plotBase })\n      setChartData(undefined)\n    },\n    [buildSettingDispatch, setChartData]\n  )\n  const dataContext: dataContextObj | undefined = useMemo(() => {\n    return data && teamData && { data, teamData }\n  }, [data, teamData])\n\n  const targetSelector = (\n    <OptimizationTargetSelector\n      optimizationTarget={optimizationTarget}\n      setTarget={(target) =>\n        buildSettingDispatch({ optimizationTarget: target })\n      }\n      disabled={!!generatingBuilds}\n    />\n  )\n\n  const getGraphBuildLabel = useCallback(\n    (index: number) => (\n      <Trans t={t} i18nKey=\"graphBuildLabel\" count={index + 1}>\n        Graph #{{ count: index + 1 }}\n      </Trans>\n    ),\n    [t]\n  )\n  const getNormBuildLabel = useCallback((index: number) => `#${index + 1}`, [])\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n      {noArtifact && (\n        <Alert severity=\"warning\" variant=\"filled\">\n          <Trans t={t} i18nKey=\"noArtis\">\n            Oops! It looks like you haven't added any artifacts to GO yet! You\n            should go to the\n            <Link component={RouterLink} to=\"/artifacts\">\n              Artifacts\n            </Link>\n            page and add some!\n          </Trans>\n        </Alert>\n      )}\n      {/* Build Generator Editor */}\n      {dataContext && (\n        <DataContext.Provider value={dataContext}>\n          <Grid container spacing={1}>\n            {/* 1*/}\n            <Grid\n              item\n              xs={12}\n              sm={6}\n              lg={3}\n              display=\"flex\"\n              flexDirection=\"column\"\n              gap={1}\n            >\n              {/* character card */}\n              <Box>\n                <CharacterCard\n                  characterKey={characterKey}\n                  onClickTeammate={onClickTeammate}\n                />\n              </Box>\n              <BonusStatsCard />\n            </Grid>\n\n            {/* 2 */}\n            <Grid\n              item\n              xs={12}\n              sm={6}\n              lg={4}\n              display=\"flex\"\n              flexDirection=\"column\"\n              gap={1}\n            >\n              {/* Level Filter */}\n              <CardLight>\n                <CardContent sx={{ display: 'flex', gap: 1 }}>\n                  <Typography\n                    sx={{ fontWeight: 'bold' }}\n                  >{t`levelFilter`}</Typography>\n                  <SqBadge color=\"info\">{levelTotal.in}</SqBadge>\n                </CardContent>\n                <Divider />\n                <CardContent>\n                  <ArtifactLevelSlider\n                    levelLow={levelLow}\n                    levelHigh={levelHigh}\n                    setLow={(levelLow) => buildSettingDispatch({ levelLow })}\n                    setHigh={(levelHigh) => buildSettingDispatch({ levelHigh })}\n                    setBoth={(levelLow, levelHigh) =>\n                      buildSettingDispatch({ levelLow, levelHigh })\n                    }\n                    disabled={generatingBuilds}\n                  />\n                </CardContent>\n              </CardLight>\n\n              {/* Main Stat Filters */}\n              <CardLight>\n                <CardContent>\n                  <Typography\n                    sx={{ fontWeight: 'bold' }}\n                  >{t`mainStat.title`}</Typography>\n                </CardContent>\n                <Divider />\n                <CardContent>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                    <AssumeFullLevelToggle\n                      mainStatAssumptionLevel={mainStatAssumptionLevel}\n                      setmainStatAssumptionLevel={(\n                        mainStatAssumptionLevel: number\n                      ) => buildSettingDispatch({ mainStatAssumptionLevel })}\n                      disabled={generatingBuilds}\n                    />\n                    <InfoTooltip\n                      title={\n                        <Box>\n                          <Typography variant=\"h6\">{t`mainStat.levelAssTooltip.title`}</Typography>\n                          <Typography>{t`mainStat.levelAssTooltip.desc`}</Typography>\n                        </Box>\n                      }\n                    />\n                  </Box>\n                </CardContent>\n                {/* main stat selector */}\n                <MainStatSelectionCard\n                  disabled={generatingBuilds}\n                  filteredArtIdMap={filteredArtIdMap}\n                />\n              </CardLight>\n            </Grid>\n\n            {/* 3 */}\n            <Grid\n              item\n              xs={12}\n              sm={6}\n              lg={5}\n              display=\"flex\"\n              flexDirection=\"column\"\n              gap={1}\n            >\n              <ArtifactSetConfig disabled={generatingBuilds} />\n\n              {/* use excluded */}\n              <ExcludeArt\n                disabled={generatingBuilds}\n                excludedTotal={excludedTotal.in}\n              />\n\n              <Button\n                fullWidth\n                startIcon={\n                  allowPartial ? <CheckBox /> : <CheckBoxOutlineBlank />\n                }\n                color={allowPartial ? 'success' : 'secondary'}\n                onClick={() =>\n                  buildSettingDispatch({ allowPartial: !allowPartial })\n                }\n                disabled={generatingBuilds}\n              >\n                {t`allowPartial`}\n              </Button>\n\n              {/* use equipped */}\n              <AllowChar\n                disabled={generatingBuilds}\n                allowListTotal={allowListTotal.in}\n              />\n\n              {/*Minimum Final Stat Filter */}\n              <StatFilterCard disabled={generatingBuilds} />\n            </Grid>\n          </Grid>\n          {/* Footer */}\n          {isSM && targetSelector}\n          <ButtonGroup>\n            {!isSM && targetSelector}\n            <DropdownButton\n              disabled={generatingBuilds || !characterKey}\n              title={\n                <Trans t={t} i18nKey=\"build\" count={maxBuildsToShow}>\n                  {{ count: maxBuildsToShow }} Builds\n                </Trans>\n              }\n            >\n              <MenuItem>\n                <Typography variant=\"caption\" color=\"info.main\">\n                  {t('buildDropdownDesc')}\n                </Typography>\n              </MenuItem>\n              <Divider />\n              {maxBuildsToShowList.map((v) => (\n                <MenuItem\n                  key={v}\n                  onClick={() => buildSettingDispatch({ maxBuildsToShow: v })}\n                >\n                  <Trans t={t} i18nKey=\"build\" count={v}>\n                    {{ count: v }} Builds\n                  </Trans>\n                </MenuItem>\n              ))}\n            </DropdownButton>\n            <DropdownButton\n              disabled={generatingBuilds || !characterKey}\n              sx={{ borderRadius: '4px 0px 0px 4px' }}\n              title={\n                <Trans t={t} i18nKey=\"thread\" count={maxWorkers}>\n                  {{ count: maxWorkers }} Threads\n                </Trans>\n              }\n            >\n              <MenuItem>\n                <Typography variant=\"caption\" color=\"info.main\">\n                  {t('threadDropdownDesc')}\n                </Typography>\n              </MenuItem>\n              <Divider />\n              {range(1, defThreads)\n                .reverse()\n                .map((v) => (\n                  <MenuItem key={v} onClick={() => setMaxWorkers(v)}>\n                    <Trans t={t} i18nKey=\"thread\" count={v}>\n                      {{ count: v }} Threads\n                    </Trans>\n                  </MenuItem>\n                ))}\n            </DropdownButton>\n            <BootstrapTooltip placement=\"top\" title={t`notifyTooltip`}>\n              <Button\n                sx={{ borderRadius: 0 }}\n                color=\"warning\"\n                onClick={() => setnotification((n) => !n)}\n              >\n                {notification ? (\n                  <NotificationsActiveIcon />\n                ) : (\n                  <NotificationsOffIcon />\n                )}\n              </Button>\n            </BootstrapTooltip>\n            <BootstrapTooltip\n              placement=\"top\"\n              title={!optimizationTarget ? t('selectTargetFirst') : ''}\n            >\n              <span>\n                <Button\n                  disabled={\n                    !characterKey ||\n                    !optimizationTarget ||\n                    !optimizationTargetNode ||\n                    optimizationTargetNode.isEmpty\n                  }\n                  color={generatingBuilds ? 'error' : 'success'}\n                  onClick={\n                    generatingBuilds\n                      ? () => cancelToken.current()\n                      : generateBuilds\n                  }\n                  startIcon={generatingBuilds ? <Close /> : <TrendingUp />}\n                  sx={{ borderRadius: '0px 4px 4px 0px' }}\n                >\n                  {generatingBuilds\n                    ? t('generateButton.cancel')\n                    : t('generateButton.generateBuilds')}\n                </Button>\n              </span>\n            </BootstrapTooltip>\n          </ButtonGroup>\n          {!!characterKey && (\n            <BuildAlert\n              {...{ status: buildStatus, characterName, maxBuildsToShow }}\n            />\n          )}\n          <Box>\n            <ChartCard\n              disabled={generatingBuilds || !optimizationTarget}\n              plotBase={plotBase}\n              setPlotBase={setPlotBase}\n              showTooltip={!optimizationTarget}\n            />\n          </Box>\n          <CardLight>\n            <CardContent>\n              <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                <Typography sx={{ flexGrow: 1 }}>\n                  {builds ? (\n                    <span>\n                      Showing{' '}\n                      <strong>\n                        {builds.length + (graphBuilds ? graphBuilds.length : 0)}\n                      </strong>{' '}\n                      build generated for {characterName}.{' '}\n                      {!!buildDate && (\n                        <span>\n                          Build generated on:{' '}\n                          <strong>\n                            {new Date(buildDate).toLocaleString()}\n                          </strong>\n                        </span>\n                      )}\n                    </span>\n                  ) : (\n                    <span>Select a character to generate builds.</span>\n                  )}\n                </Typography>\n                <Button\n                  disabled={!builds.length}\n                  color=\"error\"\n                  onClick={() => {\n                    setGraphBuilds(undefined)\n                    buildResultDispatch({ builds: [], buildDate: 0 })\n                  }}\n                >\n                  Clear Builds\n                </Button>\n              </Box>\n              <Grid container display=\"flex\" spacing={1}>\n                <Grid item>\n                  <HitModeToggle size=\"small\" />\n                </Grid>\n                <Grid item>\n                  <ReactionToggle size=\"small\" />\n                </Grid>\n                <Grid item flexGrow={1} />\n                <Grid item>\n                  <SolidToggleButtonGroup\n                    exclusive\n                    value={compareData}\n                    onChange={(_e, v) => characterDispatch({ compareData: v })}\n                    size=\"small\"\n                  >\n                    <ToggleButton value={false} disabled={!compareData}>\n                      Show new builds\n                    </ToggleButton>\n                    <ToggleButton value={true} disabled={compareData}>\n                      Compare vs. equipped\n                    </ToggleButton>\n                  </SolidToggleButtonGroup>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </CardLight>\n\n          <OptimizationTargetContext.Provider value={optimizationTarget}>\n            {graphBuilds && (\n              <BuildList\n                builds={graphBuilds}\n                characterKey={characterKey}\n                data={data}\n                compareData={compareData}\n                disabled={!!generatingBuilds}\n                getLabel={getGraphBuildLabel}\n                setBuilds={setGraphBuilds}\n              />\n            )}\n            <BuildList\n              builds={builds}\n              characterKey={characterKey}\n              data={data}\n              compareData={compareData}\n              disabled={!!generatingBuilds}\n              getLabel={getNormBuildLabel}\n            />\n          </OptimizationTargetContext.Provider>\n        </DataContext.Provider>\n      )}\n    </Box>\n  )\n}\n\nfunction BuildList({\n  builds,\n  setBuilds,\n  characterKey,\n  data,\n  compareData,\n  disabled,\n  getLabel,\n}: {\n  builds: string[][]\n  setBuilds?: (builds: string[][] | undefined) => void\n  characterKey?: '' | CharacterKey\n  data?: UIData\n  compareData: boolean\n  disabled: boolean\n  getLabel: (index: number) => Displayable\n}) {\n  const deleteBuild = useCallback(\n    (index: number) => {\n      if (setBuilds) {\n        const builds_ = [...builds]\n        builds_.splice(index, 1)\n        setBuilds(builds_)\n      }\n    },\n    [builds, setBuilds]\n  )\n  // Memoize the build list because calculating/rendering the build list is actually very expensive, which will cause longer optimization times.\n  const list = useMemo(\n    () => (\n      <Suspense\n        fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}\n      >\n        {builds?.map(\n          (build, index) =>\n            characterKey &&\n            data && (\n              <DataContextWrapper\n                key={index + build.join()}\n                characterKey={characterKey}\n                build={build}\n                oldData={data}\n              >\n                <BuildItemWrapper\n                  index={index}\n                  label={getLabel(index)}\n                  build={build}\n                  compareData={compareData}\n                  disabled={disabled}\n                  deleteBuild={setBuilds ? deleteBuild : undefined}\n                />\n              </DataContextWrapper>\n            )\n        )}\n      </Suspense>\n    ),\n    [\n      builds,\n      characterKey,\n      data,\n      compareData,\n      disabled,\n      getLabel,\n      deleteBuild,\n      setBuilds,\n    ]\n  )\n  return list\n}\nfunction BuildItemWrapper({\n  index,\n  label,\n  build,\n  compareData,\n  disabled,\n  deleteBuild,\n}: {\n  index: number\n  label: Displayable\n  build: string[]\n  compareData: boolean\n  disabled: boolean\n  deleteBuild?: (index: number) => void\n}) {\n  const { t } = useTranslation('page_character_optimize')\n  const location = useLocation()\n  const navigate = useNavigate()\n  const toTC = useCallback(() => {\n    const paths = location.pathname.split('/')\n    paths.pop()\n    navigate(`${paths.join('/')}/theorycraft`, { state: { build } })\n  }, [navigate, build, location.pathname])\n\n  return (\n    <BuildDisplayItem\n      label={label}\n      compareBuild={compareData}\n      disabled={disabled}\n      extraButtonsLeft={\n        <>\n          <Button\n            color=\"info\"\n            size=\"small\"\n            startIcon={<Science />}\n            onClick={toTC}\n          >\n            {t('theorycraftButton')}\n          </Button>\n          {deleteBuild && (\n            <Button\n              color=\"error\"\n              size=\"small\"\n              startIcon={<DeleteForever />}\n              onClick={() => deleteBuild(index)}\n            >\n              {t('removeBuildButton')}\n            </Button>\n          )}\n        </>\n      }\n    />\n  )\n}\n\ntype Prop = {\n  children: React.ReactNode\n  characterKey: CharacterKey\n  build: string[]\n  oldData: UIData\n}\nfunction DataContextWrapper({ children, characterKey, build, oldData }: Prop) {\n  const { database } = useContext(DatabaseContext)\n  const {\n    buildSetting: { mainStatAssumptionLevel },\n  } = useBuildSetting(characterKey)\n  // Update the build when the build artifacts are changed.\n  const [dirty, setDirty] = useForceUpdate()\n  useEffect(\n    () => database.arts.followAny((id) => build.includes(id) && setDirty()),\n    [database, build, setDirty]\n  )\n  const buildsArts = useMemo(\n    () =>\n      dirty &&\n      (build\n        .map((i) => database.arts.get(i))\n        .filter((a) => a) as ICachedArtifact[]),\n    [dirty, build, database]\n  )\n  const teamData = useTeamData(\n    characterKey,\n    mainStatAssumptionLevel,\n    buildsArts\n  )\n  const providerValue = useMemo(() => {\n    const tdc = teamData?.[characterKey]\n    if (!tdc) return\n    return { data: tdc.target, teamData, oldData }\n  }, [teamData, oldData, characterKey])\n  if (!providerValue) return null\n  return (\n    <DataContext.Provider value={providerValue}>\n      {children}\n    </DataContext.Provider>\n  )\n}\n","import { useCallback, useState } from 'react'\n\n/* Hook to get a callback function for throwing\nsynchronous error from asynchronous code\nWhen this callback is used somewhere within an error boundary,\nit will trigger it, even if you are in an async block\n\n```\nconst throwError = useGlobalError()\nasync function foo() { throwError(new Error()) }\n```\n*/\nexport default function useGlobalError(): (e: Error) => void {\n  const [, setError] = useState()\n  return useCallback((e: Error) => {\n    setError(() => {\n      throw e\n    })\n  }, [])\n}\n","import type { CharacterKey, GenderKey } from '@genshin-optimizer/consts'\nimport Albedo from './Character_Albedo_Card.png'\nimport Alhaitham from './Character_Alhaitham_Card.jpg'\nimport Aloy from './Character_Aloy_Card.png'\nimport Amber from './Character_Amber_Card.jpg'\nimport AratakiItto from './Character_Arataki_Itto_Card.jpg'\nimport Baizhu from './Character_Baizhu_Card.jpg'\nimport Barbara from './Character_Barbara_Card.jpg'\nimport Beidou from './Character_Beidou_Card.jpg'\nimport Bennett from './Character_Bennett_Card.jpg'\nimport Candace from './Character_Candace_Card.jpg'\nimport Chongyun from './Character_Chongyun_Card.jpg'\nimport Collei from './Character_Collei_Card.jpg'\nimport Cyno from './Character_Cyno_Card.jpg'\nimport Dehya from './Character_Dehya_Card.jpg'\nimport Diluc from './Character_Diluc_Card.jpg'\nimport Diona from './Character_Diona_Card.png'\nimport Dori from './Character_Dori_Card.jpg'\nimport Eula from './Character_Eula_Card.png'\nimport Faruzan from './Character_Faruzan_Card.jpg'\nimport Fischl from './Character_Fischl_Card.jpg'\nimport Ganyu from './Character_Ganyu_Card.png'\nimport Gorou from './Character_Gorou_Card.png'\nimport HuTao from './Character_Hu_Tao_Card.png'\nimport Jean from './Character_Jean_Card.jpg'\nimport Kaeya from './Character_Kaeya_Card.jpg'\nimport Kaveh from './Character_Kaveh_Card.jpg'\nimport KamisatoAyaka from './Character_Kamisato_Ayaka_Card.png'\nimport KamisatoAyato from './Character_Kamisato_Ayato_Card.png'\nimport KaedeharaKazuha from './Character_Kazuha_Card.png'\nimport Keqing from './Character_Keqing_Card.jpg'\nimport Kirara from './Character_Kirara_Card.jpg'\nimport Klee from './Character_Klee_Card.jpg'\nimport KujouSara from './Character_Kujou_Sara_Card.jpg'\nimport KukiShinobu from './Character_Kuki_Shinobu_Card.jpg'\nimport Layla from './Character_Layla_Card.jpeg'\nimport Lisa from './Character_Lisa_Card.jpg'\nimport Mika from './Character_Mika_Card.jpg'\nimport Mona from './Character_Mona_Card.jpg'\nimport Nahida from './Character_Nahida_Card.jpeg'\nimport Nilou from './Character_Nilou_Card.jpg'\nimport Ningguang from './Character_Ningguang_Card.jpg'\nimport Noelle from './Character_Noelle_Card.jpg'\nimport Qiqi from './Character_Qiqi_Card.jpg'\nimport RaidenShogun from './Character_Raiden_Shogun_Card.png'\nimport Razor from './Character_Razor_Card.jpg'\nimport Rosaria from './Character_Rosaria_Card.png'\nimport SangonomiyaKokomi from './Character_Sangonomiya_Kokomi_Card.jpg'\nimport Sayu from './Character_Sayu_Card.png'\nimport Shenhe from './Character_Shenhe_Card.jpg'\nimport ShikanoinHeizou from './Character_Shikanoin_Heizou_Card.png'\nimport Somnia from './Character_Somnia_Card.png'\nimport Sucrose from './Character_Sucrose_Card.jpg'\nimport Tartaglia from './Character_Tartaglia_Card.png'\nimport Thoma from './Character_Thoma_Card.jpg'\nimport Tighnari from './Character_Tighnari_Card.jpg'\nimport Venti from './Character_Venti_Card.jpg'\nimport Wanderer from './Character_Wanderer_Card.jpg'\nimport Xiangling from './Character_Xiangling_Card.jpg'\nimport Xiao from './Character_Xiao_Card.jpg'\nimport Xingqiu from './Character_Xingqiu_Card.jpg'\nimport Xinyan from './Character_Xinyan_Card.jpg'\nimport YaeMiko from './Character_Yae_Miko_Card.png'\nimport Yanfei from './Character_Yanfei_Card.png'\nimport Yaoyao from './Character_Yaoyao_Card.jpg'\nimport Yelan from './Character_Yelan_Card.jpg'\nimport Yoimiya from './Character_Yoimiya_Card.png'\nimport YunJin from './Character_Yun_Jin_Card.jpg'\nimport Zhongli from './Character_Zhongli_Card.png'\nimport TravelerF from './Traveler_Female_Card.jpg'\nimport TravelerM from './Traveler_Male_Card.jpg'\n\nconst charCards = {\n  Albedo,\n  Alhaitham,\n  Aloy,\n  Amber,\n  AratakiItto,\n  Baizhu,\n  Barbara,\n  Beidou,\n  Bennett,\n  Candace,\n  Chongyun,\n  Collei,\n  Cyno,\n  Dehya,\n  Diluc,\n  Diona,\n  Dori,\n  Eula,\n  Faruzan,\n  Fischl,\n  Ganyu,\n  Gorou,\n  HuTao,\n  Jean,\n  KaedeharaKazuha,\n  Kaeya,\n  KamisatoAyaka,\n  KamisatoAyato,\n  Kaveh,\n  Keqing,\n  Kirara,\n  Klee,\n  KujouSara,\n  KukiShinobu,\n  Layla,\n  Lisa,\n  Mika,\n  Mona,\n  Nahida,\n  Nilou,\n  Ningguang,\n  Noelle,\n  Qiqi,\n  RaidenShogun,\n  Razor,\n  Rosaria,\n  SangonomiyaKokomi,\n  Sayu,\n  Shenhe,\n  ShikanoinHeizou,\n  Somnia,\n  Sucrose,\n  Tartaglia,\n  Thoma,\n  Tighnari,\n  TravelerF,\n  TravelerM,\n  Venti,\n  Wanderer,\n  Xiangling,\n  Xiao,\n  Xingqiu,\n  Xinyan,\n  YaeMiko,\n  Yanfei,\n  Yaoyao,\n  Yelan,\n  Yoimiya,\n  YunJin,\n  Zhongli,\n} as const\n\nexport function charCard(charKey: CharacterKey, gender: GenderKey): string {\n  switch (charKey) {\n    case 'TravelerAnemo':\n    case 'TravelerDendro':\n    case 'TravelerElectro':\n    case 'TravelerGeo':\n      return charCards[`Traveler${gender}`] ?? ''\n    default:\n      return charCards[charKey] ?? ''\n  }\n}\n","import { objMap } from '@genshin-optimizer/util'\nimport { Close, Difference } from '@mui/icons-material'\nimport { Button, Skeleton, Tooltip, Typography } from '@mui/material'\nimport { Suspense, useContext, useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport {\n  HitModeToggle,\n  ReactionToggle,\n} from '../../../../Components/HitModeEditor'\nimport ModalWrapper from '../../../../Components/ModalWrapper'\nimport { CharacterContext } from '../../../../Context/CharacterContext'\nimport { DataContext } from '../../../../Context/DataContext'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport { useBoolState } from '@genshin-optimizer/react-util'\nimport useTeamData from '../../../../ReactHooks/useTeamData'\nimport BuildDisplayItem from '../TabOptimize/Components/BuildDisplayItem'\nimport useBuildSetting from '../TabOptimize/useBuildSetting'\n\nexport default function CompareBuildButton({\n  artId,\n  weaponId,\n}: {\n  artId?: string\n  weaponId?: string\n}) {\n  const { t } = useTranslation('page_character')\n  const [show, onShow, onHide] = useBoolState(false)\n\n  return (\n    <>\n      <ModalWrapper\n        open={show}\n        onClose={onHide}\n        containerProps={{ maxWidth: 'xl' }}\n      >\n        <CompareContent artId={artId} weaponId={weaponId} onHide={onHide} />\n      </ModalWrapper>\n      <Tooltip\n        title={<Typography>{t`tabEquip.compare`}</Typography>}\n        placement=\"top\"\n        arrow\n      >\n        <Button color=\"info\" size=\"small\" onClick={onShow}>\n          <Difference />\n        </Button>\n      </Tooltip>\n    </>\n  )\n}\nfunction CompareContent({\n  artId,\n  weaponId,\n  onHide,\n}: {\n  artId?: string\n  weaponId?: string\n  onHide: () => void\n}) {\n  const { database } = useContext(DatabaseContext)\n  const {\n    character: { key: characterKey, equippedArtifacts },\n  } = useContext(CharacterContext)\n  const {\n    buildSetting: { mainStatAssumptionLevel },\n  } = useBuildSetting(characterKey)\n  const { data: oldData } = useContext(DataContext)\n  const build = useMemo(() => {\n    const newArt = database.arts.get(artId ?? '')\n    const artmap = objMap(equippedArtifacts, (id, slot) =>\n      slot === newArt?.slotKey ? newArt : database.arts.get(id)\n    )\n    return Object.values(artmap).filter((a) => a)\n  }, [database, equippedArtifacts, artId])\n  const teamData = useTeamData(\n    characterKey,\n    mainStatAssumptionLevel,\n    build,\n    weaponId ? database.weapons.get(weaponId) : undefined\n  )\n  const dataProviderValue = useMemo(\n    () =>\n      teamData && { data: teamData[characterKey]!.target, teamData, oldData },\n    [characterKey, teamData, oldData]\n  )\n  return (\n    <Suspense\n      fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={600} />}\n    >\n      {dataProviderValue && (\n        <DataContext.Provider value={dataProviderValue}>\n          <BuildDisplayItem\n            compareBuild={true}\n            extraButtonsLeft={\n              <>\n                <HitModeToggle size=\"small\" />\n                <ReactionToggle size=\"small\" />\n              </>\n            }\n            extraButtonsRight={\n              <Button size=\"small\" color=\"error\" onClick={onHide}>\n                <Close />\n              </Button>\n            }\n          />\n        </DataContext.Provider>\n      )}\n    </Suspense>\n  )\n}\n","import type { ArtifactSlotKey } from '@genshin-optimizer/consts'\nimport { imgAssets } from '@genshin-optimizer/gi-assets'\nimport { useForceUpdate, useMediaQueryUp } from '@genshin-optimizer/react-util'\nimport { filterFunction } from '@genshin-optimizer/util'\nimport {\n  Box,\n  CardContent,\n  Divider,\n  Grid,\n  Skeleton,\n  Typography,\n} from '@mui/material'\nimport {\n  lazy,\n  Suspense,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n} from 'react'\nimport { useTranslation } from 'react-i18next'\nimport CardDark from '../../../../Components/Card/CardDark'\nimport CloseButton from '../../../../Components/CloseButton'\nimport ImgIcon from '../../../../Components/Image/ImgIcon'\nimport ModalWrapper from '../../../../Components/ModalWrapper'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport ArtifactCard from '../../../../PageArtifact/ArtifactCard'\nimport type { FilterOption } from '../../../../PageArtifact/ArtifactSort'\nimport {\n  artifactFilterConfigs,\n  initialFilterOption,\n} from '../../../../PageArtifact/ArtifactSort'\nimport CompareBuildButton from './CompareBuildButton'\n\nconst numToShowMap = { xs: 2 * 3, sm: 2 * 3, md: 3 * 3, lg: 4 * 3, xl: 4 * 3 }\nconst ArtifactFilterDisplay = lazy(\n  () => import('../../../../Components/Artifact/ArtifactFilterDisplay')\n)\n\nexport default function ArtifactSwapModal({\n  onChangeId,\n  slotKey,\n  show,\n  onClose,\n}: {\n  onChangeId: (id: string) => void\n  slotKey: ArtifactSlotKey\n  show: boolean\n  onClose: () => void\n}) {\n  const { t } = useTranslation('page_character')\n  const { database } = useContext(DatabaseContext)\n  const clickHandler = useCallback(\n    (id) => {\n      onChangeId(id)\n      onClose()\n    },\n    [onChangeId, onClose]\n  )\n  const filterOptionReducer = useCallback(\n    (state, action) => ({ ...state, ...action, slotKeys: [slotKey] }),\n    [slotKey]\n  )\n\n  const [filterOption, filterOptionDispatch]: [\n    FilterOption,\n    (action: any) => void\n  ] = useReducer(filterOptionReducer, {\n    ...initialFilterOption(),\n    slotKeys: [slotKey],\n  })\n\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  useEffect(() => {\n    return database.arts.followAny(forceUpdate)\n  }, [database, forceUpdate])\n\n  const brPt = useMediaQueryUp()\n\n  const filterConfigs = useMemo(() => artifactFilterConfigs(), [])\n  const artIdList = useMemo(() => {\n    const filterFunc = filterFunction(filterOption, filterConfigs)\n    return (\n      dbDirty &&\n      database.arts.values\n        .filter(filterFunc)\n        .map((art) => art.id)\n        .slice(0, numToShowMap[brPt])\n    )\n  }, [dbDirty, database, filterConfigs, filterOption, brPt])\n\n  return (\n    <ModalWrapper\n      open={show}\n      onClose={onClose}\n      containerProps={{ maxWidth: 'xl' }}\n    >\n      <CardDark>\n        <CardContent\n          sx={{\n            py: 1,\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n          }}\n        >\n          <Typography variant=\"h6\">\n            {slotKey ? <ImgIcon src={imgAssets.slot[slotKey]} /> : null}{' '}\n            {t`tabEquip.swapArt`}\n          </Typography>\n          <CloseButton onClick={onClose} />\n        </CardContent>\n        <Divider />\n        <CardContent>\n          <Suspense\n            fallback={\n              <Skeleton variant=\"rectangular\" width=\"100%\" height={200} />\n            }\n          >\n            <ArtifactFilterDisplay\n              filterOption={filterOption}\n              filterOptionDispatch={filterOptionDispatch}\n              filteredIds={artIdList}\n              disableSlotFilter\n            />\n          </Suspense>\n          <Box mt={1}>\n            <Suspense\n              fallback={\n                <Skeleton variant=\"rectangular\" width=\"100%\" height={300} />\n              }\n            >\n              <Grid container spacing={1} columns={{ xs: 2, md: 3, lg: 4 }}>\n                {artIdList.map((id) => (\n                  <Grid item key={id} xs={1}>\n                    <ArtifactCard\n                      artifactId={id}\n                      extraButtons={<CompareBuildButton artId={id} />}\n                      onClick={clickHandler}\n                    />\n                  </Grid>\n                ))}\n              </Grid>\n            </Suspense>\n          </Box>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  )\n}\n","import type {\n  RarityKey,\n  WeaponKey,\n  WeaponTypeKey,\n} from '@genshin-optimizer/consts'\nimport { allRarityKeys } from '@genshin-optimizer/consts'\nimport { imgAssets } from '@genshin-optimizer/gi-assets'\nimport { filterFunction, sortFunction } from '@genshin-optimizer/util'\nimport { Add } from '@mui/icons-material'\nimport StarRoundedIcon from '@mui/icons-material/StarRounded'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Divider,\n  Grid,\n  TextField,\n  ToggleButton,\n  Typography,\n} from '@mui/material'\nimport type { ChangeEvent } from 'react'\nimport {\n  Suspense,\n  useCallback,\n  useContext,\n  useDeferredValue,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { useTranslation } from 'react-i18next'\nimport CardDark from '../../../../Components/Card/CardDark'\nimport CloseButton from '../../../../Components/CloseButton'\nimport ImgIcon from '../../../../Components/Image/ImgIcon'\nimport ModalWrapper from '../../../../Components/ModalWrapper'\nimport SolidToggleButtonGroup from '../../../../Components/SolidToggleButtonGroup'\nimport WeaponSelectionModal from '../../../../Components/Weapon/WeaponSelectionModal'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport WeaponCard from '../../../../PageWeapon/WeaponCard'\nimport WeaponEditor from '../../../../PageWeapon/WeaponEditor'\nimport { useForceUpdate } from '@genshin-optimizer/react-util'\nimport { handleMultiSelect } from '../../../../Util/MultiSelect'\nimport {\n  weaponFilterConfigs,\n  weaponSortConfigs,\n  weaponSortMap,\n} from '../../../../Util/WeaponSort'\nimport { initialWeapon } from '../../../../Util/WeaponUtil'\nimport CompareBuildButton from './CompareBuildButton'\n\nconst rarityHandler = handleMultiSelect([...allRarityKeys])\n\nexport default function WeaponSwapModal({\n  onChangeId,\n  weaponTypeKey,\n  show,\n  onClose,\n}: {\n  onChangeId: (id: string) => void\n  weaponTypeKey: WeaponTypeKey\n  show: boolean\n  onClose: () => void\n}) {\n  const { t } = useTranslation([\n    'page_character',\n    'page_weapon',\n    'weaponNames_gen',\n  ])\n  const { database } = useContext(DatabaseContext)\n  const [newWeaponModalShow, setnewWeaponModalShow] = useState(false)\n  const clickHandler = useCallback(\n    (id: string) => {\n      onChangeId(id)\n      onClose()\n    },\n    [onChangeId, onClose]\n  )\n\n  const [editWeaponId, setEditWeaponId] = useState('')\n  const newWeapon = useCallback(\n    (weaponKey: WeaponKey) => {\n      setEditWeaponId(database.weapons.new(initialWeapon(weaponKey)))\n    },\n    [database, setEditWeaponId]\n  )\n  const resetEditWeapon = useCallback(() => setEditWeaponId(''), [])\n\n  const [dbDirty, forceUpdate] = useForceUpdate()\n  useEffect(\n    () => database.weapons.followAny(forceUpdate),\n    [forceUpdate, database]\n  )\n\n  const [rarity, setRarity] = useState<RarityKey[]>([5, 4, 3])\n  const [searchTerm, setSearchTerm] = useState('')\n  const deferredSearchTerm = useDeferredValue(searchTerm)\n\n  const weaponIdList = useMemo(\n    () =>\n      (dbDirty &&\n        database.weapons.values\n          .filter(\n            filterFunction(\n              { weaponType: weaponTypeKey, rarity, name: deferredSearchTerm },\n              weaponFilterConfigs()\n            )\n          )\n          .sort(\n            sortFunction(\n              weaponSortMap['level'] ?? [],\n              false,\n              weaponSortConfigs()\n            )\n          )\n          .map((weapon) => weapon.id)) ??\n      [],\n    [dbDirty, database, rarity, weaponTypeKey, deferredSearchTerm]\n  )\n\n  return (\n    <ModalWrapper open={show} onClose={onClose}>\n      <CardDark>\n        <Suspense fallback={false}>\n          <WeaponSelectionModal\n            show={newWeaponModalShow}\n            onHide={() => setnewWeaponModalShow(false)}\n            onSelect={newWeapon}\n            weaponTypeFilter={weaponTypeKey}\n          />\n        </Suspense>\n        {/* Editor/character detail display */}\n        <Suspense fallback={false}>\n          <WeaponEditor\n            weaponId={editWeaponId}\n            footer\n            onClose={resetEditWeapon}\n          />\n        </Suspense>\n        <CardContent sx={{ py: 1 }}>\n          <Grid container>\n            <Grid item flexGrow={1}>\n              <Typography variant=\"h6\">\n                {weaponTypeKey ? (\n                  <ImgIcon src={imgAssets.weaponTypes[weaponTypeKey]} />\n                ) : null}{' '}\n                {t`page_character:tabEquip.swapWeapon`}\n              </Typography>\n            </Grid>\n            <Grid item>\n              <CloseButton onClick={onClose} />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardContent sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n          <Grid container spacing={1}>\n            <Grid item>\n              <SolidToggleButtonGroup\n                sx={{ height: '100%' }}\n                value={rarity}\n                size=\"small\"\n              >\n                {allRarityKeys.map((star) => (\n                  <ToggleButton\n                    key={star}\n                    value={star}\n                    onClick={() => setRarity(rarityHandler(rarity, star))}\n                  >\n                    <Box display=\"flex\">\n                      <strong>{star}</strong>\n                      <StarRoundedIcon />\n                    </Box>\n                  </ToggleButton>\n                ))}\n              </SolidToggleButtonGroup>\n            </Grid>\n            <Grid item flexGrow={1}>\n              <TextField\n                autoFocus\n                size=\"small\"\n                value={searchTerm}\n                onChange={(e: ChangeEvent<HTMLTextAreaElement>) =>\n                  setSearchTerm(e.target.value)\n                }\n                label={t('page_weapon:weaponName')}\n                sx={{ height: '100%' }}\n                InputProps={{\n                  sx: { height: '100%' },\n                }}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            fullWidth\n            onClick={() => setnewWeaponModalShow(true)}\n            color=\"info\"\n            startIcon={<Add />}\n          >\n            {t('page_weapon:addWeapon')}\n          </Button>\n          <Grid container spacing={1}>\n            {weaponIdList.map((weaponId) => (\n              <Grid item key={weaponId} xs={6} sm={6} md={4} lg={3}>\n                <WeaponCard\n                  weaponId={weaponId}\n                  onClick={clickHandler}\n                  extraButtons={<CompareBuildButton weaponId={weaponId} />}\n                />\n              </Grid>\n            ))}\n          </Grid>\n        </CardContent>\n      </CardDark>\n    </ModalWrapper>\n  )\n}\n","import type { ArtifactSlotKey, WeaponTypeKey } from '@genshin-optimizer/consts'\nimport {\n  allArtifactSlotKeys,\n  allSubstatKeys,\n  charKeyToLocCharKey,\n} from '@genshin-optimizer/consts'\nimport { useBoolState } from '@genshin-optimizer/react-util'\nimport { iconInlineProps } from '@genshin-optimizer/svgicons'\nimport { Settings, SwapHoriz } from '@mui/icons-material'\nimport {\n  Box,\n  Button,\n  CardContent,\n  Divider,\n  Grid,\n  ListItem,\n  Stack,\n  Tooltip,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@mui/material'\nimport {\n  lazy,\n  Suspense,\n  useCallback,\n  useContext,\n  useDeferredValue,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { useTranslation } from 'react-i18next'\nimport SetEffectDisplay from '../../../../Components/Artifact/SetEffectDisplay'\nimport SlotIcon from '../../../../Components/Artifact/SlotIcon'\nimport SubstatToggle from '../../../../Components/Artifact/SubstatToggle'\nimport CardDark from '../../../../Components/Card/CardDark'\nimport CardLight from '../../../../Components/Card/CardLight'\nimport DocumentDisplay from '../../../../Components/DocumentDisplay'\nimport {\n  BasicFieldDisplay,\n  FieldDisplayList,\n} from '../../../../Components/FieldDisplay'\nimport ModalWrapper from '../../../../Components/ModalWrapper'\nimport PercentBadge from '../../../../Components/PercentBadge'\nimport { CharacterContext } from '../../../../Context/CharacterContext'\nimport { DataContext } from '../../../../Context/DataContext'\nimport { dataSetEffects } from '../../../../Data/Artifacts'\nimport Artifact from '../../../../Data/Artifacts/Artifact'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport { uiInput as input } from '../../../../Formula'\nimport ArtifactCard from '../../../../PageArtifact/ArtifactCard'\nimport WeaponCard from '../../../../PageWeapon/WeaponCard'\nimport useCharMeta from '../../../../ReactHooks/useCharMeta'\nimport type { IFieldDisplay } from '../../../../Types/fieldDisplay'\nimport ArtifactSwapModal from './ArtifactSwapModal'\nimport WeaponSwapModal from './WeaponSwapModal'\n\nconst WeaponEditor = lazy(() => import('../../../../PageWeapon/WeaponEditor'))\n\nexport default function EquipmentSection() {\n  const {\n    character: { equippedWeapon, key: characterKey },\n    characterSheet,\n  } = useContext(CharacterContext)\n  const { teamData, data } = useContext(DataContext)\n  const weaponSheet = teamData[characterKey]?.weaponSheet\n  const [weaponId, setweaponId] = useState('')\n  const showWeapon = useCallback(\n    () => setweaponId(equippedWeapon),\n    [equippedWeapon]\n  )\n  const hideWeapon = useCallback(() => setweaponId(''), [])\n\n  //triggers when character swap weapons\n  useEffect(() => {\n    if (weaponId && weaponId !== equippedWeapon) setweaponId(equippedWeapon)\n  }, [weaponId, equippedWeapon])\n\n  const theme = useTheme()\n  const breakpoint = useMediaQuery(theme.breakpoints.up('lg'))\n\n  const weaponDoc = useMemo(\n    () =>\n      weaponSheet &&\n      weaponSheet.document.length > 0 && (\n        <CardLight>\n          <Box p={1}>\n            <DocumentDisplay sections={weaponSheet.document} />\n          </Box>\n        </CardLight>\n      ),\n    [weaponSheet]\n  )\n  const { rvFilter } = useCharMeta(characterKey)\n  const deferredRvFilter = useDeferredValue(rvFilter)\n  const deferredRvSet = useMemo(\n    () => new Set(deferredRvFilter),\n    [deferredRvFilter]\n  )\n  return (\n    <Box>\n      <Suspense fallback={false}>\n        <WeaponEditor\n          weaponId={weaponId}\n          footer\n          onClose={hideWeapon}\n          extraButtons={\n            <LargeWeaponSwapButton\n              weaponTypeKey={characterSheet.weaponTypeKey}\n            />\n          }\n        />\n      </Suspense>\n      <Grid container spacing={1}>\n        {breakpoint && (\n          <Grid\n            item\n            xs={12}\n            md={12}\n            lg={3}\n            xl={3}\n            sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n          >\n            {weaponDoc && weaponDoc}\n            <ArtifactSectionCard />\n          </Grid>\n        )}\n        <Grid item xs={12} md={12} lg={9} xl={9} container spacing={1}>\n          <Grid\n            item\n            xs={12}\n            sm={6}\n            md={4}\n            display=\"flex\"\n            flexDirection=\"column\"\n            gap={1}\n          >\n            <WeaponCard\n              weaponId={equippedWeapon}\n              onEdit={showWeapon}\n              canEquip\n              extraButtons={\n                <WeaponSwapButton\n                  weaponTypeKey={characterSheet.weaponTypeKey}\n                />\n              }\n            />\n          </Grid>\n          {allArtifactSlotKeys.map((slotKey) => (\n            <Grid item xs={12} sm={6} md={4} key={slotKey}>\n              {data.get(input.art[slotKey].id).value ? (\n                <ArtifactCard\n                  artifactId={data.get(input.art[slotKey].id).value?.toString()}\n                  effFilter={deferredRvSet}\n                  extraButtons={<ArtifactSwapButton slotKey={slotKey} />}\n                  editorProps={{}}\n                  canEquip\n                />\n              ) : (\n                <ArtSwapCard slotKey={slotKey} />\n              )}\n            </Grid>\n          ))}\n        </Grid>\n        {!breakpoint && (\n          <Grid item xs={12} md={12} xl={3} container spacing={1}>\n            {weaponDoc && (\n              <Grid item xs={12} md={6} lg={4}>\n                {weaponDoc}\n              </Grid>\n            )}\n            <Grid\n              item\n              xs={12}\n              md={6}\n              lg={4}\n              sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n            >\n              <ArtifactSectionCard />\n            </Grid>\n          </Grid>\n        )}\n      </Grid>\n    </Box>\n  )\n}\nfunction ArtSwapCard({ slotKey }: { slotKey: ArtifactSlotKey }) {\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  const { t } = useTranslation('artifact')\n  return (\n    <CardLight\n      sx={{\n        height: '100%',\n        width: '100%',\n        minHeight: 300,\n        display: 'flex',\n        flexDirection: 'column',\n      }}\n    >\n      <CardContent>\n        <Typography>\n          <SlotIcon iconProps={iconInlineProps} slotKey={slotKey} />{' '}\n          {t(`slotName.${slotKey}`)}\n        </Typography>\n      </CardContent>\n      <Divider />\n      <Box\n        sx={{\n          flexGrow: 1,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <ArtifactSwapModal\n          slotKey={slotKey}\n          show={show}\n          onClose={onClose}\n          onChangeId={(id) =>\n            database.arts.set(id, {\n              location: charKeyToLocCharKey(characterKey),\n            })\n          }\n        />\n        <Button onClick={onOpen} color=\"info\" sx={{ borderRadius: '1em' }}>\n          <SwapHoriz sx={{ height: 100, width: 100 }} />\n        </Button>\n      </Box>\n    </CardLight>\n  )\n}\nfunction WeaponSwapButton({ weaponTypeKey }: { weaponTypeKey: WeaponTypeKey }) {\n  const { t } = useTranslation('page_character')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return (\n    <>\n      <Tooltip\n        title={<Typography>{t`tabEquip.swapWeapon`}</Typography>}\n        placement=\"top\"\n        arrow\n      >\n        <Button color=\"info\" size=\"small\" onClick={onOpen}>\n          <SwapHoriz />\n        </Button>\n      </Tooltip>\n      <WeaponSwapModal\n        weaponTypeKey={weaponTypeKey}\n        onChangeId={(id) =>\n          database.weapons.set(id, {\n            location: charKeyToLocCharKey(characterKey),\n          })\n        }\n        show={show}\n        onClose={onClose}\n      />\n    </>\n  )\n}\nfunction LargeWeaponSwapButton({\n  weaponTypeKey,\n}: {\n  weaponTypeKey: WeaponTypeKey\n}) {\n  const { t } = useTranslation('page_character')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return (\n    <>\n      <Button\n        color=\"info\"\n        onClick={onOpen}\n        startIcon={<SwapHoriz />}\n      >{t`tabEquip.swapWeapon`}</Button>\n      <WeaponSwapModal\n        weaponTypeKey={weaponTypeKey}\n        onChangeId={(id) =>\n          database.weapons.set(id, {\n            location: charKeyToLocCharKey(characterKey),\n          })\n        }\n        show={show}\n        onClose={onClose}\n      />\n    </>\n  )\n}\nfunction ArtifactSwapButton({ slotKey }: { slotKey: ArtifactSlotKey }) {\n  const { t } = useTranslation('page_character')\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const [show, onOpen, onClose] = useBoolState()\n  return (\n    <>\n      <Tooltip\n        title={<Typography>{t`tabEquip.swapArt`}</Typography>}\n        placement=\"top\"\n        arrow\n      >\n        <Button color=\"info\" size=\"small\" onClick={onOpen}>\n          <SwapHoriz />\n        </Button>\n      </Tooltip>\n      <ArtifactSwapModal\n        slotKey={slotKey}\n        show={show}\n        onClose={onClose}\n        onChangeId={(id) =>\n          database.arts.set(id, { location: charKeyToLocCharKey(characterKey) })\n        }\n      />\n    </>\n  )\n}\nfunction ArtifactSectionCard() {\n  const { t } = useTranslation(['page_character', 'artifact'])\n  const { database } = useContext(DatabaseContext)\n  const {\n    character,\n    character: { key: characterKey, equippedArtifacts },\n  } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const hasEquipped = useMemo(\n    () => !!Object.values(equippedArtifacts).filter((i) => i).length,\n    [equippedArtifacts]\n  )\n  const unequipArts = useCallback(() => {\n    if (!character) return\n    if (\n      !window.confirm(\n        'Do you want to move all currently equipped artifacts to inventory?'\n      )\n    )\n      return\n    Object.values(equippedArtifacts).forEach((aid) =>\n      database.arts.set(aid, { location: '' })\n    )\n  }, [character, database, equippedArtifacts])\n\n  const setEffects = useMemo(() => dataSetEffects(data), [data])\n  const { rvFilter } = useCharMeta(characterKey)\n  const setRVFilter = useCallback(\n    (rvFilter) => database.charMeta.set(characterKey, { rvFilter }),\n    [database, characterKey]\n  )\n\n  const [show, onShow, onHide] = useBoolState()\n  const deferredrvFilter = useDeferredValue(rvFilter)\n  const { rvField, rvmField } = useMemo(() => {\n    const {\n      currentEfficiency,\n      currentEfficiency_,\n      maxEfficiency,\n      maxEfficiency_,\n    } = Object.values(equippedArtifacts).reduce(\n      (a, artid) => {\n        const art = database.arts.get(artid)\n        if (art) {\n          const { currentEfficiency, maxEfficiency } =\n            Artifact.getArtifactEfficiency(art, new Set(deferredrvFilter))\n          const {\n            currentEfficiency: currentEfficiency_,\n            maxEfficiency: maxEfficiency_,\n          } = Artifact.getArtifactEfficiency(art, new Set(allSubstatKeys))\n          a.currentEfficiency = a.currentEfficiency + currentEfficiency\n          a.maxEfficiency = a.maxEfficiency + maxEfficiency\n\n          a.currentEfficiency_ = a.currentEfficiency_ + currentEfficiency_\n          a.maxEfficiency_ = a.maxEfficiency_ + maxEfficiency_\n        }\n        return a\n      },\n      {\n        currentEfficiency: 0,\n        currentEfficiency_: 0,\n        maxEfficiency: 0,\n        maxEfficiency_: 0,\n      }\n    )\n    const rvField: IFieldDisplay = {\n      text: t`artifact:editor.curSubEff`,\n      value: !(currentEfficiency - currentEfficiency_) ? (\n        <PercentBadge value={currentEfficiency} max={4500} valid />\n      ) : (\n        <span>\n          <PercentBadge value={currentEfficiency} max={4500} valid /> /{' '}\n          <PercentBadge value={currentEfficiency_} max={4500} valid />\n        </span>\n      ),\n    }\n    const rvmField: IFieldDisplay = {\n      text: t`artifact:editor.maxSubEff`,\n      canShow: () => !!(currentEfficiency_ - maxEfficiency_),\n      value: !(maxEfficiency - maxEfficiency_) ? (\n        <PercentBadge value={maxEfficiency} max={4500} valid />\n      ) : (\n        <span>\n          <PercentBadge value={maxEfficiency} max={4500} valid /> /{' '}\n          <PercentBadge value={maxEfficiency_} max={4500} valid />\n        </span>\n      ),\n    }\n    return { rvField, rvmField }\n  }, [t, deferredrvFilter, equippedArtifacts, database])\n\n  return (\n    <CardLight>\n      {hasEquipped && (\n        <Button\n          color=\"error\"\n          onClick={unequipArts}\n          fullWidth\n          sx={{ borderBottomRightRadius: 0, borderBottomLeftRadius: 0 }}\n        >{t`tabEquip.unequipArts`}</Button>\n      )}\n      <Box p={1}>\n        <Stack spacing={1}>\n          <CardDark>\n            <Button\n              fullWidth\n              color=\"info\"\n              startIcon={<Settings />}\n              sx={{ borderBottomLeftRadius: 0, borderBottomRightRadius: 0 }}\n              onClick={onShow}\n            >\n              RV Filter\n            </Button>\n            <ModalWrapper open={show} onClose={onHide}>\n              <CardDark>\n                <CardContent>\n                  <Typography\n                    textAlign=\"center\"\n                    gutterBottom\n                    variant=\"h6\"\n                  >{t`artifact:efficiencyFilter.title`}</Typography>\n                  <SubstatToggle\n                    selectedKeys={rvFilter}\n                    onChange={setRVFilter}\n                  />\n                </CardContent>\n              </CardDark>\n            </ModalWrapper>\n            <FieldDisplayList>\n              <BasicFieldDisplay field={rvField} component={ListItem} />\n              {rvmField?.canShow?.(data) && (\n                <BasicFieldDisplay field={rvmField} component={ListItem} />\n              )}\n            </FieldDisplayList>\n          </CardDark>\n          {setEffects &&\n            Object.entries(setEffects).flatMap(([setKey, setNumKeyArr]) =>\n              setNumKeyArr.map((setNumKey) => (\n                <CardDark\n                  key={setKey + setNumKey}\n                  sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}\n                >\n                  <SetEffectDisplay\n                    key={setKey + setNumKey}\n                    setKey={setKey}\n                    setNumKey={setNumKey}\n                  />\n                </CardDark>\n              ))\n            )}\n        </Stack>\n      </Box>\n    </CardLight>\n  )\n}\n","import { charCard } from '@genshin-optimizer/char-cards'\nimport type { AscensionKey, CharacterKey } from '@genshin-optimizer/consts'\nimport { allArtifactSlotKeys } from '@genshin-optimizer/consts'\nimport { imgAssets } from '@genshin-optimizer/gi-assets'\nimport { getLevelString } from '@genshin-optimizer/gi-util'\nimport { splash } from '@genshin-optimizer/silly-wisher'\nimport { Favorite, FavoriteBorder } from '@mui/icons-material'\nimport {\n  Badge,\n  Box,\n  CardActionArea,\n  Chip,\n  Grid,\n  IconButton,\n  Stack,\n  Typography,\n} from '@mui/material'\nimport { useCallback, useContext, useRef } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport ArtifactCardNano from '../../../../Components/Artifact/ArtifactCardNano'\nimport CardLight from '../../../../Components/Card/CardLight'\nimport CharacterCardPico, {\n  BlankCharacterCardPico,\n} from '../../../../Components/Character/CharacterCardPico'\nimport StatDisplayComponent from '../../../../Components/Character/StatDisplayComponent'\nimport ImgIcon from '../../../../Components/Image/ImgIcon'\nimport SqBadge from '../../../../Components/SqBadge'\nimport { StarsDisplay } from '../../../../Components/StarDisplay'\nimport WeaponCardNano from '../../../../Components/Weapon/WeaponCardNano'\nimport { CharacterContext } from '../../../../Context/CharacterContext'\nimport { DataContext } from '../../../../Context/DataContext'\nimport { SillyContext } from '../../../../Context/SillyContext'\nimport type { TalentSheetElementKey } from '../../../../Data/Characters/ICharacterSheet'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport { uiInput as input } from '../../../../Formula'\nimport { ElementIcon } from '../../../../KeyMap/StatIcon'\nimport useCharacterReducer from '../../../../ReactHooks/useCharacterReducer'\nimport useCharMeta from '../../../../ReactHooks/useCharMeta'\nimport useDBMeta from '../../../../ReactHooks/useDBMeta'\nimport { range } from '../../../../Util/Util'\nimport EquipmentSection from './EquipmentSection'\n\nexport default function TabOverview() {\n  const scrollRef = useRef<HTMLDivElement>()\n  const onScroll = useCallback(\n    () => scrollRef?.current?.scrollIntoView?.({ behavior: 'smooth' }),\n    [scrollRef]\n  )\n\n  return (\n    <Stack spacing={1}>\n      <Grid container spacing={1} sx={{ justifyContent: 'center' }}>\n        <Grid item xs={8} sm={5} md={4} lg={2.3}>\n          <CharacterProfileCard />\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          sm={7}\n          md={8}\n          lg={9.7}\n          sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n        >\n          <EquipmentRow onClick={onScroll} />\n          <CardLight sx={{ flexGrow: 1, p: 1 }}>\n            <StatDisplayComponent />\n          </CardLight>\n        </Grid>\n      </Grid>\n      <Box ref={scrollRef}>\n        <EquipmentSection />\n      </Box>\n    </Stack>\n  )\n}\nfunction EquipmentRow({ onClick }: { onClick: () => void }) {\n  const {\n    character: { equippedWeapon },\n  } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n\n  return (\n    <Grid container spacing={1} columns={{ xs: 2, sm: 2, md: 3, lg: 6, xl: 6 }}>\n      <Grid item xs={1}>\n        <WeaponCardNano\n          weaponId={equippedWeapon}\n          BGComponent={CardLight}\n          onClick={onClick}\n        />\n      </Grid>\n      {allArtifactSlotKeys.map((slotKey) => (\n        <Grid item key={slotKey} xs={1}>\n          <ArtifactCardNano\n            artifactId={data.get(input.art[slotKey].id).value?.toString()}\n            slotKey={slotKey}\n            BGComponent={CardLight}\n            onClick={onClick}\n          />\n        </Grid>\n      ))}\n    </Grid>\n  )\n}\n/* Image card with star and name and level */\nfunction CharacterProfileCard() {\n  const { silly } = useContext(SillyContext)\n  const {\n    characterSheet,\n    character: { key: characterKey, team },\n  } = useContext(CharacterContext)\n  const { gender } = useDBMeta()\n  const { data } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(characterKey)\n  const navigate = useNavigate()\n  const level = data.get(input.lvl).value\n  const ascension = data.get(input.asc).value as AscensionKey\n  const constellation = data.get(input.constellation).value\n  const tlvl = {\n    auto: data.get(input.total.auto).value,\n    skill: data.get(input.total.skill).value,\n    burst: data.get(input.total.burst).value,\n  }\n  const tBoost = {\n    auto: data.get(input.total.autoBoost).value,\n    skill: data.get(input.total.skillBoost).value,\n    burst: data.get(input.total.burstBoost).value,\n  }\n  const sillySplash = splash(characterKey, gender)\n  const card = charCard(characterKey, gender)\n\n  return (\n    <CardLight sx={{ height: '100%' }}>\n      {silly && sillySplash ? (\n        <SillyCoverArea src={sillySplash} level={level} ascension={ascension} />\n      ) : (\n        <CoverArea src={card} level={level} ascension={ascension} />\n      )}\n      <Box>\n        <CardActionArea sx={{ p: 1 }} onClick={() => navigate('talent')}>\n          <Grid container spacing={1} mt={-1}>\n            {(['auto', 'skill', 'burst'] as TalentSheetElementKey[]).map(\n              (tKey) => (\n                <Grid item xs={4} key={tKey}>\n                  <Badge\n                    badgeContent={tlvl[tKey]}\n                    color={tBoost[tKey] ? 'info' : 'secondary'}\n                    overlap=\"circular\"\n                    anchorOrigin={{\n                      vertical: 'bottom',\n                      horizontal: 'right',\n                    }}\n                    sx={{\n                      width: '100%',\n                      height: '100%',\n                      '& > .MuiBadge-badge': {\n                        fontSize: '1.25em',\n                        padding: '.25em .4em',\n                        borderRadius: '.5em',\n                        lineHeight: 1,\n                        height: '1.25em',\n                      },\n                    }}\n                  >\n                    <Box\n                      component=\"img\"\n                      src={characterSheet.getTalentOfKey(tKey)?.img}\n                      width=\"100%\"\n                      height=\"auto\"\n                    />\n                  </Badge>\n                </Grid>\n              )\n            )}\n          </Grid>\n        </CardActionArea>\n        <Typography sx={{ textAlign: 'center', mt: 1 }} variant=\"h6\">\n          {characterSheet.constellationName}\n        </Typography>\n        <Grid container spacing={1}>\n          {range(1, 6).map((i) => (\n            <Grid item xs={4} key={i}>\n              <CardActionArea\n                onClick={() =>\n                  characterDispatch({\n                    constellation: i === constellation ? i - 1 : i,\n                  })\n                }\n              >\n                <Box\n                  component=\"img\"\n                  src={\n                    characterSheet.getTalentOfKey(\n                      `constellation${i}` as TalentSheetElementKey\n                    )?.img\n                  }\n                  sx={{\n                    ...(constellation >= i\n                      ? {}\n                      : { filter: 'brightness(50%)' }),\n                  }}\n                  width=\"100%\"\n                  height=\"auto\"\n                />\n              </CardActionArea>\n            </Grid>\n          ))}\n        </Grid>\n        <CardActionArea sx={{ p: 1 }} onClick={() => navigate('teambuffs')}>\n          <Grid container columns={3} spacing={1}>\n            {range(0, 2).map((i) => (\n              <Grid key={i} item xs={1} height=\"100%\">\n                {team[i] ? (\n                  <CharacterCardPico characterKey={team[i] as CharacterKey} />\n                ) : (\n                  <BlankCharacterCardPico index={i} />\n                )}\n              </Grid>\n            ))}\n          </Grid>\n        </CardActionArea>\n      </Box>\n    </CardLight>\n  )\n}\nfunction SillyCoverArea({ src, level, ascension }) {\n  const { characterSheet } = useContext(CharacterContext)\n\n  return (\n    <Box sx={{ position: 'relative' }}>\n      <Box src={src} component=\"img\" width=\"100%\" height=\"auto\" />\n      <Box sx={{ width: '100%', height: '100%' }}>\n        <Box\n          sx={{\n            opacity: 0.85,\n            width: '100%',\n            display: 'flex',\n            justifyContent: 'center',\n            px: 1,\n          }}\n        >\n          <CharChip />\n        </Box>\n        <Typography\n          variant=\"h6\"\n          sx={{\n            width: '100%',\n            opacity: 0.75,\n            textAlign: 'center',\n          }}\n        >\n          <StarsDisplay stars={characterSheet.rarity} colored />\n        </Typography>\n        <FavoriteButton />\n        <LevelBadge level={level} ascension={ascension} />\n      </Box>\n    </Box>\n  )\n}\n\nfunction CoverArea({ src, level, ascension }) {\n  const { characterSheet } = useContext(CharacterContext)\n\n  return (\n    <Box sx={{ position: 'relative' }}>\n      <Box sx={{ position: 'absolute', width: '100%', height: '100%' }}>\n        <Typography\n          variant=\"h6\"\n          sx={{\n            position: 'absolute',\n            width: '100%',\n            left: '50%',\n            bottom: 0,\n            transform: 'translate(-50%, -50%)',\n            opacity: 0.75,\n            textAlign: 'center',\n          }}\n        >\n          <StarsDisplay stars={characterSheet.rarity} colored />\n        </Typography>\n        <Box\n          sx={{\n            position: 'absolute',\n            left: '50%',\n            bottom: '7%',\n            transform: 'translate(-50%, -50%)',\n            opacity: 0.85,\n            width: '100%',\n            display: 'flex',\n            justifyContent: 'center',\n            px: 1,\n          }}\n        >\n          <CharChip />\n        </Box>\n        <FavoriteButton />\n        <LevelBadge level={level} ascension={ascension} />\n      </Box>\n      <Box src={src} component=\"img\" width=\"100%\" height=\"auto\"></Box>\n    </Box>\n  )\n}\n\nfunction CharChip() {\n  const { characterSheet } = useContext(CharacterContext)\n  const charEle = characterSheet.elementKey\n  return (\n    <Chip\n      color={charEle}\n      sx={{ height: 'auto' }}\n      label={\n        <Typography\n          variant=\"h6\"\n          sx={{ display: 'flex', gap: 1, alignItems: 'center' }}\n        >\n          <ElementIcon ele={charEle} />\n          <Box sx={{ whiteSpace: 'normal', textAlign: 'center' }}>\n            {characterSheet.name}\n          </Box>\n          <ImgIcon\n            src={imgAssets.weaponTypes?.[characterSheet.weaponTypeKey]}\n          />\n        </Typography>\n      }\n    />\n  )\n}\nfunction LevelBadge({\n  level,\n  ascension,\n}: {\n  level: number\n  ascension: AscensionKey\n}) {\n  return (\n    <Typography\n      sx={{ p: 1, position: 'absolute', right: 0, top: 0, opacity: 0.8 }}\n    >\n      <SqBadge>{getLevelString(level, ascension)}</SqBadge>\n    </Typography>\n  )\n}\nfunction FavoriteButton() {\n  const {\n    character: { key: characterKey },\n  } = useContext(CharacterContext)\n  const { database } = useContext(DatabaseContext)\n  const { favorite } = useCharMeta(characterKey)\n  return (\n    <Box sx={{ position: 'absolute', left: 0, top: 0 }}>\n      <IconButton\n        sx={{ p: 1 }}\n        color=\"error\"\n        onClick={() =>\n          database.charMeta.set(characterKey, { favorite: !favorite })\n        }\n      >\n        {favorite ? <Favorite /> : <FavoriteBorder />}\n      </IconButton>\n    </Box>\n  )\n}\n","import {\n  Box,\n  CardActionArea,\n  CardContent,\n  Grid,\n  MenuItem,\n  Typography,\n  useMediaQuery,\n  useTheme,\n} from '@mui/material'\nimport { useCallback, useContext, useMemo } from 'react'\nimport CardDark from '../../../Components/Card/CardDark'\nimport CardLight from '../../../Components/Card/CardLight'\nimport ConditionalWrapper from '../../../Components/ConditionalWrapper'\nimport DocumentDisplay from '../../../Components/DocumentDisplay'\nimport DropdownButton from '../../../Components/DropdownMenu/DropdownButton'\nimport { NodeFieldDisplay } from '../../../Components/FieldDisplay'\nimport { CharacterContext } from '../../../Context/CharacterContext'\nimport { DataContext } from '../../../Context/DataContext'\nimport type { TalentSheetElementKey } from '../../../Data/Characters/ICharacterSheet'\nimport { uiInput as input } from '../../../Formula'\nimport type { NumNode } from '../../../Formula/type'\nimport type { NodeDisplay } from '../../../Formula/uiData'\nimport useCharacterReducer from '../../../ReactHooks/useCharacterReducer'\nimport type { DocumentSection } from '../../../Types/sheet'\nimport { range } from '../../../Util/Util'\n\nconst talentSpacing = {\n  xs: 12,\n  sm: 6,\n  md: 4,\n}\n\nexport default function CharacterTalentPane() {\n  const { character, characterSheet } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n  const characterDispatch = useCharacterReducer(character.key)\n  const skillBurstList = [\n    ['auto', 'Normal/Charged Attack'],\n    ['skill', 'Elemental Skill'],\n    ['burst', 'Elemental Burst'],\n  ] as [TalentSheetElementKey, string][]\n  const passivesList: [\n    tKey: TalentSheetElementKey,\n    tText: string,\n    asc: number\n  ][] = [\n    ['passive1', 'Unlocked at Ascension 1', 1],\n    ['passive2', 'Unlocked at Ascension 4', 4],\n    ['passive3', 'Unlocked by Default', 0],\n  ]\n  const ascension = data.get(input.asc).value\n  const constellation = data.get(input.constellation).value\n\n  const theme = useTheme()\n  const grlg = useMediaQuery(theme.breakpoints.up('lg'))\n  const constellationCards = useMemo(\n    () =>\n      range(1, 6).map((i) => (\n        <SkillDisplayCard\n          talentKey={`constellation${i}` as TalentSheetElementKey}\n          subtitle={`Constellation Lv. ${i}`}\n          onClickTitle={() =>\n            characterDispatch({\n              constellation: i === constellation ? i - 1 : i,\n            })\n          }\n        />\n      )),\n    [constellation, characterDispatch]\n  )\n  return (\n    <>\n      <ReactionDisplay />\n      <Grid container spacing={1}>\n        {/* constellations for 4column */}\n        {grlg && (\n          <Grid\n            item\n            xs={12}\n            md={12}\n            lg={3}\n            sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n          >\n            <CardLight>\n              <CardContent>\n                <Typography variant=\"h6\" sx={{ textAlign: 'center' }}>\n                  Constellation Lv. {constellation}\n                </Typography>\n              </CardContent>\n            </CardLight>\n            {constellationCards.map((c, i) => (\n              <Box key={i} sx={{ opacity: constellation >= i + 1 ? 1 : 0.5 }}>\n                {c}\n              </Box>\n            ))}\n          </Grid>\n        )}\n        <Grid item xs={12} md={12} lg={9} container spacing={1}>\n          {/* auto, skill, burst */}\n          {skillBurstList.map(([tKey, tText]) => (\n            <Grid item key={tKey} {...talentSpacing}>\n              <SkillDisplayCard talentKey={tKey} subtitle={tText} />\n            </Grid>\n          ))}\n          {!!characterSheet.getTalentOfKey('sprint') && (\n            <Grid item {...talentSpacing}>\n              <SkillDisplayCard\n                talentKey=\"sprint\"\n                subtitle=\"Alternative Sprint\"\n              />\n            </Grid>\n          )}\n          {!!characterSheet.getTalentOfKey('passive') && (\n            <Grid item {...talentSpacing}>\n              <SkillDisplayCard talentKey=\"passive\" subtitle=\"Passive\" />\n            </Grid>\n          )}\n          {/* passives */}\n          {passivesList.map(([tKey, tText, asc]) => {\n            const enabled = ascension >= asc\n            if (!characterSheet.getTalentOfKey(tKey)) return null\n            return (\n              <Grid\n                item\n                key={tKey}\n                style={{ opacity: enabled ? 1 : 0.5 }}\n                {...talentSpacing}\n              >\n                <SkillDisplayCard talentKey={tKey} subtitle={tText} />\n              </Grid>\n            )\n          })}\n        </Grid>\n        {/* constellations for < 4 columns */}\n        {!grlg && (\n          <Grid item xs={12} md={12} lg={3} container spacing={1}>\n            <Grid item xs={12}>\n              <CardLight>\n                <CardContent>\n                  <Typography variant=\"h6\" sx={{ textAlign: 'center' }}>\n                    Constellation Lv. {constellation}\n                  </Typography>\n                </CardContent>\n              </CardLight>\n            </Grid>\n            {constellationCards.map((c, i) => (\n              <Grid\n                item\n                key={i}\n                sx={{ opacity: constellation >= i + 1 ? 1 : 0.5 }}\n                {...talentSpacing}\n              >\n                {c}\n              </Grid>\n            ))}\n          </Grid>\n        )}\n      </Grid>\n    </>\n  )\n}\nfunction ReactionDisplay() {\n  const { data } = useContext(DataContext)\n  const reaction = data.getDisplay().reaction as { [key: string]: NodeDisplay }\n  return (\n    <CardLight>\n      <CardContent>\n        <Grid container spacing={1}>\n          {Object.entries(reaction)\n            .filter(([_, node]) => !node.isEmpty)\n            .map(([key, node]) => {\n              return (\n                <Grid item key={key}>\n                  <CardDark>\n                    <CardContent sx={{ p: 1, '&:last-child': { pb: 1 } }}>\n                      <NodeFieldDisplay node={node} />\n                    </CardContent>\n                  </CardDark>\n                </Grid>\n              )\n            })}\n        </Grid>\n      </CardContent>\n    </CardLight>\n  )\n}\n\nconst talentLimits = [1, 1, 2, 4, 6, 8, 10]\ntype SkillDisplayCardProps = {\n  talentKey: TalentSheetElementKey\n  subtitle: string\n  onClickTitle?: (any) => any\n}\nfunction SkillDisplayCard({\n  talentKey,\n  subtitle,\n  onClickTitle,\n}: SkillDisplayCardProps) {\n  const {\n    character: { talent },\n    characterSheet,\n    characterDispatch,\n  } = useContext(CharacterContext)\n  const { data } = useContext(DataContext)\n\n  const actionWrapperFunc = useCallback(\n    (children) => (\n      <CardActionArea onClick={onClickTitle}>{children}</CardActionArea>\n    ),\n    [onClickTitle]\n  )\n\n  const setTalentLevel = useCallback(\n    (tKey: TalentSheetElementKey, newTalentLevelKey: number) =>\n      characterDispatch({ talent: { ...talent, [tKey]: newTalentLevelKey } }),\n    [talent, characterDispatch]\n  )\n\n  let header: Displayable | null = null\n\n  if (talentKey in talent) {\n    const levelBoost = data.get(\n      input.total[`${talentKey}Boost`] as NumNode\n    ).value\n    const level = data.get(input.total[talentKey]).value\n    const asc = data.get(input.asc).value\n\n    header = (\n      <DropdownButton\n        fullWidth\n        title={`Talent Lv. ${level}`}\n        color={levelBoost ? 'info' : 'primary'}\n        sx={{ borderRadius: 0 }}\n      >\n        {range(1, talentLimits[asc]).map((i) => (\n          <MenuItem\n            key={i}\n            selected={talent[talentKey] === i}\n            disabled={talent[talentKey] === i}\n            onClick={() => setTalentLevel(talentKey, i)}\n          >\n            Talent Lv. {i + levelBoost}\n          </MenuItem>\n        ))}\n      </DropdownButton>\n    )\n  }\n  const talentSheet = characterSheet.getTalentOfKey(talentKey)\n\n  // Hide header if the header matches the current talent\n  const hideHeader = (section: DocumentSection): boolean => {\n    const headerAction = section.header?.action\n    if (headerAction && typeof headerAction !== 'string') {\n      const key: string = headerAction.props.children.props.key18\n      return key.includes(talentKey)\n    }\n    return false\n  }\n\n  return (\n    <CardLight sx={{ height: '100%' }}>\n      {header}\n      <CardContent>\n        <ConditionalWrapper\n          condition={!!onClickTitle}\n          wrapper={actionWrapperFunc}\n        >\n          <Grid container sx={{ flexWrap: 'nowrap' }}>\n            <Grid item>\n              <Box\n                component=\"img\"\n                src={talentSheet?.img}\n                sx={{ width: 60, height: 'auto' }}\n              />\n            </Grid>\n            <Grid item flexGrow={1} sx={{ pl: 1 }}>\n              <Typography variant=\"h6\">{talentSheet?.name}</Typography>\n              <Typography variant=\"subtitle1\">{subtitle}</Typography>\n            </Grid>\n          </Grid>\n        </ConditionalWrapper>\n        {/* Display document sections */}\n        {talentSheet?.sections ? (\n          <DocumentDisplay\n            sections={talentSheet.sections}\n            hideDesc\n            hideHeader={hideHeader}\n          />\n        ) : null}\n      </CardContent>\n    </CardLight>\n  )\n}\n","import type { CharacterKey } from '@genshin-optimizer/consts'\nimport { charKeyToLocGenderedCharKey } from '@genshin-optimizer/consts'\nimport { PersonAdd } from '@mui/icons-material'\nimport type { AutocompleteProps } from '@mui/material'\nimport {\n  Box,\n  CardContent,\n  CardHeader,\n  Divider,\n  Grid,\n  Skeleton,\n  Typography,\n} from '@mui/material'\nimport { Suspense, useCallback, useContext, useMemo } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport CardLight from '../../../Components/Card/CardLight'\nimport CharacterCard from '../../../Components/Character/CharacterCard'\nimport ColorText from '../../../Components/ColoredText'\nimport DocumentDisplay from '../../../Components/DocumentDisplay'\nimport { NodeFieldDisplay } from '../../../Components/FieldDisplay'\nimport type { GeneralAutocompleteOption } from '../../../Components/GeneralAutocomplete'\nimport { GeneralAutocomplete } from '../../../Components/GeneralAutocomplete'\nimport CharIconSide from '../../../Components/Image/CharIconSide'\nimport { InfoTooltipInline } from '../../../Components/InfoTooltip'\nimport type { CharacterContextObj } from '../../../Context/CharacterContext'\nimport { CharacterContext } from '../../../Context/CharacterContext'\nimport type { dataContextObj } from '../../../Context/DataContext'\nimport { DataContext } from '../../../Context/DataContext'\nimport { SillyContext } from '../../../Context/SillyContext'\nimport { dataSetEffects, getArtSheet } from '../../../Data/Artifacts'\nimport { getCharSheet } from '../../../Data/Characters'\nimport type CharacterSheet from '../../../Data/Characters/CharacterSheet'\nimport { resonanceSheets } from '../../../Data/Resonance'\nimport { DatabaseContext } from '../../../Database/Database'\nimport type { NodeDisplay } from '../../../Formula/uiData'\nimport useCharSelectionCallback from '../../../ReactHooks/useCharSelectionCallback'\nimport useDBMeta from '../../../ReactHooks/useDBMeta'\nimport { objPathValue, range } from '../../../Util/Util'\n\nexport default function TabTeambuffs() {\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" gap={1} alignItems=\"stretch\">\n      <Grid container spacing={1}>\n        <Grid\n          item\n          xs={12}\n          md={6}\n          lg={3}\n          sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n        >\n          <TeamBuffDisplay />\n          <ResonanceDisplay />\n        </Grid>\n        {range(0, 2).map((i) => (\n          <Grid item xs={12} md={6} lg={3} key={i}>\n            <TeammateDisplay index={i} />\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  )\n}\nexport function TeamBuffDisplay() {\n  const { data, oldData } = useContext(DataContext)\n  const teamBuffs = data.getTeamBuff() as any\n  const nodes: Array<[string[], NodeDisplay<number>]> = []\n  Object.entries(teamBuffs.total ?? {}).forEach(\n    ([key, node]: [key: string, node: any]) =>\n      !node.isEmpty && node.value !== 0 && nodes.push([['total', key], node])\n  )\n  Object.entries(teamBuffs.premod ?? {}).forEach(\n    ([key, node]: [key: string, node: any]) =>\n      !node.isEmpty && node.value !== 0 && nodes.push([['premod', key], node])\n  )\n  Object.entries(teamBuffs.enemy ?? {}).forEach(\n    ([key, node]: [key: string, node: any]) =>\n      !node.isEmpty &&\n      typeof node.value === 'number' &&\n      node.value !== 0 &&\n      nodes.push([['enemy', key], node as NodeDisplay<number>])\n  )\n  if (!nodes.length) return null\n  return (\n    <CardLight>\n      <CardContent>\n        <Typography>Team Buffs</Typography>\n      </CardContent>\n      <Divider />\n      <CardContent>\n        <Grid container>\n          {nodes.map(\n            ([path, n]) =>\n              n && (\n                <Grid item xs={12} key={JSON.stringify(n.info)}>\n                  <NodeFieldDisplay\n                    node={n}\n                    oldValue={objPathValue(oldData?.getTeamBuff(), path)?.value}\n                  />\n                </Grid>\n              )\n          )}\n        </Grid>\n      </CardContent>\n    </CardLight>\n  )\n}\nfunction ResonanceDisplay() {\n  const { t } = useTranslation('page_character')\n  const { data } = useContext(DataContext)\n  const {\n    character: { team },\n  } = useContext(CharacterContext)\n  const teamCount = team.reduce((a, t) => a + (t ? 1 : 0), 1)\n  return (\n    <>\n      <CardLight>\n        <CardHeader\n          title={\n            <span>\n              {t('tabTeambuff.team_reso')}{' '}\n              <strong>\n                <ColorText color={teamCount >= 4 ? 'success' : 'warning'}>\n                  ({teamCount}/4)\n                </ColorText>\n              </strong>{' '}\n              <InfoTooltipInline\n                title={<Typography>{t`tabTeambuff.resonance_tip`}</Typography>}\n              />\n            </span>\n          }\n          titleTypographyProps={{ variant: 'subtitle2' }}\n        />\n      </CardLight>\n      {resonanceSheets.map((res, i) => (\n        <CardLight key={i} sx={{ opacity: res.canShow(data) ? 1 : 0.5 }}>\n          <CardHeader\n            title={\n              <span>\n                {res.name}{' '}\n                <InfoTooltipInline\n                  title={<Typography>{res.desc}</Typography>}\n                />\n              </span>\n            }\n            action={res.icon}\n            titleTypographyProps={{ variant: 'subtitle2' }}\n          />\n          {res.canShow(data) && <Divider />}\n          {res.canShow(data) && (\n            <CardContent>\n              <DocumentDisplay sections={res.sections} teamBuffOnly hideDesc />\n            </CardContent>\n          )}\n        </CardLight>\n      ))}\n    </>\n  )\n}\nfunction TeammateDisplay({ index }: { index: number }) {\n  const { teamData } = useContext(DataContext)\n  const { t } = useTranslation('page_character')\n  const {\n    character: active,\n    character: { key: activeCharacterKey },\n    characterDispatch,\n  } = useContext(CharacterContext)\n  const teamMateKey = active.team[index]\n  const team = useMemo(\n    () =>\n      [activeCharacterKey, ...active.team].filter((t, i) => i - 1 !== index),\n    [active.team, activeCharacterKey, index]\n  )\n  const onClickHandler = useCharSelectionCallback()\n  const setTeammate = useCallback(\n    (charKey: CharacterKey | '') =>\n      characterDispatch({ type: 'team', index, charKey }),\n    [index, characterDispatch]\n  )\n\n  const dataBundle = teamData[teamMateKey]\n  const teammateCharacterContext: CharacterContextObj | undefined = useMemo(\n    () =>\n      dataBundle && {\n        character: {\n          ...dataBundle.character,\n          conditional: active.teamConditional[teamMateKey] ?? {},\n        },\n        characterSheet: dataBundle.characterSheet,\n        characterDispatch: (state) => {\n          if (!teamMateKey) return\n          if (!('conditional' in state)) return\n          const { conditional } = state\n          if (!conditional) return\n          characterDispatch({\n            type: 'teamConditional',\n            teamMateKey: teamMateKey,\n            conditional,\n          })\n        },\n      },\n    [active, teamMateKey, dataBundle, characterDispatch]\n  )\n  const teamMateDataContext: dataContextObj | undefined = useMemo(\n    () =>\n      dataBundle && {\n        data: dataBundle.target,\n        teamData: teamData,\n      },\n    [dataBundle, teamData]\n  )\n  return (\n    <CardLight sx={{ overflow: 'visible' }}>\n      <TeammateAutocomplete\n        characterKey={teamMateKey}\n        team={team}\n        setChar={setTeammate}\n        label={t('teammate', { count: index + 1 })}\n      />\n      {teamMateKey && teammateCharacterContext && (\n        <CharacterContext.Provider value={teammateCharacterContext}>\n          {teamMateDataContext && (\n            <DataContext.Provider value={teamMateDataContext}>\n              <CharacterCard\n                characterKey={teamMateKey}\n                onClickHeader={onClickHandler}\n                // Need to wrap these elements with the providers for them to use the correct functions.\n                artifactChildren={\n                  <CharacterContext.Provider value={teammateCharacterContext}>\n                    <DataContext.Provider value={teamMateDataContext}>\n                      <CharArtifactCondDisplay />\n                    </DataContext.Provider>\n                  </CharacterContext.Provider>\n                }\n                weaponChildren={\n                  <CharacterContext.Provider value={teammateCharacterContext}>\n                    <DataContext.Provider value={teamMateDataContext}>\n                      <CharWeaponCondDisplay />\n                    </DataContext.Provider>\n                  </CharacterContext.Provider>\n                }\n                characterChildren={\n                  <CharacterContext.Provider value={teammateCharacterContext}>\n                    <DataContext.Provider value={teamMateDataContext}>\n                      <CharTalentCondDisplay />\n                    </DataContext.Provider>\n                  </CharacterContext.Provider>\n                }\n                isTeammateCard\n              />\n            </DataContext.Provider>\n          )}\n        </CharacterContext.Provider>\n      )}\n    </CardLight>\n  )\n}\nfunction CharArtifactCondDisplay() {\n  const { data } = useContext(DataContext)\n  const sections = useMemo(\n    () =>\n      Object.entries(dataSetEffects(data)).flatMap(([setKey, setNums]) =>\n        setNums.flatMap((sn) => getArtSheet(setKey).setEffectDocument(sn) ?? [])\n      ),\n    [data]\n  )\n  if (!sections) return null\n  return <DocumentDisplay sections={sections} teamBuffOnly={true} />\n}\nfunction CharWeaponCondDisplay() {\n  const {\n    character: { key: charKey },\n  } = useContext(CharacterContext)\n  const { teamData } = useContext(DataContext)\n  const weaponSheet = teamData[charKey]!.weaponSheet\n  if (!weaponSheet.document) return null\n  return <DocumentDisplay sections={weaponSheet.document} teamBuffOnly={true} />\n}\nfunction CharTalentCondDisplay() {\n  const {\n    character: { key: charKey },\n  } = useContext(CharacterContext)\n  const { teamData } = useContext(DataContext)\n  const characterSheet = teamData[charKey]!.characterSheet as CharacterSheet\n  const sections = Object.values(characterSheet.talent).flatMap(\n    (sts) => sts.sections\n  )\n  if (!sections) return null\n  return <DocumentDisplay sections={sections} teamBuffOnly={true} />\n}\n\nfunction TeammateAutocomplete({\n  characterKey,\n  team,\n  label,\n  setChar,\n  autoCompleteProps = {},\n}: {\n  characterKey: CharacterKey | ''\n  team: Array<CharacterKey | ''>\n  label: string\n  setChar: (k: CharacterKey | '') => void\n  autoCompleteProps?: Omit<\n    AutocompleteProps<\n      GeneralAutocompleteOption<CharacterKey | ''>,\n      false,\n      false,\n      false\n    >,\n    'renderInput' | 'onChange' | 'options'\n  >\n}) {\n  const { t } = useTranslation([\n    'sillyWisher_charNames',\n    'page_character',\n    'sheet_gen',\n    'charNames_gen',\n  ])\n  const { database } = useContext(DatabaseContext)\n  const { gender } = useDBMeta()\n  const { silly } = useContext(SillyContext)\n  const namesCB = useCallback(\n    (key: CharacterKey, silly: boolean): string =>\n      key.startsWith('Traveler')\n        ? `${t(\n            `${\n              silly ? 'sillyWisher_charNames' : 'charNames_gen'\n            }:${charKeyToLocGenderedCharKey(key, gender)}`\n          )} (${t(\n            `sheet_gen:element.${getCharSheet(key, gender)?.elementKey}`\n          )})`\n        : t(`${silly ? 'sillyWisher_charNames' : 'charNames_gen'}:${key}`),\n    [t, gender]\n  )\n\n  const toImg = useCallback(\n    (key: CharacterKey | '') =>\n      key ? <CharIconSide characterKey={key} /> : <PersonAdd />,\n    []\n  ) //\n  const isFavorite = useCallback(\n    (key: CharacterKey) => database.charMeta.get(key).favorite,\n    [database]\n  )\n  const onDisable = useCallback(\n    ({ key }: { key: CharacterKey | '' }) =>\n      team.filter((t) => t && t !== characterKey).includes(key) ||\n      (key.startsWith('Traveler') &&\n        team.some((t) => t.startsWith('Traveler'))),\n    [team, characterKey]\n  )\n  const values = useMemo(\n    () =>\n      database.chars.keys\n        .map(\n          (v): GeneralAutocompleteOption<CharacterKey> => ({\n            key: v,\n            label: namesCB(v, silly),\n            favorite: isFavorite(v),\n            alternateNames: [namesCB(v, false)],\n          })\n        )\n        .sort((a, b) => {\n          if (a.favorite && !b.favorite) return -1\n          if (!a.favorite && b.favorite) return 1\n          return a.label.localeCompare(b.label)\n        }),\n    [database.chars.keys, namesCB, isFavorite, silly]\n  )\n  return (\n    <Suspense fallback={<Skeleton variant=\"text\" width={100} />}>\n      <GeneralAutocomplete\n        size=\"small\"\n        label={label}\n        options={values}\n        valueKey={characterKey}\n        onChange={(k) => setChar(k ?? '')}\n        getOptionDisabled={onDisable}\n        toImg={toImg}\n        {...autoCompleteProps}\n      />\n    </Suspense>\n  )\n}\n","import type {\n  ArtifactRarity,\n  ArtifactSetKey,\n  ArtifactSlotKey,\n  MainStatKey,\n  SubstatKey,\n  SubstatTypeKey,\n  WeaponTypeKey,\n} from '@genshin-optimizer/consts'\nimport {\n  allArtifactSlotKeys,\n  artMaxLevel,\n  artSlotsData,\n  substatTypeKeys,\n} from '@genshin-optimizer/consts'\nimport { weaponAsset } from '@genshin-optimizer/gi-assets'\nimport {\n  artDisplayValue,\n  getMainStatDisplayValue,\n  getSubstatValue,\n} from '@genshin-optimizer/gi-util'\nimport { useBoolState } from '@genshin-optimizer/react-util'\nimport { iconInlineProps } from '@genshin-optimizer/svgicons'\nimport { objMap } from '@genshin-optimizer/util'\nimport { CopyAll, DeleteForever, Info, Refresh } from '@mui/icons-material'\nimport StarRoundedIcon from '@mui/icons-material/StarRounded'\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  CardHeader,\n  Divider,\n  Grid,\n  ListItem,\n  MenuItem,\n  Skeleton,\n  Slider,\n  Stack,\n  ToggleButton,\n  Typography,\n} from '@mui/material'\nimport React, {\n  Suspense,\n  useCallback,\n  useContext,\n  useDeferredValue,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { useLocation } from 'react-router-dom'\nimport ArtifactSetAutocomplete from '../../../../Components/Artifact/ArtifactSetAutocomplete'\nimport ArtifactSetTooltip from '../../../../Components/Artifact/ArtifactSetTooltip'\nimport SetEffectDisplay from '../../../../Components/Artifact/SetEffectDisplay'\nimport SlotIcon from '../../../../Components/Artifact/SlotIcon'\nimport BootstrapTooltip from '../../../../Components/BootstrapTooltip'\nimport CardDark from '../../../../Components/Card/CardDark'\nimport CardLight from '../../../../Components/Card/CardLight'\nimport StatDisplayComponent from '../../../../Components/Character/StatDisplayComponent'\nimport ColorText from '../../../../Components/ColoredText'\nimport CustomNumberInput from '../../../../Components/CustomNumberInput'\nimport DocumentDisplay from '../../../../Components/DocumentDisplay'\nimport DropdownButton from '../../../../Components/DropdownMenu/DropdownButton'\nimport {\n  FieldDisplayList,\n  NodeFieldDisplay,\n} from '../../../../Components/FieldDisplay'\nimport ImgIcon from '../../../../Components/Image/ImgIcon'\nimport LevelSelect from '../../../../Components/LevelSelect'\nimport RefinementDropdown from '../../../../Components/RefinementDropdown'\nimport SolidToggleButtonGroup from '../../../../Components/SolidToggleButtonGroup'\nimport {\n  StatColoredWithUnit,\n  StatWithUnit,\n} from '../../../../Components/StatDisplay'\nimport { CharacterContext } from '../../../../Context/CharacterContext'\nimport type { dataContextObj } from '../../../../Context/DataContext'\nimport { DataContext } from '../../../../Context/DataContext'\nimport { getArtSheet } from '../../../../Data/Artifacts'\nimport Artifact from '../../../../Data/Artifacts/Artifact'\nimport { artifactDefIcon } from '../../../../Data/Artifacts/ArtifactSheet'\nimport { getWeaponSheet } from '../../../../Data/Weapons'\nimport { DatabaseContext } from '../../../../Database/Database'\nimport { initCharTC } from '../../../../Database/DataManagers/CharacterTCData'\nimport { uiInput as input } from '../../../../Formula'\nimport { computeUIData, dataObjForWeapon } from '../../../../Formula/api'\nimport { constant, percent } from '../../../../Formula/utils'\nimport KeyMap from '../../../../KeyMap'\nimport StatIcon from '../../../../KeyMap/StatIcon'\nimport useTeamData from '../../../../ReactHooks/useTeamData'\nimport type { ICachedArtifact } from '../../../../Types/artifact'\nimport type { ICharTC, ICharTCArtifactSlot } from '../../../../Types/character'\nimport type { SetNum } from '../../../../Types/consts'\nimport type { ICachedWeapon } from '../../../../Types/weapon'\nimport { defaultInitialWeaponKey } from '../../../../Util/WeaponUtil'\nimport useCharTC from './useCharTC'\nconst WeaponSelectionModal = React.lazy(\n  () => import('../../../../Components/Weapon/WeaponSelectionModal')\n)\n\ntype ISet = Partial<Record<ArtifactSetKey, 1 | 2 | 4>>\nexport default function TabTheorycraft() {\n  const { database } = useContext(DatabaseContext)\n  const { data: oldData } = useContext(DataContext)\n  const {\n    character,\n    character: { key: characterKey, compareData },\n    characterSheet,\n    characterDispatch,\n  } = useContext(CharacterContext)\n  const data = useCharTC(\n    characterKey,\n    defaultInitialWeaponKey(characterSheet.weaponTypeKey)\n  )\n  const setData = useCallback(\n    (data: ICharTC) => database.charTCs.set(characterKey, data),\n    [characterKey, database]\n  )\n  const resetData = useCallback(() => {\n    setData(initCharTC(defaultInitialWeaponKey(characterSheet.weaponTypeKey)))\n  }, [setData, characterSheet])\n  const setWeapon = useCallback(\n    (action: Partial<ICharTC['weapon']>) => {\n      setData({ ...data, weapon: { ...data.weapon, ...action } })\n    },\n    [setData, data]\n  )\n\n  const copyFrom = useCallback(\n    (eWeapon: ICachedWeapon, build: ICachedArtifact[]) => {\n      const newData = initCharTC(eWeapon.key)\n      newData.artifact.substats.type = data.artifact.substats.type\n\n      newData.weapon.level = eWeapon.level\n      newData.weapon.ascension = eWeapon.ascension\n      newData.weapon.refinement = eWeapon.refinement\n\n      const sets = {}\n      build.forEach((art) => {\n        if (!art) return\n        const { slotKey, setKey, substats, mainStatKey, level, rarity } = art\n        newData.artifact.slots[slotKey].level = level\n        newData.artifact.slots[slotKey].statKey = mainStatKey\n        newData.artifact.slots[slotKey].rarity = rarity\n        sets[setKey] = (sets[setKey] ?? 0) + 1\n        substats.forEach((substat) => {\n          if (substat.key)\n            newData.artifact.substats.stats[substat.key] =\n              (newData.artifact.substats.stats[substat.key] ?? 0) +\n              substat.accurateValue\n        })\n      })\n      newData.artifact.sets = Object.fromEntries(\n        Object.entries(sets)\n          .map(([key, value]) => [\n            key,\n            value === 3\n              ? 2\n              : value === 5\n              ? 4\n              : value === 1 && !(key as string).startsWith('PrayersFor')\n              ? 0\n              : value,\n          ])\n          .filter(([, value]) => value)\n      )\n      setData(newData)\n    },\n    [data, setData]\n  )\n  const location = useLocation()\n  const { build: locBuild } = (location.state as\n    | { build: string[] }\n    | undefined) ?? { build: undefined }\n  useEffect(() => {\n    if (!locBuild) return\n    const eWeapon = database.weapons.get(character.equippedWeapon)!\n    copyFrom(\n      eWeapon,\n      locBuild.map((i) => database.arts.get(i)!)\n    )\n    // WARNING: if copyFrom is included, it will cause a render loop due to its setData <---> data\n    // eslint-disable-next-line\n  }, [locBuild, database])\n\n  const copyFromEquipped = useCallback(() => {\n    const eWeapon = database.weapons.get(character.equippedWeapon)!\n    copyFrom(\n      eWeapon,\n      Object.values(character.equippedArtifacts)\n        .map((a) => database.arts.get(a)!)\n        .filter((a) => a)\n    )\n  }, [\n    database,\n    character.equippedArtifacts,\n    character.equippedWeapon,\n    copyFrom,\n  ])\n\n  const weapon: ICachedWeapon = useMemo(() => {\n    return {\n      ...data.weapon,\n      location: '',\n      lock: false,\n      id: '',\n    }\n  }, [data])\n  const setArtifact = useCallback(\n    (artifact: ICharTC['artifact']) => {\n      const data_ = structuredClone(data)\n      data_.artifact = artifact\n      setData(data_)\n    },\n    [data, setData]\n  )\n\n  const setSubstatsType = useCallback(\n    (t: SubstatTypeKey) => {\n      const data_ = structuredClone(data)\n      data_.artifact.substats.type = t\n      setData(data_)\n    },\n    [data, setData]\n  )\n\n  const setSubstats = useCallback(\n    (setSubstats: Record<SubstatKey, number>) => {\n      const data_ = structuredClone(data)\n      data_.artifact.substats.stats = setSubstats\n      setData(data_)\n    },\n    [data, setData]\n  )\n\n  const deferredData = useDeferredValue(data)\n  const overriderArtData = useMemo(() => {\n    const stats = { ...deferredData.artifact.substats.stats }\n    Object.values(deferredData.artifact.slots).forEach(\n      ({ statKey, rarity, level }) =>\n        (stats[statKey] =\n          (stats[statKey] ?? 0) +\n          getMainStatDisplayValue(statKey, rarity, level))\n    )\n    return {\n      art: objMap(stats, (v, k) =>\n        k.endsWith('_') ? percent(v / 100) : constant(v)\n      ),\n      artSet: objMap(deferredData.artifact.sets, (v) => constant(v)),\n    }\n  }, [deferredData])\n\n  const overrideWeapon: ICachedWeapon = useMemo(\n    () => ({\n      id: '',\n      location: '',\n      key: data.weapon.key,\n      level: data.weapon.level,\n      ascension: data.weapon.ascension,\n      refinement: data.weapon.refinement,\n      lock: false,\n    }),\n    [data]\n  )\n  const teamData = useTeamData(\n    characterKey,\n    0,\n    overriderArtData,\n    overrideWeapon\n  )\n\n  const { target: charUIData } = teamData?.[characterKey] ?? {}\n\n  const dataContextValue: dataContextObj | undefined = useMemo(() => {\n    if (!teamData || !charUIData) return undefined\n    return {\n      data: charUIData,\n      teamData,\n    }\n  }, [charUIData, teamData])\n  const dataContextValueWithOld: dataContextObj | undefined = useMemo(() => {\n    if (!dataContextValue) return undefined\n    return {\n      ...dataContextValue,\n      oldData: compareData ? oldData : undefined,\n    }\n  }, [dataContextValue, compareData, oldData])\n  return (\n    <Stack spacing={1}>\n      <CardLight>\n        <Box sx={{ display: 'flex', gap: 1, p: 1 }}>\n          <Box sx={{ flexGrow: 1, display: 'flex', gap: 1 }}>\n            <Button\n              color=\"info\"\n              onClick={copyFromEquipped}\n              startIcon={<CopyAll />}\n            >\n              Copy from equipped\n            </Button>\n            <Button color=\"error\" onClick={resetData} startIcon={<Refresh />}>\n              Reset\n            </Button>\n          </Box>\n          <SolidToggleButtonGroup\n            exclusive\n            value={compareData}\n            onChange={(e, v) => characterDispatch({ compareData: v })}\n            size=\"small\"\n          >\n            <ToggleButton value={false} disabled={!compareData}>\n              Show TC stats\n            </ToggleButton>\n            <ToggleButton value={true} disabled={compareData}>\n              Compare vs. equipped\n            </ToggleButton>\n          </SolidToggleButtonGroup>\n        </Box>\n      </CardLight>\n      {dataContextValue ? (\n        <DataContext.Provider value={dataContextValue}>\n          <Grid container spacing={1} sx={{ justifyContent: 'center' }}>\n            <Grid item sx={{ flexGrow: -1 }}>\n              <WeaponEditorCard\n                weapon={weapon}\n                setWeapon={setWeapon}\n                weaponTypeKey={characterSheet.weaponTypeKey}\n              />\n              <ArtifactMainLevelCard\n                artifactData={data.artifact}\n                setArtifactData={setArtifact}\n              />\n            </Grid>\n            <Grid item sx={{ flexGrow: 1 }}>\n              <ArtifactSubCard\n                substats={data.artifact.substats.stats}\n                setSubstats={setSubstats}\n                substatsType={data.artifact.substats.type}\n                setSubstatsType={setSubstatsType}\n                mainStatKeys={Object.values(data.artifact.slots).map(\n                  (s) => s.statKey\n                )}\n              />\n            </Grid>\n          </Grid>\n        </DataContext.Provider>\n      ) : (\n        <Skeleton variant=\"rectangular\" width=\"100%\" height={500} />\n      )}\n      <CardLight sx={{ flexGrow: 1, p: 1 }}>\n        {dataContextValueWithOld ? (\n          <DataContext.Provider value={dataContextValueWithOld}>\n            <StatDisplayComponent />\n          </DataContext.Provider>\n        ) : (\n          <Skeleton variant=\"rectangular\" width=\"100%\" height={500} />\n        )}\n      </CardLight>\n    </Stack>\n  )\n}\n\nfunction WeaponEditorCard({\n  weapon,\n  setWeapon,\n  weaponTypeKey,\n}: {\n  weapon: ICachedWeapon\n  weaponTypeKey: WeaponTypeKey\n  setWeapon: (action: Partial<ICharTC['weapon']>) => void\n}) {\n  const { key, level = 0, refinement = 1, ascension = 0 } = weapon\n  const weaponSheet = getWeaponSheet(key)\n  const [show, onShow, onHide] = useBoolState()\n  const { data } = useContext(DataContext)\n  const weaponUIData = useMemo(\n    () => weapon && computeUIData([weaponSheet.data, dataObjForWeapon(weapon)]),\n    [weaponSheet, weapon]\n  )\n  return (\n    <CardLight sx={{ p: 1, mb: 1 }}>\n      <WeaponSelectionModal\n        ascension={ascension}\n        show={show}\n        onHide={onHide}\n        onSelect={(k) => setWeapon({ key: k })}\n        weaponTypeFilter={weaponTypeKey}\n      />\n      <Box display=\"flex\" flexDirection=\"column\" gap={1}>\n        <Box display=\"flex\" gap={1}>\n          <Box\n            className={`grad-${weaponSheet.rarity}star`}\n            component=\"img\"\n            src={weaponAsset(weapon.key, ascension >= 2)}\n            sx={{\n              flexshrink: 1,\n              flexBasis: 0,\n              maxWidth: '30%',\n              borderRadius: 1,\n            }}\n          />\n          <Stack spacing={1} flexGrow={1}>\n            <Button\n              fullWidth\n              color=\"info\"\n              sx={{ flexGrow: 1 }}\n              onClick={onShow}\n            >\n              <Box sx={{ maxWidth: '10em' }}>{weaponSheet?.name}</Box>\n            </Button>\n            {weaponSheet.hasRefinement && (\n              <RefinementDropdown\n                refinement={refinement}\n                setRefinement={(r) => setWeapon({ refinement: r })}\n              />\n            )}\n          </Stack>\n        </Box>\n        <LevelSelect\n          level={level}\n          ascension={ascension}\n          setBoth={setWeapon}\n          useLow={!weaponSheet.hasRefinement}\n        />\n        <CardDark>\n          <CardHeader\n            title={'Main Stats'}\n            titleTypographyProps={{ variant: 'subtitle2' }}\n          />\n          <Divider />\n          {weaponUIData && (\n            <FieldDisplayList>\n              {[input.weapon.main, input.weapon.sub, input.weapon.sub2].map(\n                (node) => {\n                  const n = weaponUIData.get(node)\n                  if (n.isEmpty || !n.value) return null\n                  return (\n                    <NodeFieldDisplay\n                      key={JSON.stringify(n.info)}\n                      node={n}\n                      component={ListItem}\n                    />\n                  )\n                }\n              )}\n            </FieldDisplayList>\n          )}\n        </CardDark>\n        {data && weaponSheet?.document && (\n          <DocumentDisplay sections={weaponSheet.document} />\n        )}\n      </Box>\n    </CardLight>\n  )\n}\n\nfunction ArtifactMainLevelCard({\n  artifactData,\n  setArtifactData,\n}: {\n  artifactData: ICharTC['artifact']\n  setArtifactData: (a: ICharTC['artifact']) => void\n}) {\n  const setSlot = useCallback(\n    (slotKey: ArtifactSlotKey) => (slot: ICharTCArtifactSlot) => {\n      const artifactData_ = structuredClone(artifactData)\n      artifactData_.slots[slotKey] = slot\n      setArtifactData(artifactData_)\n    },\n    [artifactData, setArtifactData]\n  )\n\n  const setArtSet = useCallback(\n    (artSet: ISet) => {\n      const artifactData_ = structuredClone(artifactData)\n      artifactData_.sets = artSet\n      setArtifactData(artifactData_)\n    },\n    [artifactData, setArtifactData]\n  )\n\n  return (\n    <Stack spacing={1}>\n      <CardLight sx={{ p: 1 }}>\n        <Stack spacing={1}>\n          {allArtifactSlotKeys.map((s) => (\n            <ArtifactMainLevelSlot\n              key={s}\n              slotKey={s}\n              slot={artifactData.slots[s]}\n              setSlot={setSlot(s)}\n            />\n          ))}\n        </Stack>\n      </CardLight>\n      <Suspense\n        fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={200} />}\n      >\n        <ArtifactSetsEditor artSet={artifactData.sets} setArtSet={setArtSet} />\n      </Suspense>\n    </Stack>\n  )\n}\nfunction ArtifactMainLevelSlot({\n  slotKey,\n  slot,\n  setSlot: setSlotProp,\n}: {\n  slotKey: ArtifactSlotKey\n  slot: ICharTCArtifactSlot\n  setSlot: (s: ICharTCArtifactSlot) => void\n}) {\n  const { level, statKey, rarity } = slot\n  const keys = artSlotsData[slotKey].stats\n  const setSlot = useCallback(\n    (action: Partial<ICharTCArtifactSlot>) => {\n      setSlotProp({ ...slot, ...action })\n    },\n    [slot, setSlotProp]\n  )\n  const setRarity = useCallback(\n    (r: ArtifactRarity) => {\n      const mLvl = artMaxLevel[r] ?? 0\n      if (level > mLvl) setSlot({ rarity: r, level: mLvl })\n      else setSlot({ rarity: r })\n    },\n    [level, setSlot]\n  )\n\n  return (\n    <Box\n      display=\"flex\"\n      gap={1}\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n    >\n      <SlotIcon slotKey={slotKey} />\n      <CardDark\n        sx={{ height: '100%', minWidth: '5em', flexGrow: 1, display: 'flex' }}\n      >\n        {keys.length === 1 ? (\n          <Box\n            p={1}\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            width=\"100%\"\n            display=\"flex\"\n            gap={1}\n          >\n            <StatIcon statKey={keys[0]} iconProps={iconInlineProps} />{' '}\n            {KeyMap.getStr(keys[0])}\n          </Box>\n        ) : (\n          <DropdownButton\n            sx={{ px: 0 }}\n            fullWidth\n            title={<StatWithUnit statKey={statKey} />}\n            color={KeyMap.getVariant(statKey) ?? 'success'}\n          >\n            {keys.map((msk) => (\n              <MenuItem\n                key={msk}\n                disabled={statKey === msk}\n                onClick={() => setSlot({ statKey: msk })}\n              >\n                <StatColoredWithUnit statKey={msk} />\n              </MenuItem>\n            ))}\n          </DropdownButton>\n        )}\n      </CardDark>\n      <DropdownButton\n        sx={{ px: 0 }}\n        title={\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            {rarity} <StarRoundedIcon fontSize=\"inherit\" />\n          </Box>\n        }\n      >\n        {[5, 4, 3].map((r) => (\n          <MenuItem\n            key={r}\n            disabled={rarity === r}\n            onClick={() => setRarity(r as ArtifactRarity)}\n          >\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              {r} <StarRoundedIcon fontSize=\"inherit\" />\n            </Box>\n          </MenuItem>\n        ))}\n      </DropdownButton>\n      <CustomNumberInput\n        startAdornment=\"+\"\n        value={level}\n        color={Artifact.levelVariant(level)}\n        onChange={(l) => l !== undefined && setSlot({ level: l })}\n        sx={{ borderRadius: 1, pl: 1, my: 0, height: '100%' }}\n        inputProps={{ sx: { pl: 0.5, width: '2em' }, max: 20, min: 0 }}\n      />\n      <CardDark sx={{ height: '100%', minWidth: '4em' }}>\n        <Box p={1} textAlign=\"center\">{`${artDisplayValue(\n          getMainStatDisplayValue(statKey, rarity, level),\n          KeyMap.unit(statKey)\n        )}${KeyMap.unit(statKey)}`}</Box>\n      </CardDark>\n    </Box>\n  )\n}\n\nfunction ArtifactSetsEditor({\n  artSet,\n  setArtSet,\n}: {\n  artSet: ISet\n  setArtSet(artSet: ISet)\n}) {\n  const setSet = useCallback(\n    (setKey: ArtifactSetKey | '') => {\n      if (!setKey) return\n      setArtSet({\n        ...artSet,\n        [setKey]: parseInt(Object.keys(getArtSheet(setKey).setEffects)[0]),\n      })\n    },\n    [artSet, setArtSet]\n  )\n\n  const setValue = useCallback(\n    (setKey: ArtifactSetKey) => (value: 1 | 2 | 4) =>\n      setArtSet({ ...artSet, [setKey]: value }),\n    [artSet, setArtSet]\n  )\n  const deleteValue = useCallback(\n    (setKey: ArtifactSetKey) => () => {\n      const { [setKey]: _, ...rest } = artSet\n      setArtSet({ ...rest })\n    },\n    [artSet, setArtSet]\n  )\n\n  const remaining = 5 - Object.values(artSet).reduce((a, b) => a + b, 0)\n\n  return (\n    <Stack spacing={1} sx={{ flexGrow: 1 }}>\n      {Object.entries(artSet).map(([setKey, value]) => (\n        <ArtifactSetEditor\n          key={setKey}\n          setKey={setKey}\n          value={value}\n          setValue={setValue(setKey)}\n          deleteValue={deleteValue(setKey)}\n          remaining={remaining}\n        />\n      ))}\n      <CardLight sx={{ flexGrow: 1, overflow: 'visible' }}>\n        <ArtifactSetAutocomplete\n          artSetKey={''}\n          setArtSetKey={setSet}\n          label={'New Artifact Set'}\n          getOptionDisabled={({ key }) =>\n            Object.keys(artSet).includes(key as ArtifactSetKey) ||\n            !key ||\n            Object.keys(getArtSheet(key).setEffects).every(\n              (n) => parseInt(n) > remaining\n            )\n          }\n        />\n      </CardLight>\n    </Stack>\n  )\n}\nfunction ArtifactSetEditor({\n  setKey,\n  value,\n  setValue,\n  deleteValue,\n  remaining,\n}: {\n  setKey: ArtifactSetKey\n  value: 1 | 2 | 4\n  setValue: (v: 1 | 2 | 4) => void\n  deleteValue: () => void\n  remaining: number\n}) {\n  const artifactSheet = getArtSheet(setKey)\n\n  /* Assumes that all conditionals are from 4-Set. needs to change if there are 2-Set conditionals */\n  const set4CondNums = useMemo(() => {\n    if (value < 4) return []\n    return Object.keys(artifactSheet.setEffects).filter((setNumKey) =>\n      artifactSheet.setEffects[setNumKey]?.document.some(\n        (doc) => 'states' in doc\n      )\n    )\n  }, [artifactSheet, value])\n\n  return (\n    <CardLight>\n      <Box display=\"flex\">\n        <ArtifactSetTooltip artifactSheet={artifactSheet} numInSet={value}>\n          <Box flexGrow={1} p={1} display=\"flex\" gap={1} alignItems=\"center\">\n            <ImgIcon size={2} src={artifactDefIcon(setKey)} />\n            <Box>{artifactSheet.setName}</Box>\n            <Info />\n          </Box>\n        </ArtifactSetTooltip>\n        <ButtonGroup>\n          <DropdownButton\n            size=\"small\"\n            title={<Box whiteSpace=\"nowrap\">{value}-set</Box>}\n          >\n            {Object.keys(artifactSheet.setEffects)\n              .map((setKey) => parseInt(setKey))\n              .map((setKey) => (\n                <MenuItem\n                  key={setKey}\n                  disabled={value === setKey || setKey > remaining + value}\n                  onClick={() => setValue(setKey as 1 | 2 | 4)}\n                >\n                  {setKey}-set\n                </MenuItem>\n              ))}\n          </DropdownButton>\n          <Button color=\"error\" size=\"small\" onClick={deleteValue}>\n            <DeleteForever />\n          </Button>\n        </ButtonGroup>\n      </Box>\n      {!!set4CondNums.length && (\n        <Stack spacing={1} sx={{ p: 1 }}>\n          {set4CondNums.map((setNumKey) => (\n            <SetEffectDisplay\n              key={setNumKey}\n              setKey={setKey}\n              setNumKey={parseInt(setNumKey) as SetNum}\n              hideHeader\n              conditionalsOnly\n            />\n          ))}\n        </Stack>\n      )}\n    </CardLight>\n  )\n}\nfunction ArtifactSubCard({\n  substats,\n  setSubstats,\n  substatsType,\n  setSubstatsType,\n  mainStatKeys,\n}: {\n  substats: Record<SubstatKey, number>\n  setSubstats: (substats: Record<SubstatKey, number>) => void\n  substatsType: SubstatTypeKey\n  setSubstatsType: (t: SubstatTypeKey) => void\n  mainStatKeys: MainStatKey[]\n}) {\n  const setValue = useCallback(\n    (key: SubstatKey) => (v: number) => setSubstats({ ...substats, [key]: v }),\n    [substats, setSubstats]\n  )\n  const { t } = useTranslation('page_character')\n  const rv =\n    Object.entries(substats).reduce(\n      (t, [k, v]) => t + v / getSubstatValue(k),\n      0\n    ) * 100\n  const rolls = Object.entries(substats).reduce(\n    (t, [k, v]) => t + v / getSubstatValue(k, undefined, substatsType),\n    0\n  )\n  return (\n    <CardLight sx={{ p: 1, height: '100%' }}>\n      <Box sx={{ mb: 1, display: 'flex', gap: 1 }}>\n        <DropdownButton\n          fullWidth\n          title={t(`tabTheorycraft.substatType.${substatsType}`)}\n        >\n          {substatTypeKeys.map((st) => (\n            <MenuItem\n              key={st}\n              disabled={substatsType === st}\n              onClick={() => setSubstatsType(st)}\n            >\n              {t(`tabTheorycraft.substatType.${st}`)}\n            </MenuItem>\n          ))}\n        </DropdownButton>\n        <BootstrapTooltip\n          title={<Typography>{t`tabTheorycraft.maxTotalRolls`}</Typography>}\n          placement=\"top\"\n        >\n          <CardDark\n            sx={{\n              textAlign: 'center',\n              py: 0.5,\n              px: 1,\n              minWidth: '15em',\n              whiteSpace: 'nowrap',\n              display: 'flex',\n              gap: 2,\n              justifyContent: 'flex-end',\n              alignItems: 'center',\n            }}\n          >\n            <ColorText color={rolls > 45 ? 'warning' : undefined}>\n              Rolls: <strong>{rolls.toFixed(0)}</strong>\n            </ColorText>\n            <ColorText color={rolls > 45 ? 'warning' : undefined}>\n              RV: <strong>{rv.toFixed(1)}%</strong>\n            </ColorText>\n          </CardDark>\n        </BootstrapTooltip>\n      </Box>\n      <Stack spacing={1}>\n        {Object.entries(substats).map(([k, v]) => (\n          <ArtifactSubstatEditor\n            key={k}\n            statKey={k}\n            value={v}\n            setValue={setValue(k)}\n            substatsType={substatsType}\n            mainStatKeys={mainStatKeys}\n          />\n        ))}\n      </Stack>\n    </CardLight>\n  )\n}\nfunction ArtifactSubstatEditor({\n  statKey,\n  value,\n  setValue,\n  substatsType,\n  mainStatKeys,\n}: {\n  statKey: SubstatKey\n  value: number\n  setValue: (v: number) => void\n  substatsType: SubstatTypeKey\n  mainStatKeys: MainStatKey[]\n}) {\n  const { t } = useTranslation('page_character')\n  const substatValue = getSubstatValue(statKey, 5, substatsType)\n  const [rolls, setRolls] = useState(() => value / substatValue)\n  useEffect(() => setRolls(value / substatValue), [value, substatValue])\n\n  const unit = KeyMap.unit(statKey)\n  const displayValue = rolls * substatValue\n\n  const rv = ((rolls * substatValue) / getSubstatValue(statKey)) * 100\n  const numMains = mainStatKeys.reduce(\n    (t, ms) => t + (ms === statKey ? 1 : 0),\n    0\n  )\n  const maxRolls = (5 - numMains) * 6\n  // 0.0001 to nudge float comparasion\n  const invalid = rolls - 0.0001 > maxRolls\n  const setRValue = useCallback(\n    (r: number) => setValue(r * substatValue),\n    [setValue, substatValue]\n  )\n\n  return (\n    <Stack spacing={0.5}>\n      <Box\n        display=\"flex\"\n        gap={1}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <CardDark\n          sx={{\n            p: 0.5,\n            minWidth: '11em',\n            flexGrow: 1,\n            display: 'flex',\n            gap: 1,\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <StatIcon statKey={statKey} iconProps={{ fontSize: 'inherit' }} />\n          {KeyMap.getStr(statKey)}\n          {KeyMap.unit(statKey)}\n        </CardDark>\n        <BootstrapTooltip\n          title={\n            <Typography>\n              {t(\n                numMains\n                  ? `tabTheorycraft.maxRollsMain`\n                  : `tabTheorycraft.maxRolls`,\n                { value: maxRolls }\n              )}\n            </Typography>\n          }\n          placement=\"top\"\n        >\n          <CardDark sx={{ textAlign: 'center', p: 0.5, minWidth: '8em' }}>\n            <ColorText color={invalid ? 'warning' : undefined}>\n              RV: <strong>{rv.toFixed(1)}%</strong>\n            </ColorText>\n          </CardDark>\n        </BootstrapTooltip>\n      </Box>\n      <Box\n        display=\"flex\"\n        gap={1}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <CustomNumberInput\n          color={displayValue ? 'success' : 'primary'}\n          float={KeyMap.unit(statKey) === '%'}\n          endAdornment={\n            KeyMap.unit(statKey) || <Box width=\"1em\" component=\"span\" />\n          }\n          value={parseFloat(displayValue.toFixed(2))}\n          onChange={(v) => v !== undefined && setValue(v)}\n          sx={{ borderRadius: 1, px: 1, height: '100%', width: '6em' }}\n          inputProps={{ sx: { textAlign: 'right' }, min: 0 }}\n        />\n        <CardDark\n          sx={{\n            px: 2,\n            flexGrow: 1,\n            display: 'flex',\n            gap: 1,\n            alignItems: 'center',\n            justifyContent: 'center',\n            overflow: 'visible',\n          }}\n        >\n          <Slider\n            size=\"small\"\n            value={rolls}\n            max={maxRolls}\n            min={0}\n            step={1}\n            marks\n            valueLabelDisplay=\"auto\"\n            onChange={(e, v) => setRolls(v as number)}\n            onChangeCommitted={(e, v) => setRValue(v as number)}\n          />\n        </CardDark>\n        <CustomNumberInput\n          color={value ? (invalid ? 'warning' : 'success') : 'primary'}\n          float\n          startAdornment={\n            <Box\n              sx={{\n                whiteSpace: 'nowrap',\n                width: '7em',\n                display: 'flex',\n                justifyContent: 'space-between',\n              }}\n            >\n              <span>\n                {artDisplayValue(substatValue, unit)}\n                {unit}\n              </span>\n              <span>x</span>\n            </Box>\n          }\n          value={parseFloat(rolls.toFixed(2))}\n          onChange={(v) => v !== undefined && setValue(v * substatValue)}\n          sx={{ borderRadius: 1, px: 1, my: 0, height: '100%', width: '7em' }}\n          inputProps={{ sx: { textAlign: 'right', pr: 0.5 }, min: 0, step: 1 }}\n        />\n      </Box>\n    </Stack>\n  )\n}\n","import type { CharacterKey, WeaponKey } from '@genshin-optimizer/consts'\nimport { useContext, useEffect, useState } from 'react'\nimport { DatabaseContext } from '../../../../Database/Database'\n\nexport default function useCharTC(\n  characterKey: CharacterKey,\n  defWeapon: WeaponKey\n) {\n  const { database } = useContext(DatabaseContext)\n  const [charTC, setCharTC] = useState(() =>\n    database.charTCs.getWithInit(characterKey, defWeapon)\n  )\n  useEffect(\n    () => setCharTC(database.charTCs.getWithInit(characterKey, defWeapon)),\n    [database, characterKey, defWeapon]\n  )\n  useEffect(\n    () =>\n      characterKey\n        ? database.charTCs.follow(\n            characterKey,\n            (k, r, v) => r === 'update' && setCharTC(v)\n          )\n        : undefined,\n    [characterKey, setCharTC, database]\n  )\n  return charTC\n}\n","import {\n  allElementKeys,\n  travelerElement,\n  travelerElements,\n} from '@genshin-optimizer/consts'\nimport { MenuItem } from '@mui/material'\nimport { useContext } from 'react'\nimport ColorText from '../../Components/ColoredText'\nimport DropdownButton from '../../Components/DropdownMenu/DropdownButton'\nimport { CharacterContext } from '../../Context/CharacterContext'\nimport { stg } from '../../Data/SheetUtil'\nimport useCharSelectionCallback from '../../ReactHooks/useCharSelectionCallback'\n\nexport default function TravelerElementSelect() {\n  const { character } = useContext(CharacterContext)\n  const { key } = character\n  const setCharacter = useCharSelectionCallback()\n  if (!key.startsWith('Traveler')) return null\n\n  const elementKey = allElementKeys.find((e) => key.toLowerCase().includes(e))\n  if (!elementKey) return null\n\n  return (\n    <DropdownButton\n      color={elementKey}\n      title={<strong>{stg(`element.${elementKey}`)}</strong>}\n    >\n      {travelerElements.map((eleKey) => (\n        <MenuItem\n          key={eleKey}\n          selected={elementKey === eleKey}\n          disabled={elementKey === eleKey}\n          onClick={() => setCharacter(travelerElement(eleKey))}\n        >\n          <strong>\n            <ColorText color={eleKey}>{stg(`element.${eleKey}`)}</ColorText>\n          </strong>\n        </MenuItem>\n      ))}\n    </DropdownButton>\n  )\n}\n","import { Female, Male } from '@mui/icons-material'\nimport { Button } from '@mui/material'\nimport { useCallback, useContext } from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { CharacterContext } from '../../Context/CharacterContext'\nimport { DatabaseContext } from '../../Database/Database'\nimport useDBMeta from '../../ReactHooks/useDBMeta'\n\nexport default function TravelerGenderSelect() {\n  const { t } = useTranslation('ui')\n  const { database } = useContext(DatabaseContext)\n  const { character } = useContext(CharacterContext)\n  const { key } = character\n  const { gender } = useDBMeta()\n  const toggleGender = useCallback(\n    () => database.dbMeta.set({ gender: gender === 'F' ? 'M' : 'F' }),\n    [gender, database]\n  )\n  if (!key.startsWith('Traveler')) return null\n  return (\n    <Button\n      onClick={toggleGender}\n      startIcon={gender === 'F' ? <Female /> : <Male />}\n    >\n      <strong>{t(`gender.${gender}`)}</strong>{' '}\n    </Button>\n  )\n}\n","import type { CharacterKey } from '@genshin-optimizer/consts'\nimport { charKeyToLocGenderedCharKey } from '@genshin-optimizer/consts'\nimport { useBoolState } from '@genshin-optimizer/react-util'\nimport {\n  BarChart,\n  Calculate,\n  FactCheck,\n  Groups,\n  Person,\n  Science,\n  TrendingUp,\n} from '@mui/icons-material'\nimport { Box, Button, CardContent, Skeleton, Tab, Tabs } from '@mui/material'\nimport {\n  Suspense,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react'\nimport { useTranslation } from 'react-i18next'\nimport {\n  Link as RouterLink,\n  Navigate,\n  Route,\n  Routes,\n  useMatch,\n  useNavigate,\n  useParams,\n} from 'react-router-dom'\nimport CardDark from '../../Components/Card/CardDark'\nimport CardLight from '../../Components/Card/CardLight'\nimport CloseButton from '../../Components/CloseButton'\nimport {\n  HitModeToggle,\n  InfusionAuraDropdown,\n  ReactionToggle,\n} from '../../Components/HitModeEditor'\nimport LevelSelect from '../../Components/LevelSelect'\nimport SqBadge from '../../Components/SqBadge'\nimport type { CharacterContextObj } from '../../Context/CharacterContext'\nimport { CharacterContext } from '../../Context/CharacterContext'\nimport type { dataContextObj } from '../../Context/DataContext'\nimport { DataContext } from '../../Context/DataContext'\nimport {\n  FormulaDataContext,\n  FormulaDataWrapper,\n} from '../../Context/FormulaDataContext'\nimport type { ChartData, GraphContextObj } from '../../Context/GraphContext'\nimport { GraphContext } from '../../Context/GraphContext'\nimport { SillyContext } from '../../Context/SillyContext'\nimport { getCharSheet } from '../../Data/Characters'\nimport { DatabaseContext } from '../../Database/Database'\nimport useCharacter from '../../ReactHooks/useCharacter'\nimport useCharacterReducer from '../../ReactHooks/useCharacterReducer'\nimport useDBMeta from '../../ReactHooks/useDBMeta'\nimport useTeamData from '../../ReactHooks/useTeamData'\nimport useTitle from '../../ReactHooks/useTitle'\nimport { CustomMultiTargetButton } from '../CustomMultiTarget'\nimport CharSelectButton from './CharSelectButton'\nimport FormulaModal from './FormulaModal'\nimport StatModal from './StatModal'\nimport TabBuild from './Tabs/TabOptimize'\nimport TabOverview from './Tabs/TabOverview'\nimport TabTalent from './Tabs/TabTalent'\nimport TabTeambuffs from './Tabs/TabTeambuffs'\nimport TabTheorycraft from './Tabs/TabTheorycraft'\nimport TravelerElementSelect from './TravelerElementSelect'\nimport TravelerGenderSelect from './TravelerGenderSelect'\n\nexport default function CharacterDisplay() {\n  const navigate = useNavigate()\n  const { database } = useContext(DatabaseContext)\n  const onClose = useCallback(() => navigate('/characters'), [navigate])\n  const { characterKey } = useParams<{ characterKey?: CharacterKey }>()\n  const invalidKey = !database.chars.keys.includes(characterKey as CharacterKey)\n  if (invalidKey) return <Navigate to=\"/characters\" />\n\n  return (\n    <Box my={1} display=\"flex\" flexDirection=\"column\" gap={1}>\n      <Suspense\n        fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />}\n      >\n        {characterKey && (\n          <CharacterDisplayCard\n            key={characterKey}\n            characterKey={characterKey}\n            onClose={onClose}\n          />\n        )}\n      </Suspense>\n    </Box>\n  )\n}\n\ntype CharacterDisplayCardProps = {\n  characterKey: CharacterKey\n  onClose?: () => void\n}\nfunction CharacterDisplayCard({\n  characterKey,\n  onClose,\n}: CharacterDisplayCardProps) {\n  const { silly } = useContext(SillyContext)\n  const character = useCharacter(characterKey)\n  const { gender } = useDBMeta()\n  const characterSheet = getCharSheet(characterKey, gender)\n  const teamData = useTeamData(characterKey)\n  const { target: charUIData } = teamData?.[characterKey] ?? {}\n  const {\n    params: { tab = 'overview' },\n  } = useMatch({ path: '/characters/:charKey/:tab', end: false }) ?? {\n    params: { tab: 'overview' },\n  }\n  const { t } = useTranslation([\n    'sillyWisher_charNames',\n    'charNames_gen',\n    'page_character',\n  ])\n\n  useTitle(\n    useMemo(\n      () =>\n        `${t(\n          `${\n            silly ? 'sillyWisher_charNames' : 'charNames_gen'\n          }:${charKeyToLocGenderedCharKey(characterKey, gender)}`\n        )} - ${t(`page_character:tabs.${tab}`)}`,\n      [t, silly, characterKey, gender, tab]\n    )\n  )\n\n  const characterDispatch = useCharacterReducer(character?.key ?? '')\n\n  const dataContextValue: dataContextObj | undefined = useMemo(() => {\n    if (!teamData || !charUIData) return undefined\n    return {\n      data: charUIData,\n      teamData,\n      oldData: undefined,\n    }\n  }, [charUIData, teamData])\n\n  const characterContextValue: CharacterContextObj | undefined = useMemo(() => {\n    if (!character || !characterSheet) return undefined\n    return {\n      character,\n      characterSheet,\n      characterDispatch,\n    }\n  }, [character, characterSheet, characterDispatch])\n\n  const [chartData, setChartData] = useState(undefined as ChartData | undefined)\n  const [graphBuilds, setGraphBuilds] = useState<string[][]>()\n  const graphContextValue: GraphContextObj | undefined = useMemo(() => {\n    return {\n      chartData,\n      setChartData,\n      graphBuilds,\n      setGraphBuilds,\n    }\n  }, [chartData, graphBuilds])\n\n  // Clear state when switching characters\n  useEffect(() => {\n    setChartData(undefined)\n    setGraphBuilds(undefined)\n  }, [characterKey])\n\n  return (\n    <CardDark>\n      {dataContextValue && characterContextValue && graphContextValue ? (\n        <CharacterContext.Provider value={characterContextValue}>\n          <DataContext.Provider value={dataContextValue}>\n            <GraphContext.Provider value={graphContextValue}>\n              <FormulaDataWrapper>\n                <CardContent\n                  sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}\n                >\n                  <Box display=\"flex\">\n                    <Box display=\"flex\" gap={1} flexWrap=\"wrap\" flexGrow={1}>\n                      <CharSelectButton />\n                      <TravelerElementSelect />\n                      <TravelerGenderSelect />\n                      <DetailStatButton />\n                      <CustomMultiTargetButton />\n                      <FormulasButton />\n                    </Box>\n                    {!!onClose && <CloseButton onClick={onClose} />}\n                  </Box>\n                  <Box display=\"flex\" gap={1} flexWrap=\"wrap\">\n                    {character && (\n                      <LevelSelect\n                        level={character.level}\n                        ascension={character.ascension}\n                        setBoth={characterDispatch}\n                      />\n                    )}\n                    <HitModeToggle size=\"small\" />\n                    <InfusionAuraDropdown />\n                    <ReactionToggle size=\"small\" />\n                  </Box>\n                  <CardLight>\n                    <TabNav tab={tab} />\n                  </CardLight>\n                  <CharacterPanel />\n                  <CardLight>\n                    <TabNav tab={tab} />\n                  </CardLight>\n                </CardContent>\n              </FormulaDataWrapper>\n            </GraphContext.Provider>\n          </DataContext.Provider>\n        </CharacterContext.Provider>\n      ) : (\n        <Skeleton variant=\"rectangular\" width=\"100%\" height={1000} />\n      )}\n    </CardDark>\n  )\n}\nfunction CharacterPanel() {\n  return (\n    <Suspense\n      fallback={<Skeleton variant=\"rectangular\" width=\"100%\" height={500} />}\n    >\n      <Routes>\n        {/* Character Panel */}\n        <Route index element={<TabOverview />} />\n        <Route path=\"/talent\" element={<TabTalent />} />\n        <Route path=\"/teambuffs\" element={<TabTeambuffs />} />\n        <Route path=\"/optimize\" element={<TabBuild />} />\n        <Route path=\"/theorycraft\" element={<TabTheorycraft />} />\n      </Routes>\n    </Suspense>\n  )\n}\nfunction TabNav({ tab }: { tab: string }) {\n  const { t } = useTranslation('page_character')\n  return (\n    <Tabs\n      value={tab}\n      variant=\"scrollable\"\n      allowScrollButtonsMobile\n      sx={{\n        '& .MuiTab-root:hover': {\n          transition: 'background-color 0.25s ease',\n          backgroundColor: 'rgba(255,255,255,0.1)',\n        },\n      }}\n    >\n      <Tab\n        sx={{ minWidth: '20%' }}\n        value=\"overview\"\n        label={t('tabs.overview')}\n        icon={<Person />}\n        component={RouterLink}\n        to=\"\"\n      />\n      <Tab\n        sx={{ minWidth: '20%' }}\n        value=\"talent\"\n        label={t('tabs.talent')}\n        icon={<FactCheck />}\n        component={RouterLink}\n        to=\"talent\"\n      />\n      <Tab\n        sx={{ minWidth: '20%' }}\n        value=\"teambuffs\"\n        label={t('tabs.teambuffs')}\n        icon={<Groups />}\n        component={RouterLink}\n        to=\"teambuffs\"\n      />\n      <Tab\n        sx={{ minWidth: '20%' }}\n        value=\"optimize\"\n        label={t('tabs.optimize')}\n        icon={<TrendingUp />}\n        component={RouterLink}\n        to=\"optimize\"\n      />\n      <Tab\n        sx={{ minWidth: '20%' }}\n        value=\"theorycraft\"\n        label={t('tabs.theorycraft')}\n        icon={<Science />}\n        component={RouterLink}\n        to=\"theorycraft\"\n      />\n    </Tabs>\n  )\n}\n\nfunction DetailStatButton() {\n  const { t } = useTranslation('page_character')\n  const [open, onOpen, onClose] = useBoolState()\n  const {\n    character: { bonusStats },\n  } = useContext(CharacterContext)\n  const bStatsNum = Object.keys(bonusStats).length\n  return (\n    <>\n      <Button color=\"info\" startIcon={<BarChart />} onClick={onOpen}>\n        {t`addStats.title`}\n        {!!bStatsNum && (\n          <SqBadge sx={{ ml: 1 }} color=\"success\">\n            {bStatsNum}\n          </SqBadge>\n        )}\n      </Button>\n      <StatModal open={open} onClose={onClose} />\n    </>\n  )\n}\nfunction FormulasButton() {\n  const { onModalOpen } = useContext(FormulaDataContext)\n  return (\n    <>\n      <Button color=\"info\" startIcon={<Calculate />} onClick={onModalOpen}>\n        Formulas {'&'} Calcs\n      </Button>\n      <FormulaModal />\n    </>\n  )\n}\n"],"names":["GraphContext","createContext","CharacterSelectionModal","React","CharSelectButton","useTranslation","characterSheet","character","key","characterKey","useContext","CharacterContext","showModal","setshowModal","useState","setCharacter","useCharSelectionCallback","Suspense","fallback","show","onHide","onSelect","Button","color","onClick","startIcon","CharIconSide","name","t","FormulaModal","modalOpen","FormulaDataContext","setFormulaData","onCloseHandler","useCallback","undefined","ModalWrapper","open","onClose","CardDark","CardHeader","title","action","CloseButton","CardContent","sx","pt","CalculationDisplay","data","DataContext","contextData","sections","getDisplaySections","Skeleton","variant","width","height","Box","mr","mb","map","Nodes","FormulaCalc","displayNs","sectionKey","database","DatabaseContext","header","useMemo","getDisplayHeader","Object","entries","every","_","node","isEmpty","icon","CardLight","CardHeaderCustom","avatar","ImgIcon","size","src","SqBadge","Divider","FormulaAccordian","contextNode","expanded","setExpanded","handleChange","e","isExpanded","scrollRef","useRef","useEffect","setTimeout","current","scrollIntoView","behavior","Accordion","bgcolor","onChange","ref","AccordionSummary","expandIcon","ExpandMore","Typography","info","nodeVStr","allAmpReactionKeys","includes","display","ml","AmpReactionModeText","reaction","trigger","subVariant","AccordionDetails","formulas","subform","i","component","styled","props","other","IconButton","theme","expand","transform","marginLeft","transition","transitions","create","duration","shortest","FlexButtonGroup","ButtonGroup","StatInput","children","value","placeholder","defaultValue","onValueChange","percent","disabled","onReset","restProps","TextButton","px","CustomNumberInput","flexBasis","flexGrow","inputProps","textAlign","float","endAdornment","flexShrink","Replay","EnemyExpandCard","characterDispatch","setexpanded","toggle","eLvlNode","get","input","enemy","level","eDefRed","defRed","eDefIgn","defIgn","enemyOverride","gap","alignItems","flexWrap","Chip","label","allElementWithPhyKeys","element","EnemyResText","justifyContent","Collapse","in","timeout","unmountOnExit","EnemyEditor","immune","isFinite","ele","iconProps","iconInlineProps","content","bsProps","xs","md","eLvl","enemyLevel","lvl","enemyDefIgn_","enemyDefRed_","Grid","container","spacing","item","fullWidth","href","target","rel","palette","contentLight","main","KeyMap","getStr","type","statKey","eleKey","val","elementImmunity","Number","MAX_VALUE","Infinity","CheckBox","CheckBoxOutlineBlank","cols","lg","StatModal","Stack","BonusStatsEditor","MainStatsCards","keys","allInputPremodKeys","wrapperFunc","bonusStats","setFilter","columns","Alert","severity","i18nKey","StatEditorList","statKeys","statFilters","setStatFilters","mainSubKeys","mainReadNodes","k","total","mainEditKeys","otherStatKeys","allEleDmgKeys","allEleResKeys","miscStatkeys","filter","StatDisplayContent","nodes","extra","oldData","FieldDisplay","rn","ListItem","oldValue","JSON","stringify","specialNode","special","charEle","elementKey","isMelee","otherStatReadNodes","n","miscStatReadNodes","StatDisplayCard","length","py","OptimizationTargetContext","reaffine","arts","forceRename","affineNodes","Set","topLevelAffine","visit","isAffine","add","operands","forEach","op","has","dynKeys","mapFormulas","f","operation","path","affineOps","nonAffineOps","affine","sum","nonConst","assertUnreachable","base","nextDynKey","affineMap","Map","dynRead","reaffineArt","stat","values","constantFold","dyn","objMap","constant","fromEntries","v","result","objKeyMap","allArtifactSlotKeys","slot","id","set","offsets","baseValue","pruneOrder","numTop","exclusion","progress","allowRainbow","rainbow","noSwitchIn","noSwitchOut","list","newList","art","count","otherBetterEqual","otherMaybeBetter","some","otherBetter","canSwitch","pruneArtRange","minimum","baseRange","x","min","max","wrap","artRanges","computeArtRange","otherArtRanges","addArtRange","a","read","newRange","computeNodeRange","pruneNodeRange","nodeRange","operandRanges","threshold","pass","fail","newOperands","op1","op2","ranges","range","reads","forEachNodes","Error","computeMinMax","allOperations","reduce","accu","c","NaN","minMaxes","Math","WorkerCoordinator","constructor","workers","prio","callback","commands","workDone","_workers","cancel","cancelled","notifyNonEmpty","this","FIFO","p","worker","onmessage","onMessage","onerror","onError","w","Promise","resolve","rej","catch","terminate","async","processingInput","command","find","pop","hasCommand","race","res","all","then","postMessage","message","msg","resultType","push","broadcast","notifiedBroadcast","GOSolver","problem","status","numWorker","super","Array","fill","Worker","URL","r","interim","finalizedResults","maxIterateSize","topN","buildValues","preprocess","execute","plotBase","optimizationTarget","constraints","minimums","maxValues","thres","pruneExclusion","optimize","forced","should","deps","newArts","newNodes","pruneAll","optTarget","tested","failed","skipped","oldThreshold","sort","b","splice","useBuildSetting","buildSetting","setBuildSetting","buildSettings","follow","buildSettingDispatch","CharListMode","AllowChar","allowListTotal","t_pc","silly","SillyContext","excludedLocations","allowLocationsState","onOpen","useBoolState","dbDirty","forceUpdate","useForceUpdate","deferredDbDirty","useDeferredValue","searchTerm","setSearchTerm","deferredSearchTerm","elementKeys","setElementKeys","allElementKeys","deferredElementKeys","weaponTypeKeys","setWeaponTypeKeys","allWeaponTypeKeys","deferredWeaponTypeKeys","charKeyMap","from","chars","ck","filterFunction","weaponType","characterFilterConfigs","locList","ck1","c1","ck2","c2","choosec1","choosec2","c1f","charMeta","favorite","c2f","art1","equippedArtifacts","art2","localeCompare","charKeyToLocCharKey","elementTotals","weaponTypeTotals","locListTotals","catKeys","bulkCatTotal","ctMap","sheet","getCharSheet","gender","weaponTypeKey","locKey","allowed","excluded","followAny","mouseUpDetected","setMouseUpDetected","allowAll","disallowAll","concat","setState","_e","state","toggleList","lkList","lkArray","newExcludedLocations","lk","onMouseUp","useTot","charactersAllowed","stateBadgeColor","containerProps","maxWidth","draggable","InfoTooltip","pb","SolidToggleButtonGroup","exclusive","baseColor","allAllowLocationsState","s","ToggleButton","TextField","autoFocus","InputProps","WeaponToggle","totals","ElementToggle","opacity","SelectItemGrid","ShowChart","borderRadius","minWidth","Settings","charList","setCharList","charListMode","setCharListMode","sm","xl","SelectItem","selected","char","LocationToCharacterKey","onMouseEnter","buttons","ToggleToAllow","ToggleToExclude","onMouseDown","mode","disableTooltip","borderColor","borderWidth","borderStyle","fontSize","SlotIcon","slotKey","CharacterCardPico","SetEffectDisplay","setKey","setNumKey","hideHeader","conditionalsOnly","getArtSheet","document","setEffectDocument","section","flexDirection","DocumentDisplay","SetInclusionButton","buttonGroupSx","artSetExclusion","setExclusionSet","exclude2","exclude4","handleArtSetExclusion","endIcon","Block","ArtifactSetConfig","dataContext","conditional","setOpen","artKeysByRarity","setKeysByRarities","reverse","flatMap","sets","artKeys","artSlotCount","getNumSlots","allowRainbow2","allowRainbow4","allowTotals","artifactCondCount","allArtifactSetKeys","fakeDataContextObj","UIData","artSet","resetArtConds","tconditional","setAllExclusion","setnum","exclude","artSetExclusion_","structuredClone","AllSetAllowExcludeCard","allowTotal","setNum","gutterBottom","ArtifactSetCard","slotCount","large","charAt","indexOf","allow4","slots","set4CondNums","setEffects","doc","className","rarity","artifactDefIcon","mx","ns","StarRounded","Translate","key18","paddingTop","allArtifactSetExclusionKeys","Provider","parseInt","tot","levels","AssumeFullLevelToggle","mainStatAssumptionLevel","setmainStatAssumptionLevel","DropdownButton","MenuItem","BonusStatsCard","bonusStatsKeys","customBonus","fontWeight","Monospace","fontFamily","BorderLinearProgress","LinearProgress","BuildAlert","startTime","finishTime","characterName","hasTotal","generatingBuilds","unskipped","testedString","toLocaleString","unskippedString","skippedText","durationString","timeStringMs","round","performance","now","subtitle","toFixed","LocationIcon","useDBMeta","BootstrapTooltip","placement","sideMargin","StatWithUnit","disableIcon","StatIcon","unit","StatColoredWithUnit","getVariant","ArtifactCardNano","artifactId","pSlotKey","showLocation","BGComponent","useArtifact","actionWrapperFunc","CardActionArea","useTheme","imgAssets","mainStatKey","substats","location","mainStatLevel","alpha","secondary","ConditionalWrapper","condition","wrapper","position","ArtifactTooltip","artifactAsset","m","maxHeight","pointerEvents","Artifact","levelVariant","BusinessCenter","overflow","bottom","backgroundColor","disableInteractive","lineHeight","style","padding","getMainStatDisplayStr","SubstatDisplay","numRolls","rolls","rollColor","clamp","statUnit","alignContent","artDisplayValue","StatDisplayComponent","Masonry","Section","displayNsReads","nodeKey","customRead","emphasize","WeaponCardNano","weaponId","weapon","useWeapon","weaponSheet","getWeaponSheet","computeUIData","dataObjForWeapon","refinement","WeaponNameTooltip","weaponAsset","ascension","WeaponSheet","getLevelString","hasRefinement","WeaponStat","sub","ArtifactSetBadges","artifacts","currentlyEquipped","setToSlots","arti","acc","curr","_k1","slotarr1","_k2","slotarr2","slotarr","ArtifactSetBadge","artifactSheet","numInSet","setActive","ArtifactSetTooltip","BuildDisplayItem","compareBuild","extraButtonsRight","extraButtonsLeft","newOld","setNewOld","close","equipBuild","window","confirm","aid","toString","oldAid","weapons","statProviderContext","dataContext_","artifactIdsBySlot","artiId","artNanos","oldId","newId","CompareArtifactModal","Checkroom","onEquip","newLoc","newArtifact","ArtifactCard","canEquip","editorProps","disableSet","disableSlot","extraButtons","ExcludeButton","ChevronRight","ExcludeEquipButton","locationKey","artExclusion","toggleArr","arrow","useBuildResult","buildResult","setBuildResult","buildResultDispatch","CustomDot","cx","cy","payload","selectedPoint","radiusSelected","radiusUnselected","colorSelected","colorUnselected","shape","isSelected","y","CustomShape","stroke","points","CustomTooltip","xLabel","xUnit","yLabel","yUnit","setSelectedPoint","addBuildToList","tooltipProps","artifactsBySlot","artifactIds","artiObj","clickAwayHandler","generLabel","generBuildNumber","graphLabel","graphBuildNumber","active","ClickAwayListener","onClickAway","stopPropagation","direction","ArtifactCardPico","artifactObj","valueString","highlighted","EnhancedPoint","trueY","ChartCard","setPlotBase","showTooltip","chartData","showDownload","setshowDownload","showMin","setshowMin","graphBuilds","builds","generatedBuilds","sliderLow","setSliderLow","sliderHigh","setSliderHigh","setSlider","TypeError","l","h","displayData","downloadData","sliderMin","sliderMax","currentBuild","plot","enhancedDatum","datumBuildMap","aId","graphBuildIndex","findIndex","build","generBuildIndex","minimumData","point","last","allData","plotBaseNode","objPathValue","getDisplay","buttonText","OptimizationTargetSelector","setTarget","defaultText","Download","Chart","plotNode","valueNode","Slider","marks","onChangeCommitted","step","valueLabelDisplay","valueLabelFormat","optTargetColor","highlightedColor","currentColor","lineColor","setGraphBuilds","chartOnClick","chartX","chartY","clickedX","clickedY","nearestDomPtData","querySelectorAll","domPtA","domPtB","aChartX","aChartY","dataset","aDistance","sqrt","bChartX","bChartY","d","xValue","yValue","getNearestPoint","xLabelValue","getLabelFromNode","yLabelValue","ResponsiveContainer","ComposedChart","cursor","CartesianGrid","strokeDasharray","XAxis","dataKey","scale","domain","tick","tickFormatter","Label","dy","YAxis","allowDecimals","angle","dx","Tooltip","wrapperStyle","Legend","Line","connectNulls","strokeWidth","isAnimationActive","dot","activeDot","Scatter","textSuffix","ExcludeArt","excludedTotal","useExcludedArts","numExcludedArt","showSel","onOpenSel","onCloseSel","onDelSelect","toggleArtExclusion","ArtifactSelectModal","Add","whiteSpace","totalStr","numToShowMap","filterOptionReducer","clickHandler","filterOption","filterOptionDispatch","useReducer","initialFilterOption","brPt","useMediaQueryUp","filterConfigs","artifactFilterConfigs","artIdList","filterFunc","slice","ArtifactFilterDisplay","filteredIds","mt","artifactsSlotsToSelectMainStats","MainStatSelectionCard","filteredArtIdMap","mainStatKeys","mainStatSlotTots","slotTots","flowerMainStatTots","artSlotsData","stats","plumeMainStatTots","sandsMainStatTots","gobletMainStatTots","circletMainStatTots","catTotals","flower","plume","sands","goblet","circlet","hp","orientation","flexItem","atk","selectedMainKeys","mainKeys","mainKeysHandler","handleMultiSelect","OptimizationTargetEditorList","oldPath","oldIndex","statFilters_","oldPathStr","oldFilterArr","pathStr","filterArr","delTarget","index","setTargetValue","setTargetDisabled","settings","setting","OptimizationTargetEditorItem","parse","setValue","setDisabled","buttonStyle","buildConstraintNode","isPercent","showEmptyTargets","DeleteForever","StatFilterCard","dynamic","setReadNodeKeys","deepClone","dynamicData","allMainStatKeys","allSubstatKeys","audio","Audio","TabBuild","compareData","setChartData","notification","setnotification","notificationRef","buildStatus","setBuildStatus","artsDirty","setArtsDirty","threads","defThreads","setDisplayOptimize","displayOptimize","_r","to","maxWorkers","setMaxWorkers","useCharacterReducer","onClickTeammate","noArtifact","allowPartial","maxBuildsToShow","levelLow","levelHigh","buildDate","teamData","useTeamData","optimizationTargetNode","isSM","deferredArtsDirty","deferredBuildSetting","filteredArts","mainStats","unequippedStateAndEquippedElsewhere","customListStateAndNotOnList","levelTotal","allStateAndEquippedSomewhereElse","tabFocused","onFocus","onBlur","addEventListener","removeEventListener","cancelToken","throwGlobalError","setError","useGlobalError","generateBuilds","split","mainStatVal","getMainStatDisplayValue","artMaxLevel","endsWith","substat","accurateValue","compactArtifacts","getTeamData","workerData","uiDataForTeam","assign","mergeData","unoptimizedOptimizationTargetNode","targetNode","valueFilter","filterNode","unoptimizedNodes","plotBaseNumNode","statusUpdateTimer","setInterval","cancellationError","solver","results","solve","plotData","plots","mergePlot","maxNum","mergeBuilds","process","Date","play","alert","console","log","clearInterval","targetSelector","getGraphBuildLabel","getNormBuildLabel","Link","RouterLink","CharacterCard","ArtifactLevelSlider","setLow","setHigh","setBoth","maxBuildsToShowList","NotificationsActive","NotificationsOff","Close","TrendingUp","BuildList","getLabel","setBuilds","deleteBuild","builds_","DataContextWrapper","BuildItemWrapper","join","useLocation","navigate","useNavigate","toTC","paths","pathname","Science","dirty","setDirty","buildsArts","providerValue","tdc","charCards","Albedo","Alhaitham","Aloy","Amber","AratakiItto","Baizhu","Barbara","Beidou","Bennett","Candace","Chongyun","Collei","Cyno","Dehya","Diluc","Diona","Dori","Eula","Faruzan","Fischl","Ganyu","Gorou","HuTao","Jean","KaedeharaKazuha","Kaeya","KamisatoAyaka","KamisatoAyato","Kaveh","Keqing","Kirara","Klee","KujouSara","KukiShinobu","Layla","Lisa","Mika","Mona","Nahida","Nilou","Ningguang","Noelle","Qiqi","RaidenShogun","Razor","Rosaria","SangonomiyaKokomi","Sayu","Shenhe","ShikanoinHeizou","Somnia","Sucrose","Tartaglia","Thoma","Tighnari","TravelerF","TravelerM","Venti","Wanderer","Xiangling","Xiao","Xingqiu","Xinyan","YaeMiko","Yanfei","Yaoyao","Yelan","Yoimiya","YunJin","Zhongli","CompareBuildButton","artId","onShow","CompareContent","Difference","newArt","artmap","dataProviderValue","lazy","ArtifactSwapModal","onChangeId","slotKeys","disableSlotFilter","rarityHandler","allRarityKeys","WeaponSwapModal","newWeaponModalShow","setnewWeaponModalShow","editWeaponId","setEditWeaponId","newWeapon","weaponKey","new","initialWeapon","resetEditWeapon","setRarity","weaponIdList","weaponFilterConfigs","sortFunction","weaponSortMap","weaponSortConfigs","WeaponSelectionModal","weaponTypeFilter","WeaponEditor","footer","weaponTypes","star","WeaponCard","EquipmentSection","equippedWeapon","setweaponId","showWeapon","hideWeapon","breakpoint","useMediaQuery","breakpoints","up","weaponDoc","rvFilter","useCharMeta","deferredRvFilter","deferredRvSet","LargeWeaponSwapButton","ArtifactSectionCard","onEdit","WeaponSwapButton","effFilter","ArtifactSwapButton","ArtSwapCard","minHeight","SwapHoriz","hasEquipped","unequipArts","dataSetEffects","setRVFilter","deferredrvFilter","rvField","rvmField","currentEfficiency","currentEfficiency_","maxEfficiency","maxEfficiency_","artid","getArtifactEfficiency","text","PercentBadge","valid","canShow","borderBottomRightRadius","borderBottomLeftRadius","SubstatToggle","selectedKeys","field","setNumKeyArr","TabOverview","onScroll","CharacterProfileCard","EquipmentRow","team","asc","constellation","tlvl","auto","skill","burst","tBoost","autoBoost","skillBoost","burstBoost","sillySplash","splash","card","charKey","charCard","SillyCoverArea","CoverArea","tKey","Badge","badgeContent","overlap","anchorOrigin","vertical","horizontal","getTalentOfKey","img","constellationName","CharChip","stars","colored","FavoriteButton","LevelBadge","left","right","top","Favorite","FavoriteBorder","talentSpacing","CharacterTalentPane","grlg","constellationCards","SkillDisplayCard","talentKey","onClickTitle","ReactionDisplay","tText","enabled","talentLimits","talent","setTalentLevel","newTalentLevelKey","levelBoost","talentSheet","pl","hideDesc","headerAction","TabTeambuffs","TeamBuffDisplay","ResonanceDisplay","TeammateDisplay","teamBuffs","getTeamBuff","premod","teamCount","titleTypographyProps","resonanceSheets","desc","teamBuffOnly","activeCharacterKey","teamMateKey","onClickHandler","setTeammate","dataBundle","teammateCharacterContext","teamConditional","teamMateDataContext","TeammateAutocomplete","setChar","onClickHeader","artifactChildren","CharArtifactCondDisplay","weaponChildren","CharWeaponCondDisplay","characterChildren","CharTalentCondDisplay","isTeammateCard","setNums","sn","sts","autoCompleteProps","namesCB","startsWith","charKeyToLocGenderedCharKey","toImg","PersonAdd","isFavorite","onDisable","alternateNames","GeneralAutocomplete","options","valueKey","getOptionDisabled","TabTheorycraft","defWeapon","charTC","setCharTC","charTCs","getWithInit","useCharTC","defaultInitialWeaponKey","setData","resetData","initCharTC","setWeapon","copyFrom","eWeapon","newData","artifact","locBuild","copyFromEquipped","lock","setArtifact","data_","setSubstatsType","setSubstats","deferredData","overriderArtData","overrideWeapon","charUIData","dataContextValue","dataContextValueWithOld","CopyAll","Refresh","WeaponEditorCard","ArtifactMainLevelCard","artifactData","setArtifactData","ArtifactSubCard","substatsType","weaponUIData","flexshrink","RefinementDropdown","setRefinement","LevelSelect","useLow","sub2","setSlot","artifactData_","setArtSet","ArtifactMainLevelSlot","ArtifactSetsEditor","setSlotProp","mLvl","msk","startAdornment","my","setSet","deleteValue","rest","remaining","ArtifactSetEditor","ArtifactSetAutocomplete","artSetKey","setArtSetKey","setName","Info","rv","getSubstatValue","substatTypeKeys","st","ArtifactSubstatEditor","substatValue","setRolls","displayValue","numMains","ms","maxRolls","invalid","setRValue","parseFloat","pr","TravelerElementSelect","toLowerCase","stg","travelerElements","travelerElement","TravelerGenderSelect","toggleGender","dbMeta","Female","Male","CharacterDisplay","useParams","CharacterDisplayCard","useCharacter","params","tab","useMatch","end","useTitle","characterContextValue","graphContextValue","DetailStatButton","CustomMultiTarget","FormulasButton","TabNav","CharacterPanel","Tabs","allowScrollButtonsMobile","Tab","Person","FactCheck","Groups","bStatsNum","BarChart","onModalOpen","Calculate"],"sourceRoot":""}