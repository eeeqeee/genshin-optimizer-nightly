name: Nightly

on:
  workflow_call:
    inputs:
      remote:
        description: 'Name'
        type: string
        required: true
      repository:
        description: 'Repository'
        type: string
        required: true
      ref:
        description: 'ref'
        type: string
        required: true
      env:
        description: 'ref'
        type: string
      build-flags:
        description: 'ref'
        type: string
    secrets:
      ssh_key_optimizer:
      ssh_key_genshindata:
        required: true

jobs:
  check:
    outputs:
      status: ${{ steps.check.outputs.status }}
      hash: ${{ steps.check.outputs.hash }}
      etag_txt: ${{ steps.check.outputs.etag_txt }}
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
    - name: Checkout gh-pages
      uses: actions/checkout@v3
      with:
        ref: gh-pages
        path: gh-pages
        persist-credentials: false
    - run: |
        mkdir --parents "gh-pages/${{ inputs.remote }}/${{ inputs.ref }}"
    - name: Check if updated
      id: check
      run: |
        CURL_HASH=$(curl -s --fail-with-body \
          --etag-compare etag.txt --etag-save etag.txt \
          -H 'authorization: Bearer ${{ github.token }}' \
          -H "Accept: application/vnd.github.sha" \
          https://api.github.com/repos/${{ inputs.repository }}/commits/${{ inputs.ref }} \
        )
        echo "hash=$CURL_HASH" >> $GITHUB_OUTPUT
        echo "etag_txt=$(cat etag.txt)" >> $GITHUB_OUTPUT
        if [[ $CURL_HASH ]]; then
          echo "status=deploy" >> $GITHUB_OUTPUT
        else
          echo "status=exit" >> $GITHUB_OUTPUT
        fi
      working-directory: gh-pages/${{ inputs.remote }}/${{ inputs.ref }}

  build:
    needs: check
    if: needs.check.outputs.status == 'deploy'
    outputs:
      get-path: ${{ steps.get-path.outputs.path }}
      get-commit-msg: ${{ steps.get-commit-msg.outputs.msg }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        path: main
        persist-credentials: false
    - name: Checkout genshin-optimizer
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ needs.check.outputs.hash }}
        path: genshin-optimizer
        ssh-key: ${{ secrets.ssh_key_optimizer }}
        persist-credentials: false
    - uses: ./main/.github/actions/cached-checkout-repo
      with:
        repository: eeeqeee/GenshinData
        ref: trimmed
        path: genshin-optimizer/libs/dm/GenshinData
        ssh-key: ${{ secrets.ssh_key_genshindata }}
        persist-credentials: false
    - run: |
        corepack prepare yarn@3.4.1 --activate
        corepack enable
        yarn --version
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: |
        echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      working-directory: genshin-optimizer
    - name: Restore yarn cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Change version to git hash
      run: |
        TEMP_FILE=$(mktemp)
        jq --arg v "$(git rev-parse HEAD)" '.version = $v' package.json > $TEMP_FILE
        cp $TEMP_FILE package.json
      working-directory: genshin-optimizer
    - name: Disable files
      run: |
        jq '.targets.build.dependsOn |= map(select(index("loadDM")|not))' libs/dm/project.json
    - name: Get path
      id: get-path
      run: |
        echo "path=${{ inputs.remote }}/${{ inputs.ref }}/_dist/" >> $GITHUB_OUTPUT
    - name: Get public url
      id: get-public-url
      run: |
        echo "url=/genshin-optimizer-nightly/${{ steps.get-path.outputs.path }}" >> $GITHUB_OUTPUT
    - name: Get commit msg
      id: get-commit-msg
      run: |
        echo "msg=deploy: $(git rev-parse HEAD) to ${{ steps.get-path.outputs.path }}" >> $GITHUB_OUTPUT
      working-directory: genshin-optimizer

    - name: Yarn install
      run: |
        yarn --version
        yarn install --immutable
      working-directory: genshin-optimizer
    - name: Build genshin-optimizer
      run: |
        NX_URL_GITHUB_GO_CURRENT_VERSION="https://github.com/${{ inputs.repository }}/commit/$(git rev-parse HEAD)" \
        ${{ inputs.env }} yarn run nx run frontend:build --base-href="${{ steps.get-public-url.outputs.url }}" ${{ inputs.build-flags }}
      working-directory: genshin-optimizer
    - name: Tar files
      run: |
        tar --zstd -cvf build.tar.zst genshin-optimizer/dist/apps/frontend
    - uses: actions/upload-artifact@v3
      with:
        name: build-${{ inputs.remote }}-${{ inputs.ref }}
        path: build.tar.zst
        retention-days: 7

  deploy:
    needs: [build, check]
    concurrency: deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        path: main
        persist-credentials: false
    - uses: actions/download-artifact@v3
      with:
        name: build-${{ inputs.remote }}-${{ inputs.ref }}
    - name: Un tar files
      run: |
        tar --zstd -xvf build.tar.zst
    - name: Checkout gh-pages
      uses: actions/checkout@v3
      with:
        ref: gh-pages
        path: gh-pages
    - name: Deploy
      uses: ./main/.github/actions/deploy
      env:
        REMOTE_REF: ${{ inputs.remote }}/${{ inputs.ref }}
        GIT_HASH: ${{ needs.check.outputs.hash }}
        DEPLOY_PATH: ${{ needs.build.outputs.get-path }}
        COMMIT_MSG: ${{ needs.build.outputs.get-commit-msg }}
        ETAG_TXT: ${{ needs.check.outputs.etag_txt }}
